is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,45, Computed for Jackson 2.1.0 release
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,45,* Computed for Jackson 2.2.0 release
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,50, Name used to identify JSON format
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,51, (and returned by {@link #getFormatName()}
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,53,"ublic final static String FORMAT_NAME_JSON = ""JSON"";"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,56, Bitfield (set of flags) of all factory features that are enabled by default.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,58,rotected final static int DEFAULT_FACTORY_FEATURE_FLAGS = JsonFactory.Feature.collectDefaults();
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,61, Bitfield (set of flags) of all parser features that are enabled
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,62, by default.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,64,rotected final static int DEFAULT_PARSER_FEATURE_FLAGS = JsonParser.Feature.collectDefaults();
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,67, Bitfield (set of flags) of all generator features that are enabled
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,68, by default.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,51,/* Helper types
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,70,rotected final static int DEFAULT_GENERATOR_FEATURE_FLAGS = JsonGenerator.Feature.collectDefaults();
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,72,rivate final static SerializableString DEFAULT_ROOT_VALUE_SEPARATOR = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,126,/* Constants
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,131,* Name used to identify JSON format
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,132,* (and returned by {@link #getFormatName()}
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,134,"public final static String FORMAT_NAME_JSON = ""JSON"";"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,137,* Bitfield (set of flags) of all factory features that are enabled by default.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,139,protected final static int DEFAULT_FACTORY_FEATURE_FLAGS = JsonFactory.Feature.collectDefaults();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,142,* Bitfield (set of flags) of all parser features that are enabled
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,143,* by default.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,145,protected final static int DEFAULT_PARSER_FEATURE_FLAGS = JsonParser.Feature.collectDefaults();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,148,* Bitfield (set of flags) of all generator features that are enabled
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,149,* by default.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,151,protected final static int DEFAULT_GENERATOR_FEATURE_FLAGS = JsonGenerator.Feature.collectDefaults();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,153,private final static SerializableString DEFAULT_ROOT_VALUE_SEPARATOR = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,246,ublic JsonFactory() { this(null); }
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,259,public JsonFactory() { this((ObjectCodec) null); }
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,264,* Constructor used when copy()ing a factory instance.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,266,* @since 2.2.1
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,268,"protected JsonFactory(JsonFactory src, ObjectCodec codec)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,270,_objectCodec = null;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,271,_factoryFeatures = src._factoryFeatures;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,272,_parserFeatures = src._parserFeatures;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,273,_generatorFeatures = src._generatorFeatures;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,274,_characterEscapes = src._characterEscapes;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,275,_inputDecorator = src._inputDecorator;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,276,_outputDecorator = src._outputDecorator;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,277,_rootValueSeparator = src._rootValueSeparator;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,279,"/* 27-Apr-2013, tatu: How about symbol table; should we try to"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,280,*   reuse shared symbol tables? Could be more efficient that way;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,281,*   although can slightly add to concurrency overhead.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,257, this method.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,292,* this method. Reason for this is that the codec is used for
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,293,"* callbacks, and assumption is that there is strict 1-to-1"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,294,"* mapping between codec, factory. Caller has to, then, explicitly"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,295,* set codec after making the copy.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,264,eturn new JsonFactory(null);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,302,"// as per above, do clear ObjectCodec"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,303,"return new JsonFactory(this, null);"
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,1,package com.fasterxml.jackson.core;
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,3,import com.fasterxml.jackson.test.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,5,public class TestJsonFactory extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,7,// #72
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,8,public void testCopy() throws Exception
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,10,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,11,"// first, verify defaults"
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,12,assertTrue(jf.isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,13,assertFalse(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,14,assertFalse(jf.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,15,jf.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,16,jf.enable(JsonParser.Feature.ALLOW_COMMENTS);
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,17,jf.enable(JsonGenerator.Feature.ESCAPE_NON_ASCII);
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,18,"// then change, verify that changes ""stick"""
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,19,assertFalse(jf.isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,20,assertTrue(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,21,assertTrue(jf.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,23,JsonFactory jf2 = jf.copy();
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,24,assertFalse(jf2.isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,25,assertTrue(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));
True,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java,26,assertTrue(jf.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));

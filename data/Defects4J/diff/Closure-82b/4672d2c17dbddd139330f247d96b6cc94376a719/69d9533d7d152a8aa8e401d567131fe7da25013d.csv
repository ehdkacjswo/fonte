is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,24,import com.google.common.io.Files;
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,35,import java.io.File;
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,43,import java.util.StringTokenizer;
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,50,import java.nio.charset.Charset;
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,323,"@Option(name = ""--flagfile"","
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,324,"usage = ""A file containing additional command-line options."")"
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,325,"private String flag_file = """";"
False,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,407,"rivate void initConfigFromFlags(String[] args, PrintStream err) {"
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,416,private List<String> processArgs(String[] args) {
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,441,return processedArgs;
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,444,private void processFlagFile(PrintStream err)
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,445,"throws CmdLineException, IOException {"
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,446,List<String> argsInFile = Lists.newArrayList();
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,447,File flagFileInput = new File(flags.flag_file);
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,448,StringTokenizer tokenizer = new StringTokenizer(
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,449,"Files.toString(flagFileInput, Charset.defaultCharset()));"
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,451,while (tokenizer.hasMoreTokens()) {
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,452,argsInFile.add(tokenizer.nextToken());
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,455,"flags.flag_file = """";"
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,456,List<String> processedFileArgs
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,457,= processArgs(argsInFile.toArray(new String[] {}));
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,458,CmdLineParser parserFileArgs = new CmdLineParser(flags);
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,459,parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,461,// Currently we are not supporting this (prevent direct/indirect loops)
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,462,"if (!flags.flag_file.equals("""")) {"
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,463,"err.println(""ERROR - Arguments in the file cannot contain """
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,464,"+ ""--flagfile option."");"
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,465,isConfigValid = false;
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,469,"private void initConfigFromFlags(String[] args, PrintStream err) {"
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,471,List<String> processedArgs = processArgs(args);
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,477,// For contains --flagfile flag
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,478,"if (!flags.flag_file.equals("""")) {"
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,479,processFlagFile(err);
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,484,} catch (IOException ioErr) {
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,485,"err.println(""ERROR - "" + flags.flag_file + "" read error."");"
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,486,isConfigValid = false;

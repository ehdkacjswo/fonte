is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,122,case Token.NEW:
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,188,/ Use a while loop to get up out of any nested property/element
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,189,"/ accesses and/or calls. For example, if we have just detected"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,190,"/ that we need to remove the a.b access in a.b[c].d(), we'll have"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,191,"/ to remove all of the accesses, and it will take a few iterations"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,192,/ through this loop to get up to the call above d.
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,193,ode ancestor = parent.getParent();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,194,ode ancestorChild = parent;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,195,hile (true) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,196,f (NodeUtil.isExpressionNode(ancestor)) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,197,/ Remove the entire expression statement.
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,198,ode ancParent = ancestor.getParent();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,199,"eplaceWithEmpty(ancestor, ancParent);"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,200,reak;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,202,nt type = ancestor.getType();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,203,f (type != Token.GETPROP &&
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,204,ype != Token.GETELEM &&
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,205,ype != Token.CALL) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,206,"eplaceWithNull(ancestorChild, ancestor);"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,207,reak;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,209,ncestorChild = ancestor;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,210,ncestor = ancestor.getParent();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,212,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,189,"replaceHighestNestedCallWithNull(parent, parent.getParent());"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,238,"* Use a while loop to get up out of any nested calls. For example,"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,239,* if we have just detected that we need to remove the a.b() call
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,240,"* in a.b().c().d(), we'll have to remove all of the calls, and it"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,241,* will take a few iterations through this loop to get up to d().
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,243,"void replaceHighestNestedCallWithNull(Node node, Node parent) {"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,244,Node ancestor = parent;
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,245,Node ancestorChild = node;
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,246,while (true) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,247,if (ancestor.getFirstChild() != ancestorChild) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,248,"replaceWithNull(ancestorChild, ancestor);"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,249,break;
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,251,if (NodeUtil.isExpressionNode(ancestor)) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,252,// Remove the entire expression statement.
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,253,Node ancParent = ancestor.getParent();
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,254,"replaceWithEmpty(ancestor, ancParent);"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,255,break;
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,257,int type = ancestor.getType();
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,258,if (type != Token.GETPROP &&
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,259,type != Token.GETELEM &&
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,260,type != Token.CALL) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,261,"replaceWithNull(ancestorChild, ancestor);"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,262,break;
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,264,ancestorChild = ancestor;
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,265,ancestor = ancestor.getParent();
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,267,compiler.reportCodeChange();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,321, Removes a method call if {@link #isMethodCallThatTriggersRemoval}
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,331,* Removes a method call if {@link #isMethodOrCtorCallThatTriggersRemoval}
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,329,/ CALL
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,339,// CALL/NEW
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,332,"f (isMethodCallThatTriggersRemoval(t, n, parent)) {"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,333,"/ Use a while loop to get up out of any nested calls. For example,"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,334,/ if we have just detected that we need to remove the a.b() call
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,335,"/ in a.b().c().d(), we'll have to remove all of the calls, and it"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,336,/ will take a few iterations through this loop to get up to d().
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,337,ode ancestor = parent;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,338,ode ancestorChild = n;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,339,nt ancestorLevel = 1;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,340,hile (true) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,341,f (ancestor.getFirstChild() != ancestorChild) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,342,"eplaceWithNull(ancestorChild, ancestor);"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,343,reak;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,345,f (NodeUtil.isExpressionNode(ancestor)) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,346,/ Remove the entire expression statement.
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,347,ode ancParent = ancestor.getParent();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,348,"eplaceWithEmpty(ancestor, ancParent);"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,349,reak;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,351,nt type = ancestor.getType();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,352,f (type != Token.GETPROP &&
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,353,ype != Token.GETELEM &&
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,354,ype != Token.CALL) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,355,"eplaceWithNull(ancestorChild, ancestor);"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,356,reak;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,358,ncestorChild = ancestor;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,359,ncestor = ancestor.getParent();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,361,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,342,"if (isMethodOrCtorCallThatTriggersRemoval(t, n, parent)) {"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,343,"replaceHighestNestedCallWithNull(n, parent);"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,407,eturn n != null && n.getType() == Token.CALL && n.hasChildren()
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,408,& (qualifiedNameBeginsWithStripType(n.getFirstChild()) ||
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,389,return n != null &&
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,390,(n.getType() == Token.CALL ||
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,391,n.getType() == Token.NEW) &&
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,392,n.hasChildren() &&
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,393,(qualifiedNameBeginsWithStripType(n.getFirstChild()) ||
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,477,"oolean isMethodCallThatTriggersRemoval(NodeTraversal t, Node n,"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,478,ode parent) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,479,/ CALL
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,462,boolean isMethodOrCtorCallThatTriggersRemoval(
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,463,"NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,464,// CALL/NEW
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,511,ualifiedNameBeginsWithStripType(callee) ||
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,496,qualifiedNameBeginsWithStripType(function) ||
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,34,"uper(EXTERNS, false);"
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,34,"super(EXTERNS, true);"
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,324,public void testNewOperatior1() {
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,325,"test(""function foo() {} foo.bar = new goog.debug.Logger();"","
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,326,"""function foo() {} foo.bar = null;"");"
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,329,public void testNewOperatior2() {
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,330,"test(""function foo() {} foo.bar = (new goog.debug.Logger()).foo();"","
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,331,"""function foo() {} foo.bar = null;"");"
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,334,public void testCrazyNesting1() {
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,335,"test(""var x = {}; x[new goog.debug.Logger()] = 3;"","
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,336,"""var x = {}; x[null] = 3;"");"
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,339,public void testCrazyNesting2() {
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,340,"test(""var x = {}; x[goog.debug.Logger.getLogger()] = 3;"","
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,341,"""var x = {}; x[null] = 3;"");"
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,344,public void testCrazyNesting3() {
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,345,"test(""var x = function() {}; x(new goog.debug.Logger());"","
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,346,"""var x = function() {}; x(null);"");"
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,349,public void testCrazyNesting4() {
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,350,"test(""var x = function() {}; x(goog.debug.Logger.getLogger());"","
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,351,"""var x = function() {}; x(null);"");"
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,354,public void testCrazyNesting5() {
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,355,"test(""var x = function() {}; var y = {}; "" +"
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,356,"""var z = goog.debug.Logger.getLogger(); x(y[z['foo']]);"","
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,357,"""var x = function() {}; var y = {}; x(y[null]);"");"

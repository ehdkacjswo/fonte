is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,318,/ Both slots must be non-null.
False,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,319,SType aType = slotA.getType();
False,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,320,SType bType = slotB.getType();
False,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,321,f (aType.isNoType() || bType.isNoType()) {
False,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,322,eturn false;
False,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,325,/ Both types must be non-null.
False,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,326,eturn aType.differsFrom(bType);
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,318,// Both slots and types must be non-null.
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,319,return slotA.getType().differsFrom(slotB.getType());
False,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,267,ublic void testDiffer() {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,267,public void testDiffer1() {
False,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,284,"ssertScopesSame(childABC, childBC);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,284,"assertScopesDiffer(childABC, childBC);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,295,public void testDiffer2() {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,296,FlowScope childA = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,297,"childA.inferSlotType(""localA"", NUMBER_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,299,FlowScope childB = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,300,"childB.inferSlotType(""localA"", NO_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,302,"assertScopesDiffer(childA, childB);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4361,public void testControlFlowRestrictsType10() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4362,// We should correctly infer that y will be (null|{}) because
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4363,// the loop wraps around.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4364,"testTypes(""/** @param {number} x */ function f(x) {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4365,"""function g() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4366,"""  var y = null;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4367,"""  for (var i = 0; i < 10; i++) {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4368,"""    f(y);"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4369,"""    if (y != null) {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4370,"""      // y is None the first time it goes thru this branch\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4371,"""    } else {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4372,"""      y = {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4376,"""actual parameter 1 of f does not match formal parameter\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4377,"""found   : (null|{})\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4378,"""required: number"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4381,public void testControlFlowRestrictsType11() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4382,"testTypes(""/** @param {boolean} x */ function f(x) {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4383,"""function g() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4384,"""  var y = null;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4385,"""  if (y != null) {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4386,"""    for (var i = 0; i < 10; i++) {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4387,"""      f(y);"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4391,"""condition always evaluates to false\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4392,"""left : null\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4393,"""right: null"");"

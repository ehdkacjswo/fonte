is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,91,"SuppressWarnings(""fallthrough"")"
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,122,"emoveDeadExprStatementSafely(n, parent);"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,121,removeDeadExprStatementSafely(n);
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,125,tryRemoveUnconditionalBranching(n);
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,129,"* Tries to remove n if an unconditional branch node (break, continue or"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,130,"* return) if the target of n is the same as the the follow of n. That is, if"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,131,"* we remove n, the control flow remains the same. Also if n targets to"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,132,"* another unconditional branch, this function will recursively try to remove"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,133,* the target branch as well. The reason why we want to cascade this removal
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,134,* is because we only run this pass once. If we have code such as
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,136,* break -> break -> break
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,138,* where all 3 break's are useless. The order of removal matters. When we
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,139,"* first look at the first break, we see that it branches to the 2nd break."
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,140,"* However, if we remove the last break, the 2nd break becomes useless and"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,141,* finally the first break becomes useless as well.
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,143,"* @return The target of this jump. If the target is also useless jump,"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,144,*     the target of that useless jump recursively.
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,146,"@SuppressWarnings(""fallthrough"")"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,147,private Node tryRemoveUnconditionalBranching(Node n) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,158,"// If n is null the target is the end of the function, nothing to do."
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,159,if (n == null) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,160,return n;
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,163,"DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,165,if (gNode == null) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,166,return n;
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,169,"// If the parent is null, this mean whatever node it was there is now"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,170,// useless and it has been removed by other logics in this pass. That node
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,171,"// while no longer exists in the AST, is still in the CFG because we"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,172,// never update the graph as nodes are removed.
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,173,if (n.getParent() == null) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,174,"List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,175,if (outEdges.size() == 1) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,176,return tryRemoveUnconditionalBranching(
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,177,outEdges.get(0).getDestination().getValue());
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,182,case Token.BLOCK:
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,183,if (n.hasChildren()) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,184,Node first = n.getFirstChild();
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,185,return tryRemoveUnconditionalBranching(first);
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,186,} else {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,187,return tryRemoveUnconditionalBranching(
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,188,ControlFlowAnalysis.computeFollowNode(n));
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,152,ode fallThrough = ControlFlowAnalysis.computeFollowNode(n);
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,153,f (outEdges.get(0).getDestination().getValue() == fallThrough) {
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,154,"emoveDeadExprStatementSafely(n, parent);"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,206,Node fallThrough = tryRemoveUnconditionalBranching(
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,207,ControlFlowAnalysis.computeFollowNode(n));
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,208,Node nextCfgNode = outEdges.get(0).getDestination().getValue();
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,209,if (nextCfgNode == fallThrough) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,210,removeDeadExprStatementSafely(n);
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,211,return fallThrough;
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,216,return n;
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,160,"rivate void removeDeadExprStatementSafely(Node n, Node parent) {"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,219,private void removeDeadExprStatementSafely(Node n) {
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,182,"odeUtil.removeChild(parent, n);"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,241,"NodeUtil.removeChild(n.getParent(), n);"
False,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,42,"case 2:{x=2;return}default:}}"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,42,"""case 2:{x=2}default:}}"");"
False,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,193,"estSame(""function() {switch (a) { case 'a': return; case foo(): }}"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,193,"testSame(""function() {switch (a) { case 'a': case foo(): }}"");"
False,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,211,"estSame(""switch (a) { case 'a': break; case foo(): }"");"
False,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,212,"estSame(""switch (a) { default: break; case 'a': }"");"
False,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,213,"estSame(""switch (a) { case 'a': break; default: }"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,211,"test(""switch (a) { case 'a': break; case foo(): }"","
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,212,"""switch (a) { case 'a':        case foo(): }"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,213,"test(""switch (a) { default: break; case 'a': }"","
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,214,"""switch (a) { default:        case 'a': }"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,216,"testSame(""switch (a) { case 'a': alert(a); break; default: alert(a); }"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,217,"testSame(""switch (a) { default: alert(a); break; case 'a': alert(a); }"");"
False,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,226,/ TODO(user): Optimize these better.
False,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,227,"est(""switch (a) { case 'a': break; case 'b': break; case 'c': break }"","
False,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,228,"switch (a) { case 'a': break; case 'b': break; case 'c': }"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,235,public void testCascadedRemovalOfUnlessUnconditonalJumps() {
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,236,"test(""switch (a) { case 'a': break; case 'b': break; case 'c': break }"","
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,237,"""switch (a) { case 'a': case 'b': case 'c': }"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,238,"test(""function foo() {"" +"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,239,"""  switch (a) { case 'a':return; case 'b':return; case 'c':return }}"","
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,240,"""function foo() { switch (a) { case 'a': case 'b': case 'c': }}"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,241,"testSame(""function foo() {"" +"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,242,"""switch (a) { case 'a':return 2; case 'b':return 1}}"");"

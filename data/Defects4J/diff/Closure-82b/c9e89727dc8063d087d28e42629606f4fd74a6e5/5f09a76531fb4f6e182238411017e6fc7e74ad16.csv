is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,78,*  Is the current AST normalized? (e.g. has the Normalize pass been run
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,79,*  and has the Denormalize pass not yet been run?)
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,81,protected boolean isASTNormalized() {
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,82,Preconditions.checkNotNull(currentTraversal);
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,83,Preconditions.checkNotNull(currentTraversal.getCompiler());
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,85,return currentTraversal.getCompiler().isNormalized();
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,135,Preconditions.checkState(compiler.isNormalized());
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,20,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,81,Preconditions.checkState(!compiler.isNormalized());
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,274,f (x >= 100) {
True,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,274,if (Math.abs(x) >= 100) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,416,"nt postProp = n.getIntProp(Node.INCRDECR_PROP, 0);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,416,int postProp = n.getIntProp(Node.INCRDECR_PROP);
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,98,Preconditions.checkState(!compiler.isNormalized());
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1481,etNormalized();
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,484,f (options.coalesceVariableNames) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,485,asses.add(coalesceVariableNames);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,526,passes.add(denormalize);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,528,if (options.coalesceVariableNames) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,529,passes.add(coalesceVariableNames);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,534,asses.add(denormalize);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,874,ew PeepholeRemoveDeadCode());
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,874,"new PeepholeRemoveDeadCode(),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,875,new PeepholeFoldConstants());
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1505,ompiler.setUnnormalized();
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1517,ompiler.setNormalized();
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1646,ompiler.setUnnormalized();
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,49,compiler.setUnnormalized();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,19,mport com.google.common.base.Preconditions;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,20,mport com.google.common.collect.ImmutableSet;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,21,mport com.google.common.collect.Lists;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,24,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,25,mport com.google.javascript.rhino.jstype.TernaryValue;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,27,mport java.util.List;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,39,tatic final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,40,"JSC_DIVIDE_BY_0_ERROR"","
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,41,"Divide by 0"");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,43,tatic final DiagnosticType INVALID_GETELEM_INDEX_ERROR =
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,44,iagnosticType.error(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,45,"JSC_INVALID_GETELEM_INDEX_ERROR"","
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,46,"Array index not integer: {0}"");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,48,tatic final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,49,iagnosticType.error(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,50,"JSC_INDEX_OUT_OF_BOUNDS_ERROR"","
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,51,"Array index out of bounds: {0}"");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,53,tatic final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,54,iagnosticType.error(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,55,"JSC_NEGATING_A_NON_NUMBER_ERROR"","
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,56,"Can't negate non-numeric value: {0}"");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,58,tatic final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,59,iagnosticType.error(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,60,"JSC_BITWISE_OPERAND_OUT_OF_RANGE"","
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,61,"Operand out of range, bitwise operation will lose information: {0}"");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,63,tatic final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,64,"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS"","
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,65,"Shift amount out of bounds: {0}"");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,67,tatic final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,68,"JSC_FRACTIONAL_BITWISE_OPERAND"","
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,69,"Fractional bitwise operand: {0}"");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,71,rivate final AbstractCompiler compiler;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,74,his.compiler = compiler;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,78,"odeTraversal.traverse(compiler, jsRoot, this);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,81,"ublic void visit(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,82,nt type = n.getType();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,84,ode left = n.getFirstChild();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,85,f (left == null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,86,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,89,f (type == Token.TYPEOF && NodeUtil.isLiteralValue(left)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,90,tring newValue = null;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,92,witch (left.getType()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,93,ase Token.STRING:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,94,"ewValue = ""string"";"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,95,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,96,ase Token.NUMBER:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,97,"ewValue = ""number"";"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,98,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,99,ase Token.TRUE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,100,ase Token.FALSE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,101,"ewValue = ""boolean"";"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,102,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,103,ase Token.NULL:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,104,ase Token.OBJECTLIT:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,105,ase Token.ARRAYLIT:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,106,"ewValue = ""object"";"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,107,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,108,ase Token.NAME:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,109,/ We assume here that programs don't change the value of the
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,110,/ keyword undefined to something other than the value undefined.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,111,"f (""undefined"".equals(left.getString())) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,112,"ewValue = ""undefined"";"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,114,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,117,f (newValue != null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,118,"arent.replaceChild(n, Node.newString(newValue));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,119,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,122,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,125,f (type == Token.NOT ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,126,ype == Token.NEG ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,127,ype == Token.BITNOT) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,128,reconditions.checkState(n.hasOneChild());
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,130,f (NodeUtil.isExpressionNode(parent)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,131,"/ If the value of the NOT isn't used, then just throw"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,132,/ away the operator
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,133,"arent.replaceChild(n, n.removeFirstChild());"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,134,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,135,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,138,ernaryValue leftVal = NodeUtil.getBooleanValue(left);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,139,f (leftVal == TernaryValue.UNKNOWN) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,140,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,143,witch (type) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,144,ase Token.NOT:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,145,nt result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,146,"arent.replaceChild(n, new Node(result));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,147,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,148,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,150,ase Token.NEG:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,151,ry {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,152,f (left.getType() == Token.NAME) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,153,"f (left.getString().equals(""Infinity"")) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,154,"/ ""-Infinity"" is valid and a literal, don't modify it."
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,155,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,156," else if (left.getString().equals(""NaN"")) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,157,"/ ""-NaN"" is ""NaN""."
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,158,.removeChild(left);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,159,"arent.replaceChild(n, left);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,160,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,161,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,165,ouble negNum = -left.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,166,"arent.replaceChild(n, Node.newNumber(negNum));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,167,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,168, catch (UnsupportedOperationException ex) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,169,"/ left is not a number node, so do not replace, but warn the"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,170,/ user because they can't be doing anything good
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,171,"rror(t, NEGATING_A_NON_NUMBER_ERROR, left);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,173,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,175,ase Token.BITNOT:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,176,ry {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,177,ouble val = left.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,178,f (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,179,nt intVal = (int) val;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,180,f (intVal == val) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,181,"arent.replaceChild(n, Node.newNumber(~intVal));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,182,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,183, else {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,184,"rror(t, FRACTIONAL_BITWISE_OPERAND, left);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,186, else {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,187,"rror(t, BITWISE_OPERAND_OUT_OF_RANGE, left);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,189, catch (UnsupportedOperationException ex) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,190,"/ left is not a number node, so do not replace, but warn the"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,191,/ user because they can't be doing anything good
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,192,"rror(t, NEGATING_A_NON_NUMBER_ERROR, left);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,194,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,196,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,199,f (type == Token.NEW) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,200,"ryFoldStandardConstructors(t, n);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,202,"/ The type might have changed from NEW to CALL, update it"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,203,/ and continue.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,204,ype = n.getType();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,207,f (type == Token.NEW || type == Token.CALL) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,208,f (Token.NAME == left.getType() && left.getNext() == null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,209,tring className = left.getString();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,210,"f (""Array"".equals(className)) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,211,f (tryFoldLiteralConstructor(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,212,", n, parent, className, Token.ARRAYLIT)) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,213,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,215," else if (""Object"".equals(className)) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,216,f (tryFoldLiteralConstructor(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,217,", n, parent, className, Token.OBJECTLIT)) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,218,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,224,f (type == Token.EXPR_RESULT) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,225,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,228,f (type == Token.RETURN) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,229,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,232,ode right = left.getNext();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,233,f (right == null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,234,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,237,/ TODO(johnlenz) Use type information if available to fold
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,238,/ instanceof.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,239,f (type == Token.INSTANCEOF
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,240,& NodeUtil.isLiteralValue(left)
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,241,& !NodeUtil.mayHaveSideEffects(right)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,242,f (NodeUtil.isImmutableValue(left)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,243,/ Non-object types are never instances.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,244,"arent.replaceChild(n, new Node(Token.FALSE));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,245,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,246,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,249,f (right.getType() == Token.NAME
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,250,"& ""Object"".equals(right.getString())) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,251,"arent.replaceChild(n, new Node(Token.TRUE));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,252,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,253,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,257,f (type == Token.AND ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,258,ype == Token.OR) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,259,"ryFoldAndOr(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,260,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,263,f (type == Token.BITOR ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,264,ype == Token.BITAND) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,265,"ryFoldBitAndOr(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,266,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,269,f (type == Token.LSH ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,270,ype == Token.RSH ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,271,ype == Token.URSH) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,272,"ryFoldShift(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,273,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,276,f (type == Token.GETPROP) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,277,"ryFoldGetProp(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,278,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,281,f (type == Token.CALL) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,282,"ryFoldStringJoin(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,283,"ryFoldStringIndexOf(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,284,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,287,f (type == Token.ASSIGN) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,288,"ryFoldAssign(t, n, left, right);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,291,f (!NodeUtil.isLiteralValue(left) ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,292,NodeUtil.isLiteralValue(right)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,294,f (type == Token.ADD)
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,295,"ryFoldLeftChildAdd(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,297,f (type == Token.LT ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,298,ype == Token.GT) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,299,"ryFoldComparison(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,302,eturn; // The subsequent ops only work if the LHS & RHS are consts
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,305,f (type == Token.ADD) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,306,"ryFoldAdd(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,307,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,309,f (type == Token.SUB ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,310,ype == Token.MUL ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,311,ype == Token.DIV) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,312,"ryFoldArithmetic(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,313,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,316,f (type == Token.LT ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,317,ype == Token.GT ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,318,ype == Token.LE ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,319,ype == Token.GE ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,320,ype == Token.EQ ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,321,ype == Token.NE ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,322,ype == Token.SHEQ ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,323,ype == Token.SHNE) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,324,"ryFoldComparison(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,325,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,328,f (type == Token.GETELEM) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,329,"ryFoldGetElem(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,330,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,333,/ other types aren't handled
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,336,rivate static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,337,"/ String, Number, and Boolean functions return non-object types, whereas"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,338,"/ new String, new Number, and new Boolean return object types, so don't"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,339,/ include them here.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,340,mmutableSet.of(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,341,"Object"","
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,342,"Array"","
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,343,"RegExp"","
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,344,"Error"""
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,348," Fold ""new Object()"" to ""Object()""."
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,350,"rivate void tryFoldStandardConstructors(NodeTraversal t, Node n) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,351,reconditions.checkState(n.getType() == Token.NEW);
True,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,39,"public void visit(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,353,f (n.getFirstChild().getType() == Token.NAME) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,354,tring className = n.getFirstChild().getString();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,355,f (STANDARD_OBJECT_CONSTRUCTORS.contains(className)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,356,/ The var check isn't really needed here due to name normalizations
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,357,/ but we do it here to simplify unit testing.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,358,cope.Var var = t.getScope().getVar(className);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,359,f (var == null || var.isGlobal()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,360,.setType(Token.CALL);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,361,ompiler.reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,367,"rivate void error(NodeTraversal t, DiagnosticType diagnostic, Node n) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,368,".getCompiler().report(t.makeError(n, diagnostic, n.toString()));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,371,"rivate void tryFoldAssign(NodeTraversal t, Node n, Node left, Node right) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,372,reconditions.checkArgument(n.getType() == Token.ASSIGN);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,374,/ Tries to convert x = x + y -> x += y;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,375,f (!right.hasChildren() ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,376,ight.getFirstChild().getNext() != right.getLastChild()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,377,/ RHS must have two children.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,378,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,381,f (NodeUtil.mayHaveSideEffects(left)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,382,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,385,ode leftChild = right.getFirstChild();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,386,"f (!compiler.areNodesEqualForInlining(left, leftChild)) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,387,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,390,nt newType = -1;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,391,witch (right.getType()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,392,ase Token.ADD:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,393,ewType = Token.ASSIGN_ADD;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,394,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,395,ase Token.BITAND:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,396,ewType = Token.ASSIGN_BITAND;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,397,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,398,ase Token.BITOR:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,399,ewType = Token.ASSIGN_BITOR;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,400,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,401,ase Token.BITXOR:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,402,ewType = Token.ASSIGN_BITXOR;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,403,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,404,ase Token.DIV:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,405,ewType = Token.ASSIGN_DIV;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,406,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,407,ase Token.LSH:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,408,ewType = Token.ASSIGN_LSH;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,409,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,410,ase Token.MOD:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,411,ewType = Token.ASSIGN_MOD;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,412,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,413,ase Token.MUL:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,414,ewType = Token.ASSIGN_MUL;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,415,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,416,ase Token.RSH:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,417,ewType = Token.ASSIGN_RSH;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,418,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,419,ase Token.SUB:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,420,ewType = Token.ASSIGN_SUB;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,421,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,422,ase Token.URSH:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,423,ewType = Token.ASSIGN_URSH;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,424,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,425,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,426,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,429,".getParent().replaceChild(n, new Node(newType,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,430,"eft.detachFromParent(), right.getLastChild().detachFromParent()));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,431,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,436, Try to fold a AND/OR node.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,438,"oid tryFoldAndOr(NodeTraversal t, Node n, Node left, Node right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,439,ode parent) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,440,ode result = null;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,442,nt type = n.getType();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,444,ernaryValue leftVal = NodeUtil.getBooleanValue(left);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,446,f (leftVal != TernaryValue.UNKNOWN) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,447,oolean lval = leftVal.toBoolean(true);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,449,"/ (TRUE || x) => TRUE (also, (3 || x) => 3)"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,450,/ (FALSE && x) => FALSE
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,451,f (lval && type == Token.OR ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,452,lval && type == Token.AND) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,453,esult = left;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,455, else {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,456,/ (FALSE || x) => x
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,457,/ (TRUE && x) => x
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,458,esult = right;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,460, else {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,461,ernaryValue rightVal = NodeUtil.getBooleanValue(right);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,462,f (rightVal != TernaryValue.UNKNOWN) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,464,/ Note: We cannot always fold when the constant is on the
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,465,"/ right, because the typed value of the expression will depend"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,466,"/ on the type of the constant on the right, even if the boolean"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,467,"/ equivalent of the value does not. Specifically, in ""a = x ||"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,468,"/ 0"", a will be numeric 0 if x is undefined (and hence is"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,469,"/ e.g. a valid array index). However, it is safe to fold"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,470,"/ e.g. ""if (x || true)"" because 'if' doesn't care if the"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,471,/ expression is 'true' or '3'.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,472,nt pt = parent.getType();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,473,f (pt == Token.IF || pt == Token.WHILE || pt == Token.DO ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,474,pt == Token.FOR && NodeUtil.getConditionExpression(parent) == n) ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,475,pt == Token.HOOK && parent.getFirstChild() == n)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,476,oolean rval = rightVal.toBoolean(true);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,478,/ (x || FALSE) => x
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,479,/ (x && TRUE) => x
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,480,f (type == Token.OR && !rval ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,481,ype == Token.AND && rval) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,482,esult = left;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,483, else {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,484,/ If x has no side-effects:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,485,/   (x || TRUE) => TRUE
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,486,/   (x && FALSE) => FALSE
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,487,f (!NodeUtil.mayHaveSideEffects(left)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,488,esult = right;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,495,"/ Note: The parser parses 'x && FALSE && y' as 'x && (FALSE && y)', so"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,496,/ there is not much need to worry about const values on left's
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,497,/ right child.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,499,f (result != null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,500,/ Fold it!
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,501,.removeChild(result);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,502,"arent.replaceChild(n, result);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,503,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,508, Expressions such as [foo() + 'a' + 'b'] generate parse trees
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,509," where no node has two const children ((foo() + 'a') + 'b'), so"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,510, tryFoldAdd() won't fold it -- tryFoldLeftChildAdd() will (for Strings).
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,511, Specifically it folds Add exprssions where:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,512,  - The left child is also and add expression
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,513,  - The right child is a constant value
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,514,  - The left child's right child is a STRING constant.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,516," WARNING: If javascript ever adds operator overloading, this will"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,517, probably stop being correct.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,519,"oid tryFoldLeftChildAdd(NodeTraversal t, Node n, Node left, Node right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,520,ode parent) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,522,f (NodeUtil.isLiteralValue(right) &&
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,523,eft.getType() == Token.ADD &&
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,524,eft.getChildCount() == 2) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,526,ode ll = left.getFirstChild();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,527,ode lr = ll.getNext();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,529,/ Left's right child MUST be a string. We would not want to fold
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,530,"/ foo() + 2 + 'a' because we don't know what foo() will return, and"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,531,"/ therefore we don't know if left is a string concat, or a numeric add."
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,532,f (lr.getType() != Token.STRING)
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,533,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,535,tring leftString = NodeUtil.getStringValue(lr);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,536,tring rightString = NodeUtil.getStringValue(right);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,537,f (leftString != null && rightString != null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,538,eft.removeChild(ll);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,539,tring result = leftString + rightString;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,540,".replaceChild(left, ll);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,541,".replaceChild(right, Node.newString(result));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,542,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,548, Try to fold a ADD node
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,550,"oid tryFoldAdd(NodeTraversal t, Node n, Node left, Node right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,551,ode parent) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,552,f (left.getType() == Token.STRING ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,553,ight.getType() == Token.STRING) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,555,/ Add strings.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,556,tring leftString = NodeUtil.getStringValue(left);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,557,tring rightString = NodeUtil.getStringValue(right);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,558,f (leftString != null && rightString != null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,559,"arent.replaceChild(n, Node.newString(leftString + rightString));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,560,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,562, else {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,563,/ Try arithmetic add
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,564,"ryFoldArithmetic(t, n, left, right, parent);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,569, Try to fold arithmetic binary operators
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,571,"oid tryFoldArithmetic(NodeTraversal t, Node n, Node left, Node right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,572,ode parent) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,574,f (left.getType() == Token.NUMBER &&
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,575,ight.getType() == Token.NUMBER) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,576,ouble result;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,577,ouble lval = left.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,578,ouble rval = right.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,580,witch (n.getType()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,581,ase Token.ADD:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,582,esult = lval + rval;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,583,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,584,ase Token.SUB:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,585,esult = lval - rval;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,586,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,587,ase Token.MUL:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,588,esult = lval * rval;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,589,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,590,ase Token.DIV:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,591,f (rval == 0) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,592,"rror(t, DIVIDE_BY_0_ERROR, right);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,593,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,595,esult = lval / rval;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,596,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,597,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,598,"hrow new Error(""Unknown arithmetic operator"");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,601,/ length of the left and right value plus 1 byte for the operator.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,602,f (String.valueOf(result).length() <=
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,603,tring.valueOf(lval).length() + String.valueOf(rval).length() + 1) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,604,"arent.replaceChild(n, Node.newNumber(result));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,605,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,611, Try to fold arithmetic binary operators
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,613,"oid tryFoldBitAndOr(NodeTraversal t, Node n, Node left, Node right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,614,ode parent) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,616,f (left.getType() == Token.NUMBER &&
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,617,ight.getType() == Token.NUMBER) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,618,ouble result;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,619,ouble lval = left.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,620,ouble rval = right.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,622,"/ For now, we are being extra conservative, and only folding ints in"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,623,/ the range MIN_VALUE-MAX_VALUE
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,624,f (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,625,val < Integer.MIN_VALUE || rval > Integer.MAX_VALUE) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,627,/ Fall back through and let the javascript use the larger values
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,628,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,631,/ Convert the numbers to ints
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,632,nt lvalInt = (int) lval;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,633,f (lvalInt != lval) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,634,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,637,nt rvalInt = (int) rval;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,638,f (rvalInt != rval) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,639,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,642,witch (n.getType()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,643,ase Token.BITAND:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,644,esult = lvalInt & rvalInt;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,645,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,646,ase Token.BITOR:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,647,esult = lvalInt | rvalInt;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,648,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,649,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,650,"hrow new Error(""Unknown bitwise operator"");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,652,"arent.replaceChild(n, Node.newNumber(result));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,653,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,658, Try to fold shift operations
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,660,"oid tryFoldShift(NodeTraversal t, Node n, Node left, Node right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,661,ode parent) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,663,f (left.getType() == Token.NUMBER &&
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,664,ight.getType() == Token.NUMBER) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,666,ouble result;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,667,ouble lval = left.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,668,ouble rval = right.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,670,/ check ranges.  We do not do anything that would clip the double to
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,671,"/ a 32-bit range, since the user likely does not intend that."
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,672,f (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,673,"rror(t, BITWISE_OPERAND_OUT_OF_RANGE, left);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,674,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,677,"/ only the lower 5 bits are used when shifting, so don't do anything"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,678,"/ if the shift amount is outside [0,32)"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,679,f (!(rval >= 0 && rval < 32)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,680,"rror(t, SHIFT_AMOUNT_OUT_OF_BOUNDS, right);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,681,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,684,/ Convert the numbers to ints
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,685,nt lvalInt = (int) lval;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,686,f (lvalInt != lval) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,687,"rror(t, FRACTIONAL_BITWISE_OPERAND, left);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,688,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,691,nt rvalInt = (int) rval;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,692,f (rvalInt != rval) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,693,"rror(t, FRACTIONAL_BITWISE_OPERAND, right);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,694,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,697,witch (n.getType()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,698,ase Token.LSH:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,699,esult = lvalInt << rvalInt;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,700,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,701,ase Token.RSH:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,702,esult = lvalInt >> rvalInt;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,703,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,704,ase Token.URSH:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,705,esult = lvalInt >>> rvalInt;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,706,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,707,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,708,"hrow new AssertionError(""Unknown shift operator: "" +"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,709,ode.tokenToName(n.getType()));
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,711,"arent.replaceChild(n, Node.newNumber(result));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,712,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,717," Try to fold comparison nodes, e.g =="
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,719,"SuppressWarnings(""fallthrough"")"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,720,"oid tryFoldComparison(NodeTraversal t, Node n, Node left, Node right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,721,ode parent) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,723,nt op = n.getType();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,724,oolean result;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,726,/ TODO(johnlenz): Use the JSType to compare nodes of different types.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,728,oolean rightLiteral = NodeUtil.isLiteralValue(right);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,729,oolean undefinedRight = ((Token.NAME == right.getType()
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,730,"& right.getString().equals(""undefined""))"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,731,| (Token.VOID == right.getType()
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,732,& NodeUtil.isLiteralValue(right.getFirstChild())));
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,734,witch (left.getType()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,735,ase Token.VOID:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,736,f (!NodeUtil.isLiteralValue(left.getFirstChild())) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,737,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,738, else if (!rightLiteral) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,739,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,740, else {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,741,oolean nullRight = (Token.NULL == right.getType());
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,742,oolean equivalent = undefinedRight || nullRight;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,743,witch (op) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,744,ase Token.EQ:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,745,/ undefined is only equal to
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,746,esult = equivalent;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,747,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,748,ase Token.NE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,749,esult = !equivalent;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,750,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,751,ase Token.SHEQ:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,752,esult = undefinedRight;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,753,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,754,ase Token.SHNE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,755,esult = !undefinedRight;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,756,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,757,ase Token.LT:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,758,ase Token.GT:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,759,ase Token.LE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,760,ase Token.GE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,761,esult = false;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,762,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,763,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,764,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,767,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,769,ase Token.NULL:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,770,f (undefinedRight) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,771,esult = (op == Token.EQ);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,772,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,774,/ fall through
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,775,ase Token.TRUE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,776,ase Token.FALSE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,777,f (undefinedRight) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,778,esult = false;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,779,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,781,/ fall through
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,782,ase Token.THIS:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,783,nt tt = right.getType();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,784,f (tt != Token.THIS &&
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,785,t != Token.TRUE &&
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,786,t != Token.FALSE &&
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,787,t != Token.NULL)
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,788,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,789,witch (op) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,790,ase Token.SHEQ:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,791,ase Token.EQ:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,792,esult = left.getType() == right.getType();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,793,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,795,ase Token.SHNE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,796,ase Token.NE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,797,esult = left.getType() != right.getType();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,798,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,800,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,801,eturn;  // we only handle == and != here
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,803,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,805,ase Token.STRING:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,806,f (undefinedRight) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,807,esult = false;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,808,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,810,f (Token.STRING != right.getType()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,811,eturn;  // Only eval if they are the same type
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,813,witch (op) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,814,ase Token.SHEQ:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,815,ase Token.EQ:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,816,esult = left.getString().equals(right.getString());
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,817,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,819,ase Token.SHNE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,820,ase Token.NE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,821,esult = !left.getString().equals(right.getString());
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,822,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,824,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,825,eturn;  // we only handle == and != here
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,827,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,829,ase Token.NUMBER:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,830,f (undefinedRight) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,831,esult = false;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,832,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,834,f (Token.NUMBER != right.getType()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,835,eturn;  // Only eval if they are the same type
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,837,ouble lv = left.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,838,ouble rv = right.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,840,witch (op) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,841,ase Token.SHEQ:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,842,ase Token.EQ: result = lv == rv; break;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,843,ase Token.SHNE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,844,ase Token.NE: result = lv != rv; break;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,845,ase Token.LE: result = lv <= rv; break;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,846,ase Token.LT: result = lv <  rv; break;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,847,ase Token.GE: result = lv >= rv; break;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,848,ase Token.GT: result = lv >  rv; break;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,849,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,850,eturn;  // don't handle that op
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,852,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,854,ase Token.NAME:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,855,f (rightLiteral) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,856,"oolean undefinedLeft = (left.getString().equals(""undefined""));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,857,f (undefinedLeft) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,858,oolean nullRight = (Token.NULL == right.getType());
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,859,oolean equivalent = undefinedRight || nullRight;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,860,witch (op) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,861,ase Token.EQ:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,862,/ undefined is only equal to
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,863,esult = equivalent;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,864,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,865,ase Token.NE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,866,esult = !equivalent;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,867,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,868,ase Token.SHEQ:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,869,esult = undefinedRight;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,870,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,871,ase Token.SHNE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,872,esult = !undefinedRight;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,873,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,874,ase Token.LT:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,875,ase Token.GT:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,876,ase Token.LE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,877,ase Token.GE:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,878,esult = false;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,879,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,880,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,881,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,883,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,887,f (Token.NAME != right.getType()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,888,eturn;  // Only eval if they are the same type
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,890,tring ln = left.getString();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,891,tring rn = right.getString();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,892,f (!ln.equals(rn)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,893,eturn;  // Not the same value name.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,896,witch (op) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,897,"/ If we knew the named value wouldn't be NaN, it would be nice"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,898,"/ to handle EQ,NE,LE,GE,SHEQ, and SHNE."
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,899,ase Token.LT:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,900,ase Token.GT:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,901,esult = false;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,902,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,903,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,904,eturn;  // don't handle that op
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,906,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,908,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,909,"/ assert, this should cover all consts"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,910,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,913,"arent.replaceChild(n, new Node(result ? Token.TRUE :"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,914,oken.FALSE));
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,915,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,919, Try to evaluate String.indexOf/lastIndexOf:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,920,"     ""abcdef"".indexOf(""bc"") -> 1"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,921,"     ""abcdefbc"".indexOf(""bc"", 3) -> 6"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,923,"oid tryFoldStringIndexOf(NodeTraversal t, Node n, Node left, Node right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,924,ode parent) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,925,f (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,926,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,929,ode lstringNode = left.getFirstChild();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,930,ode functionName = lstringNode.getNext();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,932,f ((lstringNode.getType() != Token.STRING) ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,933,"!functionName.getString().equals(""indexOf"") &&"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,934,"functionName.getString().equals(""lastIndexOf""))) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,935,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,938,tring lstring = NodeUtil.getStringValue(lstringNode);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,939,"oolean isIndexOf = functionName.getString().equals(""indexOf"");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,940,ode firstArg = right;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,941,ode secondArg = right.getNext();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,942,tring searchValue = NodeUtil.getStringValue(firstArg);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,943,/ searchValue must be a valid string.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,944,f (searchValue == null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,945,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,947,nt fromIndex = isIndexOf ? 0 : lstring.length();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,948,f (secondArg != null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,949,/ Third-argument and non-numeric second arg are problematic. Discard.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,950,f ((secondArg.getNext() != null) ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,951,secondArg.getType() != Token.NUMBER)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,952,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,953, else {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,954,romIndex = (int) secondArg.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,957,"nt indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,958," lstring.lastIndexOf(searchValue, fromIndex);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,959,ode newNode = Node.newNumber(indexVal);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,960,"arent.replaceChild(n, newNode);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,962,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,966," Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,968,"oid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,969,ode parent) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,970,f (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,971,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,974,ode arrayNode = left.getFirstChild();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,975,ode functionName = arrayNode.getNext();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,977,f ((arrayNode.getType() != Token.ARRAYLIT) ||
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,978,"functionName.getString().equals(""join"")) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,979,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,982,tring joinString = NodeUtil.getStringValue(right);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,983,ist<Node> arrayFoldedChildren = Lists.newLinkedList();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,984,tringBuilder sb = null;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,985,nt foldedSize = 0;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,986,ode prev = null;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,987,ode elem = arrayNode.getFirstChild();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,988,/ Merges adjacent String nodes.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,989,hile (elem != null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,990,f (NodeUtil.isImmutableValue(elem)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,991,f (sb == null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,992,b = new StringBuilder();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,993, else {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,994,b.append(joinString);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,996,b.append(NodeUtil.getStringValue(elem));
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,997, else {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,998,f (sb != null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,999,reconditions.checkNotNull(prev);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1000,/ + 2 for the quotes.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1001,oldedSize += sb.length() + 2;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1002,rrayFoldedChildren.add(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1003,ode.newString(sb.toString()).copyInformationFrom(prev));
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1004,b = null;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1006,oldedSize += InlineCostEstimator.getCost(elem);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1007,rrayFoldedChildren.add(elem);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1009,rev = elem;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1010,lem = elem.getNext();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1013,f (sb != null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1014,reconditions.checkNotNull(prev);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1015,/ + 2 for the quotes.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1016,oldedSize += sb.length() + 2;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1017,rrayFoldedChildren.add(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1018,ode.newString(sb.toString()).copyInformationFrom(prev));
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1020,/ one for each comma.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1021,oldedSize += arrayFoldedChildren.size() - 1;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1023,nt originalSize = InlineCostEstimator.getCost(n);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1024,witch (arrayFoldedChildren.size()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1025,ase 0:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1026,"ode emptyStringNode = Node.newString("""");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1027,"arent.replaceChild(n, emptyStringNode);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1028,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1030,ase 1:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1031,ode foldedStringNode = arrayFoldedChildren.remove(0);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1032,f (foldedSize > originalSize) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1033,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1035,rrayNode.detachChildren();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1036,f (foldedStringNode.getType() != Token.STRING) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1037,"/ If the Node is not a string literal, ensure that"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1038,/ it is coerced to a string.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1039,"ode replacement = new Node(Token.ADD,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1040,"ode.newString("""").copyInformationFrom(right),"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1041,oldedStringNode);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1042,oldedStringNode = replacement;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1044,"arent.replaceChild(n, foldedStringNode);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1045,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1047,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1048,/ No folding could actually be performed.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1049,f (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1050,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1052,"nt kJoinOverhead = ""[].join()"".length();"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1053,oldedSize += kJoinOverhead;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1054,oldedSize += InlineCostEstimator.getCost(right);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1055,f (foldedSize > originalSize) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1056,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1058,rrayNode.detachChildren();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1059,or (Node node : arrayFoldedChildren) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1060,rrayNode.addChildToBack(node);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1062,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1064,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1068," Try to fold array-element. e.g [1, 2, 3][10];"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1070,"oid tryFoldGetElem(NodeTraversal t, Node n, Node left, Node right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1071,ode parent) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1072,f (left.getType() == Token.ARRAYLIT) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1074,f (right.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1075,/ Sometimes people like to use complex expressions to index into
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1076,"/ arrays, or strings to index into array methods."
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1077,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1080,ouble index = right.getDouble();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1081,nt intIndex = (int) index;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1082,f (intIndex != index) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1083,".getCompiler().report(t.makeError(right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1084,"NVALID_GETELEM_INDEX_ERROR, String.valueOf(index)));"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1085,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1088,f (intIndex < 0) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1089,".getCompiler().report(t.makeError(n, INDEX_OUT_OF_BOUNDS_ERROR,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1090,tring.valueOf(intIndex)));
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1091,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1094,ode elem = left.getFirstChild();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1095,or (int i = 0; elem != null && i < intIndex; i++) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1096,lem = elem.getNext();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1099,f (elem == null) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1100,".getCompiler().report(t.makeError(n, INDEX_OUT_OF_BOUNDS_ERROR,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1101,tring.valueOf(intIndex)));
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1102,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1105,/ Replace the entire GETELEM with the value
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1106,eft.removeChild(elem);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1107,"arent.replaceChild(n, elem);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1108,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1113," Try to fold array-length. e.g [1, 2, 3].length ==> 3, [x, y].length ==> 2"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1115,"oid tryFoldGetProp(NodeTraversal t, Node n, Node left, Node right,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1116,ode parent) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1117,f (right.getType() == Token.STRING &&
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1118,"ight.getString().equals(""length"")) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1119,nt knownLength = -1;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1120,witch (left.getType()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1121,ase Token.ARRAYLIT:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1122,f (NodeUtil.mayHaveSideEffects(left)) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1123,"/ Nope, can't fold this, without handling the side-effects."
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1124,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1126,nownLength = left.getChildCount();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1127,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1128,ase Token.STRING:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1129,nownLength = left.getString().length();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1130,reak;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1131,efault:
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1132,"/ Not a foldable case, forget it."
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1133,eturn;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1136,reconditions.checkState(knownLength != -1);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1137,ode lengthNode = Node.newNumber(knownLength);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1138,"arent.replaceChild(n, lengthNode);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1139,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1144," Replaces a new Array or Object node with an object literal, unless the"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1145, call to Array or Object is to a local function with the same name.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1147, @param t
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1148, @param n new call node (assumed to be of type TokenStream.NEW)
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1149, @param parent
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1150, @param type type of object literal to replace the new call node with
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1152,oolean tryFoldLiteralConstructor(
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1153,"odeTraversal t, Node n, Node parent, String className, int type) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1154,/ Ignore calls to local functions with the same name.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1155,cope.Var var = t.getScope().getVar(className);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1156,f (var != null && var.isLocal()) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1157,/ no change.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1158,eturn false;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1161,ode literalNode = new Node(type);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1162,"arent.replaceChild(n, literalNode);"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1163,.getCompiler().reportCodeChange();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1164,eturn true;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,78,// TODO(nicksantos): assertOnChange should only be true if the tree
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,79,// is normalized.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,117,compiler.setNormalized();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,2,* Copyright 2004 Google Inc.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,20,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,21,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,22,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,23,import com.google.javascript.rhino.jstype.TernaryValue;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,25,import java.util.List;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,28,* Peephole optimization to fold constants (e.g. x + 1 + 7 --> x + 8).
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,33,public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,35,static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,36,"""JSC_DIVIDE_BY_0_ERROR"","
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,37,"""Divide by 0"");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,39,static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,40,DiagnosticType.error(
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,41,"""JSC_INVALID_GETELEM_INDEX_ERROR"","
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,42,"""Array index not integer: {0}"");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,44,static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,45,DiagnosticType.error(
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,46,"""JSC_INDEX_OUT_OF_BOUNDS_ERROR"","
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,47,"""Array index out of bounds: {0}"");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,49,static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,50,DiagnosticType.error(
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,51,"""JSC_NEGATING_A_NON_NUMBER_ERROR"","
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,52,"""Can't negate non-numeric value: {0}"");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,54,static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,55,DiagnosticType.error(
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,56,"""JSC_BITWISE_OPERAND_OUT_OF_RANGE"","
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,57,"""Operand out of range, bitwise operation will lose information: {0}"");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,59,static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,60,"""JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS"","
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,61,"""Shift amount out of bounds: {0}"");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,63,static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,64,"""JSC_FRACTIONAL_BITWISE_OPERAND"","
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,65,"""Fractional bitwise operand: {0}"");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,67,@Override
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,68,Node optimizeSubtree(Node subtree) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,69,switch(subtree.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,70,case Token.CALL:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,71,return tryFoldKnownMethods(subtree);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,73,case Token.TYPEOF:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,74,return tryFoldTypeof(subtree);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,76,case Token.NOT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,77,case Token.NEG:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,78,case Token.BITNOT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,79,return tryFoldUnaryOperator(subtree);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,81,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,82,return tryFoldBinaryOperator(subtree);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,86,private Node tryFoldBinaryOperator(Node subtree) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,87,Node left = subtree.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,89,if (left == null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,90,return subtree;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,93,Node right = left.getNext();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,95,if (right == null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,96,return subtree;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,99,"// If we've reached here, node is truly a binary operator."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,100,switch(subtree.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,101,case Token.GETPROP:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,102,"return tryFoldGetProp(subtree, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,104,case Token.GETELEM:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,105,"return tryFoldGetElem(subtree, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,107,case Token.INSTANCEOF:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,108,"return tryFoldInstanceof(subtree, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,110,case Token.AND:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,111,case Token.OR:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,112,"return tryFoldAndOr(subtree, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,114,case Token.BITAND:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,115,case Token.BITOR:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,116,"return tryFoldBitAndOr(subtree, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,118,case Token.LSH:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,119,case Token.RSH:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,120,case Token.URSH:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,121,"return tryFoldShift(subtree, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,123,case Token.ASSIGN:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,124,"return tryFoldAssign(subtree, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,126,case Token.ADD:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,127,"return tryFoldAdd(subtree, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,129,case Token.SUB:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,130,case Token.MUL:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,131,case Token.DIV:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,132,"return tryFoldArithmetic(subtree, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,134,case Token.LT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,135,case Token.GT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,136,case Token.LE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,137,case Token.GE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,138,case Token.EQ:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,139,case Token.NE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,140,case Token.SHEQ:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,141,case Token.SHNE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,142,"return tryFoldComparison(subtree, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,144,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,145,return subtree;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,150,"* Folds 'typeof(foo)' if foo is a literal, e.g."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,151,"* typeof(""bar"") --> ""string"""
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,152,"* typeof(6) --> ""number"""
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,154,private Node tryFoldTypeof(Node originalTypeofNode) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,155,Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,157,Node argumentNode = originalTypeofNode.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,158,if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,159,return originalTypeofNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,162,String typeNameString = null;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,164,switch (argumentNode.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,165,case Token.STRING:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,166,"typeNameString = ""string"";"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,167,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,168,case Token.NUMBER:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,169,"typeNameString = ""number"";"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,170,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,171,case Token.TRUE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,172,case Token.FALSE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,173,"typeNameString = ""boolean"";"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,174,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,175,case Token.NULL:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,176,case Token.OBJECTLIT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,177,case Token.ARRAYLIT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,178,"typeNameString = ""object"";"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,179,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,180,case Token.NAME:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,181,// We assume here that programs don't change the value of the
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,182,// keyword undefined to something other than the value undefined.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,183,"if (""undefined"".equals(argumentNode.getString())) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,184,"typeNameString = ""undefined"";"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,186,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,189,if (typeNameString != null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,190,Node newNode = Node.newString(typeNameString);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,191,"originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,192,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,194,return newNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,197,return originalTypeofNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,200,private Node tryFoldUnaryOperator(Node n) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,201,Preconditions.checkState(n.hasOneChild());
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,203,Node left = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,204,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,206,if (left == null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,207,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,210,if (NodeUtil.isExpressionNode(parent)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,211,"// If the value isn't used, then just throw"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,212,// away the operator
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,213,"parent.replaceChild(n, n.removeFirstChild());"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,214,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,215,return null;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,218,TernaryValue leftVal = NodeUtil.getBooleanValue(left);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,219,if (leftVal == TernaryValue.UNKNOWN) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,220,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,223,switch (n.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,224,case Token.NOT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,225,int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,226,Node replacementNode = new Node(result);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,227,"parent.replaceChild(n, replacementNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,228,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,229,return replacementNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,230,case Token.NEG:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,231,try {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,232,if (left.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,233,"if (left.getString().equals(""Infinity"")) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,234,"// ""-Infinity"" is valid and a literal, don't modify it."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,235,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,236,"} else if (left.getString().equals(""NaN"")) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,237,"// ""-NaN"" is ""NaN""."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,238,n.removeChild(left);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,239,"parent.replaceChild(n, left);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,240,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,241,return left;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,245,double negNum = -left.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,247,Node negNumNode = Node.newNumber(negNum);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,248,"parent.replaceChild(n, negNumNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,249,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,250,return negNumNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,251,} catch (UnsupportedOperationException ex) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,252,"// left is not a number node, so do not replace, but warn the"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,253,// user because they can't be doing anything good
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,254,"error(NEGATING_A_NON_NUMBER_ERROR, left);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,255,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,257,case Token.BITNOT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,258,try {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,259,double val = left.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,260,if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,261,int intVal = (int) val;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,262,if (intVal == val) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,263,Node notIntValNode = Node.newNumber(~intVal);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,264,"parent.replaceChild(n, notIntValNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,265,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,266,return notIntValNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,267,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,268,"error(FRACTIONAL_BITWISE_OPERAND, left);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,269,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,271,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,272,"error(BITWISE_OPERAND_OUT_OF_RANGE, left);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,273,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,275,} catch (UnsupportedOperationException ex) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,276,"// left is not a number node, so do not replace, but warn the"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,277,// user because they can't be doing anything good
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,278,"error(NEGATING_A_NON_NUMBER_ERROR, left);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,279,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,281,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,282,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,287,* Try to fold {@code left instanceof right} into {@code true}
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,288,* or {@code false}.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,290,"private Node tryFoldInstanceof(Node n, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,291,Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,293,// TODO(johnlenz) Use type information if available to fold
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,294,// instanceof.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,295,if (NodeUtil.isLiteralValue(left)
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,296,&& !NodeUtil.mayHaveSideEffects(right)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,298,Node replacementNode = null;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,300,if (NodeUtil.isImmutableValue(left)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,301,// Non-object types are never instances.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,302,replacementNode = new Node(Token.FALSE);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,303,} else if (right.getType() == Token.NAME
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,304,"&& ""Object"".equals(right.getString())) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,305,replacementNode = new Node(Token.TRUE);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,308,if (replacementNode != null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,309,"n.getParent().replaceChild(n, replacementNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,310,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,311,return replacementNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,315,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,318,"private Node tryFoldAssign(Node n, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,319,Preconditions.checkArgument(n.getType() == Token.ASSIGN);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,321,// Tries to convert x = x + y -> x += y;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,322,if (!right.hasChildren() ||
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,323,right.getFirstChild().getNext() != right.getLastChild()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,324,// RHS must have two children.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,325,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,328,if (NodeUtil.mayHaveSideEffects(left)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,329,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,332,Node leftChild = right.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,333,"if (!areNodesEqualForInlining(left, leftChild)) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,334,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,337,int newType = -1;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,338,switch (right.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,339,case Token.ADD:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,340,newType = Token.ASSIGN_ADD;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,341,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,342,case Token.BITAND:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,343,newType = Token.ASSIGN_BITAND;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,344,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,345,case Token.BITOR:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,346,newType = Token.ASSIGN_BITOR;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,347,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,348,case Token.BITXOR:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,349,newType = Token.ASSIGN_BITXOR;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,350,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,351,case Token.DIV:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,352,newType = Token.ASSIGN_DIV;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,353,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,354,case Token.LSH:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,355,newType = Token.ASSIGN_LSH;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,356,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,357,case Token.MOD:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,358,newType = Token.ASSIGN_MOD;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,359,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,360,case Token.MUL:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,361,newType = Token.ASSIGN_MUL;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,362,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,363,case Token.RSH:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,364,newType = Token.ASSIGN_RSH;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,365,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,366,case Token.SUB:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,367,newType = Token.ASSIGN_SUB;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,368,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,369,case Token.URSH:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,370,newType = Token.ASSIGN_URSH;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,371,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,372,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,373,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,376,"Node newNode = new Node(newType,"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,377,"left.detachFromParent(), right.getLastChild().detachFromParent());"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,378,"n.getParent().replaceChild(n, newNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,380,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,382,return newNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,386,* Try to fold a AND/OR node.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,388,"private Node tryFoldAndOr(Node n, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,389,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,391,Node result = null;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,393,int type = n.getType();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,395,TernaryValue leftVal = NodeUtil.getBooleanValue(left);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,397,if (leftVal != TernaryValue.UNKNOWN) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,398,boolean lval = leftVal.toBoolean(true);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,400,"// (TRUE || x) => TRUE (also, (3 || x) => 3)"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,401,// (FALSE && x) => FALSE
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,402,if (lval && type == Token.OR ||
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,403,!lval && type == Token.AND) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,404,result = left;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,406,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,407,// (FALSE || x) => x
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,408,// (TRUE && x) => x
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,409,result = right;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,411,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,412,TernaryValue rightVal = NodeUtil.getBooleanValue(right);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,413,if (rightVal != TernaryValue.UNKNOWN) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,415,// Note: We cannot always fold when the constant is on the
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,416,"// right, because the typed value of the expression will depend"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,417,"// on the type of the constant on the right, even if the boolean"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,418,"// equivalent of the value does not. Specifically, in ""a = x ||"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,419,"// 0"", a will be numeric 0 if x is undefined (and hence is"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,420,"// e.g. a valid array index). However, it is safe to fold"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,421,"// e.g. ""if (x || true)"" because 'if' doesn't care if the"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,422,// expression is 'true' or '3'.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,423,int pt = parent.getType();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,424,if (pt == Token.IF || pt == Token.WHILE || pt == Token.DO ||
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,425,(pt == Token.FOR && NodeUtil.getConditionExpression(parent) == n) ||
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,426,(pt == Token.HOOK && parent.getFirstChild() == n)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,427,boolean rval = rightVal.toBoolean(true);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,429,// (x || FALSE) => x
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,430,// (x && TRUE) => x
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,431,if (type == Token.OR && !rval ||
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,432,type == Token.AND && rval) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,433,result = left;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,434,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,435,// If x has no side-effects:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,436,//   (x || TRUE) => TRUE
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,437,//   (x && FALSE) => FALSE
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,438,if (!NodeUtil.mayHaveSideEffects(left)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,439,result = right;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,446,"// Note: The parser parses 'x && FALSE && y' as 'x && (FALSE && y)', so"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,447,// there is not much need to worry about const values on left's
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,448,// right child.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,450,if (result != null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,451,// Fold it!
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,452,n.removeChild(result);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,453,"parent.replaceChild(n, result);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,454,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,456,return result;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,457,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,458,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,463,* Expressions such as [foo() + 'a' + 'b'] generate parse trees
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,464,"* where no node has two const children ((foo() + 'a') + 'b'), so"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,465,* tryFoldAdd() won't fold it -- tryFoldLeftChildAdd() will (for Strings).
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,466,* Specifically it folds Add exprssions where:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,467,*  - The left child is also and add expression
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,468,*  - The right child is a constant value
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,469,*  - The left child's right child is a STRING constant.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,471,"* WARNING: If javascript ever adds operator overloading, this will"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,472,* probably stop being correct.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,474,"private Node tryFoldLeftChildAdd(Node n, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,476,if (NodeUtil.isLiteralValue(right) &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,477,left.getType() == Token.ADD &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,478,left.getChildCount() == 2) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,480,Node ll = left.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,481,Node lr = ll.getNext();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,483,// Left's right child MUST be a string. We would not want to fold
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,484,"// foo() + 2 + 'a' because we don't know what foo() will return, and"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,485,"// therefore we don't know if left is a string concat, or a numeric add."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,486,if (lr.getType() != Token.STRING) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,487,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,490,String leftString = NodeUtil.getStringValue(lr);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,491,String rightString = NodeUtil.getStringValue(right);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,492,if (leftString != null && rightString != null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,493,left.removeChild(ll);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,494,String result = leftString + rightString;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,495,"n.replaceChild(left, ll);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,496,"n.replaceChild(right, Node.newString(result));"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,497,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,501,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,505,* Try to fold an ADD node with constant operands
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,507,"private Node tryFoldAddConstant(Node n, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,508,if (left.getType() == Token.STRING ||
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,509,right.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,511,// Add strings.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,512,String leftString = NodeUtil.getStringValue(left);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,513,String rightString = NodeUtil.getStringValue(right);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,514,if (leftString != null && rightString != null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,515,Node newStringNode = Node.newString(leftString + rightString);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,516,"n.getParent().replaceChild(n, newStringNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,517,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,518,return newStringNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,520,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,521,// Try arithmetic add
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,522,"return tryFoldArithmetic(n, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,525,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,529,* Try to fold arithmetic binary operators
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,531,"private Node tryFoldArithmetic(Node n, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,532,if (left.getType() == Token.NUMBER &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,533,right.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,534,double result;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,535,double lval = left.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,536,double rval = right.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,538,switch (n.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,539,case Token.ADD:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,540,result = lval + rval;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,541,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,542,case Token.SUB:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,543,result = lval - rval;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,544,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,545,case Token.MUL:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,546,result = lval * rval;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,547,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,548,case Token.DIV:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,549,if (rval == 0) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,550,"error(DIVIDE_BY_0_ERROR, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,551,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,553,result = lval / rval;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,554,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,555,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,556,"throw new Error(""Unknown arithmetic operator"");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,559,// length of the left and right value plus 1 byte for the operator.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,560,if (String.valueOf(result).length() <=
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,561,String.valueOf(lval).length() + String.valueOf(rval).length() + 1) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,562,Node newNumber = Node.newNumber(result);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,563,"n.getParent().replaceChild(n, newNumber);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,564,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,565,return newNumber;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,568,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,571,"private Node tryFoldAdd(Node node, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,572,Preconditions.checkArgument(node.getType() == Token.ADD);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,574,if (NodeUtil.isLiteralValue(left) && NodeUtil.isLiteralValue(right)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,575,// 6 + 7
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,576,"return tryFoldAddConstant(node, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,577,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,578,// a + 7 or 6 + a
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,579,"return tryFoldLeftChildAdd(node, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,584,* Try to fold arithmetic binary operators
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,586,"private Node tryFoldBitAndOr(Node n, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,587,Preconditions.checkArgument(n.getType() == Token.BITAND
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,588,|| n.getType() == Token.BITOR);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,590,if (left.getType() == Token.NUMBER &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,591,right.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,592,double resultDouble;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,593,double lval = left.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,594,double rval = right.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,596,"// For now, we are being extra conservative, and only folding ints in"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,597,// the range MIN_VALUE-MAX_VALUE
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,598,if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE ||
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,599,rval < Integer.MIN_VALUE || rval > Integer.MAX_VALUE) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,601,// Fall back through and let the javascript use the larger values
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,602,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,605,// Convert the numbers to ints
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,606,int lvalInt = (int) lval;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,607,if (lvalInt != lval) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,608,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,611,int rvalInt = (int) rval;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,612,if (rvalInt != rval) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,613,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,616,switch (n.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,617,case Token.BITAND:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,618,resultDouble = lvalInt & rvalInt;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,619,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,620,case Token.BITOR:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,621,resultDouble = lvalInt | rvalInt;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,622,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,623,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,624,"throw new Error(""Unknown bitwise operator"");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,627,Node newNumber = Node.newNumber(resultDouble);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,628,"n.getParent().replaceChild(n, newNumber);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,629,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,632,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,636,* Try to fold shift operations
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,638,"private Node tryFoldShift(Node n, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,639,if (left.getType() == Token.NUMBER &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,640,right.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,642,double result;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,643,double lval = left.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,644,double rval = right.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,646,// check ranges.  We do not do anything that would clip the double to
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,647,"// a 32-bit range, since the user likely does not intend that."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,648,if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,649,"error(BITWISE_OPERAND_OUT_OF_RANGE, left);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,650,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,653,"// only the lower 5 bits are used when shifting, so don't do anything"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,654,"// if the shift amount is outside [0,32)"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,655,if (!(rval >= 0 && rval < 32)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,656,"error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,657,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,660,// Convert the numbers to ints
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,661,int lvalInt = (int) lval;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,662,if (lvalInt != lval) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,663,"error(FRACTIONAL_BITWISE_OPERAND, left);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,664,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,667,int rvalInt = (int) rval;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,668,if (rvalInt != rval) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,669,"error(FRACTIONAL_BITWISE_OPERAND, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,670,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,673,switch (n.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,674,case Token.LSH:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,675,result = lvalInt << rvalInt;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,676,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,677,case Token.RSH:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,678,result = lvalInt >> rvalInt;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,679,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,680,case Token.URSH:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,681,result = lvalInt >>> rvalInt;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,682,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,683,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,684,"throw new AssertionError(""Unknown shift operator: "" +"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,685,Node.tokenToName(n.getType()));
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,688,Node newNumber = Node.newNumber(result);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,689,"n.getParent().replaceChild(n, newNumber);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,690,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,692,return newNumber;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,695,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,699,"* Try to fold comparison nodes, e.g =="
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,701,"@SuppressWarnings(""fallthrough"")"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,702,"private Node tryFoldComparison(Node n, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,703,if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,704,// We only handle non-literal operands for LT and GT.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,705,if (n.getType() != Token.GT && n.getType() != Token.LT) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,706,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,710,int op = n.getType();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,711,boolean result;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,713,// TODO(johnlenz): Use the JSType to compare nodes of different types.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,715,boolean rightLiteral = NodeUtil.isLiteralValue(right);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,716,boolean undefinedRight = ((Token.NAME == right.getType()
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,717,"&& right.getString().equals(""undefined""))"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,718,|| (Token.VOID == right.getType()
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,719,&& NodeUtil.isLiteralValue(right.getFirstChild())));
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,721,switch (left.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,722,case Token.VOID:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,723,if (!NodeUtil.isLiteralValue(left.getFirstChild())) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,724,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,725,} else if (!rightLiteral) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,726,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,727,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,728,boolean nullRight = (Token.NULL == right.getType());
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,729,boolean equivalent = undefinedRight || nullRight;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,730,switch (op) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,731,case Token.EQ:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,732,// undefined is only equal to
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,733,result = equivalent;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,734,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,735,case Token.NE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,736,result = !equivalent;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,737,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,738,case Token.SHEQ:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,739,result = undefinedRight;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,740,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,741,case Token.SHNE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,742,result = !undefinedRight;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,743,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,744,case Token.LT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,745,case Token.GT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,746,case Token.LE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,747,case Token.GE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,748,result = false;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,749,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,750,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,751,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,754,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,756,case Token.NULL:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,757,if (undefinedRight) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,758,result = (op == Token.EQ);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,759,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,761,// fall through
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,762,case Token.TRUE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,763,case Token.FALSE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,764,if (undefinedRight) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,765,result = false;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,766,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,768,// fall through
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,769,case Token.THIS:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,770,int tt = right.getType();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,771,if (tt != Token.THIS &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,772,tt != Token.TRUE &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,773,tt != Token.FALSE &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,774,tt != Token.NULL) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,775,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,777,switch (op) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,778,case Token.SHEQ:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,779,case Token.EQ:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,780,result = left.getType() == right.getType();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,781,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,783,case Token.SHNE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,784,case Token.NE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,785,result = left.getType() != right.getType();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,786,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,788,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,789,return n;  // we only handle == and != here
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,791,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,793,case Token.STRING:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,794,if (undefinedRight) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,795,result = false;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,796,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,798,if (Token.STRING != right.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,799,return n;  // Only eval if they are the same type
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,801,switch (op) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,802,case Token.SHEQ:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,803,case Token.EQ:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,804,result = left.getString().equals(right.getString());
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,805,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,807,case Token.SHNE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,808,case Token.NE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,809,result = !left.getString().equals(right.getString());
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,810,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,812,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,813,return n;  // we only handle == and != here
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,815,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,817,case Token.NUMBER:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,818,if (undefinedRight) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,819,result = false;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,820,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,822,if (Token.NUMBER != right.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,823,return n;  // Only eval if they are the same type
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,825,double lv = left.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,826,double rv = right.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,828,switch (op) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,829,case Token.SHEQ:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,830,case Token.EQ: result = lv == rv; break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,831,case Token.SHNE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,832,case Token.NE: result = lv != rv; break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,833,case Token.LE: result = lv <= rv; break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,834,case Token.LT: result = lv <  rv; break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,835,case Token.GE: result = lv >= rv; break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,836,case Token.GT: result = lv >  rv; break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,837,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,838,return n;  // don't handle that op
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,840,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,842,case Token.NAME:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,843,if (rightLiteral) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,844,"boolean undefinedLeft = (left.getString().equals(""undefined""));"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,845,if (undefinedLeft) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,846,boolean nullRight = (Token.NULL == right.getType());
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,847,boolean equivalent = undefinedRight || nullRight;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,848,switch (op) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,849,case Token.EQ:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,850,// undefined is only equal to
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,851,result = equivalent;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,852,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,853,case Token.NE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,854,result = !equivalent;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,855,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,856,case Token.SHEQ:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,857,result = undefinedRight;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,858,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,859,case Token.SHNE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,860,result = !undefinedRight;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,861,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,862,case Token.LT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,863,case Token.GT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,864,case Token.LE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,865,case Token.GE:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,866,result = false;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,867,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,868,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,869,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,871,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,875,if (Token.NAME != right.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,876,return n;  // Only eval if they are the same type
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,878,String ln = left.getString();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,879,String rn = right.getString();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,880,if (!ln.equals(rn)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,881,return n;  // Not the same value name.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,884,switch (op) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,885,"// If we knew the named value wouldn't be NaN, it would be nice"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,886,"// to handle EQ,NE,LE,GE,SHEQ, and SHNE."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,887,case Token.LT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,888,case Token.GT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,889,result = false;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,890,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,891,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,892,return n;  // don't handle that op
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,894,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,896,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,897,"// assert, this should cover all consts"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,898,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,901,Node newNode = new Node(result ? Token.TRUE : Token.FALSE);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,902,"n.getParent().replaceChild(n, newNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,903,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,905,return newNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,908,private Node tryFoldKnownMethods(Node subtree) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,909,// For now we only support .join() and .indexOf()
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,911,subtree = tryFoldStringJoin(subtree);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,913,if (subtree.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,914,subtree = tryFoldStringIndexOf(subtree);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,917,return subtree;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,921,* Try to evaluate String.indexOf/lastIndexOf:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,922,"*     ""abcdef"".indexOf(""bc"") -> 1"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,923,"*     ""abcdefbc"".indexOf(""bc"", 3) -> 6"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,925,private Node tryFoldStringIndexOf(Node n) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,926,Preconditions.checkArgument(n.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,928,Node left = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,930,if (left == null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,931,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,934,Node right = left.getNext();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,936,if (right == null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,937,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,940,if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,941,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,944,Node lstringNode = left.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,945,Node functionName = lstringNode.getNext();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,947,if ((lstringNode.getType() != Token.STRING) ||
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,948,"(!functionName.getString().equals(""indexOf"") &&"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,949,"!functionName.getString().equals(""lastIndexOf""))) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,950,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,953,String lstring = NodeUtil.getStringValue(lstringNode);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,954,"boolean isIndexOf = functionName.getString().equals(""indexOf"");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,955,Node firstArg = right;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,956,Node secondArg = right.getNext();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,957,String searchValue = NodeUtil.getStringValue(firstArg);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,958,// searchValue must be a valid string.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,959,if (searchValue == null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,960,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,962,int fromIndex = isIndexOf ? 0 : lstring.length();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,963,if (secondArg != null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,964,// Third-argument and non-numeric second arg are problematic. Discard.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,965,if ((secondArg.getNext() != null) ||
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,966,(secondArg.getType() != Token.NUMBER)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,967,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,968,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,969,fromIndex = (int) secondArg.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,972,"int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,973,": lstring.lastIndexOf(searchValue, fromIndex);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,974,Node newNode = Node.newNumber(indexVal);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,975,"n.getParent().replaceChild(n, newNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,977,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,979,return newNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,983,"* Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,985,private Node tryFoldStringJoin(Node n) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,986,Node left = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,988,if (left == null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,989,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,992,Node right = left.getNext();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,994,if (right == null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,995,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,998,if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,999,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1002,Node arrayNode = left.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1003,Node functionName = arrayNode.getNext();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1005,if ((arrayNode.getType() != Token.ARRAYLIT) ||
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1006,"!functionName.getString().equals(""join"")) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1007,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1010,String joinString = NodeUtil.getStringValue(right);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1011,List<Node> arrayFoldedChildren = Lists.newLinkedList();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1012,StringBuilder sb = null;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1013,int foldedSize = 0;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1014,Node prev = null;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1015,Node elem = arrayNode.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1016,// Merges adjacent String nodes.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1017,while (elem != null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1018,if (NodeUtil.isImmutableValue(elem)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1019,if (sb == null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1020,sb = new StringBuilder();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1021,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1022,sb.append(joinString);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1024,sb.append(NodeUtil.getStringValue(elem));
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1025,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1026,if (sb != null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1027,Preconditions.checkNotNull(prev);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1028,// + 2 for the quotes.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1029,foldedSize += sb.length() + 2;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1030,arrayFoldedChildren.add(
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1031,Node.newString(sb.toString()).copyInformationFrom(prev));
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1032,sb = null;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1034,foldedSize += InlineCostEstimator.getCost(elem);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1035,arrayFoldedChildren.add(elem);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1037,prev = elem;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1038,elem = elem.getNext();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1041,if (sb != null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1042,Preconditions.checkNotNull(prev);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1043,// + 2 for the quotes.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1044,foldedSize += sb.length() + 2;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1045,arrayFoldedChildren.add(
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1046,Node.newString(sb.toString()).copyInformationFrom(prev));
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1048,// one for each comma.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1049,foldedSize += arrayFoldedChildren.size() - 1;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1051,int originalSize = InlineCostEstimator.getCost(n);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1052,switch (arrayFoldedChildren.size()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1053,case 0:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1054,"Node emptyStringNode = Node.newString("""");"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1055,"n.getParent().replaceChild(n, emptyStringNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1056,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1057,return emptyStringNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1058,case 1:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1059,Node foldedStringNode = arrayFoldedChildren.remove(0);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1060,if (foldedSize > originalSize) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1061,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1063,arrayNode.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1064,if (foldedStringNode.getType() != Token.STRING) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1065,"// If the Node is not a string literal, ensure that"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1066,// it is coerced to a string.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1067,"Node replacement = new Node(Token.ADD,"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1068,"Node.newString("""").copyInformationFrom(right),"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1069,foldedStringNode);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1070,foldedStringNode = replacement;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1072,"n.getParent().replaceChild(n, foldedStringNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1073,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1074,return foldedStringNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1075,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1076,// No folding could actually be performed.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1077,if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1078,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1080,"int kJoinOverhead = ""[].join()"".length();"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1081,foldedSize += kJoinOverhead;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1082,foldedSize += InlineCostEstimator.getCost(right);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1083,if (foldedSize > originalSize) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1084,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1086,arrayNode.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1087,for (Node node : arrayFoldedChildren) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1088,arrayNode.addChildToBack(node);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1090,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1091,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1094,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1098,"* Try to fold array-element. e.g [1, 2, 3][10];"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1100,"private Node tryFoldGetElem(Node n, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1101,Preconditions.checkArgument(n.getType() == Token.GETELEM);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1103,if (left.getType() == Token.ARRAYLIT) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1105,if (right.getType() != Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1106,// Sometimes people like to use complex expressions to index into
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1107,"// arrays, or strings to index into array methods."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1108,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1111,double index = right.getDouble();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1112,int intIndex = (int) index;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1113,if (intIndex != index) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1114,"error(INVALID_GETELEM_INDEX_ERROR, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1115,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1118,if (intIndex < 0) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1119,"error(INDEX_OUT_OF_BOUNDS_ERROR, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1120,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1123,Node elem = left.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1124,for (int i = 0; elem != null && i < intIndex; i++) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1125,elem = elem.getNext();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1128,if (elem == null) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1129,"error(INDEX_OUT_OF_BOUNDS_ERROR, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1130,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1133,// Replace the entire GETELEM with the value
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1134,left.removeChild(elem);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1135,"n.getParent().replaceChild(n, elem);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1136,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1137,return elem;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1139,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1143,"* Try to fold array-length. e.g [1, 2, 3].length ==> 3, [x, y].length ==> 2"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1145,"private Node tryFoldGetProp(Node n, Node left, Node right) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1146,Preconditions.checkArgument(n.getType() == Token.GETPROP);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1148,if (right.getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1149,"right.getString().equals(""length"")) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1150,int knownLength = -1;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1151,switch (left.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1152,case Token.ARRAYLIT:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1153,if (NodeUtil.mayHaveSideEffects(left)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1154,"// Nope, can't fold this, without handling the side-effects."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1155,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1157,knownLength = left.getChildCount();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1158,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1159,case Token.STRING:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1160,knownLength = left.getString().length();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1161,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1162,default:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1163,"// Not a foldable case, forget it."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1164,return n;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1167,Preconditions.checkState(knownLength != -1);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1168,Node lengthNode = Node.newNumber(knownLength);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1169,"n.getParent().replaceChild(n, lengthNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1170,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1172,return lengthNode;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1175,return n;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,21,import com.google.common.collect.ImmutableSet;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,59,"@SuppressWarnings(""fallthrough"")"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,61,eturn tryReduceReturn(node);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,63,return tryReduceReturn(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,66,eturn tryMinimizeIf(node);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,70,return tryMinimizeIf(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,71,ryMinimizeCondition(node.getFirstChild());
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,77,tryMinimizeCondition(node.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,82,ase Token.CALL:{
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,83,ode left = node.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,84,f (left != null) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,85,f (Token.NAME == left.getType()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,86,tring className = left.getString();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,87,"f (""RegExp"".equals(className)) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,88,eturn tryFoldRegularExpressionConstructor(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,93,eturn node;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,94,efault:
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,89,node = tryFoldStandardConstructors(node);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,90,if (node.getType() != Token.CALL) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,91,return node;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,93,// Fall through on purpose because tryFoldStandardConstructors() may
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,94,// convert a NEW node into a CALL node
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,95,case Token.CALL:
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,96,return tryFoldLiteralConstructor(node);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,98,default:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,172,ode tryMinimizeIf(Node n) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,176,private Node tryMinimizeIf(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,575,ode tryMinimizeCondition(Node n) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,579,private Node tryMinimizeCondition(Node n) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,666,private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,667,"// String, Number, and Boolean functions return non-object types, whereas"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,668,"// new String, new Number, and new Boolean return object types, so don't"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,669,// include them here.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,670,ImmutableSet.of(
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,671,"""Object"","
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,672,"""Array"","
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,673,"""RegExp"","
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,674,"""Error"""
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,678,"* Fold ""new Object()"" to ""Object()""."
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,680,private Node tryFoldStandardConstructors(Node n) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,681,Preconditions.checkState(n.getType() == Token.NEW);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,683,// If name normalization has been run then we know that
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,684,// new Object() does in fact refer to what we think it is
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,685,// and not some custom-defined Object().
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,686,if (isASTNormalized()) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,687,if (n.getFirstChild().getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,688,String className = n.getFirstChild().getString();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,689,if (STANDARD_OBJECT_CONSTRUCTORS.contains(className)) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,690,n.setType(Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,691,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,696,return n;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,700,"* Replaces a new Array or Object node with an object literal, unless the"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,701,* call to Array or Object is to a local function with the same name.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,703,private Node tryFoldLiteralConstructor(Node n) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,704,Preconditions.checkArgument(n.getType() == Token.CALL
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,705,|| n.getType() == Token.NEW);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,707,Node constructorNameNode = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,709,Node newLiteralNode = null;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,711,"// We require the AST to be normalized to ensure that, say,"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,712,// Object() really refers to the built-in Object constructor
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,713,// and not a user-defined constructor with the same name.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,715,if (isASTNormalized() && Token.NAME == constructorNameNode.getType()) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,717,String className = constructorNameNode.getString();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,719,"if (""RegExp"".equals(className)) {"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,720,"// ""RegExp(""boo"", ""g"")"" --> /boo/g"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,721,return tryFoldRegularExpressionConstructor(n);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,722,} else {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,723,boolean constructorHasArguments = constructorNameNode.getNext() != null;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,725,if (!constructorHasArguments) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,726,"if (""Array"".equals(className)) {"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,727,"// ""Array()"" --> ""[]"""
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,728,newLiteralNode = new Node(Token.ARRAYLIT);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,729,"} else if (""Object"".equals(className)) {"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,730,"// ""Object()"" --> ""{}"""
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,731,newLiteralNode = new Node(Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,734,if (newLiteralNode != null) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,735,"n.getParent().replaceChild(n, newLiteralNode);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,736,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,737,return newLiteralNode;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,741,return n;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,750,// Only run on normalized AST to make sure RegExp() is actually
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,751,// the RegExp we expect (if the AST has been normalized then
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,752,// other RegExp's will have been renamed to something like RegExp$1)
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,753,if (!isASTNormalized()) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,754,return n;
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,56,iagnosticType.warning(
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,56,DiagnosticType.error(
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,60,static final DiagnosticType UNDEFINED_EXTERN_VAR_ERROR =
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,61,DiagnosticType.error(
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,62,"""JSC_UNDEFINED_EXTERN_VAR_ERROR"","
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,63,"""name {0} is not undefined in the externs."");"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,116,".report(n, UNDEFINED_VAR_ERROR, varName);"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,121,"// The extern checks are stricter, don't report a second error."
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,122,if (!t.getInput().isExtern()) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,123,"t.report(n, UNDEFINED_VAR_ERROR, varName);"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,178,ase Token.GETPROP:
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,189,case Token.GETPROP:
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,190,if (n == parent.getFirstChild()) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,191,Scope scope = t.getScope();
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,192,Scope.Var var = scope.getVar(n.getString());
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,193,if (var == null) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,194,"t.report(n, UNDEFINED_EXTERN_VAR_ERROR, n.getString());"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,197,break;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,43,import com.google.common.annotations.VisibleForTesting;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,346,// PropListItems are immutable so that they can be shared.
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,348,ropListItem next;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,349,nt type;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,350,nt intValue;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,351,bject objectValue;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,350,final PropListItem next;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,351,final int type;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,352,final int intValue;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,353,final Object objectValue;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,355,"PropListItem(int type, int intValue, PropListItem next) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,356,"this(type, intValue, null, next);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,359,"PropListItem(int type, Object objectValue, PropListItem next) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,360,"this(type, 0, objectValue, next);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,363,PropListItem(
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,364,"int type, int intValue, Object objectValue, PropListItem next) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,365,this.type = type;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,366,this.intValue = intValue;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,367,this.objectValue = objectValue;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,368,this.next = next;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,726,rivate PropListItem lookupProperty(int propType) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,744,@VisibleForTesting
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,745,PropListItem lookupProperty(int propType) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,734,rivate PropListItem ensureProperty(int propType) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,735,ropListItem item = lookupProperty(propType);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,736,f (item == null) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,737,tem = new PropListItem();
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,738,tem.type = propType;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,739,tem.next = propListHead;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,740,ropListHead = item;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,753,public void removeProp(int propType) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,754,"PropListItem result = removeProp(propListHead, propType);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,755,if (result != propListHead) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,756,propListHead = result;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,742,eturn item;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,745,ublic void removeProp(int propType) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,746,ropListItem x = propListHead;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,747,f (x != null) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,748,ropListItem prev = null;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,749,hile (x.type != propType) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,750,rev = x;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,751, = x.next;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,752,f (x == null) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,753,eturn;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,756,f (prev == null) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,757,ropListHead = x.next;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,761,* @param item The item to inspect
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,762,* @param propType The property to look for
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,763,"* @return The replacement list if the property was removed, or"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,764,*   'item' otherwise.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,766,"private PropListItem removeProp(PropListItem item, int propType) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,767,if (item == null) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,768,return null;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,769,} else if (item.type == propType) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,770,return item.next;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,771,} else {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,772,"PropListItem result = removeProp(item.next, propType);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,773,if (result != item.next) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,774,return new PropListItem(
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,775,"item.type, item.intValue, item.objectValue, result);"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,759,rev.next = x.next;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,777,return item;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,773,"eturn getIntProp(propType, 0) != 0;"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,791,return getIntProp(propType) != 0;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,776,"ublic int getIntProp(int propType, int defaultValue) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,795,"* Returns the integer value for the property, or 0 if the property"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,796,* is not defined.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,798,public int getIntProp(int propType) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,779,eturn defaultValue;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,801,return 0;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,792,"ublic void putProp(int propType, Object prop) {"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,793,f (prop == null) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,794,emoveProp(propType);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,795, else {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,796,ropListItem item = ensureProperty(propType);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,797,tem.objectValue = prop;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,814,"public void putProp(int propType, Object value) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,815,removeProp(propType);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,816,if (value != null) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,817,"propListHead = new PropListItem(propType, value, propListHead);"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,801,"ublic void putBooleanProp(int propType, boolean prop) {"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,802,"utIntProp(propType, prop ? 1 : 0);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,821,"public void putBooleanProp(int propType, boolean value) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,822,"putIntProp(propType, value ? 1 : 0);"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,805,"ublic void putIntProp(int propType, int prop) {"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,806,ropListItem item = ensureProperty(propType);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,807,tem.intValue = prop;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,825,"public void putIntProp(int propType, int value) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,826,removeProp(propType);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,827,if (value != 0) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,828,"propListHead = new PropListItem(propType, value, propListHead);"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1588,"nt post1 = this.getIntProp(INCRDECR_PROP, 0);"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1589,"nt post2 = node.getIntProp(INCRDECR_PROP, 0);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1610,int post1 = this.getIntProp(INCRDECR_PROP);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1611,int post2 = node.getIntProp(INCRDECR_PROP);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1594,"nt quoted1 = this.getIntProp(QUOTED_PROP, 0);"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1595,"nt quoted2 = node.getIntProp(QUOTED_PROP, 0);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1616,int quoted1 = this.getIntProp(QUOTED_PROP);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1617,int quoted2 = node.getIntProp(QUOTED_PROP);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1841,// PropListItem lists are immutable and can be shared so there is no
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1842,// need to clone them here.
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,40,enableNormalize();
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,41,enableTypeCheck(CheckLevel.WARNING);
False,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,46,"ew TypeCheck(compiler,"
False,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,47,ew SemanticReverseAbstractInterpreter(
False,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,48,"ompiler.getCodingConvention(), compiler.getTypeRegistry()),"
False,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,49,ompiler.getTypeRegistry())
False,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,50,"processForTesting(externs, root);"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,924,"ssertPrint(""1"", ""1"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,925,"ssertPrint(""10"", ""10"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,926,"ssertPrint(""100"", ""100"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,927,"ssertPrint(""1000"", ""1E3"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,928,"ssertPrint(""10000"", ""1E4"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,929,"ssertPrint(""100000"", ""1E5"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,930,"ssertPrint(""-1"", ""-1"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,931,"ssertPrint(""-10"", ""-10"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,932,"ssertPrint(""-100"", ""-100"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,933,"ssertPrint(""-1000"", ""-1E3"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,934,"ssertPrint(""-123412340000"", ""-12341234E4"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,935,"ssertPrint(""1000000000000000000"", ""1E18"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,936,"ssertPrint(""100000.0"", ""1E5"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,937,"ssertPrint(""100000.1"", ""100000.1"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,939,"ssertPrint(""0.000001"", ""1.0E-6"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,924,"assertPrintNumber(""1"", 1);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,925,"assertPrintNumber(""10"", 10);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,926,"assertPrintNumber(""100"", 100);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,927,"assertPrintNumber(""1E3"", 1000);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,928,"assertPrintNumber(""1E4"", 10000);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,929,"assertPrintNumber(""1E5"", 100000);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,930,"assertPrintNumber(""-1"", -1);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,931,"assertPrintNumber(""-10"", -10);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,932,"assertPrintNumber(""-100"", -100);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,933,"assertPrintNumber(""-1E3"", -1000);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,934,"assertPrintNumber(""-12341234E4"", -123412340000L);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,935,"assertPrintNumber(""1E18"", 1000000000000000000L);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,936,"assertPrintNumber(""1E5"", 100000.0);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,937,"assertPrintNumber(""100000.1"", 100000.1);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,939,"assertPrintNumber(""1.0E-6"", 0.000001);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,942,"// Make sure to test as both a String and a Node, because"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,943,// negative numbers do not parse consistently from strings.
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,944,"private void assertPrintNumber(String expected, double number) {"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,945,"assertPrint(String.valueOf(number), expected);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,946,"assertPrintNode(expected, Node.newNumber(number));"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,949,"private void assertPrintNumber(String expected, int number) {"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,950,"assertPrint(String.valueOf(number), expected);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,951,"assertPrintNode(expected, Node.newNumber(number));"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,529,* Verifies that the compiler pass's JS output is the same as its input
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,530,* and (optionally) that an expected warning is issued.
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,532,* @param externs Externs input
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,533,* @param js Input and output
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,534,"* @param diag Expected error or warning, or null if none is expected"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,535,"* @param error true if diag is an error, false if it is a warning"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,537,public void testSame(
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,538,"String externs, String js, DiagnosticType diag, boolean error) {"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,539,if (error) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,540,"test(externs, js, js, diag, null);"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,541,} else {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,542,"test(externs, js, js, null, diag);"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,23,// Externs for builtin constructors
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,24,// Needed for testFoldLiteralConstructors() and testFoldRegExp...()
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,25,private static final String FOLD_CONSTANTS_TEST_EXTERNS =
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,26,"""var Object = function(){};\n"" +"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,27,"""var RegExp = function(a){};\n"" +"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,28,"""var Array = function(a){};\n"";"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,26,"uper("""", compareAsTree);"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,34,"super(FOLD_CONSTANTS_TEST_EXTERNS, compareAsTree);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,30,uper();
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,38,super(FOLD_CONSTANTS_TEST_EXTERNS);
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,75,ew PeepholeRemoveDeadCode());
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,83,"new PeepholeRemoveDeadCode(),"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,84,new PeepholeFoldConstants());
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,121,"void assertResultString(String js, String expected) {"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,122,"assertResultString(js, expected, false);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,114,"oid assertResultString(String js, String expected) {"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,126,"void assertResultString(String js, String expected, boolean normalize) {"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,129,if (normalize) {
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,130,scTest.enableNormalize();
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,131,} else {
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,132,scTest.disableNormalize();
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,471,oldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,490,PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,473,oldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,474,"old(""a=~.5"", ""~.5"", FoldConstants.FRACTIONAL_BITWISE_OPERAND);"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,492,PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,493,"fold(""a=~.5"", ""~.5"", PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,600,oldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,619,PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,602,oldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,621,PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,604,oldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,623,PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,606,oldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,625,PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,608,oldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,609,"old(""1.5 << 0"",  ""1.5<<0"",  FoldConstants.FRACTIONAL_BITWISE_OPERAND);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,610,"old(""1 << .5"",   ""1.5<<0"",  FoldConstants.FRACTIONAL_BITWISE_OPERAND);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,611,"old(""1.5 >>> 0"", ""1.5>>>0"", FoldConstants.FRACTIONAL_BITWISE_OPERAND);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,612,"old(""1 >>> .5"",  ""1.5>>>0"", FoldConstants.FRACTIONAL_BITWISE_OPERAND);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,613,"old(""1.5 >> 0"",  ""1.5>>0"",  FoldConstants.FRACTIONAL_BITWISE_OPERAND);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,614,"old(""1 >> .5"",   ""1.5>>0"",  FoldConstants.FRACTIONAL_BITWISE_OPERAND);"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,627,PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,628,"fold(""1.5 << 0"",  ""1.5<<0"","
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,629,PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,630,"fold(""1 << .5"",   ""1.5<<0"","
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,631,PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,632,"fold(""1.5 >>> 0"", ""1.5>>>0"","
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,633,PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,634,"fold(""1 >>> .5"",  ""1.5>>>0"","
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,635,PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,636,"fold(""1.5 >> 0"",  ""1.5>>0"","
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,637,PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,638,"fold(""1 >> .5"",   ""1.5>>0"","
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,639,PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,723,"old(""x = 1 / 0"", """", FoldConstants.DIVIDE_BY_0_ERROR);"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,748,"fold(""x = 1 / 0"", """", PeepholeFoldConstants.DIVIDE_BY_0_ERROR);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,852,"old(""x = [10, 20][0.5]"", """", FoldConstants.INVALID_GETELEM_INDEX_ERROR);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,853,"old(""x = [10, 20][-1]"",    """", FoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,854,"old(""x = [10, 20][2]"",     """", FoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,877,"fold(""x = [10, 20][0.5]"", """","
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,878,PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,879,"fold(""x = [10, 20][-1]"",    """","
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,880,PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,881,"fold(""x = [10, 20][2]"",     """","
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,882,PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,884,/ Cannot fold
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,885,/ Too few arguments
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,912,enableNormalize();
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,914,// Cannot fold all the way to a literal because there are too few arguments.
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,949,// Shouldn't fold RegExp unnormalized because
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,950,// we can't be sure that RegExp hasn't been redefined
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,951,disableNormalize();
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,953,"foldSame(""x = new RegExp(\""foobar\"")"");"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,924,"ssertResultString(""x=new RegExp(\""\\n\"", \""i\"")"", ""x=/\\n/i"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,959,"assertResultString(""x=new RegExp(\""\\n\"", \""i\"")"", ""x=/\\n/i"", true);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,944,/ Can fold
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,979,enableNormalize();
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,981,// Can fold when normalized
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,989,disableNormalize();
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,990,// Cannot fold above when not normalized
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,991,"foldSame(""x = new Array"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,992,"foldSame(""x = new Array()"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,993,"foldSame(""x = Array()"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,994,"foldSame(""x = new Object"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,995,"foldSame(""x = new Object()"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,996,"foldSame(""x = Object()"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,998,enableNormalize();
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,1253,enableNormalize();
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,102,"estSame(""asdf;"", ""var asdf;"", VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,102,"testSame(""asdf;"", ""var asdf;"","
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,103,"VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR, true);"
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,107,arCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,108,"VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR, true);"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,111,public void testPropReferenceInExterns1() {
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,112,"testSame(""asdf.foo;"", ""var asdf;"","
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,113,"VarCheck.UNDEFINED_EXTERN_VAR_ERROR, true);"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,116,public void testPropReferenceInExterns2() {
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,117,"testSame(""asdf.foo;"", """","
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,118,"VarCheck.UNDEFINED_EXTERN_VAR_ERROR, true);"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,225,public void testBooleanProp() {
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,226,"Node n = getNode(""a"");"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,228,"n.putBooleanProp(Node.IS_CONSTANT_NAME, false);"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,230,assertNull(n.lookupProperty(Node.IS_CONSTANT_NAME));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,231,assertFalse(n.getBooleanProp(Node.IS_CONSTANT_NAME));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,233,"n.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,235,assertNotNull(n.lookupProperty(Node.IS_CONSTANT_NAME));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,236,assertTrue(n.getBooleanProp(Node.IS_CONSTANT_NAME));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,238,"n.putBooleanProp(Node.IS_CONSTANT_NAME, false);"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,240,assertNull(n.lookupProperty(Node.IS_CONSTANT_NAME));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,241,assertFalse(n.getBooleanProp(Node.IS_CONSTANT_NAME));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,244,// Verify that annotations on cloned nodes are properly handled.
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,245,public void testCloneAnnontations2() {
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,246,"Node n = getNode(""a"");"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,247,"n.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,248,"n.putBooleanProp(Node.IS_DISPATCHER, true);"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,249,assertTrue(n.getBooleanProp(Node.IS_CONSTANT_NAME));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,250,assertTrue(n.getBooleanProp(Node.IS_DISPATCHER));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,252,Node nodeClone = n.cloneNode();
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,253,assertTrue(nodeClone.getBooleanProp(Node.IS_CONSTANT_NAME));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,254,assertTrue(nodeClone.getBooleanProp(Node.IS_DISPATCHER));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,256,"n.putBooleanProp(Node.IS_DISPATCHER, false);"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,257,assertTrue(n.getBooleanProp(Node.IS_CONSTANT_NAME));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,258,assertFalse(n.getBooleanProp(Node.IS_DISPATCHER));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,260,assertTrue(nodeClone.getBooleanProp(Node.IS_CONSTANT_NAME));
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,261,assertTrue(nodeClone.getBooleanProp(Node.IS_DISPATCHER));

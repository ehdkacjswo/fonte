is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,22, @version $Revision: 1.12 $ $Date: 2004/04/27 16:42:32 $
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,22,* @version $Revision: 1.13 $ $Date: 2004/06/17 22:33:23 $
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,31,/** Return a new instance of the statistic */
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,34,/**Expected value for  the testArray defined in UnivariateStatisticAbstractTest */
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,37,/** Verify that calling increment() in a loop over testArray results in correct state */
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,50,//TODO:  add test for getN() once type is fixed
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,63,TestUtils.checkSerializedEquality(statistic);
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,73,TestUtils.checkSerializedEquality(statistic);
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,83,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,84,StorelessUnivariateStatistic statistic =
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,85,(StorelessUnivariateStatistic) getUnivariateStatistic();
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,86,StorelessUnivariateStatistic statistic2 = null;
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,88,"assertTrue(""non-null, compared to null"", !statistic.equals(statistic2));"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,89,"assertTrue(""reflexive, non-null"", statistic.equals(statistic));"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,91,int emptyHash = statistic.hashCode();
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,92,statistic2 = (StorelessUnivariateStatistic) getUnivariateStatistic();
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,93,"assertTrue(""empty stats should be equal"", statistic.equals(statistic2));"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,94,"assertEquals(""empty stats should have the same hashcode"","
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,95,"emptyHash, statistic2.hashCode());"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,97,statistic.increment(1d);
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,98,"assertTrue(""reflexive, non-empty"", statistic.equals(statistic));"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,99,"assertTrue(""non-empty, compared to empty"", !statistic.equals(statistic2));"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,100,"assertTrue(""non-empty, compared to empty"", !statistic2.equals(statistic));"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,101,"assertTrue(""non-empty stat should have different hashcode from empty stat"","
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,102,statistic.hashCode() != emptyHash);
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,104,statistic2.increment(1d);
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,105,"assertTrue(""stats with same data should be equal"", statistic.equals(statistic2));"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,106,"assertEquals(""stats with same data should have the same hashcode"","
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,107,"statistic.hashCode(), statistic2.hashCode());"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,109,statistic.increment(Double.POSITIVE_INFINITY);
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,110,"assertTrue(""stats with different n's should not be equal"", !statistic2.equals(statistic));"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,111,"assertTrue(""stats with different n's should have different hashcodes"","
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,112,statistic.hashCode() != statistic2.hashCode());
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,114,statistic2.increment(Double.POSITIVE_INFINITY);
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,115,"assertTrue(""stats with same data should be equal"", statistic.equals(statistic2));"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,116,"assertEquals(""stats with same data should have the same hashcode"","
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,117,"statistic.hashCode(), statistic2.hashCode());"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,119,statistic.clear();
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,120,statistic2.clear();
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,121,"assertTrue(""cleared stats should be equal"", statistic.equals(statistic2));"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,122,"assertEquals(""cleared stats should have thashcode of empty stat"","
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,123,"emptyHash, statistic2.hashCode());"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,124,"assertEquals(""cleared stats should have thashcode of empty stat"","
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,125,"emptyHash, statistic.hashCode());"

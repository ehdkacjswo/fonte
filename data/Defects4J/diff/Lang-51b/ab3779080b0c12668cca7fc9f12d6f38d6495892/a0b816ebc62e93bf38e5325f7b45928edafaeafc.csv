is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,69," @version $Id: Fraction.java,v 1.8 2003/08/04 02:01:53 scolebourne Exp $"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,69,"* @version $Id: Fraction.java,v 1.9 2003/08/13 23:42:17 scolebourne Exp $"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,164,* @throws ArithmeticException if the resulting numerator exceeds
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,165,*  <code>Integer.MAX_VALUE</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,177,double numeratorValue = 0;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,176,umerator = whole * denominator - numerator;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,179,numeratorValue = (double) whole * denominator - numerator;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,178,umerator = whole * denominator + numerator;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,181,numeratorValue = (double) whole * denominator + numerator;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,180,"eturn new Fraction(numerator, denominator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,183,if (Math.abs(numeratorValue) > Integer.MAX_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,184,"throw new ArithmeticException(""Numerator too large to represent as an Integer."");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,186,"return new Fraction((int) numeratorValue, denominator);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,202,"nt gcd = greatestCommonDenominator(Math.abs(numerator), denominator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,208,"int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,209, <p>This method uses the continued fraction algorithm.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,215,"* <p>This method uses the <a href=""http://archives.math.utk.edu/articles/atuyl/confrac/"">"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,216,"*  continued fraction algorithm</a>, computing a maximum of"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,217,"*  25 convergents and bounding the denominator by 10,000.</p>"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,213, @throws ArithmeticException if the value is infinite or <code>NaN</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,221,* @throws ArithmeticException if <code>|value| > Integer.MAX_VALUE</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,222,*  or <code>value = NaN</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,224,* @throws ArithmeticException if the the algorithm does not converge
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,217,f (Double.isInfinite(value) || Double.isNaN(value)) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,218,"hrow new ArithmeticException(""The value must not be infinite or NaN"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,229,if (value  > Integer.MAX_VALUE || Double.isNaN(value)) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,230,throw new ArithmeticException
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,231,"(""The value must not be greater than Integer.MAX_VALUE or NaN"");"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,225,/ http://archives.math.utk.edu/articles/atuyl/confrac/
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,433,"nt gcd = greatestCommonDenominator(Math.abs(numerator), denominator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,443,"int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,486, is zero or a new fraction instance raised to the appropriate power
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,496,* is zero (even if the fraction equals ZERO) or a new fraction instance
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,497,* raised to the appropriate power
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,498,* @throws ArithmeticException if the resulting numerator or denominator exceeds
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,499,*  <code>Integer.MAX_VALUE</code>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,493, else if (power < 0) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,494,"eturn getFraction((int) Math.pow(denominator, -power), (int) Math.pow(numerator, -power));"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,506,} else {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,507,"double denominatorValue = Math.pow(denominator, power);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,508,"double numeratorValue = Math.pow(numerator, power);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,509,if (numeratorValue > Integer.MAX_VALUE || denominatorValue > Integer.MAX_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,510,"throw new ArithmeticException(""Integer overflow"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,512,if (power < 0) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,513,"return getFraction((int) Math.pow(denominator, -power),"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,514,"(int) Math.pow(numerator, -power));"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,516,"return getFraction((int) Math.pow(numerator, power),"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,517,"(int) Math.pow(denominator, power));"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,496,"eturn getFraction((int) Math.pow(numerator, power), (int) Math.pow(denominator, power));"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,500, <p>Gets the greatest common denominator of two numbers.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,522,* <p>Gets the greatest common divisor of two numbers.</p>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,504," @return the greatest common denominator, never zero"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,526,"* @return the greatest common divisor, never zero"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,506,"rivate static int greatestCommonDenominator(int number1, int number2) {"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,528,"private static int greatestCommonDivisor(int number1, int number2) {"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,520," <p>Adds the value of this fraction to another, returning the result.</p>"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,522, <p>The implementation spots common cases of zero numerators and equal
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,523," denominators. Otherwise, it uses <code>(a/b) + (c/d) = (a*d + b*c) / (b*d)</code>"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,524, and then reduces the result.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,542,"* <p>Adds the value of this fraction to another, returning the result in"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,543,* reduced form.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,548,* @throws ArithmeticException if the resulting numerator or denominator exceeds
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,549,*  <code>Integer.MAX_VALUE</code>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,540,f (denominator == fraction.denominator) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,541,"eturn getReducedFraction(numerator + fraction.numerator, denominator);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,543,eturn getReducedFraction(
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,544,"umerator * fraction.denominator + denominator * fraction.numerator,"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,545,enominator * fraction.denominator
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,561,// Compute lcd explicitly to limit overflow
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,562,"int gcd = greatestCommonDivisor(Math.abs(fraction.denominator), Math.abs(denominator));"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,563,int thisResidue = denominator/gcd;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,564,int thatResidue = fraction.denominator/gcd;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,565,double denominatorValue = Math.abs((double) gcd * thisResidue * thatResidue);
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,566,double numeratorValue = (double) numerator * thatResidue + fraction.numerator * thisResidue;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,567,if (Math.abs(numeratorValue) > Integer.MAX_VALUE ||
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,568,Math.abs(denominatorValue) > Integer.MAX_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,569,"throw new ArithmeticException(""Integer overflow"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,571,"return Fraction.getReducedFraction((int) numeratorValue, (int) denominatorValue);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,551, returning the result.</p>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,553, <p>The implementation spots common cases of zero numerators and equal
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,554," denominators. Otherwise, it uses <code>(a/b) - (c/d) = (a*d - b*c) / (b*d)</code>"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,555, and then reduces the result.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,576,* returning the result in reduced form.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,581,* @throws ArithmeticException if the resulting numerator or denominator exceeds
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,582,*  <code>Integer.MAX_VALUE</code>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,565,f (numerator == 0) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,566,eturn fraction.negate();
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,568,f (fraction.numerator == 0) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,569,eturn this;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,571,f (denominator == fraction.denominator) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,572,"eturn getReducedFraction(numerator - fraction.numerator, denominator);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,574,eturn getReducedFraction(
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,575,"umerator * fraction.denominator - denominator * fraction.numerator,"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,576,enominator * fraction.denominator
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,588,return add(fraction.negate());
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,581," <p>Multiplies the value of this fraction by another, returning the result.</p>"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,583, <p>The implementation uses <code>(a/b)*(c/d) = (a*c)/(b*d)</code>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,584, and then reduces the result.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,592,"* <p>Multiplies the value of this fraction by another, returning the result"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,593,* in reduced form.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,598,* @throws ArithmeticException if the resulting numerator or denominator exceeds
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,599,*  <code>Integer.MAX_VALUE</code>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,597,eturn getReducedFraction(
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,598,"umerator * fraction.numerator,"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,599,enominator * fraction.denominator
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,608,double numeratorValue = (double) numerator * fraction.numerator;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,609,double denominatorValue = (double) denominator * fraction.denominator;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,610,if (Math.abs(numeratorValue) > Integer.MAX_VALUE ||
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,611,Math.abs(denominatorValue) > Integer.MAX_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,612,"throw new ArithmeticException(""Integer overflow"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,614,"return getReducedFraction((int) numeratorValue, (int) denominatorValue);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,604," <p>Divide the value of this fraction by another, returning the result.</p>"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,606, <p>The implementation uses <code>(a/b)/(c/d) = a/b * d/c = (a*d)/(b*c)</code>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,607, and then reduces the result.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,618,"* <p>Divide the value of this fraction by another, returning the result"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,619,* in reduced form.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,625,* @throws ArithmeticException if the resulting numerator or denominator exceeds
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,626,*  <code>Integer.MAX_VALUE</code>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,624,eturn getReducedFraction(
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,625,"umerator * fraction.denominator,"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,626,enominator * fraction.numerator
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,638,double numeratorValue = (double) numerator * fraction.denominator;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,639,double denominatorValue = (double) denominator * fraction.numerator;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,640,if (Math.abs(numeratorValue) > Integer.MAX_VALUE ||
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,641,Math.abs(denominatorValue) > Integer.MAX_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,642,"throw new ArithmeticException(""Integer overflow"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,644,"return getReducedFraction((int) numeratorValue, (int) denominatorValue);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,671," @return -ve if this is less, 0 if equal, +ve if greater"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,688,"* @return -1 if this is less, 0 if equal, +1 if greater"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,63," @version $Id: FractionTest.java,v 1.3 2003/08/04 02:01:53 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,63,"* @version $Id: FractionTest.java,v 1.4 2003/08/13 23:42:17 scolebourne Exp $"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,67,rivate static final int SKIP = 17;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,67,private static final int SKIP = 53;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,168,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,173,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,178,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,206,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,211,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,216,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,226,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,231,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,236,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,242,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,247,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,252,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,253,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,255,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,256,"f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,257,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,258,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,260,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,261,"f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,262,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,304,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,309,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,314,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,344,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,349,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,354,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,355,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,357,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,358,f = Fraction.getFraction((double) Integer.MAX_VALUE + 1);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,359,"fail(""expecting ArithmeticException"");"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,380,/ save time by skipping some tests!
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,413,// save time by skipping some tests!  (
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,432,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,460,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,461,"f = Fraction.getFraction(""2147483648""); // too big"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,462,"fail(""Expecting NumberFormatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,463,} catch (NumberFormatException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,491,"fail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,496,"fail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,501,"fail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,506,"fail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,511,"fail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,516,"fail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,549,"fail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,554,"fail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,559,"fail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,564,"fail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,679,f = Fraction.getFraction(Integer.MAX_VALUE);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,680,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,681,f = f.pow(2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,682,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,683,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,715,"f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,716,f2 = Fraction.ONE;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,717,f = f1.add(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,718,"assertEquals(Integer.MAX_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,719,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,727,"f1 = Fraction.getFraction(3, 8);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,728,"f2 = Fraction.getFraction(1, 6);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,729,f = f1.add(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,730,"assertEquals(13, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,731,"assertEquals(24, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,742,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,745,"f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,746,f2 = Fraction.ONE;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,747,f = f1.add(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,748,"assertEquals(Integer.MAX_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,749,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,751,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,752,f = f.add(Fraction.ONE); // should overflow
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,753,"fail(""expecting ArithmeticException but got: "" + f.toString());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,754,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,756,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,757,"f= Fraction.getFraction(-Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,758,f = f.add(f);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,759,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,760,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,818,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,821,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,822,"f1 = Fraction.getFraction(1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,823,"f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,824,f = f1.subtract(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,825,"fail(""expecting ArithmeticException"");  //should overflow"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,826,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,858,"f1 = Fraction.getFraction(2, 7);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,859,f2 = Fraction.ONE;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,860,f = f1.multiplyBy(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,861,"assertEquals(2, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,862,"assertEquals(7, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,866,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,869,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,870,"f1 = Fraction.getFraction(1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,871,f = f1.multiplyBy(f1);  // should overflow
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,872,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,873,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,875,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,876,"f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,877,f = f1.multiplyBy(f1);  // should overflow
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,878,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,879,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,897,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,905,"f1 = Fraction.getFraction(2, 7);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,906,f2 = Fraction.ONE;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,907,f = f1.divideBy(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,908,"assertEquals(2, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,909,"assertEquals(7, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,911,"f1 = Fraction.getFraction(1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,912,f = f1.divideBy(f1);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,913,"assertEquals(1, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,914,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,918,"fail(""IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,921,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,922,"f1 = Fraction.getFraction(1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,923,f = f1.divideBy(f1.invert());  // should overflow
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,924,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,925,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,926,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,927,"f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,928,f = f1.divideBy(f1.invert());  // should overflow
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,929,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,930,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,976,"fail(""expecting NullPointerException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,981,"fail(""expecting ClassCastException"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,7,* You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,12,* governing permissions and limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,14,package org.apache.commons.math3.optimization.general;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,16,import java.io.IOException;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,17,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,19,import junit.framework.Assert;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,21,import org.apache.commons.math3.optimization.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,22,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,25,public class AbstractLeastSquaresOptimizerTest {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,27,public static AbstractLeastSquaresOptimizer createOptimizer() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,28,return new AbstractLeastSquaresOptimizer() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,30,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,31,protected PointVectorValuePair doOptimize() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,32,updateResidualsAndCost();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,33,updateJacobian();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,34,return null;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,39,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,40,public void testGetChiSquare() throws IOException {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,41,final StatisticalReferenceDataset dataset;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,42,dataset = StatisticalReferenceDatasetFactory.createKirby2();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,43,final AbstractLeastSquaresOptimizer optimizer;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,44,optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,45,final double[] a = dataset.getParameters();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,46,final double[] y = dataset.getData()[1];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,47,final double[] w = new double[y.length];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,48,"Arrays.fill(w, 1.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,50,"optimizer.optimize(1, dataset.getLeastSquaresProblem(), y, w, a);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,51,final double expected = dataset.getResidualSumOfSquares();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,52,final double actual = optimizer.getChiSquare();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,53,"Assert.assertEquals(dataset.getName(), expected, actual,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,54,1E-11 * expected);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,57,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,58,public void testGetRMS() throws IOException {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,59,final StatisticalReferenceDataset dataset;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,60,dataset = StatisticalReferenceDatasetFactory.createKirby2();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,61,final AbstractLeastSquaresOptimizer optimizer;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,62,optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,63,final double[] a = dataset.getParameters();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,64,final double[] y = dataset.getData()[1];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,65,final double[] w = new double[y.length];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,66,"Arrays.fill(w, 1.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,68,"optimizer.optimize(1, dataset.getLeastSquaresProblem(), y, w, a);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,69,final double expected = FastMath
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,70,.sqrt(dataset.getResidualSumOfSquares() /
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,71,dataset.getNumObservations());
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,72,final double actual = optimizer.getRMS();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,73,"Assert.assertEquals(dataset.getName(), expected, actual,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,74,1E-11 * expected);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,77,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,78,public void testGuessParametersErrors() throws IOException {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,79,final StatisticalReferenceDataset dataset;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,80,dataset = StatisticalReferenceDatasetFactory.createKirby2();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,81,final AbstractLeastSquaresOptimizer optimizer;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,82,optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,83,final double[] a = dataset.getParameters();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,84,final double[] y = dataset.getData()[1];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,85,final double[] w = new double[y.length];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,86,"Arrays.fill(w, 1.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,88,"optimizer.optimize(1, dataset.getLeastSquaresProblem(), y, w, a);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,89,final double[] actual = optimizer.guessParametersErrors();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,90,final double[] expected = dataset.getParametersStandardDeviations();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,91,for (int i = 0; i < actual.length; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,92,"Assert.assertEquals(dataset.getName() + "", parameter #"" + i,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java,93,"actual[i], expected[i], 1E-8 * expected[i]);"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,17,package org.apache.commons.math3.optimization.general;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,19,import java.io.BufferedReader;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,20,import java.io.IOException;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,21,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,23,import org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,24,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,25,import org.apache.commons.math3.util.MathArrays;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,28,* This class gives access to the statistical reference datasets provided by the
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,29,* NIST (available
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,30,"* <a href=""http://www.itl.nist.gov/div898/strd/general/dataarchive.html"">here</a>)."
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,31,* Instances of this class can be created by invocation of the
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,32,* {@link StatisticalReferenceDatasetFactory}.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,34,public abstract class StatisticalReferenceDataset {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,36,/** The name of this dataset. */
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,37,private final String name;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,39,/** The total number of observations (data points). */
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,40,private final int numObservations;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,42,/** The total number of parameters. */
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,43,private final int numParameters;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,45,/** The total number of starting points for the optimizations. */
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,46,private final int numStartingPoints;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,48,/** The values of the predictor. */
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,49,private final double[] x;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,51,/** The values of the response. */
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,52,private final double[] y;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,55,* The starting values. {@code startingValues[j][i]} is the value of the
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,56,* {@code i}-th parameter in the {@code j}-th set of starting values.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,58,private final double[][] startingValues;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,60,/** The certified values of the parameters. */
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,61,private final double[] a;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,63,/** The certified values of the standard deviation of the parameters. */
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,64,private final double[] sigA;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,66,/** The certified value of the residual sum of squares. */
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,67,private double residualSumOfSquares;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,69,/** The least-squares problem. */
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,70,private final DifferentiableMultivariateVectorFunction problem;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,73,* Creates a new instance of this class from the specified data file. The
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,74,* file must follow the StRD format.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,76,* @param in the data file
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,77,* @throws IOException if an I/O error occurs
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,79,public StatisticalReferenceDataset(final BufferedReader in)
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,80,throws IOException {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,82,final ArrayList<String> lines = new ArrayList<String>();
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,83,for (String line = in.readLine(); line != null; line = in.readLine()) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,84,lines.add(line);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,86,"int[] index = findLineNumbers(""Data"", lines);"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,87,if (index == null) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,88,"throw new AssertionError(""could not find line indices for data"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,90,this.numObservations = index[1] - index[0] + 1;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,91,this.x = new double[this.numObservations];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,92,this.y = new double[this.numObservations];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,93,for (int i = 0; i < this.numObservations; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,94,final String line = lines.get(index[0] + i - 1);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,95,"final String[] tokens = line.trim().split("" ++"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,96,// Data columns are in reverse order!!!
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,97,this.y[i] = Double.parseDouble(tokens[0]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,98,this.x[i] = Double.parseDouble(tokens[1]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,101,"index = findLineNumbers(""Starting Values"", lines);"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,102,if (index == null) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,103,throw new AssertionError(
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,104,"""could not find line indices for starting values"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,106,this.numParameters = index[1] - index[0] + 1;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,108,double[][] start = null;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,109,this.a = new double[numParameters];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,110,this.sigA = new double[numParameters];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,111,for (int i = 0; i < numParameters; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,112,final String line = lines.get(index[0] + i - 1);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,113,"final String[] tokens = line.trim().split("" ++"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,114,if (start == null) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,115,start = new double[tokens.length - 4][numParameters];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,117,for (int j = 2; j < tokens.length - 2; j++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,118,start[j - 2][i] = Double.parseDouble(tokens[j]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,120,this.a[i] = Double.parseDouble(tokens[tokens.length - 2]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,121,this.sigA[i] = Double.parseDouble(tokens[tokens.length - 1]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,123,if (start == null) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,124,"throw new IOException(""could not find starting values"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,126,this.numStartingPoints = start.length;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,127,this.startingValues = start;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,129,double dummyDouble = Double.NaN;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,130,String dummyString = null;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,131,for (String line : lines) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,132,"if (line.contains(""Dataset Name:"")) {"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,133,dummyString = line
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,134,".substring(line.indexOf(""Dataset Name:"") + 13,"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,135,"line.indexOf(""("")).trim();"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,137,"if (line.contains(""Residual Sum of Squares"")) {"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,138,"final String[] tokens = line.split("" ++"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,139,dummyDouble = Double.parseDouble(tokens[4].trim());
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,142,if (Double.isNaN(dummyDouble)) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,143,throw new IOException(
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,144,"""could not find certified value of residual sum of squares"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,146,this.residualSumOfSquares = dummyDouble;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,148,if (dummyString == null) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,149,"throw new IOException(""could not find dataset name"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,151,this.name = dummyString;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,153,this.problem = new DifferentiableMultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,154,public double[] value(final double[] a) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,155,final int n = getNumObservations();
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,156,final double[] yhat = new double[n];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,157,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,158,"yhat[i] = getModelValue(getX(i), a);"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,160,return yhat;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,163,public MultivariateMatrixFunction jacobian() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,164,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,165,public double[][] value(final double[] a)
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,166,throws IllegalArgumentException {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,167,final int n = getNumObservations();
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,168,final double[][] j = new double[n][];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,169,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,170,"j[i] = getModelDerivatives(getX(i), a);"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,172,return j;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,180,* Returns the name of this dataset.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,182,* @return the name of the dataset
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,184,public String getName() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,185,return name;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,189,* Returns the total number of observations (data points).
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,191,* @return the number of observations
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,193,public int getNumObservations() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,194,return numObservations;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,198,* Returns a copy of the data arrays. The data is laid out as follows <li>
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,199,"* {@code data[0][i] = x[i]},</li> <li>{@code data[1][i] = y[i]},</li>"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,201,* @return the array of data points.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,203,public double[][] getData() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,204,return new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,205,"MathArrays.copyOf(x), MathArrays.copyOf(y)"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,210,* Returns the x-value of the {@code i}-th data point.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,212,* @param i the index of the data point
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,213,* @return the x-value
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,215,public double getX(final int i) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,216,return x[i];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,220,* Returns the y-value of the {@code i}-th data point.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,222,* @param i the index of the data point
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,223,* @return the y-value
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,225,public double getY(final int i) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,226,return y[i];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,230,* Returns the total number of parameters.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,232,* @return the number of parameters
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,234,public int getNumParameters() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,235,return numParameters;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,239,* Returns the certified values of the paramters.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,241,* @return the values of the parameters
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,243,public double[] getParameters() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,244,return MathArrays.copyOf(a);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,248,* Returns the certified value of the {@code i}-th parameter.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,250,* @param i the index of the parameter
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,251,* @return the value of the parameter
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,253,public double getParameter(final int i) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,254,return a[i];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,258,* Reurns the certified values of the standard deviations of the parameters.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,260,* @return the standard deviations of the parameters
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,262,public double[] getParametersStandardDeviations() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,263,return MathArrays.copyOf(sigA);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,267,* Returns the certified value of the standard deviation of the {@code i}-th
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,268,* parameter.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,270,* @param i the index of the parameter
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,271,* @return the standard deviation of the parameter
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,273,public double getParameterStandardDeviation(final int i) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,274,return sigA[i];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,278,* Returns the certified value of the residual sum of squares.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,280,* @return the residual sum of squares
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,282,public double getResidualSumOfSquares() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,283,return residualSumOfSquares;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,287,* Returns the total number of starting points (initial guesses for the
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,288,* optimization process).
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,290,* @return the number of starting points
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,292,public int getNumStartingPoints() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,293,return numStartingPoints;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,297,* Returns the {@code i}-th set of initial values of the parameters.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,299,* @param i the index of the starting point
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,300,* @return the starting point
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,302,public double[] getStartingPoint(final int i) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,303,return MathArrays.copyOf(startingValues[i]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,307,* Returns the least-squares problem corresponding to fitting the model to
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,308,* the specified data.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,310,* @return the least-squares problem
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,312,public DifferentiableMultivariateVectorFunction getLeastSquaresProblem() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,313,return problem;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,317,* Returns the value of the model for the specified values of the predictor
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,318,* variable and the parameters.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,320,* @param x the predictor variable
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,321,* @param a the parameters
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,322,* @return the value of the model
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,324,"public abstract double getModelValue(final double x, final double[] a);"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,327,* Returns the values of the partial derivatives of the model with respect
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,328,* to the parameters.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,330,* @param x the predictor variable
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,331,* @param a the parameters
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,332,* @return the partial derivatives
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,334,"public abstract double[] getModelDerivatives(final double x,"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,335,final double[] a);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,338,* <p>
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,339,"* Parses the specified text lines, and extracts the indices of the first"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,340,* and last lines of the data defined by the specified {@code key}. This key
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,341,* must be one of
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,342,* </p>
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,343,* <ul>
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,344,"* <li>{@code ""Starting Values""},</li>"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,345,"* <li>{@code ""Certified Values""},</li>"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,346,"* <li>{@code ""Data""}.</li>"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,347,* </ul>
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,348,* <p>
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,349,"* In the NIST data files, the line indices are separated by the keywords"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,350,"* {@code ""lines""} and {@code ""to""}."
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,351,* </p>
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,353,* @param lines the line of text to be parsed
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,354,* @return an array of two {@code int}s. First value is the index of the
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,355,"*         first line, second value is the index of the last line."
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,356,*         {@code null} if the line could not be parsed.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,358,"private static int[] findLineNumbers(final String key,"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,359,final Iterable<String> lines) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,360,for (String text : lines) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,361,"boolean flag = text.contains(key) && text.contains(""lines"") &&"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,362,"text.contains(""to"") && text.contains("")"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,363,if (flag) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,364,final int[] numbers = new int[2];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,365,"final String from = text.substring(text.indexOf(""lines"") + 5,"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,366,"text.indexOf(""to""));"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,367,numbers[0] = Integer.parseInt(from.trim());
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,368,"final String to = text.substring(text.indexOf(""to"") + 2,"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,369,"text.indexOf("")""));"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,370,numbers[1] = Integer.parseInt(to.trim());
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,371,return numbers;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java,374,return null;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,17,package org.apache.commons.math3.optimization.general;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,19,import java.io.BufferedReader;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,20,import java.io.IOException;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,21,import java.io.InputStream;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,22,import java.io.InputStreamReader;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,24,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,27,* A factory to create instances of {@link StatisticalReferenceDataset} from
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,28,* available resources.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,30,public class StatisticalReferenceDatasetFactory {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,32,private StatisticalReferenceDatasetFactory() {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,33,// Do nothing
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,37,* Creates a new buffered reader from the specified resource name.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,39,* @param name the name of the resource
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,40,* @return a buffered reader
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,41,* @throws IOException if an I/O error occured
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,43,public static BufferedReader createBufferedReaderFromResource(final String name)
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,44,throws IOException {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,45,final InputStream resourceAsStream;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,46,resourceAsStream = StatisticalReferenceDatasetFactory.class
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,47,.getResourceAsStream(name);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,48,if (resourceAsStream == null) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,49,"throw new IOException(""could not find resource "" + name);"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,51,return new BufferedReader(new InputStreamReader(resourceAsStream));
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,54,public static StatisticalReferenceDataset createKirby2()
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,55,throws IOException {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,56,"final BufferedReader in = createBufferedReaderFromResource(""Kirby2.dat"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,57,StatisticalReferenceDataset dataset = null;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,58,try {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,59,dataset = new StatisticalReferenceDataset(in) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,61,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,62,"public double getModelValue(final double x, final double[] a) {"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,63,final double p = a[0] + x * (a[1] + x * a[2]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,64,final double q = 1.0 + x * (a[3] + x * a[4]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,65,return p / q;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,68,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,69,"public double[] getModelDerivatives(final double x,"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,70,final double[] a) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,71,final double[] dy = new double[5];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,72,final double p = a[0] + x * (a[1] + x * a[2]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,73,final double q = 1.0 + x * (a[3] + x * a[4]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,74,dy[0] = 1.0 / q;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,75,dy[1] = x / q;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,76,dy[2] = x * dy[1];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,77,dy[3] = -x * p / (q * q);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,78,dy[4] = x * dy[3];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,79,return dy;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,82,} finally {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,83,in.close();
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,85,return dataset;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,88,public static StatisticalReferenceDataset createHahn1()
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,89,throws IOException {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,90,"final BufferedReader in = createBufferedReaderFromResource(""Hahn1.dat"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,91,StatisticalReferenceDataset dataset = null;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,92,try {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,93,dataset = new StatisticalReferenceDataset(in) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,95,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,96,"public double getModelValue(final double x, final double[] a) {"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,97,final double p = a[0] + x * (a[1] + x * (a[2] + x * a[3]));
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,98,final double q = 1.0 + x * (a[4] + x * (a[5] + x * a[6]));
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,99,return p / q;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,102,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,103,"public double[] getModelDerivatives(final double x,"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,104,final double[] a) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,105,final double[] dy = new double[7];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,106,final double p = a[0] + x * (a[1] + x * (a[2] + x * a[3]));
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,107,final double q = 1.0 + x * (a[4] + x * (a[5] + x * a[6]));
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,108,dy[0] = 1.0 / q;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,109,dy[1] = x * dy[0];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,110,dy[2] = x * dy[1];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,111,dy[3] = x * dy[2];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,112,dy[4] = -x * p / (q * q);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,113,dy[5] = x * dy[4];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,114,dy[6] = x * dy[5];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,115,return dy;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,118,} finally {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,119,in.close();
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,121,return dataset;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,124,public static StatisticalReferenceDataset createMGH17()
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,125,throws IOException {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,126,"final BufferedReader in = createBufferedReaderFromResource(""MGH17.dat"");"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,127,StatisticalReferenceDataset dataset = null;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,128,try {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,129,dataset = new StatisticalReferenceDataset(in) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,131,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,132,"public double getModelValue(final double x, final double[] a) {"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,133,return a[0] + a[1] * FastMath.exp(-a[3] * x) + a[2] *
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,134,FastMath.exp(-a[4] * x);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,137,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,138,"public double[] getModelDerivatives(final double x,"
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,139,final double[] a) {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,140,final double[] dy = new double[5];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,141,dy[0] = 1.0;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,142,dy[1] = FastMath.exp(-x * a[3]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,143,dy[2] = FastMath.exp(-x * a[4]);
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,144,dy[3] = -x * a[1] * dy[1];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,145,dy[4] = -x * a[2] * dy[2];
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,146,return dy;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,149,} finally {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,150,in.close();
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,152,return dataset;
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,156,* Returns an array with all available reference datasets.
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,158,* @return the array of datasets
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,159,* @throws IOException if an I/O error occurs
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,161,public StatisticalReferenceDataset[] createAll()
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,162,throws IOException {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,163,return new StatisticalReferenceDataset[] {
True,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java,164,"createKirby2(), createMGH17()"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,80,"CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,167,"NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,224,"NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,265,"OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,17,package org.apache.commons.math.geometry.euclidean.oneD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,20,/** This class represents a 1D interval.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,21,* @see IntervalsSet
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,22,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,24,public class Interval {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,26,/** The lower bound of the interval. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,27,private final double lower;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,29,/** The upper bound of the interval. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,30,private final double upper;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,32,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,33,* @param lower lower bound of the interval
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,34,* @param upper upper bound of the interval
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,36,"public Interval(final double lower, final double upper) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,37,this.lower = lower;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,38,this.upper = upper;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,41,/** Get the lower bound of the interval.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,42,* @return lower bound of the interval
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,44,public double getLower() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,45,return lower;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,48,/** Get the upper bound of the interval.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,49,* @return upper bound of the interval
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,51,public double getUpper() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,52,return upper;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,55,/** Get the length of the interval.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,56,* @return length of the interval
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,58,public double getLength() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,59,return upper - lower;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,62,/** Get the midpoint of the interval.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,63,* @return midpoint of the interval
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,65,public double getMidPoint() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Interval.java,66,return 0.5 * (lower + upper);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,17,package org.apache.commons.math.geometry.euclidean.oneD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,20,import java.util.Collection;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,21,import java.util.List;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,23,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,24,import org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,25,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,27,/** This class represents a 1D region: a set of intervals.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,28,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,30,public class IntervalsSet extends Region {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,32,/** Build an intervals set representing the whole real line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,34,public IntervalsSet() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,35,super();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,38,/** Build an intervals set corresponding to a single interval.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,39,"* @param lower lower bound of the interval, must be lesser or equal"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,40,* to {@code upper} (may be {@code Double.NEGATIVE_INFINITY})
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,41,"* @param upper upper bound of the interval, must be greater or equal"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,42,* to {@code lower} (may be {@code Double.POSITIVE_INFINITY})
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,44,"public IntervalsSet(final double lower, final double upper) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,45,"super(buildTree(lower, upper));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,48,/** Build an intervals set from an inside/outside BSP tree.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,49,* <p>The leaf nodes of the BSP tree <em>must</em> have a
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,50,* {@code Boolean} attribute representing the inside status of
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,51,"* the corresponding cell (true for inside cells, false for outside"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,52,"* cells). In order to avoid building too many small objects, it is"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,53,* recommended to use the predefined constants
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,54,* {@code Boolean.TRUE} and {@code Boolean.FALSE}</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,55,* @param tree inside/outside BSP tree representing the intervals set
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,57,public IntervalsSet(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,58,super(tree);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,61,/** Build an intervals set from a Boundary REPresentation (B-rep).
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,62,* <p>The boundary is provided as a collection of {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,63,* SubHyperplane sub-hyperplanes}. Each sub-hyperplane has the
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,64,* interior part of the region on its minus side and the exterior on
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,65,* its plus side.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,66,"* <p>The boundary elements can be in any order, and can form"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,67,* several non-connected sets (like for example polygons with holes
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,68,* or a set of disjoints polyhedrons considered as a whole). In
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,69,"* fact, the elements do not even need to be connected together"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,70,"* (their topological connections are not used here). However, if the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,71,* boundary does not really separate an inside open from an outside
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,72,"* open (open having here its topological meaning), then subsequent"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,73,* calls to the {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,74,* Region#checkPoint(org.apache.commons.math.geometry.partitioning.Point)
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,75,* checkPoint} method will not be meaningful anymore.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,76,"* <p>If the boundary is empty, the region will represent the whole"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,77,* space.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,78,* @param boundary collection of boundary elements
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,80,public IntervalsSet(final Collection<SubHyperplane> boundary) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,81,super(boundary);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,84,/** Build an inside/outside tree representing a single interval.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,85,"* @param lower lower bound of the interval, must be lesser or equal"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,86,* to {@code upper} (may be {@code Double.NEGATIVE_INFINITY})
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,87,"* @param upper upper bound of the interval, must be greater or equal"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,88,* to {@code lower} (may be {@code Double.POSITIVE_INFINITY})
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,89,* @return the built tree
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,91,"private static BSPTree buildTree(final double lower, final double upper) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,92,if (Double.isInfinite(lower) && (lower < 0)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,93,if (Double.isInfinite(upper) && (upper > 0)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,94,// the tree must cover the whole real line
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,95,return new BSPTree(Boolean.TRUE);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,97,// the tree must be open on the negative infinity side
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,98,final SubHyperplane upperCut =
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,99,"new SubHyperplane(new OrientedPoint(new Point1D(upper), true));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,100,"return new BSPTree(upperCut,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,101,"new BSPTree(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,102,"new BSPTree(Boolean.TRUE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,103,null);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,105,final SubHyperplane lowerCut =
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,106,"new SubHyperplane(new OrientedPoint(new Point1D(lower), false));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,107,if (Double.isInfinite(upper) && (upper > 0)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,108,// the tree must be open on the positive infinity side
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,109,"return new BSPTree(lowerCut,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,110,"new BSPTree(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,111,"new BSPTree(Boolean.TRUE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,112,null);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,115,// the tree must be bounded on the two sides
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,116,final SubHyperplane upperCut =
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,117,"new SubHyperplane(new OrientedPoint(new Point1D(upper), true));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,118,"return new BSPTree(lowerCut,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,119,"new BSPTree(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,120,"new BSPTree(upperCut,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,121,"new BSPTree(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,122,"new BSPTree(Boolean.TRUE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,123,"null),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,124,null);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,128,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,129,public Region buildNew(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,130,return new IntervalsSet(tree);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,133,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,134,protected void computeGeometricalProperties() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,135,if (getTree(false).getCut() == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,136,setBarycenter(Point1D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,137,setSize(((Boolean) getTree(false).getAttribute()) ? Double.POSITIVE_INFINITY : 0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,138,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,139,double size = 0.0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,140,double sum = 0.0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,141,for (final Interval interval : asList()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,142,size += interval.getLength();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,143,sum  += interval.getLength() * interval.getMidPoint();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,145,setSize(size);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,146,setBarycenter(Double.isInfinite(size) ? Point1D.UNDEFINED : new Point1D(sum / size));
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,150,/** Get the lowest value belonging to the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,151,* @return lowest value belonging to the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,152,* ({@code Double.NEGATIVE_INFINITY} if the instance doesn't
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,153,"* have any low bound, {@code Double.POSITIVE_INFINITY} if the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,154,* instance is empty)
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,156,public double getInf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,157,BSPTree node = getTree(false);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,158,double  inf  = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,159,while (node.getCut() != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,160,final OrientedPoint op = (OrientedPoint) node.getCut().getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,161,inf  = op.getLocation().getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,162,node = op.isDirect() ? node.getMinus() : node.getPlus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,164,return ((Boolean) node.getAttribute()) ? Double.NEGATIVE_INFINITY : inf;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,167,/** Get the highest value belonging to the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,168,* @return highest value belonging to the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,169,* ({@code Double.POSITIVE_INFINITY} if the instance doesn't
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,170,"* have any high bound, {@code Double.NEGATIVE_INFINITY} if the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,171,* instance is empty)
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,173,public double getSup() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,174,BSPTree node = getTree(false);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,175,double  sup  = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,176,while (node.getCut() != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,177,final OrientedPoint op = (OrientedPoint) node.getCut().getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,178,sup  = op.getLocation().getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,179,node = op.isDirect() ? node.getPlus() : node.getMinus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,181,return ((Boolean) node.getAttribute()) ? Double.POSITIVE_INFINITY : sup;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,184,/** Build an ordered list of intervals representing the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,185,* <p>This method builds this intervals set as an ordered list of
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,186,* {@link Interval Interval} elements. If the intervals set has no
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,187,"* lower limit, the first interval will have its low bound equal to"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,188,* {@code Double.NEGATIVE_INFINITY}. If the intervals set has
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,189,"* no upper limit, the last interval will have its upper bound equal"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,190,* to {@code Double.POSITIVE_INFINITY}. An empty tree will
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,191,* build an empty list while a tree representing the whole real line
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,192,* will build a one element list with both bounds beeing
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,193,* infinite.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,194,* @return a new ordered list containing {@link Interval Interval}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,195,* elements
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,197,public List<Interval> asList() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,198,final List<Interval> list = new ArrayList<Interval>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,199,"recurseList(getTree(false), list,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,200,"Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,201,return list;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,204,/** Update an intervals list.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,205,* @param node current node
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,206,* @param list list to update
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,207,* @param lower lower bound of the current convex cell
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,208,* @param upper upper bound of the current convex cell
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,210,"private void recurseList(final BSPTree node, final List<Interval> list,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,211,"final double lower, final double upper) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,213,if (node.getCut() == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,214,if ((Boolean) node.getAttribute()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,215,// this leaf cell is an inside cell: an interval
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,216,"list.add(new Interval(lower, upper));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,218,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,219,final OrientedPoint op  = (OrientedPoint) node.getCut().getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,220,final Point1D       loc = op.getLocation();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,221,double        x   = loc.getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,223,// make sure we explore the tree in increasing order
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,224,final BSPTree low       = op.isDirect() ? node.getMinus() : node.getPlus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,225,final BSPTree high      = op.isDirect() ? node.getPlus()  : node.getMinus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,227,"recurseList(low, list, lower, x);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,228,"if ((checkPoint(low,  loc) == Location.INSIDE) &&"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,229,"(checkPoint(high, loc) == Location.INSIDE)) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,230,// merge the last interval added and the first one of the high sub-tree
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,231,x = ((Interval) list.remove(list.size() - 1)).getLower();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSet.java,233,"recurseList(high, list, x, upper);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,17,package org.apache.commons.math.geometry.euclidean.oneD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,19,import org.apache.commons.math.exception.MathUnsupportedOperationException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,20,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,21,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,22,import org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,23,import org.apache.commons.math.geometry.partitioning.Point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,24,import org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,25,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,26,import org.apache.commons.math.geometry.partitioning.SubSpace;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,28,/** This class represents a 1D oriented hyperplane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,29,"* <p>An hyperplane in 1D is a simple point, its orientation being a"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,30,* boolean.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,31,* <p>Instances of this class are guaranteed to be immutable.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,32,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,34,public class OrientedPoint implements Hyperplane {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,36,/** Dummy region returned by the {@link #wholeHyperplane} method. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,37,private static final Region DUMMY_REGION = new DummyRegion();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,39,/** Point location. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,40,private Point1D location;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,42,/** Orientation. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,43,private boolean direct;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,45,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,46,* @param location location of the hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,47,"* @param direct if true, the plus side of the hyperplane is towards"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,48,* abscissae greater than {@code location}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,50,"public OrientedPoint(final Point1D location, final boolean direct) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,51,this.location = location;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,52,this.direct   = direct;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,55,/** Copy the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,56,"* <p>Since instances are immutable, this method directly returns"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,57,* the instance.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,58,* @return the instance itself
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,60,public Hyperplane copySelf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,61,return this;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,64,/** Get the offset (oriented distance) of a point to the hyperplane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,65,* @param point point to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,66,* @return offset of the point
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,68,public double getOffset(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,69,final double delta = ((Point1D) point).getAbscissa() - location.getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,70,return direct ? delta : -delta;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,73,/** Transform a space point into a sub-space point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,74,* <p>Since this class represent zero dimension spaces which does
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,75,"* not have lower dimension sub-spaces, this method cannot be"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,76,* supported here. It always throws a {@code RuntimeException}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,77,* when called.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,78,* @param point n-dimension point of the space
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,79,* @return (n-1)-dimension point of the sub-space corresponding to
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,80,* the specified space point
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,81,* @see #toSpace
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,83,public Point toSubSpace(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,84,"throw new MathUnsupportedOperationException(LocalizedFormats.NOT_SUPPORTED_IN_DIMENSION_N, 1);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,87,/** Transform a sub-space point into a space point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,88,* <p>Since this class represent zero dimension spaces which does
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,89,"* not have lower dimension sub-spaces, this method cannot be"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,90,* supported here. It always throws a {@code RuntimeException}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,91,* when called.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,92,* @param point (n-1)-dimension point of the sub-space
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,93,* @return n-dimension point of the space corresponding to the
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,94,* specified sub-space point
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,95,* @see #toSubSpace
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,97,public Point toSpace(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,98,"throw new MathUnsupportedOperationException(LocalizedFormats.NOT_SUPPORTED_IN_DIMENSION_N, 1);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,101,/** Build the sub-space shared by the instance and another hyperplane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,102,* <p>Since this class represent zero dimension spaces which does
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,103,"* not have lower dimension sub-spaces, this method cannot be"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,104,* supported here. It always throws a {@code RuntimeException}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,105,* when called.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,106,* @param other other sub-space (must have the same dimension as the
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,107,* instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,108,* @return a sub-space at the intersection of the instance and the
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,109,* other sub-space (it has a dimension one unit less than the
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,110,* instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,112,public SubSpace intersection(final Hyperplane other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,113,"throw new MathUnsupportedOperationException(LocalizedFormats.NOT_SUPPORTED_IN_DIMENSION_N, 1);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,116,/** Build a region covering the whole hyperplane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,117,* <p>Since this class represent zero dimension spaces which does
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,118,"* not have lower dimension sub-spaces, this method returns a dummy"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,119,* implementation of a {@link Region Region} (always the same
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,120,* instance). This implementation is only used to allow the {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,121,* SubHyperplane SubHyperplane} class implementation to work
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,122,"* properly, it should <em>not</em> be used otherwise.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,123,* @return a dummy region
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,125,public Region wholeHyperplane() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,126,return DUMMY_REGION;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,129,/** Build a region covering the whole space.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,130,* @return a region containing the instance (really an {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,131,* IntervalsSet IntervalsSet} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,133,public Region wholeSpace() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,134,return new IntervalsSet();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,137,/** Check if the instance has the same orientation as another hyperplane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,138,* <p>This method is expected to be called on parallel hyperplanes
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,139,* (i.e. when the {@link #side side} method would return {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,140,* org.apache.commons.math.geometry.partitioning.Hyperplane.Side#HYPER}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,141,* for some sub-hyperplane having the specified hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,142,* as its underlying hyperplane). The method should <em>not</em>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,143,"* re-check for parallelism, only for orientation, typically by"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,144,* testing something like the sign of the dot-products of
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,145,* normals.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,146,* @param other other hyperplane to check against the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,147,* @return true if the instance and the other hyperplane have
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,148,* the same orientation
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,150,public boolean sameOrientationAs(final Hyperplane other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,151,return !(direct ^ ((OrientedPoint) other).direct);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,154,/** Compute the relative position of a sub-hyperplane with respect
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,155,* to the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,156,* @param sub sub-hyperplane to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,157,"* @return one of {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#PLUS PLUS},"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,158,* {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#MINUS MINUS}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,159,* or {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#HYPER HYPER}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,160,"* (in dimension 1, this method <em>never</em> returns {@link"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,161,* org.apache.commons.math.geometry.partitioning.Hyperplane.Side#BOTH BOTH})
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,164,public Side side(final SubHyperplane sub) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,165,final double global = getOffset(((OrientedPoint) sub.getHyperplane()).location);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,166,return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,169,/** Split a sub-hyperplane in two parts by the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,170,* @param sub sub-hyperplane to split
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,171,* @return an object containing both the part of the sub-hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,172,* on the plus side of the instance and the part of the
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,173,* sub-hyperplane on the minus side of the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,175,public SplitSubHyperplane split(final SubHyperplane sub) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,176,final double global = getOffset(((OrientedPoint) sub.getHyperplane()).location);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,177,"return (global < -1.0e-10) ? new SplitSubHyperplane(null, sub) : new SplitSubHyperplane(sub, null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,180,/** Get the hyperplane location on the real line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,181,* @return the hyperplane location
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,183,public Point1D getLocation() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,184,return location;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,187,/** Check if the hyperplane orientation is direct.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,188,* @return true if the plus side of the hyperplane is towards
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,189,* abscissae greater than hyperplane location
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,191,public boolean isDirect() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,192,return direct;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,195,/** Revert the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,197,public void revertSelf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,198,direct = !direct;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,201,/** Dummy region representing the whole set of reals. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,202,private static class DummyRegion extends Region {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,204,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,206,public DummyRegion() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,207,super();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,210,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,211,public Region buildNew(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,212,return this;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,215,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,216,protected void computeGeometricalProperties() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,217,setSize(0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/OrientedPoint.java,218,setBarycenter(Point1D.ZERO);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,17,package org.apache.commons.math.geometry.euclidean.oneD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,19,import org.apache.commons.math.geometry.partitioning.Point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,21,/** This class represents a 1D point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,22,* <p>Instances of this class are guaranteed to be immutable.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,23,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,25,public class Point1D implements Point {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,27,/** Point at 0.0 abscissa. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,28,public static final Point1D ZERO = new Point1D(0.0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,30,/** Point at 1.0 abscissa. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,31,public static final Point1D ONE = new Point1D(1.0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,33,/** Point at undefined (NaN) abscissa. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,34,public static final Point1D UNDEFINED = new Point1D(Double.NaN);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,36,/** Abscissa of the point. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,37,private double x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,39,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,40,* @param x abscissa of the point
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,42,public Point1D(final double x) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,43,this.x = x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,46,/** Get the abscissa of the point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,47,* @return abscissa of the point
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,49,public double getAbscissa() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oneD/Point1D.java,50,return x;
False,src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/CardanEulerSingularityException.java,18,ackage org.apache.commons.math.geometry;
True,src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/CardanEulerSingularityException.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,17,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,19,import org.apache.commons.math.geometry.euclidean.oneD.Point1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,20,import org.apache.commons.math.geometry.partitioning.Point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,21,import org.apache.commons.math.geometry.partitioning.SubSpace;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,22,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,24,/** The class represent lines in a three dimensional space.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,26,* <p>Each oriented line is intrinsically associated with an abscissa
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,27,* wich is a coordinate on the line. The point at abscissa 0 is the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,28,"* orthogonal projection of the origin on the line, another equivalent"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,29,* way to express this is to say that it is the point of the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,30,* which is closest to the origin. Abscissa increases in the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,31,* direction.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,33,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,35,public class Line implements SubSpace {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,37,/** Line direction. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,38,private Vector3D direction;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,40,/** Line point closest to the origin. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,41,private Point3D zero;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,43,/** Build a line from a point and a direction.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,44,* @param p point belonging to the line (this can be any point)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,45,* @param direction direction of the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,46,* @exception IllegalArgumentException if the direction norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,48,"public Line(final Vector3D p, final Vector3D direction) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,49,"reset(p, direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,52,/** Reset the instance as if built from a point and a normal.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,53,* @param p point belonging to the line (this can be any point)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,54,* @param dir direction of the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,55,* @exception IllegalArgumentException if the direction norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,57,"public void reset(final Vector3D p, final Vector3D dir) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,58,final double norm = dir.getNorm();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,59,if (norm == 0.0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,60,"throw new IllegalArgumentException(""null norm"");"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,62,"this.direction = new Vector3D(1.0 / norm, dir);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,63,"zero = new Point3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,66,/** Revert the line direction.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,68,public void revertSelf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,69,direction = direction.negate();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,72,/** Get the normalized direction vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,73,* @return normalized direction vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,75,public Vector3D getDirection() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,76,return direction;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,79,/** Get the abscissa of a point with respect to the line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,80,* <p>The abscissa is 0 if the projection of the point and the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,81,* projection of the frame origin on the line are the same
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,82,* point.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,83,* @param point point to check (must be a {@link Vector3D Vector3D}
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,84,* instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,85,* @return abscissa of the point (really a
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,86,* {org.apache.commons.math.geometry.euclidean.oneD.Point1D Point1D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,88,public Point toSubSpace(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,89,"final double x = Vector3D.dotProduct(((Vector3D) point).subtract(zero), direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,90,return new Point1D(x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,93,/** Get one point from the line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,94,* @param point desired abscissa for the point (must be a
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,95,* {org.apache.commons.math.geometry.euclidean.oneD.Point1D Point1D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,96,"* @return one point belonging to the line, at specified abscissa"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,97,* (really a {@link Vector3D Vector3D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,99,public Point toSpace(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,100,"return new Point3D(1.0, zero, ((Point1D) point).getAbscissa(), direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,103,/** Check if the instance is similar to another line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,104,* <p>Lines are considered similar if they contain the same
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,105,* points. This does not mean they are equal since they can have
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,106,* opposite directions.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,107,* @param line line to which instance should be compared
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,108,* @return true if the lines are similar
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,110,public boolean isSimilarTo(final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,111,"final double angle = Vector3D.angle(direction, line.direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,112,return ((angle < 1.0e-10) || (angle > (FastMath.PI - 1.0e-10))) && contains(line.zero);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,115,/** Check if the instance contains a point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,116,* @param p point to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,117,* @return true if p belongs to the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,119,public boolean contains(final Vector3D p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,120,return distance(p) < 1.0e-10;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,123,/** Compute the distance between the instance and a point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,124,* @param p to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,125,* @return distance between the instance and the point
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,127,public double distance(final Vector3D p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,128,final Vector3D d = p.subtract(zero);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,129,"final Vector3D n = new Vector3D(1.0, d, -Vector3D.dotProduct(d, direction), direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,130,return n.getNorm();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,133,/** Compute the shortest distance between the instance and another line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,134,* @param line line to check agains the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,135,* @return shortest distance between the instance and the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,137,public double distance(final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,139,"final Vector3D normal = Vector3D.crossProduct(direction, line.direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,140,if (normal.getNorm() < 1.0e-10) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,141,// lines are parallel
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,142,return distance(line.zero);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,145,// separating middle plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,146,"final Plane middle = new Plane(new Vector3D(0.5, zero, 0.5, line.zero), normal);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,148,// the lines are at the same distance on either side of the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java,149,return 2 * FastMath.abs(middle.getOffset(zero));
False,src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/NotARotationMatrixException.java,18,ackage org.apache.commons.math.geometry;
True,src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/NotARotationMatrixException.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,17,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,19,import org.apache.commons.math.geometry.euclidean.twoD.Point2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,20,import org.apache.commons.math.geometry.euclidean.twoD.PolygonsSet;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,21,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,22,import org.apache.commons.math.geometry.partitioning.BSPTreeVisitor;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,23,import org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,24,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,25,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,27,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,29,/** Extractor for {@link PolygonsSet polyhedrons sets} outlines.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,30,* <p>This class extracts the 2D outlines from {{@link PolygonsSet
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,31,* polyhedrons sets} in a specified projection plane.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,32,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,34,public class OutlineExtractor {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,36,/** Abscissa axis of the projection plane. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,37,private Vector3D u;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,39,/** Ordinate axis of the projection plane. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,40,private Vector3D v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,42,/** Normal of the projection plane (viewing direction). */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,43,private Vector3D w;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,45,/** Build an extractor for a specific projection plane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,46,* @param u abscissa axis of the projection point
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,47,* @param v ordinate axis of the projection point
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,49,"public OutlineExtractor(final Vector3D u, final Vector3D v) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,50,this.u = u;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,51,this.v = v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,52,"w = Vector3D.crossProduct(u, v);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,55,/** Extract the outline of a polyhedrons set.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,56,* @param polyhedronsSet polyhedrons set whose outline must be extracted
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,57,"* @return an outline, as an array of loops."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,59,public Point2D[][] getOutline(final PolyhedronsSet polyhedronsSet) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,61,// project all boundary facets into one polygons set
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,62,final BoundaryProjector projector = new BoundaryProjector();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,63,polyhedronsSet.getTree(true).visit(projector);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,64,final PolygonsSet projected = projector.getProjected();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,66,// Remove the spurious intermediate vertices from the outline
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,67,final Point2D[][] outline = projected.getVertices();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,68,for (int i = 0; i < outline.length; ++i) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,69,final Point2D[] rawLoop = outline[i];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,70,int end = rawLoop.length;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,71,int j = 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,72,while (j < end) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,73,"if (pointIsBetween(rawLoop, end, j)) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,74,// the point should be removed
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,75,for (int k = j; k < (end - 1); ++k) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,76,rawLoop[k] = rawLoop[k + 1];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,78,--end;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,79,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,80,// the point remains in the loop
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,81,++j;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,84,if (end != rawLoop.length) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,85,// resize the array
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,86,outline[i] = new Point2D[end];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,87,"System.arraycopy(rawLoop, 0, outline[i], 0, end);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,91,return outline;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,95,/** Check if a point is geometrically between its neighbour in an array.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,96,* <p>The neighbours are computed considering the array is a loop
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,97,* (i.e. point at index (n-1) is before point at index 0)</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,98,* @param loop points array
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,99,* @param n number of points to consider in the array
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,100,* @param i index of the point to check (must be between 0 and n-1)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,101,* @return true if the point is exactly between its neighbours
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,103,"private boolean pointIsBetween(final Point2D[] loop, final int n, final int i) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,104,final Point2D previous = loop[(i + n - 1) % n];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,105,final Point2D current  = loop[i];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,106,final Point2D next     = loop[(i + 1) % n];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,107,final double dx1       = current.x - previous.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,108,final double dy1       = current.y - previous.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,109,final double dx2       = next.x    - current.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,110,final double dy2       = next.y    - current.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,111,final double cross     = dx1 * dy2 - dx2 * dy1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,112,final double dot       = dx1 * dx2 + dy1 * dy2;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,113,final double d1d2      = FastMath.sqrt((dx1 * dx1 + dy1 * dy1) * (dx2 * dx2 + dy2 * dy2));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,114,return (FastMath.abs(cross) <= (1.0e-6 * d1d2)) && (dot >= 0.0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,117,/** Visitor projecting the boundary facets on a plane. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,118,private class BoundaryProjector implements BSPTreeVisitor {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,120,/** Projection of the polyhedrons set on the plane. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,121,private PolygonsSet projected;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,123,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,125,public BoundaryProjector() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,126,projected = new PolygonsSet(new BSPTree(Boolean.FALSE));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,129,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,130,public Order visitOrder(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,131,return Order.MINUS_SUB_PLUS;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,134,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,135,public void visitInternalNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,136,final Region.BoundaryAttribute attribute =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,137,(Region.BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,138,if (attribute.getPlusOutside() != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,139,"addContribution(attribute.getPlusOutside(), false);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,141,if (attribute.getPlusInside() != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,142,"addContribution(attribute.getPlusInside(), true);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,146,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,147,public void visitLeafNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,150,/** Add he contribution of a boundary facet.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,151,* @param facet boundary facet
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,152,"* @param reversed if true, the facet has the inside on its plus side"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,154,"private void addContribution(final SubHyperplane facet, final boolean reversed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,156,// extract the vertices of the facet
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,157,final Plane plane    = (Plane) facet.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,158,Point2D[][] vertices =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,159,((PolygonsSet) facet.getRemainingRegion()).getVertices();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,161,"final double scal = Vector3D.dotProduct(plane.getNormal(), w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,162,if (FastMath.abs(scal) > 1.0e-3) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,164,if ((scal < 0) ^ reversed) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,165,"// the facet is seen from the inside,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,166,// we need to invert its boundary orientation
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,167,final Point2D[][] newVertices = new Point2D[vertices.length][];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,168,for (int i = 0; i < vertices.length; ++i) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,169,final Point2D[] loop = vertices[i];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,170,final Point2D[] newLoop = new Point2D[loop.length];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,171,if (loop[0] == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,172,newLoop[0] = null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,173,for (int j = 1; j < loop.length; ++j) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,174,newLoop[j] = loop[loop.length - j];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,176,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,177,for (int j = 0; j < loop.length; ++j) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,178,newLoop[j] = loop[loop.length - (j + 1)];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,181,newVertices[i] = newLoop;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,184,// use the reverted vertices
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,185,vertices = newVertices;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,189,// compute the projection of the facet in the outline plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,190,final ArrayList<SubHyperplane> edges = new ArrayList<SubHyperplane>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,191,for (Point2D[] loop : vertices) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,192,final boolean closed = loop[0] != null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,193,int previous         = closed ? (loop.length - 1) : 1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,194,Vector3D previous3D  = (Vector3D) plane.toSpace(loop[previous]);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,195,int current          = (previous + 1) % loop.length;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,196,"Point2D pPoint       = new Point2D(Vector3D.dotProduct(previous3D, u),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,197,"Vector3D.dotProduct(previous3D, v));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,198,while (current < loop.length) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,200,final Vector3D current3D = (Vector3D) plane.toSpace(loop[current]);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,201,"final Point2D  cPoint    = new Point2D(Vector3D.dotProduct(current3D, u),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,202,"Vector3D.dotProduct(current3D, v));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,203,final org.apache.commons.math.geometry.euclidean.twoD.Line line =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,204,"new org.apache.commons.math.geometry.euclidean.twoD.Line(pPoint, cPoint);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,205,SubHyperplane edge = new SubHyperplane(line);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,207,if (closed || (previous != 1)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,208,// the previous point is a real vertex
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,209,// it defines one bounding point of the edge
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,210,final double angle = line.getAngle() + 0.5 * FastMath.PI;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,211,final org.apache.commons.math.geometry.euclidean.twoD.Line l =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,212,"new org.apache.commons.math.geometry.euclidean.twoD.Line(pPoint, angle);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,213,edge = l.split(edge).getPlus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,216,if (closed || (current != (loop.length - 1))) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,217,// the current point is a real vertex
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,218,// it defines one bounding point of the edge
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,219,final double angle = line.getAngle() + 0.5 * FastMath.PI;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,220,final org.apache.commons.math.geometry.euclidean.twoD.Line l =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,221,"new org.apache.commons.math.geometry.euclidean.twoD.Line(cPoint, angle);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,222,edge = l.split(edge).getMinus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,225,edges.add(edge);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,227,previous   = current++;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,228,previous3D = current3D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,229,pPoint     = cPoint;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,233,final PolygonsSet projectedFacet = new PolygonsSet(edges);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,235,// add the contribution of the facet to the global outline
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,236,"projected = (PolygonsSet) Region.union(projected, projectedFacet);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,241,/** Get the projecion of the polyhedrons set on the plane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,242,* @return projecion of the polyhedrons set on the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,244,public PolygonsSet getProjected() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/OutlineExtractor.java,245,return projected;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,17,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,19,import org.apache.commons.math.geometry.euclidean.oneD.Point1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,20,import org.apache.commons.math.geometry.euclidean.twoD.Point2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,21,import org.apache.commons.math.geometry.euclidean.twoD.PolygonsSet;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,22,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,23,import org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,24,import org.apache.commons.math.geometry.partitioning.Point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,25,import org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,26,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,27,import org.apache.commons.math.geometry.partitioning.SubSpace;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,28,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,30,/** The class represent planes in a three dimensional space.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,31,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,33,public class Plane implements Hyperplane {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,35,/** Offset of the origin with respect to the plane. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,36,private double originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,38,/** Origin of the plane frame. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,39,private Point3D origin;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,41,/** First vector of the plane frame (in plane). */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,42,private Vector3D u;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,44,/** Second vector of the plane frame (in plane). */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,45,private Vector3D v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,47,/** Third vector of the plane frame (plane normal). */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,48,private Vector3D w;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,50,/** Build a plane normal to a given direction and containing the origin.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,51,* @param normal normal direction to the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,52,* @exception IllegalArgumentException if the normal norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,54,public Plane(final Vector3D normal) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,55,setNormal(normal);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,56,originOffset = 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,57,setFrame();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,60,/** Build a plane from a point and a normal.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,61,* @param p point belonging to the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,62,* @param normal normal direction to the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,63,* @exception IllegalArgumentException if the normal norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,65,"public Plane(final Vector3D p, final Vector3D normal) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,66,setNormal(normal);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,67,"originOffset = -Vector3D.dotProduct(p, w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,68,setFrame();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,71,/** Build a plane from three points.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,72,* <p>The plane is oriented in the direction of
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,73,* {@code (p2-p1) ^ (p3-p1)}</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,74,* @param p1 first point belonging to the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,75,* @param p2 second point belonging to the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,76,* @param p3 third point belonging to the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,77,* @exception IllegalArgumentException if the points do not constitute a plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,79,"public Plane(final Vector3D p1, final Vector3D p2, final Vector3D p3) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,80,"this(p1, Vector3D.crossProduct(p2.subtract(p1), p3.subtract(p1)));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,83,/** Copy constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,84,* <p>The instance created is completely independant of the original
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,85,"* one. A deep copy is used, none of the underlying object are"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,86,* shared.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,87,* @param plane plane to copy
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,89,public Plane(final Plane plane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,90,originOffset = plane.originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,91,origin = plane.origin;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,92,u      = plane.u;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,93,v      = plane.v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,94,w      = plane.w;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,97,/** Copy the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,98,* <p>The instance created is completely independant of the original
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,99,"* one. A deep copy is used, none of the underlying objects are"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,100,* shared (except for immutable objects).</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,101,"* @return a new hyperplane, copy of the instance"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,103,public Hyperplane copySelf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,104,return new Plane(this);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,107,/** Reset the instance as if built from a point and a normal.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,108,* @param p point belonging to the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,109,* @param normal normal direction to the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,111,"public void reset(final Vector3D p, final Vector3D normal) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,112,setNormal(normal);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,113,"originOffset = -Vector3D.dotProduct(p, w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,114,setFrame();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,117,/** Reset the instance from another one.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,118,* <p>The updated instance is completely independant of the original
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,119,* one. A deep reset is used none of the underlying object is
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,120,* shared.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,121,* @param original plane to reset from
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,123,public void reset(final Plane original) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,124,originOffset = original.originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,125,origin       = original.origin;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,126,u            = original.u;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,127,v            = original.v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,128,w            = original.w;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,131,/** Set the normal vactor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,132,* @param normal normal direction to the plane (will be copied)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,133,* @exception IllegalArgumentException if the normal norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,135,private void setNormal(final Vector3D normal) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,136,final double norm = normal.getNorm();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,137,if (norm < 1.0e-10) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,138,"throw new IllegalArgumentException(""null norm"");"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,140,"w = new Vector3D(1.0 / norm, normal);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,143,/** Reset the plane frame.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,145,private void setFrame() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,146,"origin = new Point3D(-originOffset, w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,147,u = w.orthogonal();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,148,"v = Vector3D.crossProduct(w, u);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,151,/** Get the origin point of the plane frame.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,152,* <p>The point returned is the orthogonal projection of the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,153,* 3D-space origin in the plane.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,154,* @return the origin point of the plane frame (point closest to the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,155,* 3D-space origin)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,157,public Point3D getOrigin() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,158,return origin;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,161,/** Get the normalized normal vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,162,"* <p>The frame defined by ({@link #getU getU}, {@link #getV getV},"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,163,* {@link #getNormal getNormal}) is a rigth-handed orthonormalized
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,164,* frame).</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,165,* @return normalized normal vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,166,* @see #getU
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,167,* @see #getV
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,169,public Vector3D getNormal() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,170,return w;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,173,/** Get the plane first canonical vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,174,"* <p>The frame defined by ({@link #getU getU}, {@link #getV getV},"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,175,* {@link #getNormal getNormal}) is a rigth-handed orthonormalized
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,176,* frame).</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,177,* @return normalized first canonical vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,178,* @see #getV
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,179,* @see #getNormal
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,181,public Vector3D getU() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,182,return u;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,185,/** Get the plane second canonical vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,186,"* <p>The frame defined by ({@link #getU getU}, {@link #getV getV},"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,187,* {@link #getNormal getNormal}) is a rigth-handed orthonormalized
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,188,* frame).</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,189,* @return normalized second canonical vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,190,* @see #getU
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,191,* @see #getNormal
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,193,public Vector3D getV() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,194,return v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,197,/** Revert the plane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,198,* <p>Replace the instance by a similar plane with opposite orientation.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,199,* <p>The new plane frame is chosen in such a way that a 3D point that had
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,200,"* {@code (x, y)} in-plane coordinates and {@code z} offset with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,201,* respect to the plane and is unaffected by the change will have
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,202,"* {@code (y, x)} in-plane coordinates and {@code -z} offset with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,203,* respect to the new plane. This means that the {@code u} and {@code v}
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,204,"* vectors returned by the {@link #getU} and {@link #getV} methods are exchanged,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,205,* and the {@code w} vector returned by the {@link #getNormal} method is
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,206,* reversed.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,208,public void revertSelf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,209,final Vector3D tmp = u;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,210,u = v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,211,v = tmp;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,212,w = w.negate();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,213,originOffset = -originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,216,/** Transform a 3D space point into an in-plane point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,217,* @param point point of the space (must be a {@link Vector3D
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,218,* Vector3D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,219,* @return in-plane point (really a {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,220,* org.apache.commons.math.geometry.euclidean.twoD.Point2D Point2D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,221,* @see #toSpace
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,223,public Point toSubSpace(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,224,final Vector3D p3D = (Vector3D) point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,225,"return new Point2D(Vector3D.dotProduct(p3D, u),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,226,"Vector3D.dotProduct(p3D, v));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,229,/** Transform an in-plane point into a 3D space point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,230,* @param point in-plane point (must be a {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,231,* org.apache.commons.math.geometry.euclidean.twoD.Point2D Point2D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,232,* @return 3D space point (really a {@link Vector3D Vector3D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,233,* @see #toSubSpace
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,235,public Point toSpace(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,236,final Point2D p2D = (Point2D) point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,237,"return new Point3D(p2D.x, u, p2D.y, v, -originOffset, w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,240,/** Get one point from the 3D-space.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,241,* @param inPlane desired in-plane coordinates for the point in the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,242,* plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,243,* @param offset desired offset for the point
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,244,"* @return one point in the 3D-space, with given coordinates and offset"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,245,* relative to the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,247,"public Vector3D getPointAt(final Point2D inPlane, final double offset) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,248,"return new Vector3D(inPlane.x, u, inPlane.y, v, offset - originOffset, w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,251,/** Check if the instance is similar to another plane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,252,* <p>Planes are considered similar if they contain the same
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,253,* points. This does not mean they are equal since they can have
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,254,* opposite normals.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,255,* @param plane plane to which the instance is compared
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,256,* @return true if the planes are similar
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,258,public boolean isSimilarTo(final Plane plane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,259,"final double angle = Vector3D.angle(w, plane.w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,260,return ((angle < 1.0e-10) && (FastMath.abs(originOffset - plane.originOffset) < 1.0e-10)) ||
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,261,((angle > (FastMath.PI - 1.0e-10)) && (FastMath.abs(originOffset + plane.originOffset) < 1.0e-10));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,264,/** Rotate the plane around the specified point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,265,"* <p>The instance is not modified, a new instance is created.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,266,* @param center rotation center
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,267,* @param rotation vectorial rotation operator
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,268,* @return a new plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,270,"public Plane rotate(final Vector3D center, final Rotation rotation) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,272,final Vector3D delta = origin.subtract(center);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,273,"final Plane plane = new Plane(center.add(rotation.applyTo(delta)),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,274,rotation.applyTo(w));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,276,// make sure the frame is transformed as desired
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,277,plane.u = rotation.applyTo(u);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,278,plane.v = rotation.applyTo(v);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,280,return plane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,284,/** Translate the plane by the specified amount.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,285,"* <p>The instance is not modified, a new instance is created.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,286,* @param translation translation to apply
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,287,* @return a new plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,289,public Plane translate(final Vector3D translation) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,291,"final Plane plane = new Plane(origin.add(translation), w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,293,// make sure the frame is transformed as desired
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,294,plane.u = u;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,295,plane.v = v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,297,return plane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,301,/** Get the intersection of a line with the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,302,* @param line line intersecting the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,303,* @return intersection point between between the line and the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,304,* instance (null if the line is parallel to the instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,306,public Point3D intersection(final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,307,final Vector3D direction = line.getDirection();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,308,"final double   dot       = Vector3D.dotProduct(w, direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,309,if (FastMath.abs(dot) < 1.0e-10) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,310,return null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,312,final Vector3D point = (Vector3D) line.toSpace(Point1D.ZERO);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,313,"final double   k     = -(originOffset + Vector3D.dotProduct(w, point)) / dot;"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,314,"return new Point3D(1.0, point, k, direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,317,/** Build the line shared by the instance and another plane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,318,* @param other other plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,319,* @return line at the intersection of the instance and the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,320,* other plane (really a {@link Line Line} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,322,public SubSpace intersection(final Hyperplane other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,323,final Plane otherP = (Plane) other;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,324,"final Vector3D direction = Vector3D.crossProduct(w, otherP.w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,325,if (direction.getNorm() < 1.0e-10) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,326,return null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,328,"return new Line(intersection(this, otherP, new Plane(direction)),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,329,direction);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,332,/** Get the intersection point of three planes.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,333,* @param plane1 first plane1
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,334,* @param plane2 second plane2
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,335,* @param plane3 third plane2
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,336,"* @return intersection point of three planes, null if some planes are parallel"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,338,"public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,340,// coefficients of the three planes linear equations
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,341,final double a1 = plane1.w.getX();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,342,final double b1 = plane1.w.getY();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,343,final double c1 = plane1.w.getZ();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,344,final double d1 = plane1.originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,346,final double a2 = plane2.w.getX();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,347,final double b2 = plane2.w.getY();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,348,final double c2 = plane2.w.getZ();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,349,final double d2 = plane2.originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,351,final double a3 = plane3.w.getX();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,352,final double b3 = plane3.w.getY();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,353,final double c3 = plane3.w.getZ();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,354,final double d3 = plane3.originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,356,// direct Cramer resolution of the linear system
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,357,// (this is still feasible for a 3x3 system)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,358,final double a23         = b2 * c3 - b3 * c2;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,359,final double b23         = c2 * a3 - c3 * a2;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,360,final double c23         = a2 * b3 - a3 * b2;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,361,final double determinant = a1 * a23 + b1 * b23 + c1 * c23;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,362,if (FastMath.abs(determinant) < 1.0e-10) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,363,return null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,366,final double r = 1.0 / determinant;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,367,return new Vector3D(
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,368,"(-a23 * d1 - (c1 * b3 - c3 * b1) * d2 - (c2 * b1 - c1 * b2) * d3) * r,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,369,"(-b23 * d1 - (c3 * a1 - c1 * a3) * d2 - (c1 * a2 - c2 * a1) * d3) * r,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,370,(-c23 * d1 - (b1 * a3 - b3 * a1) * d2 - (b2 * a1 - b1 * a2) * d3) * r);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,374,/** Build a region covering the whole hyperplane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,375,* @return a region covering the whole hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,377,public Region wholeHyperplane() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,378,return new PolygonsSet();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,381,/** Build a region covering the whole space.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,382,* @return a region containing the instance (really a {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,383,* PolyhedronsSet PolyhedronsSet} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,385,public Region wholeSpace() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,386,return new PolyhedronsSet();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,389,/** Check if the instance contains a point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,390,* @param p point to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,391,* @return true if p belongs to the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,393,public boolean contains(final Point3D p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,394,return FastMath.abs(getOffset(p)) < 1.0e-10;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,397,/** Get the offset (oriented distance) of a parallel plane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,398,* <p>This method should be called only for parallel planes otherwise
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,399,* the result is not meaningful.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,400,"* <p>The offset is 0 if both planes are the same, it is"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,401,* positive if the plane is on the plus side of the instance and
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,402,"* negative if it is on the minus side, according to its natural"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,403,* orientation.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,404,* @param plane plane to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,405,* @return offset of the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,407,public double getOffset(final Plane plane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,408,return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,411,/** Get the offset (oriented distance) of a point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,412,"* <p>The offset is 0 if the point is on the underlying hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,413,* it is positive if the point is on one particular side of the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,414,"* hyperplane, and it is negative if the point is on the other side,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,415,* according to the hyperplane natural orientation.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,416,* @param point point to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,417,* @return offset of the point
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,419,public double getOffset(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,420,"return Vector3D.dotProduct((Vector3D) point, w) + originOffset;"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,423,/** Check if the instance has the same orientation as another hyperplane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,424,* @param other other hyperplane to check against the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,425,* @return true if the instance and the other hyperplane have
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,426,* the same orientation
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,428,public boolean sameOrientationAs(final Hyperplane other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,429,"return Vector3D.dotProduct(((Plane) other).w, w) > 0.0;"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,432,/** Compute the relative position of a sub-hyperplane with respect
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,433,* to the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,434,* @param sub sub-hyperplane to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,435,"* @return one of {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#PLUS PLUS},"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,436,"* {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#MINUS MINUS},"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,437,"* {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#BOTH BOTH},"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,438,* {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#HYPER HYPER}
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,440,public Side side(final SubHyperplane sub) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,442,final Plane otherPlane = (Plane) sub.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,443,final Line  inter      = (Line) intersection(otherPlane);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,445,if (inter == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,446,"// the hyperplanes are parallel,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,447,// any point can be used to check their relative position
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,448,final double global = getOffset(otherPlane);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,449,return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,452,// create a 2D line in the otherPlane canonical 2D frame such that:
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,453,//   - the line is the crossing line of the two planes in 3D
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,454,//   - the line splits the otherPlane in two half planes with an
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,455,//     orientation consistent with the orientation of the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,456,//     (i.e. the 3D half space on the plus side (resp. minus side)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,457,//      of the instance contains the 2D half plane on the plus side
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,458,//      (resp. minus side) of the 2D line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,459,Point2D p = (Point2D) otherPlane.toSubSpace(inter.toSpace(Point1D.ZERO));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,460,Point2D q = (Point2D) otherPlane.toSubSpace(inter.toSpace(Point1D.ONE));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,461,"if (Vector3D.dotProduct(Vector3D.crossProduct(inter.getDirection(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,462,"otherPlane.getNormal()),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,463,w) < 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,464,final Point2D tmp = p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,465,p           = q;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,466,q           = tmp;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,468,"final Hyperplane line2D = new org.apache.commons.math.geometry.euclidean.twoD.Line(p, q);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,470,// check the side on the 2D plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,471,return sub.getRemainingRegion().side(line2D);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,475,/** Split a sub-hyperplane in two parts by the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,476,* @param sub sub-hyperplane to split
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,477,* @return an object containing both the part of the sub-hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,478,* on the plus side of the instance and the part of the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,479,* sub-hyperplane on the minus side of the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,481,public SplitSubHyperplane split(final SubHyperplane sub) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,483,final Plane otherPlane = (Plane) sub.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,484,final Line  inter      = (Line) intersection(otherPlane);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,486,if (inter == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,487,// the hyperplanes are parallel
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,488,final double global = getOffset(otherPlane);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,489,"return (global < -1.0e-10) ? new SplitSubHyperplane(null, sub) : new SplitSubHyperplane(sub, null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,492,// the hyperplanes do intersect
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,493,Point2D p = (Point2D) otherPlane.toSubSpace(inter.toSpace(Point1D.ZERO));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,494,Point2D q = (Point2D) otherPlane.toSubSpace(inter.toSpace(Point1D.ONE));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,495,"if (Vector3D.dotProduct(Vector3D.crossProduct(inter.getDirection(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,496,"otherPlane.getNormal()),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,497,w) < 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,498,final Point2D tmp = p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,499,p           = q;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,500,q           = tmp;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,502,final SubHyperplane l2DMinus =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,503,"new SubHyperplane(new org.apache.commons.math.geometry.euclidean.twoD.Line(p, q));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,504,final SubHyperplane l2DPlus =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,505,"new SubHyperplane(new org.apache.commons.math.geometry.euclidean.twoD.Line(q, p));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,507,final BSPTree splitTree =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,508,sub.getRemainingRegion().getTree(false).split(l2DMinus);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,509,final BSPTree plusTree  = Region.isEmpty(splitTree.getPlus()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,510,new BSPTree(Boolean.FALSE) :
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,511,"new BSPTree(l2DPlus, new BSPTree(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,512,"splitTree.getPlus(), null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,514,final BSPTree minusTree = Region.isEmpty(splitTree.getMinus()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,515,new BSPTree(Boolean.FALSE) :
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,516,"new BSPTree(l2DMinus, new BSPTree(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,517,"splitTree.getMinus(), null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,519,"return new SplitSubHyperplane(new SubHyperplane(otherPlane.copySelf(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,520,"new PolygonsSet(plusTree)),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,521,"new SubHyperplane(otherPlane.copySelf(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Plane.java,522,new PolygonsSet(minusTree)));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,17,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,19,import org.apache.commons.math.geometry.partitioning.Point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,21,/** This class represents a 3D point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,22,* <p>Instances of this class are guaranteed to be immutable.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,23,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,25,public class Point3D extends Vector3D implements Point {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,27,/** Point at undefined (NaN) coordinates. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,28,"public static final Point3D UNDEFINED = new Point3D(Double.NaN, Double.NaN, Double.NaN);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,30,/** Serializable UID. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,31,private static final long serialVersionUID = 9128130934224884451L;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,33,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,34,* Build a vector from its coordinates
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,35,* @param x abscissa
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,36,* @param y ordinate
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,37,* @param z height
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,38,* @see #getX()
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,39,* @see #getY()
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,40,* @see #getZ()
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,42,"public Point3D(final double x, final double y, final double z) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,43,"super(x, y, z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,46,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,47,* Build a vector from its azimuthal coordinates
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,48,* @param alpha azimuth (&alpha;) around Z
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,49,"*              (0 is +X, &pi;/2 is +Y, &pi; is -X and 3&pi;/2 is -Y)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,50,"* @param delta elevation (&delta;) above (XY) plane, from -&pi;/2 to +&pi;/2"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,51,* @see #getAlpha()
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,52,* @see #getDelta()
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,54,"public Point3D(final double alpha, final double delta) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,55,"super(alpha, delta);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,58,/** Multiplicative constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,59,* Build a vector from another one and a scale factor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,60,* The vector built will be a * u
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,61,* @param a scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,62,* @param u base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,64,"public Point3D(final double a, final Vector3D u) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,65,"super(a, u);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,68,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,69,* Build a vector from two other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,70,* The vector built will be a1 * u1 + a2 * u2
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,71,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,72,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,73,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,74,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,76,"public Point3D(final double a1, final Vector3D u1, final double a2, final Vector3D u2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,77,"super(a1, u1, a2, u2);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,80,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,81,* Build a vector from three other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,82,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,83,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,84,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,85,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,86,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,87,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,88,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,90,"public Point3D(final double a1, final Vector3D u1, final double a2, final Vector3D u2,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,91,"final double a3, final Vector3D u3) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,92,"super(a1, u1, a2, u2, a3, u3);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,95,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,96,* Build a vector from four other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,97,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,98,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,99,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,100,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,101,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,102,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,103,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,104,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,105,* @param u4 fourth base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,107,"public Point3D(final double a1, final Vector3D u1, final double a2, final Vector3D u2,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,108,"final double a3, final Vector3D u3, final double a4, final Vector3D u4) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Point3D.java,109,"super(a1, u1, a2, u2, a3, u3, a4, u4);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,17,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,19,import java.awt.geom.AffineTransform;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,21,import java.util.Collection;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,23,import org.apache.commons.math.geometry.euclidean.twoD.Point2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,24,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,25,import org.apache.commons.math.geometry.partitioning.BSPTreeVisitor;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,26,import org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,27,import org.apache.commons.math.geometry.partitioning.Point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,28,import org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,29,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,30,import org.apache.commons.math.geometry.partitioning.Transform;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,31,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,33,/** This class represents a 3D region: a set of polyhedrons.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,34,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,36,public class PolyhedronsSet extends Region {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,38,/** Build a polyhedrons set representing the whole real line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,40,public PolyhedronsSet() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,41,super();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,44,/** Build a polyhedrons set from a BSP tree.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,45,* <p>The leaf nodes of the BSP tree <em>must</em> have a
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,46,* {@code Boolean} attribute representing the inside status of
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,47,"* the corresponding cell (true for inside cells, false for outside"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,48,"* cells). In order to avoid building too many small objects, it is"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,49,* recommended to use the predefined constants
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,50,* {@code Boolean.TRUE} and {@code Boolean.FALSE}</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,51,* @param tree inside/outside BSP tree representing the region
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,53,public PolyhedronsSet(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,54,super(tree);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,57,/** Build a polyhedrons set from a Boundary REPresentation (B-rep).
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,58,* <p>The boundary is provided as a collection of {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,59,* SubHyperplane sub-hyperplanes}. Each sub-hyperplane has the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,60,* interior part of the region on its minus side and the exterior on
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,61,* its plus side.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,62,"* <p>The boundary elements can be in any order, and can form"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,63,* several non-connected sets (like for example polyhedrons with holes
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,64,* or a set of disjoints polyhedrons considered as a whole). In
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,65,"* fact, the elements do not even need to be connected together"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,66,"* (their topological connections are not used here). However, if the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,67,* boundary does not really separate an inside open from an outside
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,68,"* open (open having here its topological meaning), then subsequent"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,69,* calls to the {@link Region#checkPoint(Point) checkPoint} method will
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,70,* not be meaningful anymore.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,71,"* <p>If the boundary is empty, the region will represent the whole"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,72,* space.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,73,"* @param boundary collection of boundary elements, as a"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,74,* collection of {@link SubHyperplane SubHyperplane} objects
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,76,public PolyhedronsSet(final Collection<SubHyperplane> boundary) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,77,super(boundary);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,80,/** Build a parallellepipedic box.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,81,* @param xMin low bound along the x direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,82,* @param xMax high bound along the x direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,83,* @param yMin low bound along the y direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,84,* @param yMax high bound along the y direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,85,* @param zMin low bound along the z direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,86,* @param zMax high bound along the z direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,88,"public PolyhedronsSet(final double xMin, final double xMax,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,89,"final double yMin, final double yMax,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,90,"final double zMin, final double zMax) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,91,this(buildConvex(Arrays.asList(new Hyperplane[] {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,92,"new Plane(new Vector3D(xMin, 0,    0),   Vector3D.MINUS_I),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,93,"new Plane(new Vector3D(xMax, 0,    0),   Vector3D.PLUS_I),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,94,"new Plane(new Vector3D(0,    yMin, 0),   Vector3D.MINUS_J),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,95,"new Plane(new Vector3D(0,    yMax, 0),   Vector3D.PLUS_J),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,96,"new Plane(new Vector3D(0,    0,   zMin), Vector3D.MINUS_K),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,97,"new Plane(new Vector3D(0,    0,   zMax), Vector3D.PLUS_K)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,98,})).getTree(false));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,101,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,102,public Region buildNew(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,103,return new PolyhedronsSet(tree);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,106,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,107,protected void computeGeometricalProperties() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,109,// compute the contribution of all boundary facets
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,110,getTree(true).visit(new FacetsContributionVisitor());
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,112,if (getSize() < 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,113,// the polyhedrons set as a finite outside
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,114,// surrounded by an infinite inside
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,115,setSize(Double.POSITIVE_INFINITY);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,116,setBarycenter(Point3D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,117,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,118,"// the polyhedrons set is finite, apply the remaining scaling factors"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,119,setSize(getSize() / 3.0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,120,"setBarycenter(new Point3D(1.0 / (4 * getSize()), (Vector3D) getBarycenter()));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,125,/** Visitor computing geometrical properties. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,126,private class FacetsContributionVisitor implements BSPTreeVisitor {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,128,/** Simple constructor. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,129,public FacetsContributionVisitor() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,130,setSize(0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,131,"setBarycenter(new Point3D(0, 0, 0));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,134,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,135,public Order visitOrder(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,136,return Order.MINUS_SUB_PLUS;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,139,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,140,public void visitInternalNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,141,final BoundaryAttribute attribute = (BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,142,if (attribute.getPlusOutside() != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,143,"addContribution(attribute.getPlusOutside(), false);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,145,if (attribute.getPlusInside() != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,146,"addContribution(attribute.getPlusInside(), true);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,150,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,151,public void visitLeafNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,154,/** Add he contribution of a boundary facet.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,155,* @param facet boundary facet
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,156,"* @param reversed if true, the facet has the inside on its plus side"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,158,"private void addContribution(final SubHyperplane facet, final boolean reversed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,160,final Region polygon = facet.getRemainingRegion();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,161,final double area    = polygon.getSize();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,163,if (Double.isInfinite(area)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,164,setSize(Double.POSITIVE_INFINITY);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,165,setBarycenter(Point3D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,166,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,168,final Plane    plane  = (Plane) facet.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,169,final Vector3D facetB = (Point3D) plane.toSpace(polygon.getBarycenter());
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,170,"double   scaled = area * Vector3D.dotProduct(facetB, plane.getNormal());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,171,if (reversed) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,172,scaled = -scaled;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,175,setSize(getSize() + scaled);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,176,"setBarycenter(new Point3D(1.0, (Point3D) getBarycenter(), scaled, facetB));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,184,/** Get the first sub-hyperplane crossed by a semi-infinite line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,185,* @param point start point of the part of the line considered
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,186,* @param line line to consider (contains point)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,187,* @return the first sub-hyperplaned crossed by the line after the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,188,"* given point, or null if the line does not intersect any"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,189,* sub-hyperplaned
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,191,"public SubHyperplane firstIntersection(final Vector3D point, final Line line) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,192,"return recurseFirstIntersection(getTree(true), point, line);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,195,/** Get the first sub-hyperplane crossed by a semi-infinite line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,196,* @param node current node
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,197,* @param point start point of the part of the line considered
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,198,* @param line line to consider (contains point)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,199,* @return the first sub-hyperplaned crossed by the line after the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,200,"* given point, or null if the line does not intersect any"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,201,* sub-hyperplaned
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,203,"private SubHyperplane recurseFirstIntersection(final BSPTree node,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,204,"final Vector3D point,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,205,final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,207,final SubHyperplane cut = node.getCut();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,208,if (cut == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,209,return null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,211,final BSPTree minus = node.getMinus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,212,final BSPTree plus  = node.getPlus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,213,final Plane   plane = (Plane) cut.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,215,// establish search order
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,216,final double offset = plane.getOffset((Point) point);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,217,final boolean in    = FastMath.abs(offset) < 1.0e-10;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,218,final BSPTree near;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,219,final BSPTree far;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,220,if (offset < 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,221,near = minus;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,222,far  = plus;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,223,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,224,near = plus;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,225,far  = minus;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,228,if (in) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,229,// search in the cut hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,230,"final SubHyperplane facet = boundaryFacet(point, node);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,231,if (facet != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,232,return facet;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,236,// search in the near branch
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,237,"final SubHyperplane crossed = recurseFirstIntersection(near, point, line);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,238,if (crossed != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,239,return crossed;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,242,if (!in) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,243,// search in the cut hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,244,final Vector3D hit3D = plane.intersection(line);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,245,if (hit3D != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,246,"final SubHyperplane facet = boundaryFacet(hit3D, node);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,247,if (facet != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,248,return facet;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,253,// search in the far branch
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,254,"return recurseFirstIntersection(far, point, line);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,258,/** Check if a point belongs to the boundary part of a node.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,259,* @param point point to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,260,* @param node node containing the boundary facet to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,261,* @return the boundary facet this points belongs to (or null if it
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,262,* does not belong to any boundary facet)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,264,"private SubHyperplane boundaryFacet(final Vector3D point, final BSPTree node) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,265,final Point point2D = node.getCut().getHyperplane().toSubSpace((Point) point);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,266,final BoundaryAttribute attribute = (BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,267,if ((attribute.getPlusOutside() != null) &&
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,268,(attribute.getPlusOutside().getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,269,return attribute.getPlusOutside();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,271,if ((attribute.getPlusInside() != null) &&
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,272,(attribute.getPlusInside().getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,273,return attribute.getPlusInside();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,275,return null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,278,/** Rotate the region around the specified point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,279,"* <p>The instance is not modified, a new instance is created.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,280,* @param center rotation center
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,281,* @param rotation vectorial rotation operator
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,282,* @return a new instance representing the rotated region
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,284,"public PolyhedronsSet rotate(final Vector3D center, final Rotation rotation) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,285,"return (PolyhedronsSet) applyTransform(new RotationTransform(center, rotation));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,288,/** 3D rotation as a Transform. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,289,private static class RotationTransform implements Transform {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,291,/** Center point of the rotation. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,292,private Vector3D   center;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,294,/** Vectorial rotation. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,295,private Rotation   rotation;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,297,/** Cached original hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,298,private Hyperplane cachedOriginal;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,300,/** Cached 2D transform valid inside the cached original hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,301,private Transform  cachedTransform;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,303,/** Build a rotation transform.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,304,* @param center center point of the rotation
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,305,* @param rotation vectorial rotation
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,307,"public RotationTransform(final Vector3D center, final Rotation rotation) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,308,this.center   = center;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,309,this.rotation = rotation;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,312,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,313,public Point apply(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,314,final Vector3D delta = ((Vector3D) point).subtract(center);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,315,"return new Point3D(1.0, center, 1.0, rotation.applyTo(delta));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,318,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,319,public Hyperplane apply(final Hyperplane hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,320,"return ((Plane) hyperplane).rotate(center, rotation);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,323,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,324,"public SubHyperplane apply(final SubHyperplane sub,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,325,"final Hyperplane original, final Hyperplane transformed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,326,if (original != cachedOriginal) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,327,"// we have changed hyperplane, reset the in-hyperplane transform"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,329,final Plane    oPlane = (Plane) original;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,330,final Plane    tPlane = (Plane) transformed;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,331,final Vector3D p00    = oPlane.getOrigin();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,332,"final Vector3D p10    = (Vector3D) oPlane.toSpace(new Point2D(1.0, 0.0));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,333,"final Vector3D p01    = (Vector3D) oPlane.toSpace(new Point2D(0.0, 1.0));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,334,final Point2D  tP00   = (Point2D) tPlane.toSubSpace(apply((Point) p00));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,335,final Point2D  tP10   = (Point2D) tPlane.toSubSpace(apply((Point) p10));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,336,final Point2D  tP01   = (Point2D) tPlane.toSubSpace(apply((Point) p01));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,337,final AffineTransform at =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,338,"new AffineTransform(tP10.getX() - tP00.getX(), tP10.getY() - tP00.getY(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,339,"tP01.getX() - tP00.getX(), tP01.getY() - tP00.getY(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,340,"tP00.getX(), tP00.getY());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,342,cachedOriginal  = original;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,343,cachedTransform = org.apache.commons.math.geometry.euclidean.twoD.Line.getTransform(at);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,346,return sub.applyTransform(cachedTransform);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,351,/** Translate the region by the specified amount.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,352,"* <p>The instance is not modified, a new instance is created.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,353,* @param translation translation to apply
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,354,* @return a new instance representing the translated region
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,356,public PolyhedronsSet translate(final Vector3D translation) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,357,return (PolyhedronsSet) applyTransform(new TranslationTransform(translation));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,360,/** 3D translation as a transform. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,361,private static class TranslationTransform implements Transform {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,363,/** Translation vector. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,364,private Vector3D   translation;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,366,/** Cached original hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,367,private Hyperplane cachedOriginal;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,369,/** Cached 2D transform valid inside the cached original hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,370,private Transform  cachedTransform;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,372,/** Build a translation transform.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,373,* @param translation translation vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,375,public TranslationTransform(final Vector3D translation) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,376,this.translation = translation;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,379,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,380,public Point apply(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,381,"return new Point3D(1.0, (Vector3D) point, 1.0, translation);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,384,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,385,public Hyperplane apply(final Hyperplane hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,386,return ((Plane) hyperplane).translate(translation);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,389,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,390,"public SubHyperplane apply(final SubHyperplane sub,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,391,"final Hyperplane original, final Hyperplane transformed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,392,if (original != cachedOriginal) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,393,"// we have changed hyperplane, reset the in-hyperplane transform"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,395,final Plane   oPlane = (Plane) original;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,396,final Plane   tPlane = (Plane) transformed;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,397,final Point2D shift  = (Point2D) tPlane.toSubSpace(apply((Point) oPlane.getOrigin()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,398,final AffineTransform at =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,399,"AffineTransform.getTranslateInstance(shift.getX(), shift.getY());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,401,cachedOriginal  = original;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,402,cachedTransform =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,403,org.apache.commons.math.geometry.euclidean.twoD.Line.getTransform(at);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSet.java,407,return sub.applyTransform(cachedTransform);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Rotation.java,18,ackage org.apache.commons.math.geometry;
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Rotation.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
False,src/main/java/org/apache/commons/math/geometry/RotationOrder.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrder.java,18,ackage org.apache.commons.math.geometry;
True,src/main/java/org/apache/commons/math/geometry/RotationOrder.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrder.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3D.java,18,ackage org.apache.commons.math.geometry;
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3D.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DFormat.java,18,ackage org.apache.commons.math.geometry;
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DFormat.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,17,package org.apache.commons.math.geometry.euclidean.twoD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,19,import java.awt.geom.AffineTransform;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,21,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,22,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,23,import org.apache.commons.math.geometry.euclidean.oneD.IntervalsSet;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,24,import org.apache.commons.math.geometry.euclidean.oneD.OrientedPoint;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,25,import org.apache.commons.math.geometry.euclidean.oneD.Point1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,26,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,27,import org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,28,import org.apache.commons.math.geometry.partitioning.Point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,29,import org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,30,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,31,import org.apache.commons.math.geometry.partitioning.SubSpace;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,32,import org.apache.commons.math.geometry.partitioning.Transform;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,33,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,34,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,36,/** This class represents an oriented line in the 2D plane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,38,* <p>An oriented line can be defined either by prolongating a line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,39,"* segment between two points past these points, or by one point and"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,40,* an angular direction (in trigonometric orientation).</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,42,* <p>Since it is oriented the two half planes at its two sides are
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,43,* unambiguously identified as a left half plane and a right half
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,44,* plane. This can be used to identify the interior and the exterior
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,45,* in a simple way by local properties only when part of a line is
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,46,* used to define part of a polygon boundary.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,48,* <p>A line can also be used to completely define a reference frame
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,49,* in the plane. It is sufficient to select one specific point in the
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,50,* line (the orthogonal projection of the original reference frame on
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,51,* the line) and to use the unit vector in the line direction and the
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,52,* orthogonal vector oriented from left half plane to right half
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,53,"* plane. We define two coordinates by the process, the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,54,"* <em>abscissa</em> along the line, and the <em>offset</em> across"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,55,* the line. All points of the plane are uniquely identified by these
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,56,"* two coordinates. The line is the set of points at zero offset, the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,57,* left half plane is the set of points with negative offsets and the
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,58,* right half plane is the set of points with positive offsets.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,60,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,62,public class Line implements Hyperplane {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,64,/** Angle with respect to the abscissa axis. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,65,private double angle;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,67,/** Cosine of the line angle. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,68,private double cos;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,70,/** Sine of the line angle. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,71,private double sin;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,73,/** Offset of the frame origin. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,74,private double originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,76,/** Build a line from two points.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,77,* <p>The line is oriented from p1 to p2</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,78,* @param p1 first point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,79,* @param p2 second point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,81,"public Line(final Point2D p1, final Point2D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,82,"reset(p1, p2);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,85,/** Build a line from a point and an angle.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,86,* @param p point belonging to the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,87,* @param angle angle of the line with respect to abscissa axis
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,89,"public Line(final Point2D p, final double angle) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,90,"reset(p, angle);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,93,/** Build a line from its internal characteristics.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,94,* @param angle angle of the line with respect to abscissa axis
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,95,* @param cos cosine of the angle
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,96,* @param sin sine of the angle
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,97,* @param originOffset offset of the origin
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,99,"private Line(final double angle, final double cos, final double sin, final double originOffset) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,100,this.angle        = angle;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,101,this.cos          = cos;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,102,this.sin          = sin;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,103,this.originOffset = originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,106,/** Copy constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,107,* <p>The created instance is completely independant from the
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,108,"* original instance, it is a deep copy.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,109,* @param line line to copy
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,111,public Line(final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,112,"angle        = MathUtils.normalizeAngle(line.angle, FastMath.PI);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,113,cos          = FastMath.cos(angle);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,114,sin          = FastMath.sin(angle);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,115,originOffset = line.originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,118,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,119,public Hyperplane copySelf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,120,return new Line(this);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,123,/** Reset the instance as if built from two points.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,124,* <p>The line is oriented from p1 to p2</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,125,* @param p1 first point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,126,* @param p2 second point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,128,"public void reset(final Point2D p1, final Point2D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,129,final double dx = p2.x - p1.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,130,final double dy = p2.y - p1.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,131,"final double d = FastMath.hypot(dx, dy);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,132,if (d == 0.0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,133,angle        = 0.0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,134,cos          = 1.0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,135,sin          = 0.0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,136,originOffset = p1.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,137,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,138,"angle        = FastMath.PI + FastMath.atan2(-dy, -dx);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,139,cos          = FastMath.cos(angle);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,140,sin          = FastMath.sin(angle);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,141,originOffset = (p2.x * p1.y - p1.x * p2.y) / d;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,145,/** Reset the instance as if built from a line and an angle.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,146,* @param p point belonging to the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,147,* @param alpha angle of the line with respect to abscissa axis
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,149,"public void reset(final Point2D p, final double alpha) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,150,"this.angle   = MathUtils.normalizeAngle(alpha, FastMath.PI);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,151,cos          = FastMath.cos(this.angle);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,152,sin          = FastMath.sin(this.angle);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,153,originOffset = cos * p.y - sin * p.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,156,/** Revert the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,158,public void revertSelf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,159,if (angle < FastMath.PI) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,160,angle += FastMath.PI;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,161,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,162,angle -= FastMath.PI;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,164,cos          = -cos;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,165,sin          = -sin;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,166,originOffset = -originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,169,/** Get the reverse of the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,170,* <p>Get a line with reversed orientation with respect to the
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,171,"* instance. A new object is built, the instance is untouched.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,172,"* @return a new line, with orientation opposite to the instance orientation"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,174,public Line getReverse() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,175,"return new Line((angle < FastMath.PI) ? (angle + FastMath.PI) : (angle - FastMath.PI),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,176,"-cos, -sin, -originOffset);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,179,/** Transform a 2D space point into a line point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,180,* @param point 2D point (must be a {@link Point2D Point2D}
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,181,* instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,182,* @return line point corresponding to the 2D point (really a {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,183,* org.apache.commons.math.geometry.euclidean.oneD.Point1D Point1D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,184,* @see #toSpace
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,186,public Point toSubSpace(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,187,final Point2D p2D = (Point2D) point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,188,return new Point1D(cos * p2D.x + sin * p2D.y);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,191,/** Get one point from the line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,192,* @param point desired abscissa for the point (must be a {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,193,* org.apache.commons.math.geometry.euclidean.oneD.Point1D Point1D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,194,* @return line point at specified abscissa (really a {@link Point2D
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,195,* Point2D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,197,public Point toSpace(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,198,final double abscissa = ((Point1D) point).getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,199,"return new Point2D(abscissa * cos - originOffset * sin,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,200,abscissa * sin + originOffset * cos);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,203,/** Get the intersection point of the instance and another line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,204,* @param other other line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,205,* @return intersection point of the instance and the other line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,206,* (really a {@link Point2D Point2D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,208,public SubSpace intersection(final Hyperplane other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,209,final Line otherL = (Line) other;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,210,final double d = sin * otherL.cos - otherL.sin * cos;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,211,if (FastMath.abs(d) < 1.0e-10) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,212,return null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,214,"return new Point2D((cos * otherL.originOffset - otherL.cos * originOffset) / d,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,215,(sin * otherL.originOffset - otherL.sin * originOffset) / d);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,218,/** Build a region covering the whole hyperplane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,219,* @return a region covering the whole hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,221,public Region wholeHyperplane() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,222,return new IntervalsSet();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,225,/** Build a region covering the whole space.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,226,* @return a region containing the instance (really a {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,227,* PolygonsSet PolygonsSet} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,229,public Region wholeSpace() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,230,return new PolygonsSet();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,233,/** Get the offset (oriented distance) of a parallel line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,234,* <p>This method should be called only for parallel lines otherwise
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,235,* the result is not meaningful.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,236,"* <p>The offset is 0 if both lines are the same, it is"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,237,* positive if the line is on the right side of the instance and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,238,"* negative if it is on the left side, according to its natural"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,239,* orientation.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,240,* @param line line to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,241,* @return offset of the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,243,public double getOffset(final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,244,return originOffset +
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,245,((cos * line.cos + sin * line.sin > 0) ? -line.originOffset : line.originOffset);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,248,/** Get the offset (oriented distance) of a point to the line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,249,"* <p>The offset is 0 if the point belongs to the line, it is"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,250,* positive if the point is on the right side of the line and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,251,"* negative if it is on the left side, according to its natural"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,252,* orientation.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,253,* @param point point to check (must be a {@link Point2D Point2D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,254,* @return offset of the point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,256,public double getOffset(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,257,final Point2D p2D = (Point2D) point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,258,return sin * p2D.x - cos * p2D.y + originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,261,/** Check if the instance has the same orientation as another hyperplane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,262,* <p>This method is expected to be called on parallel hyperplanes
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,263,* (i.e. when the {@link #side side} method would return {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,264,* org.apache.commons.math.geometry.partitioning.Hyperplane.Side#HYPER HYPER}
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,265,* for some sub-hyperplane having the specified hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,266,* as its underlying hyperplane). The method should <em>not</em>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,267,"* re-check for parallelism, only for orientation, typically by"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,268,* testing something like the sign of the dot-products of
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,269,* normals.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,270,* @param other other hyperplane to check against the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,271,* @return true if the instance and the other hyperplane have
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,272,* the same orientation
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,274,public boolean sameOrientationAs(final Hyperplane other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,275,final Line otherL = (Line) other;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,276,return (sin * otherL.sin + cos * otherL.cos) >= 0.0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,279,/** Get one point from the plane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,280,* @param abscissa desired abscissa for the point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,281,* @param offset desired offset for the point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,282,"* @return one point in the plane, with given abscissa and offset"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,283,* relative to the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,285,"public Point2D getPointAt(final Point1D abscissa, final double offset) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,286,final double x       = abscissa.getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,287,final double dOffset = offset - originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,288,"return new Point2D(x * cos + dOffset * sin, x * sin - dOffset * cos);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,291,/** Check if the line contains a point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,292,* @param p point to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,293,* @return true if p belongs to the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,295,public boolean contains(final Point2D p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,296,return FastMath.abs(getOffset(p)) < 1.0e-10;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,299,/** Check the instance is parallel to another line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,300,* @param line other line to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,301,* @return true if the instance is parallel to the other line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,302,* (they can have either the same or opposite orientations)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,304,public boolean isParallelTo(final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,305,return FastMath.abs(sin * line.cos - cos * line.sin) < 1.0e-10;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,308,/** Translate the line to force it passing by a point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,309,* @param p point by which the line should pass
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,311,public void translateToPoint(final Point2D p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,312,originOffset = cos * p.y - sin * p.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,315,/** Get the angle of the line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,316,* @return the angle of the line with respect to the abscissa axis
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,318,public double getAngle() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,319,"return MathUtils.normalizeAngle(angle, FastMath.PI);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,322,/** Set the angle of the line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,323,* @param angle new angle of the line with respect to the abscissa axis
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,325,public void setAngle(final double angle) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,326,"this.angle = MathUtils.normalizeAngle(angle, FastMath.PI);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,327,cos        = FastMath.cos(this.angle);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,328,sin        = FastMath.sin(this.angle);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,331,/** Get the offset of the origin.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,332,* @return the offset of the origin
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,334,public double getOriginOffset() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,335,return originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,338,/** Set the offset of the origin.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,339,* @param offset offset of the origin
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,341,public void setOriginOffset(final double offset) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,342,originOffset = offset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,345,/** Compute the relative position of a sub-hyperplane with respect
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,346,* to the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,347,* @param sub sub-hyperplane to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,348,"* @return one of {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#PLUS PLUS},"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,349,"* {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#MINUS MINUS},"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,350,"* {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#BOTH BOTH},"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,351,* {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#HYPER HYPER}
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,353,public Side side(final SubHyperplane sub) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,355,final Hyperplane otherHyp = sub.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,356,final Point2D    crossing = (Point2D) intersection(otherHyp);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,358,if (crossing == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,359,"// the lines are parallel,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,360,final double global = getOffset((Line) otherHyp);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,361,return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,364,// the lines do intersect
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,365,final boolean direct = FastMath.sin(((Line) otherHyp).angle - angle) < 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,366,final Point1D x = (Point1D) otherHyp.toSubSpace(crossing);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,367,"return sub.getRemainingRegion().side(new OrientedPoint(x, direct));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,371,/** Split a sub-hyperplane in two parts by the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,372,* @param sub sub-hyperplane to split
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,373,* @return an object containing both the part of the sub-hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,374,* on the plus side of the instance and the part of the
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,375,* sub-hyperplane on the minus side of the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,377,public SplitSubHyperplane split(final SubHyperplane sub) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,379,final Line    otherLine = (Line) sub.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,380,final Point2D crossing  = (Point2D) intersection(otherLine);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,382,if (crossing == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,383,// the lines are parallel
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,384,final double global = getOffset(otherLine);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,385,return (global < -1.0e-10) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,386,"new SplitSubHyperplane(null, sub) :"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,387,"new SplitSubHyperplane(sub, null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,390,// the lines do intersect
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,391,final boolean direct = FastMath.sin(otherLine.angle - angle) < 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,392,final Point1D x      = (Point1D) otherLine.toSubSpace(crossing);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,393,"final SubHyperplane subPlus  = new SubHyperplane(new OrientedPoint(x, !direct));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,394,"final SubHyperplane subMinus = new SubHyperplane(new OrientedPoint(x, direct));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,396,final BSPTree splitTree =
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,397,sub.getRemainingRegion().getTree(false).split(subMinus);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,398,final BSPTree plusTree  = Region.isEmpty(splitTree.getPlus()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,399,new BSPTree(Boolean.FALSE) :
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,400,"new BSPTree(subPlus, new BSPTree(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,401,"splitTree.getPlus(), null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,402,final BSPTree minusTree = Region.isEmpty(splitTree.getMinus()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,403,new BSPTree(Boolean.FALSE) :
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,404,"new BSPTree(subMinus, new BSPTree(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,405,"splitTree.getMinus(), null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,407,"return new SplitSubHyperplane(new SubHyperplane(otherLine.copySelf(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,408,"new IntervalsSet(plusTree)),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,409,"new SubHyperplane(otherLine.copySelf(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,410,new IntervalsSet(minusTree)));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,414,/** Get a {@link org.apache.commons.math.geometry.partitioning.Transform
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,415,* Transform} embedding an affine transform.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,416,* @param transform affine transform to embed (must be inversible
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,417,* otherwise the {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,418,* org.apache.commons.math.geometry.partitioning.Transform#apply(Hyperplane)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,419,"* apply(Hyperplane)} method would work only for some lines, and"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,420,* fail for other ones)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,421,* @return a new transform that can be applied to either {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,422,"* Point2D Point2D}, {@link Line Line} or {@link"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,423,* org.apache.commons.math.geometry.partitioning.SubHyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,424,* SubHyperplane} instances
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,425,* @exception MathIllegalArgumentException if the transform is non invertible
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,427,public static Transform getTransform(final AffineTransform transform) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,428,return new LineTransform(transform);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,431,/** Class embedding an affine transform.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,432,* <p>This class is used in order to apply an affine transform to a
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,433,* line. Using a specific object allow to perform some computations
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,434,* on the transform only once even if the same transform is to be
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,435,* applied to a large number of lines (for example to a large
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,436,* polygon)./<p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,438,private static class LineTransform implements Transform {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,440,// CHECKSTYLE: stop JavadocVariable check
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,441,private double cXX;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,442,private double cXY;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,443,private double cX1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,444,private double cYX;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,445,private double cYY;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,446,private double cY1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,448,private double c1Y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,449,private double c1X;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,450,private double c11;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,451,// CHECKSTYLE: resume JavadocVariable check
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,453,/** Build an affine line transform from a n {@code AffineTransform}.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,454,* @param transform transform to use (must be invertible otherwise
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,455,* the {@link LineTransform#apply(Hyperplane)} method would work
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,456,"* only for some lines, and fail for other ones)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,457,* @exception MathIllegalArgumentException if the transform is non invertible
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,459,public LineTransform(final AffineTransform transform) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,461,final double[] m = new double[6];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,462,transform.getMatrix(m);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,463,cXX = m[0];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,464,cXY = m[2];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,465,cX1 = m[4];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,466,cYX = m[1];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,467,cYY = m[3];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,468,cY1 = m[5];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,470,c1Y = cXY * cY1 - cYY * cX1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,471,c1X = cXX * cY1 - cYX * cX1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,472,c11 = cXX * cYY - cYX * cXY;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,474,if (FastMath.abs(c11) < 1.0e-20) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,475,throw new MathIllegalArgumentException(LocalizedFormats.NON_INVERTIBLE_TRANSFORM);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,480,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,481,public Point apply(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,482,final Point2D p2D = (Point2D) point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,483,final double  x   = p2D.getX();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,484,final double  y   = p2D.getY();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,485,"return new Point2D(cXX * x + cXY * y + cX1,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,486,cYX * x + cYY * y + cY1);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,489,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,490,public Hyperplane apply(final Hyperplane hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,491,final Line   line    = (Line) hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,492,final double rOffset = c1X * line.cos + c1Y * line.sin + c11 * line.originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,493,final double rCos    = cXX * line.cos + cXY * line.sin;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,494,final double rSin    = cYX * line.cos + cYY * line.sin;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,495,final double inv     = 1.0 / FastMath.sqrt(rSin * rSin + rCos * rCos);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,496,"return new Line(FastMath.PI + FastMath.atan2(-rSin, -rCos),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,497,"inv * rCos, inv * rSin,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,498,inv * rOffset);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,501,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,502,"public SubHyperplane apply(final SubHyperplane sub,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,503,"final Hyperplane original, final Hyperplane transformed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,504,final OrientedPoint op = (OrientedPoint) sub.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,505,final Point1D newLoc =
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,506,(Point1D) transformed.toSubSpace(apply(original.toSpace(op.getLocation())));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Line.java,507,"return new SubHyperplane(new OrientedPoint(newLoc, op.isDirect()));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,17,package org.apache.commons.math.geometry.euclidean.twoD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,21,import java.util.Iterator;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,23,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,24,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,25,import org.apache.commons.math.geometry.euclidean.oneD.OrientedPoint;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,26,import org.apache.commons.math.geometry.euclidean.oneD.Point1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,27,import org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,28,import org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,29,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,31,/** This class represent a tree of nested 2D boundary loops.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,33,* <p>This class is used during Piece instances construction.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,34,* Beams are built using the outline edges as
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,35,"* representative of facets, the orientation of these facets are"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,36,"* meaningful. However, we want to allow the user to specify its"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,37,* outline loops without having to take care of this orientation. This
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,38,* class is devoted to correct mis-oriented loops.<p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,40,"* <p>Orientation is computed assuming the piece is finite, i.e. the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,41,"* outermost loops have their exterior side facing points at infinity,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,42,* and hence are oriented counter-clockwise. The orientation of
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,43,* internal loops is computed as the reverse of the orientation of
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,44,* their immediate surrounding loop.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,46,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,48,class NestedLoops {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,50,/** Boundary loop. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,51,private Point2D[] loop;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,53,/** Surrounded loops. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,54,private ArrayList<NestedLoops> surrounded;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,56,/** Polygon enclosing a finite region. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,57,private Region polygon;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,59,/** Indicator for original loop orientation. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,60,private boolean originalIsClockwise;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,62,/** Simple Constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,63,* <p>Build an empty tree of nested loops. This instance will become
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,64,"* the root node of a complete tree, it is not associated with any"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,65,"* loop by itself, the outermost loops are in the root tree child"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,66,* nodes.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,68,public NestedLoops() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,69,surrounded = new ArrayList<NestedLoops>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,72,/** Constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,73,* <p>Build a tree node with neither parent nor children</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,74,* @param loop boundary loop (will be reversed in place if needed)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,75,* @exception MathIllegalArgumentException if an outline has an open boundary loop
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,77,private NestedLoops(final Point2D[] loop) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,79,if (loop[0] == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,80,throw new MathIllegalArgumentException(LocalizedFormats.OUTLINE_BOUNDARY_LOOP_OPEN);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,83,this.loop = loop;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,84,surrounded = new ArrayList<NestedLoops>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,86,// build the polygon defined by the loop
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,87,final ArrayList<SubHyperplane> edges = new ArrayList<SubHyperplane>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,88,Point2D current = loop[loop.length - 1];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,89,for (int i = 0; i < loop.length; ++i) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,90,final Point2D previous = current;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,91,current = loop[i];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,92,"final Line   line   = new Line(previous, current);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,93,final Region region =  Region.buildConvex(Arrays.asList(new Hyperplane[] {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,94,"new OrientedPoint((Point1D) line.toSubSpace(previous), false),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,95,"new OrientedPoint((Point1D) line.toSubSpace(current),  true)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,97,"edges.add(new SubHyperplane(line, region));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,99,polygon = new PolygonsSet(edges);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,101,// ensure the polygon encloses a finite region of the plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,102,if (Double.isInfinite(polygon.getSize())) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,103,polygon = polygon.getComplement();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,104,originalIsClockwise = false;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,105,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,106,originalIsClockwise = true;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,111,/** Add a loop in a tree.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,112,* @param bLoop boundary loop (will be reversed in place if needed)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,113,* @exception MathIllegalArgumentException if an outline has crossing
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,114,* boundary loops or open boundary loops
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,116,public void add(final Point2D[] bLoop) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,117,add(new NestedLoops(bLoop));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,120,/** Add a loop in a tree.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,121,* @param node boundary loop (will be reversed in place if needed)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,122,* @exception MathIllegalArgumentException if an outline has boundary
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,123,* loops that cross each other
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,125,private void add(final NestedLoops node) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,127,// check if we can go deeper in the tree
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,128,for (final NestedLoops child : surrounded) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,129,if (child.polygon.contains(node.polygon)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,130,child.add(node);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,131,return;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,135,// check if we can absorb some of the instance children
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,136,for (final Iterator<NestedLoops> iterator = surrounded.iterator(); iterator.hasNext();) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,137,final NestedLoops child = iterator.next();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,138,if (node.polygon.contains(child.polygon)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,139,node.surrounded.add(child);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,140,iterator.remove();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,144,// we should be separate from the remaining children
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,145,for (final NestedLoops child : surrounded) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,146,"if (!Region.intersection(node.polygon, child.polygon).isEmpty()) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,147,throw new MathIllegalArgumentException(LocalizedFormats.CROSSING_BOUNDARY_LOOPS);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,151,surrounded.add(node);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,155,/** Correct the orientation of the loops contained in the tree.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,156,* <p>This is this method that really inverts the loops that where
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,157,* provided through the {@link #add(Point2D[]) add} method if
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,158,* they are mis-oriented</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,160,public void correctOrientation() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,161,for (NestedLoops child : surrounded) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,162,child.setClockWise(true);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,166,/** Set the loop orientation.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,167,"* @param clockwise if true, the loop should be set to clockwise"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,168,* orientation
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,170,private void setClockWise(final boolean clockwise) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,172,if (originalIsClockwise ^ clockwise) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,173,// we need to inverse the original loop
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,174,int min = -1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,175,int max = loop.length;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,176,while (++min < --max) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,177,final Point2D tmp = loop[min];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,178,loop[min] = loop[max];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,179,loop[max] = tmp;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,183,// go deeper in the tree
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,184,for (final NestedLoops child : surrounded) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/NestedLoops.java,185,child.setClockWise(!clockwise);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,17,package org.apache.commons.math.geometry.euclidean.twoD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,19,import org.apache.commons.math.geometry.partitioning.Point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,20,import org.apache.commons.math.geometry.partitioning.SubSpace;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,22,/** This class represents a 2D point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,23,* <p>Instances of this class are guaranteed to be immutable.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,24,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,26,"public class Point2D extends java.awt.geom.Point2D.Double implements Point, SubSpace {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,28,/** Point at undefined (NaN) coordinates. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,29,"public static final Point2D UNDEFINED = new Point2D(java.lang.Double.NaN, java.lang.Double.NaN);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,31,/** Serializable UID. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,32,private static final long serialVersionUID = 8883702098988517151L;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,34,/** Build a point with default coordinates.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,36,public Point2D() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,39,/** Build a point from its coordinates.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,40,* @param x abscissa
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,41,* @param y ordinate
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,43,"public Point2D(final double x, final double y) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,44,"super(x, y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,47,/** Build a point from a java awt point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,48,* @param point java awt point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,50,public Point2D(final java.awt.geom.Point2D.Double point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,51,"super(point.x, point.y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,54,/** Transform a 2D space point into a sub-space point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,55,* @param point 2D point of the space
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,56,* @return always return null
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,57,* @see #toSpace
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,59,public Point toSubSpace(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,60,return null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,63,/** Transform a sub-space point into a space point.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,64,* @param point ignored parameter
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,65,* @return always return the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,66,* @see #toSubSpace
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,68,public Point toSpace(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Point2D.java,69,return this;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,17,package org.apache.commons.math.geometry.euclidean.twoD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,21,import java.util.Collection;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,22,import java.util.List;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,24,import org.apache.commons.math.geometry.euclidean.oneD.Point1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,25,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,26,import org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,27,import org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,28,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,29,import org.apache.commons.math.geometry.partitioning.utilities.AVLTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,30,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,32,/** This class represents a 2D region: a set of polygons.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,33,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,35,public class PolygonsSet extends Region {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,37,/** Vertices organized as boundary loops. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,38,private Point2D[][] vertices;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,40,/** Build a polygons set representing the whole real line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,42,public PolygonsSet() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,43,super();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,46,/** Build a polygons set from a BSP tree.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,47,* <p>The leaf nodes of the BSP tree <em>must</em> have a
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,48,* {@code Boolean} attribute representing the inside status of
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,49,"* the corresponding cell (true for inside cells, false for outside"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,50,"* cells). In order to avoid building too many small objects, it is"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,51,* recommended to use the predefined constants
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,52,* {@code Boolean.TRUE} and {@code Boolean.FALSE}</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,53,* @param tree inside/outside BSP tree representing the region
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,55,public PolygonsSet(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,56,super(tree);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,59,/** Build a polygons set from a Boundary REPresentation (B-rep).
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,60,* <p>The boundary is provided as a collection of {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,61,* SubHyperplane sub-hyperplanes}. Each sub-hyperplane has the
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,62,* interior part of the region on its minus side and the exterior on
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,63,* its plus side.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,64,"* <p>The boundary elements can be in any order, and can form"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,65,* several non-connected sets (like for example polygons with holes
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,66,* or a set of disjoints polyhedrons considered as a whole). In
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,67,"* fact, the elements do not even need to be connected together"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,68,"* (their topological connections are not used here). However, if the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,69,* boundary does not really separate an inside open from an outside
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,70,"* open (open having here its topological meaning), then subsequent"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,71,* calls to the {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,72,* Region#checkPoint(org.apache.commons.math.geometry.partitioning.Point)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,73,* checkPoint} method will not be meaningful anymore.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,74,"* <p>If the boundary is empty, the region will represent the whole"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,75,* space.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,76,"* @param boundary collection of boundary elements, as a"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,77,* collection of {@link SubHyperplane SubHyperplane} objects
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,79,public PolygonsSet(final Collection<SubHyperplane> boundary) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,80,super(boundary);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,83,/** Build a parallellepipedic box.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,84,* @param xMin low bound along the x direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,85,* @param xMax high bound along the x direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,86,* @param yMin low bound along the y direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,87,* @param yMax high bound along the y direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,89,"public PolygonsSet(final double xMin, final double xMax,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,90,"final double yMin, final double yMax) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,91,"this(buildConvex(boxBoundary(xMin, xMax, yMin, yMax)).getTree(false));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,94,/** Create a list of hyperplanes representing the boundary of a box.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,95,* @param xMin low bound along the x direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,96,* @param xMax high bound along the x direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,97,* @param yMin low bound along the y direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,98,* @param yMax high bound along the y direction
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,99,* @return boundary of the box
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,101,"private static List<Hyperplane> boxBoundary(final double xMin, final double xMax,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,102,"final double yMin, final double yMax) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,103,"final Point2D minMin = new Point2D(xMin, yMin);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,104,"final Point2D minMax = new Point2D(xMin, yMax);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,105,"final Point2D maxMin = new Point2D(xMax, yMin);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,106,"final Point2D maxMax = new Point2D(xMax, yMax);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,107,return Arrays.asList(new Hyperplane[] {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,108,"new Line(minMin, maxMin),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,109,"new Line(maxMin, maxMax),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,110,"new Line(maxMax, minMax),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,111,"new Line(minMax, minMin)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,115,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,116,public Region buildNew(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,117,return new PolygonsSet(tree);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,120,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,121,protected void computeGeometricalProperties() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,123,final Point2D[][] v = getVertices();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,125,if (v.length == 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,126,if ((Boolean) getTree(false).getAttribute()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,127,setSize(Double.POSITIVE_INFINITY);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,128,setBarycenter(Point2D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,129,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,130,setSize(0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,131,"setBarycenter(new Point2D(0, 0));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,133,} else if (v[0][0] == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,134,// there is at least one open-loop: the polygon is infinite
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,135,setSize(Double.POSITIVE_INFINITY);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,136,setBarycenter(Point2D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,137,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,138,"// all loops are closed, we compute some integrals around the shape"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,140,double sum  = 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,141,double sumX = 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,142,double sumY = 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,144,for (Point2D[] loop : v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,145,double x1 = loop[loop.length - 1].x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,146,double y1 = loop[loop.length - 1].y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,147,for (final Point2D point : loop) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,148,final double x0 = x1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,149,final double y0 = y1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,150,x1 = point.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,151,y1 = point.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,152,final double factor = x0 * y1 - y0 * x1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,153,sum  += factor;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,154,sumX += factor * (x0 + x1);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,155,sumY += factor * (y0 + y1);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,159,if (sum < 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,160,// the polygon as a finite outside surrounded by an infinite inside
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,161,setSize(Double.POSITIVE_INFINITY);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,162,setBarycenter(Point2D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,163,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,164,setSize(sum / 2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,165,"setBarycenter(new Point2D(sumX / (3 * sum), sumY / (3 * sum)));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,172,/** Get the vertices of the polygon.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,173,"* <p>The polygon boundary can be represented as an array of loops,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,174,* each loop being itself an array of vertices.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,175,* <p>In order to identify open loops which start and end by
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,176,"* infinite edges, the open loops arrays start with a null point. In"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,177,"* this case, the first non null point and the last point of the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,178,"* array do not represent real vertices, they are dummy points"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,179,* intended only to get the direction of the first and last edge. An
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,180,* open loop consisting of a single infinite line will therefore be
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,181,* represented by a three elements array with one null point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,182,* followed by two dummy points. The open loops are always the first
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,183,* ones in the loops array.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,184,"* <p>If the polygon has no boundary at all, a zero length loop"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,185,* array will be returned.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,186,* <p>All line segments in the various loops have the inside of the
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,187,* region on their left side and the outside on their right side
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,188,* when moving in the underlying line direction. This means that
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,189,* closed loops surrounding finite areas obey the direct
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,190,* trigonometric orientation.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,191,"* @return vertices of the polygon, organized as oriented boundary"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,192,* loops with the open loops first (the returned value is guaranteed
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,193,* to be non-null)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,195,public Point2D[][] getVertices() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,196,if (vertices == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,197,if (getTree(false).getCut() == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,198,vertices = new Point2D[0][];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,199,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,201,// sort the segmfinal ents according to their start point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,202,final SegmentsBuilder visitor = new SegmentsBuilder();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,203,getTree(true).visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,204,final AVLTree<Segment> sorted = visitor.getSorted();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,206,"// identify the loops, starting from the open ones"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,207,// (their start segments final are naturally at the sorted set beginning)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,208,final ArrayList<List<Segment>> loops = new ArrayList<List<Segment>>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,209,while (!sorted.isEmpty()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,210,final AVLTree<Segment>.Node node = sorted.getSmallest();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,211,"final List<Segment> loop = followLoop(node, sorted);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,212,if (loop != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,213,loops.add(loop);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,217,// tranform the loops in an array of arrays of points
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,218,vertices = new Point2D[loops.size()][];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,219,int i = 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,221,for (final List<Segment> loop : loops) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,222,if (loop.size() < 2) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,223,// sifinal ngle infinite line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,224,final Line line = ((Segment) loop.get(0)).getLine();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,225,vertices[i++] = new Point2D[] {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,226,"null,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,227,"(Point2D) line.toSpace(new Point1D(-Float.MAX_VALUE)),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,228,(Point2D) line.toSpace(new Point1D(+Float.MAX_VALUE))
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,230,} else if (((Segment) loop.get(0)).getStart() == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,231,// open lofinal op with at least one real point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,232,final Point2D[] array = new Point2D[loop.size() + 2];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,233,int j = 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,234,for (Segment segment : loop) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,236,if (j == 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,237,// null point and first dummy point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,238,double x =
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,239,((Point1D) segment.getLine().toSubSpace(segment.getEnd())).getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,240,"x -= FastMath.max(1.0, FastMath.abs(x / 2));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,241,array[j++] = null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,242,array[j++] = (Point2D) segment.getLine().toSpace(new Point1D(x));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,245,if (j < (array.length - 1)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,246,// current point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,247,array[j++] = segment.getEnd();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,250,if (j == (array.length - 1)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,251,// last dummy point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,252,double x =
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,253,((Point1D) segment.getLine().toSubSpace(segment.getStart())).getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,254,"x += FastMath.max(1.0, FastMath.abs(x / 2));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,255,array[j++] = (Point2D) segment.getLine().toSpace(new Point1D(x));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,259,vertices[i++] = array;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,260,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,261,final Point2D[] array = new Point2D[loop.size()];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,262,int j = 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,263,for (Segment segment : loop) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,264,array[j++] = segment.getStart();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,266,vertices[i++] = array;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,273,return vertices.clone();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,277,/** Follow a boundary loop.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,278,* @param node node containing the segment starting the loop
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,279,"* @param sorted set of segments belonging to the boundary, sorted by"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,280,* start points (contains {@code node})
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,281,* @return a list of connected sub-hyperplanes starting at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,282,* {@code node}
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,284,"private List<Segment> followLoop(final AVLTree<Segment>.Node node,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,285,final AVLTree<Segment> sorted) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,287,final ArrayList<Segment> loop = new ArrayList<Segment>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,288,Segment segment = (Segment) node.getElement();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,289,loop.add(segment);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,290,final Point2D globalStart = segment.getStart();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,291,Point2D end = segment.getEnd();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,292,node.delete();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,294,// is this an open or a closed loop ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,295,final boolean open = segment.getStart() == null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,297,while ((end != null) && (open || (globalStart.distance(end) > 1.0e-10))) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,299,// search the sub-hyperplane starting where the previous one ended
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,300,AVLTree<Segment>.Node selectedNode = null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,301,Segment       selectedSegment  = null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,302,double        selectedDistance = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,303,"final Segment lowerLeft        = new Segment(end, -1.0e-10, -1.0e-10);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,304,"final Segment upperRight       = new Segment(end, +1.0e-10, +1.0e-10);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,305,for (AVLTree<Segment>.Node n = sorted.getNotSmaller(lowerLeft);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,306,(n != null) && (n.getElement().compareTo(upperRight) <= 0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,307,n = n.getNext()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,308,segment = (Segment) n.getElement();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,309,final double distance = end.distance(segment.getStart());
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,310,if (distance < selectedDistance) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,311,selectedNode     = n;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,312,selectedSegment  = segment;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,313,selectedDistance = distance;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,317,if (selectedDistance > 1.0e-10) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,318,"// this is a degenerated loop, it probably comes from a very"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,319,"// tiny region with some segments smaller than the threshold, we"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,320,// simply ignore it
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,321,return null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,324,end = selectedSegment.getEnd();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,325,loop.add(selectedSegment);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,326,selectedNode.delete();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,330,if ((loop.size() == 2) && !open) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,331,"// this is a degenerated infinitely thin loop, we simply ignore it"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,332,return null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,335,if ((end == null) && !open) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,336,"throw new RuntimeException(""internal error"");"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSet.java,339,return loop;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,17,package org.apache.commons.math.geometry.euclidean.twoD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,19,import org.apache.commons.math.geometry.partitioning.utilities.OrderedTuple;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,21,/** This class holds segments information before they are connected.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,22,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,24,class Segment implements Comparable<Segment> {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,26,/** Start point of the segment. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,27,private final Point2D      start;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,29,/** End point of the segments. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,30,private final Point2D      end;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,32,/** Line containing the segment. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,33,private final Line         line;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,35,/** Sorting key. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,36,private      OrderedTuple sortingKey;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,38,/** Build a segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,39,* @param start start point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,40,* @param end end point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,41,* @param line line containing the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,43,"public Segment(final Point2D start, final Point2D end, final Line line) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,44,this.start  = start;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,45,this.end    = end;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,46,this.line   = line;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,47,sortingKey = (start == null) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,48,"new OrderedTuple(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) :"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,49,"new OrderedTuple(start.x, start.y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,52,/** Build a dummy segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,53,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,54,"* The object built is not a real segment, only the sorting key is used to"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,55,* allow searching in the neighborhood of a point. This is an horrible hack ...
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,56,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,57,* @param start start point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,58,* @param dx abscissa offset from the start point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,59,* @param dy ordinate offset from the start point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,61,"public Segment(final Point2D start, final double dx, final double dy) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,62,this.start = null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,63,this.end   = null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,64,this.line  = null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,65,"sortingKey = new OrderedTuple(start.x + dx, start.y + dy);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,68,/** Get the start point of the segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,69,* @return start point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,71,public Point2D getStart() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,72,return start;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,75,/** Get the end point of the segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,76,* @return end point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,78,public Point2D getEnd() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,79,return end;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,82,/** Get the line containing the segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,83,* @return line containing the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,85,public Line getLine() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,86,return line;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,89,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,90,public int compareTo(final Segment o) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,91,return sortingKey.compareTo(o.sortingKey);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,94,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,95,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,96,public boolean equals(final Object other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,97,if (this == other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,98,return true;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,99,} else if (other instanceof Segment) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,100,return compareTo((Segment) other) == 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,101,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,102,return false;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,106,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,107,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,108,public int hashCode() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/Segment.java,109,return start.hashCode() ^ end.hashCode() ^ line.hashCode() ^ sortingKey.hashCode();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,17,package org.apache.commons.math.geometry.euclidean.twoD;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,19,import java.util.List;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,21,import org.apache.commons.math.geometry.euclidean.oneD.Interval;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,22,import org.apache.commons.math.geometry.euclidean.oneD.IntervalsSet;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,23,import org.apache.commons.math.geometry.euclidean.oneD.Point1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,24,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,25,import org.apache.commons.math.geometry.partitioning.BSPTreeVisitor;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,26,import org.apache.commons.math.geometry.partitioning.Region.BoundaryAttribute;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,27,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,28,import org.apache.commons.math.geometry.partitioning.utilities.AVLTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,30,/** Visitor building segments.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,31,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,33,class SegmentsBuilder implements BSPTreeVisitor {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,35,/** Sorted segments. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,36,private AVLTree<Segment> sorted;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,38,/** Simple constructor. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,39,public SegmentsBuilder() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,40,sorted = new AVLTree<Segment>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,43,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,44,public Order visitOrder(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,45,return Order.MINUS_SUB_PLUS;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,48,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,49,public void visitInternalNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,50,final BoundaryAttribute attribute = (BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,51,if (attribute.getPlusOutside() != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,52,"addContribution(attribute.getPlusOutside(), false);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,54,if (attribute.getPlusInside() != null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,55,"addContribution(attribute.getPlusInside(), true);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,59,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,60,public void visitLeafNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,63,/** Add he contribution of a boundary facet.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,64,* @param sub boundary facet
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,65,"* @param reversed if true, the facet has the inside on its plus side"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,67,"private void addContribution(final SubHyperplane sub, final boolean reversed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,68,final Line line      = (Line) sub.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,69,final List<Interval> intervals = ((IntervalsSet) sub.getRemainingRegion()).asList();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,70,for (final Interval i : intervals) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,71,final Point2D start = Double.isInfinite(i.getLower()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,72,null : (Point2D) line.toSpace(new Point1D(i.getLower()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,73,final Point2D end   = Double.isInfinite(i.getUpper()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,74,null : (Point2D) line.toSpace(new Point1D(i.getUpper()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,75,if (reversed) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,76,"sorted.insert(new Segment(end, start, line.getReverse()));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,77,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,78,"sorted.insert(new Segment(start, end, line));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,83,/** Get the sorted segments.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,84,* @return sorted segments
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,86,public AVLTree<Segment> getSorted() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twoD/SegmentBuilder.java,87,return sorted;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,17,package org.apache.commons.math.geometry.partitioning;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,19,import org.apache.commons.math.geometry.partitioning.Hyperplane.Side;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,20,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,22,/** This class represent a Binary Space Partition tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,24,* <p>BSP trees are an efficient way to represent space partitions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,25,* to associate attributes with each cell. Each node in a BSP tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,26,* represents a convex region which is partitioned in two convex
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,27,* sub-regions at each side of a cut hyperplane. The root tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,28,* contains the complete space.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,30,* <p>The main use of such partitions is to use a boolean attribute to
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,31,"* define an inside/outside property, hence representing arbitrary"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,32,"* polytopes (line segments in 1D, polygons in 2D and polyhedrons in"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,33,* 3D) and to operate on them.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,35,"* <p>Another example would be to represent Voronoi tesselations, the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,36,* attribute of each cell holding the defining point of the cell.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,38,* <p>The application-defined attributes are shared among copied
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,39,* instances and propagated to split parts. These attributes are not
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,40,"* used by the BSP-tree algorithms themselves, so the application can"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,41,* use them for any purpose. Since the tree visiting method holds
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,42,"* internal and leaf nodes differently, it is possible to use"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,43,* different classes for internal nodes attributes and leaf nodes
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,44,"* attributes. This should be used with care, though, because if the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,45,"* tree is modified in any way after attributes have been set, some"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,46,* internal nodes may become leaf nodes and some leaf nodes may become
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,47,* internal nodes.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,49,* <p>One of the main sources for the development of this package was
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,50,"* Bruce Naylor, John Amanatides and William Thibault paper <a"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,51,"* href=""http://www.cs.yorku.ca/~amana/research/bsptSetOp.pdf"">Merging"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,52,"* BSP Trees Yields Polyhedral Set Operations</a> Proc. Siggraph '90,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,53,"* Computer Graphics 24(4), August 1990, pp 115-124, published by the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,54,* Association for Computing Machinery (ACM).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,56,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,58,public class BSPTree {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,60,/** Cut sub-hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,61,private SubHyperplane cut;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,63,/** Tree at the plus side of the cut hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,64,private BSPTree plus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,66,/** Tree at the minus side of the cut hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,67,private BSPTree minus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,69,/** Parent tree. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,70,private BSPTree parent;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,72,/** Application-defined attribute. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,73,private Object attribute;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,75,/** Build a tree having only one root cell representing the whole space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,77,public BSPTree() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,78,cut       = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,79,plus      = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,80,minus     = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,81,parent    = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,82,attribute = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,85,/** Build a tree having only one root cell representing the whole space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,86,* @param attribute attribute of the tree (may be null)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,88,public BSPTree(final Object attribute) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,89,cut    = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,90,plus   = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,91,minus  = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,92,parent = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,93,this.attribute = attribute;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,96,/** Build a BSPTree from its underlying elements.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,97,* <p>This method does <em>not</em> perform any verification on
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,98,"* consistency of its arguments, it should therefore be used only"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,99,* when then caller knows what it is doing.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,100,* <p>This method is mainly useful kto build trees
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,101,* bottom-up. Building trees top-down is realized with the help of
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,102,* method {@link #insertCut insertCut}.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,103,* @param cut cut sub-hyperplane for the tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,104,* @param plus plus side sub-tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,105,* @param minus minus side sub-tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,106,* @param attribute attribute associated with the node (may be null)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,107,* @see #insertCut
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,109,"public BSPTree(final SubHyperplane cut, final BSPTree plus, final BSPTree minus,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,110,final Object attribute) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,111,this.cut       = cut;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,112,this.plus      = plus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,113,this.minus     = minus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,114,this.parent    = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,115,this.attribute = attribute;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,116,plus.parent    = this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,117,minus.parent   = this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,120,/** Insert a cut sub-hyperplane in a node.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,121,* <p>The sub-tree starting at this node will be completely
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,122,* overwritten. The new cut sub-hyperplane will be built from the
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,123,* intersection of the provided hyperplane with the cell. If the
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,124,"* hyperplane does intersect the cell, the cell will have two"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,125,* children cells with {@code null} attributes on each side of
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,126,* the inserted cut sub-hyperplane. If the hyperplane does not
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,127,* intersect the cell then <em>no</em> cut hyperplane will be
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,128,* inserted and the cell will be changed to a leaf cell. The
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,129,* attribute of the node is never changed.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,130,* <p>This method is mainly useful when called on leaf nodes
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,131,* (i.e. nodes for which {@link #getCut getCut} returns
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,132,"* {@code null}), in this case it provides a way to build a"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,133,"* tree top-down (whereas the {@link #BSPTree(SubHyperplane,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,134,"* BSPTree, BSPTree, Object) 4 arguments constructor} is devoted to"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,135,* build trees bottom-up).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,136,"* @param hyperplane hyperplane to insert, it will be chopped in"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,137,* order to fit in the cell defined by the parent nodes of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,138,* instance
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,139,* @return true if a cut sub-hyperplane has been inserted (i.e. if
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,140,* the cell now has two leaf child nodes)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,141,"* @see #BSPTree(SubHyperplane, BSPTree, BSPTree, Object)"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,143,public boolean insertCut(final Hyperplane hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,145,if (cut != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,146,plus.parent  = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,147,minus.parent = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,150,final SubHyperplane chopped = fitToCell(new SubHyperplane(hyperplane));
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,151,if (chopped.getRemainingRegion().isEmpty()) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,152,cut          = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,153,plus         = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,154,minus        = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,155,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,158,cut          = chopped;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,159,plus         = new BSPTree();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,160,plus.parent  = this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,161,minus        = new BSPTree();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,162,minus.parent = this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,163,return true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,167,/** Copy the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,168,* <p>The instance created is completely independant of the original
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,169,"* one. A deep copy is used, none of the underlying objects are"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,170,* shared (except for the nodes attributes and immutable
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,171,* objects).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,172,"* @return a new tree, copy of the instance"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,174,public BSPTree copySelf() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,176,if (cut == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,177,return new BSPTree(attribute);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,180,"return new BSPTree(cut.copySelf(), plus.copySelf(), minus.copySelf(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,181,attribute);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,185,/** Get the cut sub-hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,186,"* @return cut sub-hyperplane, null if this is a leaf tree"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,188,public SubHyperplane getCut() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,189,return cut;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,192,/** Get the tree on the plus side of the cut hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,193,"* @return tree on the plus side of the cut hyperplane, null if this"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,194,* is a leaf tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,196,public BSPTree getPlus() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,197,return plus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,200,/** Get the tree on the minus side of the cut hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,201,"* @return tree on the minus side of the cut hyperplane, null if this"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,202,* is a leaf tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,204,public BSPTree getMinus() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,205,return minus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,208,/** Get the parent node.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,209,"* @return parent node, null if the node has no parents"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,211,public BSPTree getParent() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,212,return parent;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,215,/** Associate an attribute with the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,216,* @param attribute attribute to associate with the node
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,217,* @see #getAttribute
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,219,public void setAttribute(final Object attribute) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,220,this.attribute = attribute;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,223,/** Get the attribute associated with the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,224,* @return attribute associated with the node or null if no
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,225,* attribute has been explicitly set using the {@link #setAttribute
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,226,* setAttribute} method
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,227,* @see #setAttribute
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,229,public Object getAttribute() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,230,return attribute;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,233,/** Visit the BSP tree nodes.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,234,* @param visitor object visiting the tree nodes
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,236,public void visit(final BSPTreeVisitor visitor) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,237,if (cut == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,238,visitor.visitLeafNode(this);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,239,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,240,switch (visitor.visitOrder(this)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,241,case PLUS_MINUS_SUB:
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,242,plus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,243,minus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,244,visitor.visitInternalNode(this);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,245,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,246,case PLUS_SUB_MINUS:
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,247,plus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,248,visitor.visitInternalNode(this);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,249,minus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,250,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,251,case MINUS_PLUS_SUB:
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,252,minus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,253,plus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,254,visitor.visitInternalNode(this);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,255,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,256,case MINUS_SUB_PLUS:
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,257,minus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,258,visitor.visitInternalNode(this);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,259,plus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,260,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,261,case SUB_PLUS_MINUS:
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,262,visitor.visitInternalNode(this);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,263,plus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,264,minus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,265,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,266,case SUB_MINUS_PLUS:
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,267,visitor.visitInternalNode(this);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,268,minus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,269,plus.visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,270,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,271,default:
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,272,"throw new RuntimeException(""internal error"");"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,278,/** Fit a sub-hyperplane inside the cell defined by the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,279,* <p>Fitting is done by chopping off the parts of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,280,* sub-hyperplane that lie outside of the cell using the
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,281,* cut-hyperplanes of the parent nodes of the instance.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,282,* @param sub sub-hyperplane to fit
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,283,"* @return a new sub-hyperplane, gueranteed to have no part outside"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,284,* of the instance cell
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,286,private SubHyperplane fitToCell(final SubHyperplane sub) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,287,SubHyperplane s = sub;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,288,for (BSPTree tree = this; tree.parent != null; tree = tree.parent) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,289,if (tree == tree.parent.plus) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,290,s = tree.parent.cut.getHyperplane().split(s).getPlus();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,291,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,292,s = tree.parent.cut.getHyperplane().split(s).getMinus();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,295,return s;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,298,/** Get the cell to which a point belongs.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,299,* <p>If the returned cell is a leaf node the points belongs to the
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,300,"* interior of the node, if the cell is an internal node the points"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,301,* belongs to the node cut sub-hyperplane.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,302,* @param point point to check
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,303,* @return the tree cell to which the point belongs (can be
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,305,public BSPTree getCell(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,307,if (cut == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,308,return this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,311,// position of the point with respect to the cut hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,312,final double offset = cut.getHyperplane().getOffset(point);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,314,if (FastMath.abs(offset) < 1.0e-10) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,315,return this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,316,} else if (offset <= 0) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,317,// point is on the minus side of the cut hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,318,return minus.getCell(point);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,319,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,320,// point is on the plus side of the cut hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,321,return plus.getCell(point);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,326,/** Perform condensation on a tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,327,"* <p>The condensation operation is not recursive, it must be called"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,328,* explicitely from leaves to root.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,330,private void condense() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,331,if ((cut != null) && (plus.cut == null) && (minus.cut == null) &&
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,332,(((plus.attribute == null) && (minus.attribute == null)) ||
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,333,((plus.attribute != null) && plus.attribute.equals(minus.attribute)))) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,334,attribute = (plus.attribute == null) ? minus.attribute : plus.attribute;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,335,cut       = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,336,plus      = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,337,minus     = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,341,/** Merge a BSP tree with the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,342,* <p>All trees are modified (parts of them are reused in the new
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,343,"* tree), it is the responsibility of the caller to ensure a copy"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,344,* has been done before if any of the former tree should be
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,345,"* preserved, <em>no</em> such copy is done here!</p>"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,346,* <p>The algorithm used here is directly derived from the one
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,347,"* described in the Naylor, Amanatides and Thibault paper (section"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,348,"* III, Binary Partitioning of a BSP Tree).</p>"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,349,* @param tree other tree to merge with the instance (will be
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,350,"* <em>unusable</em> after the operation, as well as the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,351,* instance itself)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,352,* @param leafMerger object implementing the final merging phase
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,353,"* (this is where the semantic of the operation occurs, generally"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,354,* depending on the attribute of the leaf node)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,355,"* @return a new tree, result of <code>instance &lt;op&gt;"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,356,"* tree</code>, this value can be ignored if parentTree is not null"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,357,* since all connections have already been established
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,359,"public BSPTree merge(final BSPTree tree, final LeafMerger leafMerger) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,360,"return merge(tree, leafMerger, null, false);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,363,/** Merge a BSP tree with the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,364,* @param tree other tree to merge with the instance (will be
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,365,"* <em>unusable</em> after the operation, as well as the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,366,* instance itself)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,367,* @param leafMerger object implementing the final merging phase
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,368,"* (this is where the semantic of the operation occurs, generally"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,369,* depending on the attribute of the leaf node)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,370,* @param parentTree parent tree to connect to (may be null)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,371,"* @param isPlusChild if true and if parentTree is not null, the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,372,"* resulting tree should be the plus child of its parent, ignored if"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,373,* parentTree is null
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,374,"* @return a new tree, result of <code>instance &lt;op&gt;"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,375,"* tree</code>, this value can be ignored if parentTree is not null"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,376,* since all connections have already been established
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,378,"private BSPTree merge(final BSPTree tree, final LeafMerger leafMerger,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,379,"final BSPTree parentTree, final boolean isPlusChild) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,380,if (cut == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,381,// cell/tree operation
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,382,"return leafMerger.merge(this, tree, parentTree, isPlusChild, true);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,383,} else if (tree.cut == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,384,// tree/cell operation
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,385,"return leafMerger.merge(tree, this, parentTree, isPlusChild, false);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,386,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,387,// tree/tree operation
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,388,final BSPTree merged = tree.split(cut);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,389,if (parentTree != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,390,merged.parent = parentTree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,391,if (isPlusChild) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,392,parentTree.plus = merged;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,393,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,394,parentTree.minus = merged;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,398,// merging phase
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,399,"plus.merge(merged.plus, leafMerger, merged, true);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,400,"minus.merge(merged.minus, leafMerger, merged, false);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,401,merged.condense();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,402,if (merged.cut != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,403,merged.cut =
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,404,merged.fitToCell(new SubHyperplane(merged.cut.getHyperplane()));
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,407,return merged;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,412,/** This interface gather the merging operations between a BSP tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,413,* leaf and another BSP tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,414,"* <p>As explained in Bruce Naylor, John Amanatides and William"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,415,* Thibault paper <a
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,416,"* href=""http://www.cs.yorku.ca/~amana/research/bsptSetOp.pdf"">Merging"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,417,"* BSP Trees Yields Polyhedral Set Operations</a>,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,418,* the operations on {@link BSPTree BSP trees} can be expressed as a
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,419,"* generic recursive merging operation where only the final part,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,420,"* when one of the operand is a leaf, is specific to the real"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,421,"* operation semantics. For example, a tree representing a region"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,422,* using a boolean attribute to identify inside cells and outside
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,423,* cells would use four different objects to implement the final
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,424,"* merging phase of the four set operations union, intersection,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,425,* difference and symmetric difference (exclusive or).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,426,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,428,public static interface LeafMerger {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,430,/** Merge a leaf node and a tree node.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,431,* <p>This method is called at the end of a recursive merging
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,432,"* resulting from a {@code tree1.merge(tree2, leafMerger)}"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,433,"* call, when one of the sub-trees involved is a leaf (i.e. when"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,434,* its cut-hyperplane is null). This is the only place where the
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,435,* precise semantics of the operation are required. For all upper
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,436,"* level nodes in the tree, the merging operation is only a"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,437,* generic partitioning algorithm.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,438,"* <p>Since the final operation may be non-commutative, it is"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,439,* important to know if the leaf node comes from the instance tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,440,* ({@code tree1}) or the argument tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,441,* ({@code tree2}). The third argument of the method is
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,442,* devoted to this. It can be ignored for commutative
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,443,* operations.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,444,* <p>The {@link BSPTree#insertInTree BSPTree.insertInTree} method
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,445,* may be useful to implement this method.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,446,* @param leaf leaf node (its cut hyperplane is guaranteed to be
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,447,* null)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,448,* @param tree tree node (its cut hyperplane may be null or not)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,449,* @param parentTree parent tree to connect to (may be null)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,450,"* @param isPlusChild if true and if parentTree is not null, the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,451,"* resulting tree should be the plus child of its parent, ignored if"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,452,* parentTree is null
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,453,"* @param leafFromInstance if true, the leaf node comes from the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,454,* instance tree ({@code tree1}) and the tree node comes from
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,455,* the argument tree ({@code tree2})
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,456,* @return the BSP tree resulting from the merging (may be one of
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,457,* the arguments)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,459,"BSPTree merge(BSPTree leaf, BSPTree tree,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,460,"BSPTree parentTree, boolean isPlusChild,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,461,boolean leafFromInstance);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,465,/** Split a BSP tree by an external sub-hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,466,"* <p>Split a tree in two halves, on each side of the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,467,* sub-hyperplane. The instance is not modified.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,468,* <p>The tree returned is not upward-consistent: despite all of its
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,469,* sub-trees cut sub-hyperplanes (including its own cut
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,470,"* sub-hyperplane) are bounded to the current cell, it is <em>not</em>"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,471,* attached to any parent tree yet. This tree is intended to be
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,472,* later inserted into an higher level tree.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,473,"* <p>The algorithm used here is the one given in Naylor, Amanatides"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,474,"* and Thibault paper (section III, Binary Partitioning of a BSP"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,475,* Tree).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,476,"* @param sub partitioning sub-hyperplane, must be already clipped"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,477,"* to the convex region represented by the instance, will be used as"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,478,* the cut sub-hyperplane of the returned tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,479,* @return a tree having the specified sub-hyperplane as its cut
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,480,"* sub-hyperplane, the two parts of the split instance as its two"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,481,* sub-trees and a null parent
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,483,public BSPTree split(final SubHyperplane sub) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,485,if (cut == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,486,"return new BSPTree(sub, copySelf(), new BSPTree(attribute), null);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,489,final Hyperplane cHyperplane = cut.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,490,final Hyperplane sHyperplane = sub.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,491,switch (cHyperplane.side(sub)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,492,case PLUS :
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,493,{ // the partitioning sub-hyperplane is entirely in the plus sub-tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,494,final BSPTree split = plus.split(sub);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,495,if (sHyperplane.side(cut) == Side.PLUS) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,496,"split.plus = new BSPTree(cut.copySelf(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,497,"split.plus, minus.copySelf(), attribute);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,498,split.plus.condense();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,499,split.plus.parent = split;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,500,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,501,"split.minus = new BSPTree(cut.copySelf(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,502,"split.minus, minus.copySelf(), attribute);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,503,split.minus.condense();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,504,split.minus.parent = split;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,506,return split;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,508,case MINUS :
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,509,{ // the partitioning sub-hyperplane is entirely in the minus sub-tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,510,final BSPTree split = minus.split(sub);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,511,if (sHyperplane.side(cut) == Side.PLUS) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,512,"split.plus = new BSPTree(cut.copySelf(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,513,"plus.copySelf(), split.plus, attribute);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,514,split.plus.condense();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,515,split.plus.parent = split;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,516,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,517,"split.minus = new BSPTree(cut.copySelf(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,518,"plus.copySelf(), split.minus, attribute);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,519,split.minus.condense();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,520,split.minus.parent = split;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,522,return split;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,524,case BOTH :
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,526,final Hyperplane.SplitSubHyperplane cutParts = sHyperplane.split(cut);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,527,final Hyperplane.SplitSubHyperplane subParts = cHyperplane.split(sub);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,528,"final BSPTree split = new BSPTree(sub,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,529,"plus.split(subParts.getPlus()),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,530,"minus.split(subParts.getMinus()),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,531,null);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,532,split.plus.cut          = cutParts.getPlus();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,533,split.minus.cut         = cutParts.getMinus();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,534,final BSPTree tmp       = split.plus.minus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,535,split.plus.minus        = split.minus.plus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,536,split.plus.minus.parent = split.plus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,537,split.minus.plus        = tmp;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,538,split.minus.plus.parent = split.minus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,539,split.plus.condense();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,540,split.minus.condense();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,541,return split;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,543,default :
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,544,return cHyperplane.sameOrientationAs(sHyperplane) ?
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,545,"new BSPTree(sub, plus.copySelf(), minus.copySelf(), attribute) :"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,546,"new BSPTree(sub, minus.copySelf(), plus.copySelf(), attribute);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,551,/** Insert the instance into another tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,552,* <p>The instance itself is modified so its former parent should
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,553,* not be used anymore.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,554,* @param parentTree parent tree to connect to (may be null)
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,555,"* @param isPlusChild if true and if parentTree is not null, the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,556,"* resulting tree should be the plus child of its parent, ignored if"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,557,* parentTree is null
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,558,* @see LeafMerger
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,560,"public void insertInTree(final BSPTree parentTree, final boolean isPlusChild) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,562,// set up parent/child links
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,563,parent = parentTree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,564,if (parentTree != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,565,if (isPlusChild) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,566,parentTree.plus = this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,567,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,568,parentTree.minus = this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,572,// make sure the inserted tree lies in the cell defined by its parent nodes
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,573,if (cut != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,575,// explore the parent nodes from here towards tree root
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,576,for (BSPTree tree = this; tree.parent != null; tree = tree.parent) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,578,// this is an hyperplane of some parent node
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,579,final Hyperplane hyperplane = tree.parent.cut.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,581,// chop off the parts of the inserted tree that extend
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,582,// on the wrong side of this parent hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,583,if (tree == tree.parent.plus) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,584,cut = hyperplane.split(cut).getPlus();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,585,plus.chopOffMinus(hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,586,minus.chopOffMinus(hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,587,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,588,cut = hyperplane.split(cut).getMinus();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,589,plus.chopOffPlus(hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,590,minus.chopOffPlus(hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,595,"// since we may have drop some parts of the inserted tree,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,596,// perform a condensation pass to keep the tree structure simple
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,597,condense();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,603,/** Chop off parts of the tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,604,"* <p>The instance is modified in place, all the parts that are on"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,605,"* the minus side of the chopping hyperplane are disgarded, only the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,606,* parts on the plus side remain.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,607,* @param hyperplane chopping hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,609,private void chopOffMinus(final Hyperplane hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,610,if (cut != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,611,cut = hyperplane.split(cut).getPlus();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,612,plus.chopOffMinus(hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,613,minus.chopOffMinus(hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,617,/** Chop off parts of the tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,618,"* <p>The instance is modified in place, all the parts that are on"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,619,"* the plus side of the chopping hyperplane are disgarded, only the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,620,* parts on the minus side remain.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,621,* @param hyperplane chopping hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,623,private void chopOffPlus(final Hyperplane hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,624,if (cut != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,625,cut = hyperplane.split(cut).getMinus();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,626,plus.chopOffPlus(hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,627,minus.chopOffPlus(hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,17,package org.apache.commons.math.geometry.partitioning;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,19,/** This interface is used to visit {@link BSPTree BSP tree} nodes.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,21,* <p>Navigation through {@link BSPTree BSP trees} can be done using
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,22,* two different point of views:</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,23,* <ul>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,24,*   <li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,25,*     the first one is in a node-oriented way using the {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,26,"*     BSPTree#getPlus}, {@link BSPTree#getMinus} and {@link"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,27,*     BSPTree#getParent} methods. Terminal nodes without associated
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,28,"*     {@link SubHyperplane sub-hyperplanes} can be visited this way,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,29,"*     there is no constraint in the visit order, and it is possible"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,30,*     to visit either all nodes or only a subset of the nodes
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,31,*   </li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,32,*   <li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,33,*     the second one is in a sub-hyperplane-oriented way using
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,34,*     classes implementing this interface which obeys the visitor
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,35,*     design pattern. The visit order is provided by the visitor as
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,36,*     each node is first encountered. Each node is visited exactly
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,37,*     once.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,38,*   </li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,39,* </ul>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,41,* @see BSPTree
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,42,* @see SubHyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,44,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,46,public interface BSPTreeVisitor {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,48,"/** Enumerate for visit order with respect to plus sub-tree, minus sub-tree and cut sub-hyperplane. */"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,49,enum Order {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,50,"/** Indicator for visit order plus sub-tree, then minus sub-tree,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,51,* and last cut sub-hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,53,"PLUS_MINUS_SUB,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,55,"/** Indicator for visit order plus sub-tree, then cut sub-hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,56,* and last minus sub-tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,58,"PLUS_SUB_MINUS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,60,"/** Indicator for visit order minus sub-tree, then plus sub-tree,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,61,* and last cut sub-hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,63,"MINUS_PLUS_SUB,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,65,"/** Indicator for visit order minus sub-tree, then cut sub-hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,66,* and last plus sub-tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,68,"MINUS_SUB_PLUS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,70,"/** Indicator for visit order cut sub-hyperplane, then plus sub-tree,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,71,* and last minus sub-tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,73,"SUB_PLUS_MINUS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,75,"/** Indicator for visit order cut sub-hyperplane, then minus sub-tree,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,76,* and last plus sub-tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,78,SUB_MINUS_PLUS;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,81,/** Determine the visit order for this node.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,82,"* <p>Before attempting to visit an internal node, this method is"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,83,* called to determine the desired ordering of the visit. It is
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,84,* guaranteed that this method will be called before {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,85,"* #visitInternalNode visitInternalNode} for a given node, it will be"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,86,* called exactly once for each internal node.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,87,* @param node BSP node guaranteed to have a non null cut sub-hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,88,"* @return desired visit order, must be one of"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,89,"* {@link Order#PLUS_MINUS_SUB}, {@link Order#PLUS_SUB_MINUS},"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,90,"* {@link Order#MINUS_PLUS_SUB}, {@link Order#MINUS_SUB_PLUS},"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,91,"* {@link Order#SUB_PLUS_MINUS}, {@link Order#SUB_MINUS_PLUS}"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,93,Order visitOrder(BSPTree node);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,95,/** Visit a BSP tree node node having a non-null sub-hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,96,* <p>It is guaranteed that this method will be called after {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,97,"* #visitOrder visitOrder} has been called for a given node,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,98,* it wil be called exactly once for each internal node.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,99,* @param node BSP node guaranteed to have a non null cut sub-hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,100,* @see #visitLeafNode
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,102,void visitInternalNode(BSPTree node);
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,104,/** Visit a leaf BSP tree node node having a null sub-hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,105,* @param node leaf BSP node having a null sub-hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,106,* @see #visitInternalNode
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,108,void visitLeafNode(BSPTree node);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,17,package org.apache.commons.math.geometry.partitioning;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,19,/** Characterization of a sub-hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,20,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,22,class Characterization {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,24,/** Parts of the sub-hyperplane that have inside cells on the tested side. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,25,private SubHyperplane in;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,27,/** Parts of the sub-hyperplane that have outside cells on the tested side. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,28,private SubHyperplane out;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,30,/** Create an empty characterization of a sub-hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,32,public Characterization() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,33,in  = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,34,out = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,37,/** Check if the sub-hyperplane that have inside cells on the tested side.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,38,* @return true if the sub-hyperplane that have inside cells on the tested side
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,40,public boolean hasIn() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,41,return (in != null) && (!in.getRemainingRegion().isEmpty());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,44,/** Get the parts of the sub-hyperplane that have inside cells on the tested side.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,45,* @return parts of the sub-hyperplane that have inside cells on the tested side
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,47,public SubHyperplane getIn() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,48,return in;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,51,/** Check if the sub-hyperplane that have outside cells on the tested side.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,52,* @return true if the sub-hyperplane that have outside cells on the tested side
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,54,public boolean hasOut() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,55,return (out != null) && (!out.getRemainingRegion().isEmpty());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,58,/** Get the parts of the sub-hyperplane that have outside cells on the tested side.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,59,* @return parts of the sub-hyperplane that have outside cells on the tested side
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,61,public SubHyperplane getOut() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,62,return out;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,65,/** Add a part of the sub-hyperplane known to have inside or outside cell on the tested side.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,66,* @param sub part of the sub-hyperplane to add
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,67,"* @param inside if true, the part added as an inside cell on the tested side, otherwise"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,68,* it has an outside cell on the tested side
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,70,"public void add(final SubHyperplane sub, final boolean inside) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,71,if (inside) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,72,if (in == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,73,in = sub;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,74,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,75,"in = new SubHyperplane(in.getHyperplane(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,76,"Region.union(in.getRemainingRegion(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,77,sub.getRemainingRegion()));
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,79,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,80,if (out == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,81,out = sub;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,82,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,83,"out = new SubHyperplane(out.getHyperplane(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,84,"Region.union(out.getRemainingRegion(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java,85,sub.getRemainingRegion()));
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,17,package org.apache.commons.math.geometry.partitioning;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,19,/** This interface represents an hyperplane of a space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,21,* <p>The most prominent place where hyperplane appears in space
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,22,* partitioning is as cutters. Each partitioning node in a {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,23,* BSPTree BSP tree} has a cut {@link SubHyperplane sub-hyperplane}
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,24,* which is either an hyperplane or a part of an hyperplane. In an
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,25,"* n-dimensions euclidean space, an hyperplane is an (n-1)-dimensions"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,26,* hyperplane (for example a traditional plane in the 3D euclidean
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,27,"* space). They can be more exotic objects in specific fields, for"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,28,* example a circle on the surface of the unit sphere.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,30,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,32,public interface Hyperplane extends SubSpace {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,34,/** Enumerate for specifying sides of the hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,35,enum Side {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,37,/** Code for the plus side of the hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,38,"PLUS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,40,/** Code for the minus side of the hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,41,"MINUS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,43,/** Code for elements crossing the hyperplane from plus to minus side. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,44,"BOTH,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,46,/** Code for the hyperplane itself. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,47,HYPER;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,51,/** Copy the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,52,* <p>The instance created is completely independant of the original
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,53,"* one. A deep copy is used, none of the underlying objects are"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,54,* shared (except for immutable objects).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,55,"* @return a new hyperplane, copy of the instance"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,57,Hyperplane copySelf();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,59,/** Get the offset (oriented distance) of a point.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,60,"* <p>The offset is 0 if the point is on the underlying hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,61,* it is positive if the point is on one particular side of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,62,"* hyperplane, and it is negative if the point is on the other side,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,63,* according to the hyperplane natural orientation.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,64,* @param point point to check
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,65,* @return offset of the point
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,67,double getOffset(Point point);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,69,/** Check if the instance has the same orientation as another hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,70,* <p>This method is expected to be called on parallel hyperplanes
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,71,* (i.e. when the {@link #side side} method would return {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,72,* Side#HYPER} for some sub-hyperplane having the specified hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,73,* as its underlying hyperplane). The method should <em>not</em>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,74,"* re-check for parallelism, only for orientation, typically by"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,75,* testing something like the sign of the dot-products of
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,76,* normals.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,77,* @param other other hyperplane to check against the instance
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,78,* @return true if the instance and the other hyperplane have
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,79,* the same orientation
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,81,boolean sameOrientationAs(Hyperplane other);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,83,/** Build the sub-space shared by the instance and another hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,84,* @param other other hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,85,* @return a sub-space at the intersection of the instance and the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,86,* other sub-space (it has a dimension one unit less than the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,87,* instance)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,89,SubSpace intersection(Hyperplane other);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,91,/** Build a region covering the whole hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,92,* <p>The region build is restricted to the sub-space defined by the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,93,* hyperplane. This means that the regions points are consistent
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,94,* with the argument of the {@link SubSpace#toSpace toSpace} method
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,95,* and with the return value of the {@link SubSpace#toSubSpace
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,96,* toSubSpace} method.<p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,97,* @return a region covering the whole hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,99,Region wholeHyperplane();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,101,/** Build a region covering the whole space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,102,* @return a region containing the instance
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,104,Region wholeSpace();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,106,/** Compute the relative position of a sub-hyperplane with respect
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,107,* to the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,108,* @param sub sub-hyperplane to check
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,109,"* @return one of {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH},"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,110,* {@link Side#HYPER}
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,112,Side side(SubHyperplane sub);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,114,/** Split a sub-hyperplane in two parts by the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,115,* @param sub sub-hyperplane to split
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,116,* @return an object containing both the part of the sub-hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,117,* on the plus side of the instance and the part of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,118,* sub-hyperplane on the minus side of the instance
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,120,SplitSubHyperplane split(SubHyperplane sub);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,122,/** Class holding the results of the {@link Hyperplane#split Hyperplane.split}
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,123,* method. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,124,class SplitSubHyperplane {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,126,/** Part of the sub-hyperplane on the plus side of the splitting hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,127,private final SubHyperplane plus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,129,/** Part of the sub-hyperplane on the minus side of the splitting hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,130,private final SubHyperplane minus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,132,/** Build a SplitSubHyperplane from its parts.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,133,* @param plus part of the sub-hyperplane on the plus side of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,134,* splitting hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,135,* @param minus part of the sub-hyperplane on the minus side of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,136,* splitting hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,138,"public SplitSubHyperplane(final SubHyperplane plus, final SubHyperplane minus) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,139,this.plus  = plus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,140,this.minus = minus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,143,/** Get the part of the sub-hyperplane on the plus side of the splitting hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,144,* @return part of the sub-hyperplane on the plus side of the splitting hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,146,public SubHyperplane getPlus() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,147,return plus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,150,/** Get the part of the sub-hyperplane on the minus side of the splitting hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,151,* @return part of the sub-hyperplane on the minus side of the splitting hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,153,public SubHyperplane getMinus() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,154,return minus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,17,package org.apache.commons.math.geometry.partitioning;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,19,/** This interface represents a generic point to be used in a space partition.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,20,* <p>Points are completely virtual entities with no specification at
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,21,"* all, so this class is essentially a marker interface with no"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,22,* methods. This allows to perform partition in traditional euclidean
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,23,"* n-dimensions spaces, but also in more exotic universes like for"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,24,* example the surface of the unit sphere.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,25,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,27,public interface Point {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,28,"// nothing here, this is only a marker interface"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,17,package org.apache.commons.math.geometry.partitioning;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,19,import java.util.Collection;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,20,import java.util.TreeSet;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,21,import java.util.Comparator;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,22,import java.util.Iterator;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,23,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,25,/** This class represent a region of a space as a partition.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,27,"* <p>Region are subsets of a space, they can be infinite (whole"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,28,"* space, half space, infinite stripe ...) or finite (polygons in 2D,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,29,* polyhedrons in 3D ...). Their main characteristic is to separate
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,30,* points that are considered to be <em>inside</em> the region from
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,31,"* points considered to be <em>outside</em> of it. In between, there"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,32,* may be points on the <em>boundary</em> of the region.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,34,* <p>This implementation is limited to regions for which the boundary
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,35,"* is composed of several {@link SubHyperplane sub-hyperplanes},"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,36,* including regions with no boundary at all: the whole space and the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,37,* empty region. They are not necessarily finite and not necessarily
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,38,* path-connected. They can contain holes.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,40,* <p>Regions can be combined using the traditional sets operations :
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,41,"* union, intersection, difference and symetric difference (exclusive"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,42,"* or) for the binary operations, complement for the unary"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,43,* operation.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,45,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,47,public abstract class Region {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,49,/** Enumerate for the location of a point with respect to the region. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,50,public static enum Location {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,51,/** Code for points inside the partition. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,52,"INSIDE,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,54,/** Code for points outside of the partition. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,55,"OUTSIDE,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,57,/** Code for points on the partition boundary. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,58,BOUNDARY;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,61,/** Inside/Outside BSP tree. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,62,private BSPTree tree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,64,/** Size of the instance. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,65,private double size;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,67,/** Barycenter. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,68,private Point barycenter;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,70,/** Build a region representing the whole space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,72,protected Region() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,73,tree = new BSPTree(Boolean.TRUE);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,76,/** Build a region from an inside/outside BSP tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,77,* <p>The leaf nodes of the BSP tree <em>must</em> have a
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,78,* {@code Boolean} attribute representing the inside status of
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,79,"* the corresponding cell (true for inside cells, false for outside"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,80,"* cells). In order to avoid building too many small objects, it is"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,81,* recommended to use the predefined constants
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,82,* {@code Boolean.TRUE} and {@code Boolean.FALSE}. The
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,83,* tree also <em>must</em> have either null internal nodes or
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,84,* internal nodes representing the boundary as specified in the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,85,* {@link #getTree getTree} method).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,86,* @param tree inside/outside BSP tree representing the region
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,88,protected Region(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,89,this.tree = tree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,92,/** Build a Region from a Boundary REPresentation (B-rep).
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,93,* <p>The boundary is provided as a collection of {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,94,* SubHyperplane sub-hyperplanes}. Each sub-hyperplane has the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,95,* interior part of the region on its minus side and the exterior on
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,96,* its plus side.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,97,"* <p>The boundary elements can be in any order, and can form"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,98,* several non-connected sets (like for example polygons with holes
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,99,* or a set of disjoints polyhedrons considered as a whole). In
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,100,"* fact, the elements do not even need to be connected together"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,101,"* (their topological connections are not used here). However, if the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,102,* boundary does not really separate an inside open from an outside
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,103,"* open (open having here its topological meaning), then subsequent"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,104,* calls to the {@link #checkPoint(Point) checkPoint} method will not be
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,105,* meaningful anymore.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,106,"* <p>If the boundary is empty, the region will represent the whole"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,107,* space.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,108,"* @param boundary collection of boundary elements, as a"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,109,* collection of {@link SubHyperplane SubHyperplane} objects
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,111,protected Region(final Collection<SubHyperplane> boundary) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,113,if (boundary.size() == 0) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,115,// the tree represents the whole space
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,116,tree = new BSPTree(Boolean.TRUE);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,118,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,120,// sort the boundary elements in decreasing size order
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,121,"// (we don't want equal size elements to be removed, so"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,122,// we use a trick to fool the TreeSet)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,123,final TreeSet<SubHyperplane> ordered = new TreeSet<SubHyperplane>(new Comparator<SubHyperplane>() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,124,"public int compare(final SubHyperplane o1, final SubHyperplane o2) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,125,final double size1 = o1.getRemainingRegion().getSize();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,126,final double size2 = o2.getRemainingRegion().getSize();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,127,return (size2 < size1) ? -1 : ((o1 == o2) ? 0 : +1);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,130,ordered.addAll(boundary);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,132,// build the tree top-down
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,133,tree = new BSPTree();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,134,"insertCuts(tree, ordered);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,136,// set up the inside/outside flags
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,137,tree.visit(new BSPTreeVisitor() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,139,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,140,public Order visitOrder(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,141,return Order.PLUS_SUB_MINUS;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,144,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,145,public void visitInternalNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,148,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,149,public void visitLeafNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,150,node.setAttribute((node == node.getParent().getPlus()) ?
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,151,Boolean.FALSE : Boolean.TRUE);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,159,/** Build a region using the instance as a prototype.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,160,* <p>This method allow to create new instances without knowing
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,161,* exactly the type of the region. It is an application of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,162,* prototype design pattern.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,163,* <p>The leaf nodes of the BSP tree <em>must</em> have a
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,164,* {@code Boolean} attribute representing the inside status of
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,165,"* the corresponding cell (true for inside cells, false for outside"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,166,"* cells). In order to avoid building too many small objects, it is"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,167,* recommended to use the predefined constants
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,168,* {@code Boolean.TRUE} and {@code Boolean.FALSE}. The
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,169,* tree also <em>must</em> have either null internal nodes or
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,170,* internal nodes representing the boundary as specified in the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,171,* {@link #getTree getTree} method).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,172,* @param newTree inside/outside BSP tree representing the new region
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,173,* @return the built region
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,175,public abstract Region buildNew(BSPTree newTree);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,177,/** Recursively build a tree by inserting cut sub-hyperplanes.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,178,* @param node current tree node (it is a leaf node at the beginning
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,179,* of the call)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,180,* @param boundary collection of edges belonging to the cell defined
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,181,* by the node
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,183,"private void insertCuts(final BSPTree node, final Collection<SubHyperplane> boundary) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,185,final Iterator<SubHyperplane> iterator = boundary.iterator();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,187,// build the current level
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,188,Hyperplane inserted = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,189,while ((inserted == null) && iterator.hasNext()) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,190,inserted = iterator.next().getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,191,if (!node.insertCut(inserted.copySelf())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,192,inserted = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,196,if (!iterator.hasNext()) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,197,return;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,200,// distribute the remaining edges in the two sub-trees
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,201,final ArrayList<SubHyperplane> plusList  = new ArrayList<SubHyperplane>();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,202,final ArrayList<SubHyperplane> minusList = new ArrayList<SubHyperplane>();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,203,while (iterator.hasNext()) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,204,final SubHyperplane other = iterator.next();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,205,switch (inserted.side(other)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,206,case PLUS:
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,207,plusList.add(other);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,208,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,209,case MINUS:
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,210,minusList.add(other);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,211,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,212,case BOTH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,213,final Hyperplane.SplitSubHyperplane split = inserted.split(other);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,214,plusList.add(split.getPlus());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,215,minusList.add(split.getMinus());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,216,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,217,default:
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,218,// ignore the sub-hyperplanes belonging to the cut hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,222,// recurse through lower levels
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,223,"insertCuts(node.getPlus(),  plusList);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,224,"insertCuts(node.getMinus(), minusList);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,228,/** Build a convex region from a collection of bounding hyperplanes.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,229,* @param hyperplanes collection of bounding hyperplanes
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,230,"* @return a new convex region, or null if the collection is empty"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,232,public static Region buildConvex(final Collection<Hyperplane> hyperplanes) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,233,if (hyperplanes.isEmpty()) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,234,return null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,237,// use the first hyperplane to build the right class
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,238,final Region region = hyperplanes.iterator().next().wholeSpace();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,240,// chop off parts of the space
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,241,BSPTree node = region.tree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,242,node.setAttribute(Boolean.TRUE);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,243,for (final Hyperplane hyperplane : hyperplanes) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,244,if (node.insertCut(hyperplane)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,245,node.setAttribute(null);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,246,node.getPlus().setAttribute(Boolean.FALSE);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,247,node = node.getMinus();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,248,node.setAttribute(Boolean.TRUE);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,252,return region;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,256,/** Copy the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,257,* <p>The instance created is completely independant of the original
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,258,"* one. A deep copy is used, none of the underlying objects are"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,259,* shared (except for the underlying tree {@code Boolean}
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,260,* attributes and immutable objects).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,261,"* @return a new region, copy of the instance"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,263,public Region copySelf() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,264,return buildNew(tree.copySelf());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,267,/** Check if the instance is empty.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,268,* @return true if the instance is empty
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,270,public boolean isEmpty() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,271,return isEmpty(tree);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,274,/** Check if the sub-tree starting at a given node is empty.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,275,* @param node root node of the sub-tree (<em>must</em> have {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,276,"* Region Region} tree semantics, i.e. the leaf nodes must have"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,277,* {@code Boolean} attributes representing an inside/outside
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,278,* property)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,279,* @return true if the sub-tree starting at the given node is empty
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,281,public static boolean isEmpty(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,283,// we use a recursive function rather than the BSPTreeVisitor
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,284,// interface because we can stop visiting the tree as soon as we
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,285,// have found an inside cell
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,287,if (node.getCut() == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,288,"// if we find an inside node, the region is not empty"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,289,return !isInside(node);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,292,// check both sides of the sub-tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,293,return isEmpty(node.getMinus()) && isEmpty(node.getPlus());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,297,/** Check a leaf node inside attribute.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,298,* @param node leaf node to check
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,299,* @return true if the leaf node is an inside node
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,301,private static boolean isInside(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,302,return (Boolean) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,305,/** Check if the instance entirely contains another region.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,306,* @param region region to check against the instance
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,307,* @return true if the instance contains the specified tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,309,public boolean contains(final Region region) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,310,"return difference(region, this).isEmpty();"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,313,/** Check a point with respect to the region.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,314,* @param point point to check
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,315,* @return a code representing the point status: either {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,316,"* Location#INSIDE}, {@link Location#OUTSIDE} or {@link Location#BOUNDARY}"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,318,public Location checkPoint(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,319,"return checkPoint(tree, point);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,322,/** Check a point with respect to the region starting at a given node.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,323,* @param node root node of the region
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,324,* @param point point to check
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,325,* @return a code representing the point status: either {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,326,"* Location#INSIDE}, {@link Location#OUTSIDE} or {@link Location#BOUNDARY}"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,328,"protected Location checkPoint(final BSPTree node, final Point point) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,329,final BSPTree cell = node.getCell(point);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,330,if (cell.getCut() == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,331,"// the point is in the interior of a cell, just check the attribute"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,332,return isInside(cell) ? Location.INSIDE : Location.OUTSIDE;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,335,"// the point is on a cut-sub-hyperplane, is it on a boundary ?"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,336,"final Location minusCode = checkPoint(cell.getMinus(), point);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,337,"final Location plusCode  = checkPoint(cell.getPlus(),  point);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,338,return (minusCode == plusCode) ? minusCode : Location.BOUNDARY;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,342,/** Get the complement of the region (exchanged interior/exterior).
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,343,"* <p>The instance is not modified, a new region is built.</p>"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,344,"* @return a new region, complement of the instance"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,346,public Region getComplement() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,347,return buildNew(recurseComplement(tree));
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,350,/** Recursively build the complement of a BSP tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,351,* @param node current node of the original tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,352,"* @return new tree, complement of the node"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,354,private static BSPTree recurseComplement(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,355,if (node.getCut() == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,356,return new BSPTree(isInside(node) ? Boolean.FALSE : Boolean.TRUE);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,359,BoundaryAttribute attribute = (BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,360,if (attribute != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,361,final SubHyperplane plusOutside =
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,362,(attribute.plusInside == null) ? null : attribute.plusInside.copySelf();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,363,final SubHyperplane plusInside  =
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,364,(attribute.plusOutside == null) ? null : attribute.plusOutside.copySelf();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,365,"attribute = new BoundaryAttribute(plusOutside, plusInside);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,368,"return new BSPTree(node.getCut().copySelf(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,369,"recurseComplement(node.getPlus()),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,370,"recurseComplement(node.getMinus()),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,371,attribute);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,375,/** Get the underlying BSP tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,377,* <p>Regions are represented by an underlying inside/outside BSP
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,378,* tree whose leaf attributes are {@code Boolean} instances
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,379,* representing inside leaf cells if the attribute value is
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,380,* {@code true} and outside leaf cells if the attribute is
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,381,* {@code false}. These leaf attributes are always present and
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,382,* guaranteed to be non null.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,384,"* <p>In addition to the leaf attributes, the internal nodes which"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,385,* correspond to cells split by cut sub-hyperplanes may contain
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,386,* {@link BoundaryAttribute BoundaryAttribute} objects representing
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,387,* the parts of the corresponding cut sub-hyperplane that belong to
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,388,"* the boundary. When the boundary attributes have been computed,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,389,* all internal nodes are guaranteed to have non-null
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,390,"* attributes, however some {@link BoundaryAttribute"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,391,* BoundaryAttribute} instances may have their {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,392,* BoundaryAttribute#plusInside plusInside} and {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,393,* BoundaryAttribute#plusOutside plusOutside} fields both null if
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,394,* the corresponding cut sub-hyperplane does not have any parts
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,395,* belonging to the boundary.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,397,* <p>Since computing the boundary is not always required and can be
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,398,"* time-consuming for large trees, these internal nodes attributes"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,399,* are computed using lazy evaluation only when required by setting
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,400,* the {@code includeBoundaryAttributes} argument to
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,401,"* {@code true}. Once computed, these attributes remain in the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,402,"* tree, which implies that in this case, further calls to the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,403,* method for the same region will always include these attributes
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,404,* regardless of the value of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,405,* {@code includeBoundaryAttributes} argument.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,407,"* @param includeBoundaryAttributes if true, the boundary attributes"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,408,* at internal nodes are guaranteed to be included (they may be
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,409,"* included even if the argument is false, if they have already been"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,410,* computed due to a previous call)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,411,* @return underlying BSP tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,412,* @see BoundaryAttribute
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,414,public BSPTree getTree(final boolean includeBoundaryAttributes) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,415,if (includeBoundaryAttributes && (tree.getCut() != null) && (tree.getAttribute() == null)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,416,// we need to compute the boundary attributes
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,417,recurseBuildBoundary(tree);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,419,return tree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,422,/** Class holding boundary attributes.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,423,* <p>This class is used for the attributes associated with the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,424,* nodes of region boundary shell trees returned by the {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,425,* Region#getTree Region.getTree}. It contains the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,426,* parts of the node cut sub-hyperplane that belong to the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,427,* boundary.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,428,"* <p>This class is a simple placeholder, it does not provide any"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,429,* processing methods.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,430,* @see Region#getTree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,432,public static class BoundaryAttribute {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,434,/** Part of the node cut sub-hyperplane that belongs to the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,435,* boundary and has the outside of the region on the plus side of
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,436,* its underlying hyperplane (may be null).
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,438,private final SubHyperplane plusOutside;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,440,/** Part of the node cut sub-hyperplane that belongs to the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,441,* boundary and has the inside of the region on the plus side of
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,442,* its underlying hyperplane (may be null).
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,444,private final SubHyperplane plusInside;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,446,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,447,* @param plusOutside part of the node cut sub-hyperplane that
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,448,* belongs to the boundary and has the outside of the region on
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,449,* the plus side of its underlying hyperplane (may be null)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,450,* @param plusInside part of the node cut sub-hyperplane that
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,451,* belongs to the boundary and has the inside of the region on the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,452,* plus side of its underlying hyperplane (may be null)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,454,"public BoundaryAttribute(final SubHyperplane plusOutside,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,455,final SubHyperplane plusInside) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,456,this.plusOutside = plusOutside;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,457,this.plusInside  = plusInside;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,460,/** Get the part of the node cut sub-hyperplane that belongs to the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,461,* boundary and has the outside of the region on the plus side of
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,462,* its underlying hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,463,* @return part of the node cut sub-hyperplane that belongs to the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,464,* boundary and has the outside of the region on the plus side of
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,465,* its underlying hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,467,public SubHyperplane getPlusOutside() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,468,return plusOutside;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,471,/** Get the part of the node cut sub-hyperplane that belongs to the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,472,* boundary and has the inside of the region on the plus side of
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,473,* its underlying hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,474,* @return part of the node cut sub-hyperplane that belongs to the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,475,* boundary and has the inside of the region on the plus side of
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,476,* its underlying hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,478,public SubHyperplane getPlusInside() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,479,return plusInside;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,485,/** Recursively build the boundary shell tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,486,* @param node current node in the inout tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,488,private void recurseBuildBoundary(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,489,if (node.getCut() != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,491,SubHyperplane plusOutside = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,492,SubHyperplane plusInside  = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,494,"// characterize the cut sub-hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,495,// first with respect to the plus sub-tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,496,final Characterization plusChar = new Characterization();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,497,"characterize(node.getPlus(), node.getCut().copySelf(), plusChar);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,499,if (plusChar.hasOut()) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,500,// plusChar.out corresponds to a subset of the cut
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,501,// sub-hyperplane known to have outside cells on its plus
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,502,"// side, we want to check if parts of this subset do have"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,503,// inside cells on their minus side
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,504,final Characterization minusChar = new Characterization();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,505,"characterize(node.getMinus(), plusChar.getOut(), minusChar);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,506,if (minusChar.hasIn()) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,507,plusOutside = minusChar.getIn();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,511,if (plusChar.hasIn()) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,512,// plusChar.in corresponds to a subset of the cut
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,513,// sub-hyperplane known to have inside cells on its plus
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,514,"// side, we want to check if parts of this subset do have"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,515,// outside cells on their minus side
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,516,final Characterization minusChar = new Characterization();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,517,"characterize(node.getMinus(), plusChar.getIn(), minusChar);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,518,if (minusChar.hasOut()) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,519,plusInside = minusChar.getOut();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,523,"node.setAttribute(new BoundaryAttribute(plusOutside, plusInside));"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,524,recurseBuildBoundary(node.getPlus());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,525,recurseBuildBoundary(node.getMinus());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,530,/** Filter the parts of an hyperplane belonging to the boundary.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,531,* <p>The filtering consist in splitting the specified
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,532,* sub-hyperplane into several parts lying in inside and outside
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,533,* cells of the tree. The principle is to call this method twice for
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,534,"* each cut sub-hyperplane in the tree, once one the plus node and"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,535,* once on the minus node. The parts that have the same flag
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,536,* (inside/inside or outside/outside) do not belong to the boundary
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,537,* while parts that have different flags (inside/outside or
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,538,* outside/inside) do belong to the boundary.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,539,* @param node current BSP tree node
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,540,* @param sub sub-hyperplane to characterize
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,541,* @param characterization placeholder where to put the characterized parts
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,543,"private static void characterize(final BSPTree node, final SubHyperplane sub,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,544,final Characterization characterization) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,545,if (node.getCut() == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,546,// we have reached a leaf node
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,547,final boolean inside = (Boolean) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,548,"characterization.add(sub, inside);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,549,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,550,final Hyperplane hyperplane = node.getCut().getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,551,switch (hyperplane.side(sub)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,552,case PLUS:
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,553,"characterize(node.getPlus(), sub, characterization);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,554,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,555,case MINUS:
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,556,"characterize(node.getMinus(), sub, characterization);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,557,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,558,case BOTH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,559,final Hyperplane.SplitSubHyperplane split = hyperplane.split(sub);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,560,"characterize(node.getPlus(),  split.getPlus(),  characterization);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,561,"characterize(node.getMinus(), split.getMinus(), characterization);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,562,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,563,default:
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,564,// this should not happen
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,565,"throw new RuntimeException(""internal error"");"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,570,/** Get the size of the boundary.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,571,"* @return the size of the boundary (this is 0 in 1D, a length in"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,572,"* 2D, an area in 3D ...)"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,574,public double getBoundarySize() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,575,final BoundarySizeVisitor visitor = new BoundarySizeVisitor();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,576,getTree(true).visit(visitor);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,577,return visitor.getSize();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,580,/** Visitor computing the boundary size. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,581,private static class BoundarySizeVisitor implements BSPTreeVisitor {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,583,/** Size of the boundary. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,584,private double boundarySize;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,586,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,588,public BoundarySizeVisitor() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,589,boundarySize = 0;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,592,/** {@inheritDoc}*/
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,593,public Order visitOrder(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,594,return Order.MINUS_SUB_PLUS;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,597,/** {@inheritDoc}*/
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,598,public void visitInternalNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,599,final BoundaryAttribute attribute = (BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,600,if (attribute.plusOutside != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,601,boundarySize += attribute.plusOutside.getRemainingRegion().getSize();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,603,if (attribute.plusInside != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,604,boundarySize += attribute.plusInside.getRemainingRegion().getSize();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,608,/** {@inheritDoc}*/
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,609,public void visitLeafNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,612,/** Get the size of the boundary.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,613,* @return size of the boundary
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,615,public double getSize() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,616,return boundarySize;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,621,/** Get the size of the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,622,"* @return the size of the instance (this is a length in 1D, an area"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,623,"* in 2D, a volume in 3D ...)"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,625,public double getSize() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,626,if (barycenter == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,627,computeGeometricalProperties();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,629,return size;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,632,/** Set the size of the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,633,* @param size size of the instance
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,635,protected void setSize(final double size) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,636,this.size = size;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,639,/** Get the barycenter of the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,640,* @return an object representing the barycenter
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,642,public Point getBarycenter() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,643,if (barycenter == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,644,computeGeometricalProperties();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,646,return barycenter;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,649,/** Set the barycenter of the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,650,* @param barycenter barycenter of the instance
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,652,protected void setBarycenter(final Point barycenter) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,653,this.barycenter = barycenter;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,656,/** Compute some geometrical properties.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,657,* <p>The properties to compute are the barycenter and the size.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,659,protected abstract void computeGeometricalProperties();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,661,/** Transform a region.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,662,* <p>Applying a transform to a region consist in applying the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,663,* transform to all the hyperplanes of the underlying BSP tree and
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,664,* of the boundary (and also to the sub-hyperplanes embedded in
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,665,* these hyperplanes) and to the barycenter. The instance is not
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,666,"* modified, a new instance is built.</p>"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,667,* @param transform transform to apply
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,668,"* @return a new region, resulting from the application of the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,669,* transform to the instance
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,671,public Region applyTransform(final Transform transform) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,673,// transform the BSP tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,674,"final Region tRegion = buildNew(recurseTransform(tree, transform));"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,676,// transform the barycenter
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,677,if (barycenter != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,678,tRegion.size = size;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,679,tRegion.barycenter = transform.apply(barycenter);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,682,return tRegion;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,686,/** Recursively transform an inside/outside BSP-tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,687,* @param node current BSP tree node
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,688,* @param transform transform to apply
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,689,* @return a new tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,691,"private BSPTree recurseTransform(final BSPTree node, final Transform transform) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,693,if (node.getCut() == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,694,return new BSPTree(node.getAttribute());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,697,final SubHyperplane  sub = node.getCut();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,698,final SubHyperplane tSub = sub.applyTransform(transform);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,699,BoundaryAttribute attribute = (BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,700,if (attribute != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,701,final SubHyperplane tPO =
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,702,(attribute.getPlusOutside() == null) ? null : attribute.getPlusOutside().applyTransform(transform);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,703,final SubHyperplane tPI =
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,704,(attribute.getPlusInside()  == null) ? null  : attribute.getPlusInside().applyTransform(transform);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,705,"attribute = new BoundaryAttribute(tPO, tPI);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,708,"return new BSPTree(tSub,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,709,"recurseTransform(node.getPlus(),  transform),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,710,"recurseTransform(node.getMinus(), transform),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,711,attribute);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,715,/** Compute the relative position of the instance with respect to an
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,716,* hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,717,* @param hyperplane reference hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,718,"* @return one of {@link Hyperplane.Side#PLUS Hyperplane.Side.PLUS}, {@link"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,719,"* Hyperplane.Side#MINUS Hyperplane.Side.MINUS}, {@link Hyperplane.Side#BOTH"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,720,* Hyperplane.Side.BOTH} or {@link Hyperplane.Side#HYPER Hyperplane.Side.HYPER}
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,721,* (the latter result can occur only if the tree contains only one
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,722,* cut hyperplane)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,724,public Hyperplane.Side side(final Hyperplane hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,725,final Sides sides = new Sides();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,726,"recurseSides(tree, new SubHyperplane(hyperplane), sides);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,727,return sides.plusFound() ?
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,728,(sides.minusFound() ? Hyperplane.Side.BOTH  : Hyperplane.Side.PLUS) :
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,729,(sides.minusFound() ? Hyperplane.Side.MINUS : Hyperplane.Side.HYPER);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,732,/** Search recursively for inside leaf nodes on each side of the given hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,734,* <p>The algorithm used here is directly derived from the one
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,735,* described in section III (<i>Binary Partitioning of a BSP
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,736,"* Tree</i>) of the Bruce Naylor, John Amanatides and William"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,737,* Thibault paper <a
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,738,"* href=""http://www.cs.yorku.ca/~amana/research/bsptSetOp.pdf"">Merging"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,739,* BSP Trees Yields Polyhedral Set Operations</a> Proc. Siggraph
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,740,"* '90, Computer Graphics 24(4), August 1990, pp 115-124, published"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,741,* by the Association for Computing Machinery (ACM)..</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,743,* @param node current BSP tree node
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,744,* @param sub sub-hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,745,* @param sides object holding the sides found
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,747,"private void recurseSides(final BSPTree node, final SubHyperplane sub, final Sides sides) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,749,if (node.getCut() == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,750,if (isInside(node)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,751,// this is an inside cell expanding across the hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,752,sides.rememberPlusFound();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,753,sides.rememberMinusFound();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,755,return;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,758,final Hyperplane hyperplane = node.getCut().getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,759,switch (hyperplane.side(sub)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,760,case PLUS :
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,761,// the sub-hyperplane is entirely in the plus sub-tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,762,if (sub.getHyperplane().side(node.getCut()) == Hyperplane.Side.PLUS) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,763,if (!isEmpty(node.getMinus())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,764,sides.rememberPlusFound();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,766,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,767,if (!isEmpty(node.getMinus())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,768,sides.rememberMinusFound();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,771,if (!(sides.plusFound() && sides.minusFound())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,772,"recurseSides(node.getPlus(), sub, sides);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,774,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,775,case MINUS :
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,776,// the sub-hyperplane is entirely in the minus sub-tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,777,if (sub.getHyperplane().side(node.getCut()) == Hyperplane.Side.PLUS) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,778,if (!isEmpty(node.getPlus())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,779,sides.rememberPlusFound();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,781,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,782,if (!isEmpty(node.getPlus())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,783,sides.rememberMinusFound();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,786,if (!(sides.plusFound() && sides.minusFound())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,787,"recurseSides(node.getMinus(), sub, sides);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,789,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,790,case BOTH :
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,791,// the sub-hyperplane extends in both sub-trees
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,792,final Hyperplane.SplitSubHyperplane split = hyperplane.split(sub);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,794,// explore first the plus sub-tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,795,"recurseSides(node.getPlus(), split.getPlus(), sides);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,797,"// if needed, explore the minus sub-tree"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,798,if (!(sides.plusFound() && sides.minusFound())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,799,"recurseSides(node.getMinus(), split.getMinus(), sides);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,801,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,802,default :
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,803,// the sub-hyperplane and the cut sub-hyperplane share the same hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,804,if (node.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,805,if ((node.getPlus().getCut() != null) || isInside(node.getPlus())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,806,sides.rememberPlusFound();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,808,if ((node.getMinus().getCut() != null) || isInside(node.getMinus())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,809,sides.rememberMinusFound();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,811,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,812,if ((node.getPlus().getCut() != null) || isInside(node.getPlus())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,813,sides.rememberMinusFound();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,815,if ((node.getMinus().getCut() != null) || isInside(node.getMinus())) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,816,sides.rememberPlusFound();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,823,/** Utility class holding the already found sides. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,824,private static final class Sides {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,826,/** Indicator of inside leaf nodes found on the plus side. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,827,private boolean plusFound;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,829,/** Indicator of inside leaf nodes found on the plus side. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,830,private boolean minusFound;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,832,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,834,public Sides() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,835,plusFound  = false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,836,minusFound = false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,839,/** Remember the fact that inside leaf nodes have been found on the plus side.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,841,public void rememberPlusFound() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,842,plusFound = true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,845,/** Check if inside leaf nodes have been found on the plus side.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,846,* @return true if inside leaf nodes have been found on the plus side
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,848,public boolean plusFound() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,849,return plusFound;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,852,/** Remember the fact that inside leaf nodes have been found on the minus side.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,854,public void rememberMinusFound() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,855,minusFound = true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,858,/** Check if inside leaf nodes have been found on the minus side.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,859,* @return true if inside leaf nodes have been found on the minus side
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,861,public boolean minusFound() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,862,return minusFound;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,867,/** Get the parts of a sub-hyperplane that are contained in the region.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,868,* <p>The parts of the sub-hyperplane that belong to the boundary are
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,869,* <em>not</em> included in the resulting parts.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,870,* @param sub sub-hyperplane traversing the region
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,871,* @return filtered sub-hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,873,public SubHyperplane intersection(final SubHyperplane sub) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,874,"return recurseIntersection(tree, sub);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,877,/** Recursively compute the parts of a sub-hyperplane that are
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,878,* contained in the region.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,879,* @param node current BSP tree node
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,880,* @param sub sub-hyperplane traversing the region
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,881,* @return filtered sub-hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,883,"private SubHyperplane recurseIntersection(final BSPTree node, final SubHyperplane sub) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,885,if (node.getCut() == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,886,return isInside(node) ? sub.copySelf() : null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,889,final Hyperplane hyperplane = node.getCut().getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,890,switch (hyperplane.side(sub)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,891,case PLUS :
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,892,"return recurseIntersection(node.getPlus(), sub);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,893,case MINUS :
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,894,"return recurseIntersection(node.getMinus(), sub);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,895,case BOTH :
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,896,final Hyperplane.SplitSubHyperplane split = hyperplane.split(sub);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,897,"final SubHyperplane plus  = recurseIntersection(node.getPlus(),  split.getPlus());"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,898,"final SubHyperplane minus = recurseIntersection(node.getMinus(), split.getMinus());"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,899,if (plus == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,900,return minus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,901,} else if (minus == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,902,return plus;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,903,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,904,"return new SubHyperplane(plus.getHyperplane(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,905,"Region.union(plus.getRemainingRegion(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,906,minus.getRemainingRegion()));
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,908,default :
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,909,"return recurseIntersection(node.getPlus(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,910,"recurseIntersection(node.getMinus(), sub));"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,915,/** Compute the union of two regions.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,916,* @param region1 first region (will be unusable after the operation as
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,917,* parts of it will be reused in the new region)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,918,* @param region2 second region (will be unusable after the operation as
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,919,* parts of it will be reused in the new region)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,920,"* @return a new region, result of {@code region1 union region2}"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,922,"public static Region union(final Region region1, final Region region2) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,923,"final BSPTree tree = region1.tree.merge(region2.tree, new UnionMerger());"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,924,tree.visit(new InternalNodesCleaner());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,925,return region1.buildNew(tree);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,928,/** Compute the intersection of two regions.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,929,* @param region1 first region (will be unusable after the operation as
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,930,* parts of it will be reused in the new region)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,931,* @param region2 second region (will be unusable after the operation as
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,932,* parts of it will be reused in the new region)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,933,"* @return a new region, result of {@code region1 intersection region2}"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,935,"public static Region intersection(final Region region1, final Region region2) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,936,"final BSPTree tree = region1.tree.merge(region2.tree, new IntersectionMerger());"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,937,tree.visit(new InternalNodesCleaner());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,938,return region1.buildNew(tree);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,941,/** Compute the symmetric difference (exclusive or) of two regions.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,942,* @param region1 first region (will be unusable after the operation as
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,943,* parts of it will be reused in the new region)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,944,* @param region2 second region (will be unusable after the operation as
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,945,* parts of it will be reused in the new region)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,946,"* @return a new region, result of {@code region1 xor region2}"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,948,"public static Region xor(final Region region1, final Region region2) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,949,"final BSPTree tree = region1.tree.merge(region2.tree, new XORMerger());"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,950,tree.visit(new InternalNodesCleaner());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,951,return region1.buildNew(tree);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,954,/** Compute the difference of two regions.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,955,* @param region1 first region (will be unusable after the operation as
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,956,* parts of it will be reused in the new region)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,957,* @param region2 second region (will be unusable after the operation as
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,958,* parts of it will be reused in the new region)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,959,"* @return a new region, result of {@code region1 minus region2}"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,961,"public static Region difference(final Region region1, final Region region2) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,962,"final BSPTree tree = region1.tree.merge(region2.tree, new DifferenceMerger());"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,963,tree.visit(new InternalNodesCleaner());
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,964,return region1.buildNew(tree);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,967,/** Leaf node / tree merger for union operation. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,968,private static final class UnionMerger implements BSPTree.LeafMerger {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,969,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,970,"public BSPTree merge(final BSPTree leaf, final BSPTree tree,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,971,"final BSPTree parentTree, final boolean isPlusChild,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,972,final boolean leafFromInstance) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,973,if (isInside(leaf)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,974,// the leaf node represents an inside cell
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,975,"leaf.insertInTree(parentTree, isPlusChild);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,976,return leaf;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,978,// the leaf node represents an outside cell
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,979,"tree.insertInTree(parentTree, isPlusChild);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,980,return tree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,984,/** Leaf node / tree merger for intersection operation. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,985,private static final class IntersectionMerger implements BSPTree.LeafMerger {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,986,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,987,"public BSPTree merge(final BSPTree leaf, final BSPTree tree,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,988,"final BSPTree parentTree, final boolean isPlusChild,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,989,final boolean leafFromInstance) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,990,if (isInside(leaf)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,991,// the leaf node represents an inside cell
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,992,"tree.insertInTree(parentTree, isPlusChild);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,993,return tree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,995,// the leaf node represents an outside cell
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,996,"leaf.insertInTree(parentTree, isPlusChild);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,997,return leaf;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1001,/** Leaf node / tree merger for xor operation. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1002,private static final class XORMerger implements BSPTree.LeafMerger {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1003,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1004,"public BSPTree merge(final BSPTree leaf, final BSPTree tree,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1005,"final BSPTree parentTree, final boolean isPlusChild,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1006,final boolean leafFromInstance) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1007,BSPTree t = tree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1008,if (isInside(leaf)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1009,// the leaf node represents an inside cell
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1010,t = recurseComplement(t);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1012,"t.insertInTree(parentTree, isPlusChild);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1013,return t;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1017,/** Leaf node / tree merger for difference operation.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1018,* <p>The algorithm used here is directly derived from the one
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1019,* described in section III (<i>Binary Partitioning of a BSP
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1020,"* Tree</i>) of the Naylor, Amanatides and Thibault paper. An error"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1021,* was detected and corrected in the figure 5.1 of the article for
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1022,* merging leaf nodes with complete trees. Contrary to what is said
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1023,"* in the figure, the {@code ELSE} part of if is not the same"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1024,* as the first part with {@code T1} and {@codeT2}
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1025,* swapped. {@code T1} and {@codeT2} must be swapped
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1026,* everywhere <em>except</em> in the {@code RETURN} part of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1027,* {@code DIFFERENCE} operation: if {@codeT2} is an
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1028,"* in-cell, we must return {@code Complement_Bspt(T2)}, not"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1029,"* {@code Complement_Bspt(T1)}, and if {@codeT2} is an"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1030,"* out-cell, we must return {@code T1}, not {@codeT2}</p>"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1032,private static final class DifferenceMerger implements BSPTree.LeafMerger {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1033,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1034,"public BSPTree merge(final BSPTree leaf, final BSPTree tree,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1035,"final BSPTree parentTree, final boolean isPlusChild,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1036,final boolean leafFromInstance) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1037,if (isInside(leaf)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1038,// the leaf node represents an inside cell
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1039,final BSPTree argTree = recurseComplement(leafFromInstance ? tree : leaf);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1040,"argTree.insertInTree(parentTree, isPlusChild);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1041,return argTree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1043,// the leaf node represents an outside cell
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1044,final BSPTree instanceTree = leafFromInstance ? leaf : tree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1045,"instanceTree.insertInTree(parentTree, isPlusChild);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1046,return instanceTree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1050,/** Visitor removing internal nodes attributes. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1051,private static final class InternalNodesCleaner implements BSPTreeVisitor {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1053,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1054,public Order visitOrder(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1055,return Order.PLUS_SUB_MINUS;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1058,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1059,public void visitInternalNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1060,node.setAttribute(null);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1063,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,1064,public void visitLeafNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,17,package org.apache.commons.math.geometry.partitioning;
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,19,/** This interface represents the remaining parts of an hyperplane after
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,20,* other parts have been chopped off.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,22,* <p>sub-hyperplanes are obtained when parts of an {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,23,* Hyperplane hyperplane} are chopped off by other hyperplanes that
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,24,* intersect it. The remaining part is a convex region. Such objects
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,25,* appear in {@link BSPTree BSP trees} as the intersection of a cut
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,26,"* hyperplane with the convex region which it splits, the chopping"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,27,* hyperplanes are the cut hyperplanes closer to the tree root.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,29,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,31,public class SubHyperplane {
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,33,/** Underlying hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,34,private final Hyperplane hyperplane;
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,36,/** Remaining region of the hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,37,private final Region remainingRegion;
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,39,/** Build a chopped hyperplane that is not chopped at all.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,40,* @param hyperplane underlying hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,42,public SubHyperplane(final Hyperplane hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,43,this.hyperplane = hyperplane;
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,44,remainingRegion = hyperplane.wholeHyperplane();
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,47,/** Build a sub-hyperplane from an hyperplane and a region.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,48,* @param hyperplane underlying hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,49,* @param remainingRegion remaining region of the hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,51,"public SubHyperplane(final Hyperplane hyperplane, final Region remainingRegion) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,52,this.hyperplane      = hyperplane;
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,53,this.remainingRegion = remainingRegion;
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,56,/** Copy the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,57,* <p>The instance created is completely independant of the original
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,58,"* one. A deep copy is used, none of the underlying objects are"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,59,* shared (except for the nodes attributes and immutable
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,60,* objects).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,61,"* @return a new sub-hyperplane, copy of the instance"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,63,public SubHyperplane copySelf() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,64,"return new SubHyperplane(hyperplane.copySelf(), remainingRegion.copySelf());"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,67,/** Get the underlying hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,68,* @return underlying hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,70,public Hyperplane getHyperplane() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,71,return hyperplane;
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,74,/** Get the remaining region of the hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,75,* <p>The returned region is expressed in the canonical hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,76,* frame and has the hyperplane dimension. For example a chopped
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,77,* hyperplane in the 3D euclidean is a 2D plane and the
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,78,* corresponding region is a convex 2D polygon.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,79,* @return remaining region of the hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,81,public Region getRemainingRegion() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,82,return remainingRegion;
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,85,/** Apply a transform to the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,86,* <p>The instance must be a (D-1)-dimension sub-hyperplane with
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,87,* respect to the transform <em>not</em> a (D-2)-dimension
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,88,* sub-hyperplane the transform knows how to transform by
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,89,* itself. The transform will consist in transforming first the
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,90,* hyperplane and then the all region using the various methods
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,91,* provided by the transform.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,92,* @param transform D-dimension transform to apply
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,93,* @return the transformed instance
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,95,public SubHyperplane applyTransform(final Transform transform) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,96,final Hyperplane tHyperplane = transform.apply(hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,97,final BSPTree tTree =
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,98,"recurseTransform(remainingRegion.getTree(false), tHyperplane, transform);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,99,"return new SubHyperplane(tHyperplane, remainingRegion.buildNew(tTree));"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,102,/** Recursively transform a BSP-tree from a sub-hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,103,* @param node current BSP tree node
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,104,* @param transformed image of the instance hyperplane by the transform
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,105,* @param transform transform to apply
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,106,* @return a new tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,108,"private BSPTree recurseTransform(final BSPTree node, final Hyperplane transformed,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,109,final Transform transform) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,110,if (node.getCut() == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,111,return new BSPTree(node.getAttribute());
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,114,Region.BoundaryAttribute attribute =
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,115,(Region.BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,116,if (attribute != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,117,final SubHyperplane tPO = (attribute.getPlusOutside() == null) ?
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,118,null :
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,119,"transform.apply(attribute.getPlusOutside(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,120,"hyperplane, transformed);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,121,final SubHyperplane tPI = (attribute.getPlusInside() == null) ?
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,122,null :
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,123,"transform.apply(attribute.getPlusInside(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,124,"hyperplane, transformed);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,125,"attribute = new Region.BoundaryAttribute(tPO, tPI);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,128,"return new BSPTree(transform.apply(node.getCut(),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,129,"hyperplane, transformed),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,130,"recurseTransform(node.getPlus(), transformed,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,131,"transform),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,132,"recurseTransform(node.getMinus(), transformed,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,133,"transform),"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,134,attribute);
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,17,package org.apache.commons.math.geometry.partitioning;
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,20,/** This interface represents a sub-space of a space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,22,* <p>Sub-spaces are the lower dimensions subsets of a n-dimensions
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,23,* space. The (n-1)-dimension sub-spaces are specific sub-spaces known
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,24,* as {@link Hyperplane hyperplanes}.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,26,"* <p>In the 3D euclidean space, hyperplanes are 2D planes, and the 1D"
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,27,* sub-spaces are lines.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,29,* @see Hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,30,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,32,public interface SubSpace {
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,34,/** Transform a space point into a sub-space point.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,35,* @param point n-dimension point of the space
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,36,* @return (n-1)-dimension point of the sub-space corresponding to
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,37,* the specified space point
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,38,* @see #toSpace
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,40,Point toSubSpace(Point point);
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,42,/** Transform a sub-space point into a space point.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,43,* @param point (n-1)-dimension point of the sub-space
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,44,* @return n-dimension point of the space corresponding to the
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,45,* specified sub-space point
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,46,* @see #toSubSpace
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubSpace.java,48,Point toSpace(Point point);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,17,package org.apache.commons.math.geometry.partitioning;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,20,/** This interface represents an inversible affine transform in a space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,21,"* <p>Inversible affine transform include for example scalings,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,22,"* translations, rotations.</p>"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,24,* <p>Transforms are dimension-specific. The consistency rules between
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,25,* the three {@code apply} methods are the following ones for a
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,26,* transformed defined for dimension D:</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,27,* <ul>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,28,*   <li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,29,*     the transform can be applied to a point in the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,30,*     D-dimension space using its {@link #apply(Point)}
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,31,*     method
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,32,*   </li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,33,*   <li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,34,*     the transform can be applied to a (D-1)-dimension
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,35,*     hyperplane in the D-dimension space using its
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,36,*     {@link #apply(Hyperplane)} method
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,37,*   </li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,38,*   <li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,39,*     the transform can be applied to a (D-2)-dimension
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,40,*     sub-hyperplane in a (D-1)-dimension hyperplane using
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,41,"*     its {@link #apply(SubHyperplane, Hyperplane, Hyperplane)}"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,42,*     method
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,43,*   </li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,44,* </ul>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,46,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,48,public interface Transform {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,50,/** Transform a point of a space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,51,* @param point point to transform
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,52,* @return a new object representing the transformed point
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,54,Point apply(Point point);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,56,/** Transform an hyperplane of a space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,57,* @param hyperplane hyperplane to transform
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,58,* @return a new object representing the transformed hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,60,Hyperplane apply(Hyperplane hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,62,/** Transform a sub-hyperplane embedded in an hyperplane.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,63,* @param sub sub-hyperplane to transform
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,64,* @param original hyperplane in which the sub-hyperplane is
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,65,"* defined (this is the original hyperplane, the transform has"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,66,* <em>not</em> been applied to it)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,67,* @param transformed hyperplane in which the sub-hyperplane is
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,68,"* defined (this is the transformed hyperplane, the transform"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,69,* <em>has</em> been applied to it)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,70,* @return a new object representing the transformed sub-hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java,72,"SubHyperplane apply(SubHyperplane sub, Hyperplane original, Hyperplane transformed);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,17,package org.apache.commons.math.geometry.partitioning.utilities;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,19,/** This class implements AVL trees.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,21,* <p>The purpose of this class is to sort elements while allowing
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,22,* duplicate elements (i.e. such that {@code a.equals(b)} is
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,23,"* true). The {@code SortedSet} interface does not allow this, so"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,24,* a specific class is needed. Null elements are not allowed.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,26,* <p>Since the {@code equals} method is not sufficient to
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,27,"* differentiate elements, the {@link #delete delete} method is"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,28,* implemented using the equality operator.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,30,* <p>In order to clearly mark the methods provided here do not have
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,31,* the same semantics as the ones specified in the
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,32,"* {@code SortedSet} interface, different names are used"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,33,* ({@code add} has been replaced by {@link #insert insert} and
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,34,* {@code remove} has been replaced by {@link #delete
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,35,* delete}).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,37,* <p>This class is based on the C implementation Georg Kraml has put
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,38,"* in the public domain. Unfortunately, his <a"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,39,"* href=""www.purists.org/georg/avltree/index.html"">page</a> seems not"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,40,* to exist any more.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,42,* @param <T> the type of the elements
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,44,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,46,public class AVLTree<T extends Comparable<T>> {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,48,/** Top level node. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,49,private Node top;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,51,/** Build an empty tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,53,public AVLTree() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,54,top = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,57,/** Insert an element in the tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,58,* @param element element to insert (silently ignored if null)
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,60,public void insert(final T element) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,61,if (element != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,62,if (top == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,63,"top = new Node(element, null);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,64,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,65,top.insert(element);
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,70,/** Delete an element from the tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,71,* <p>The element is deleted only if there is a node {@code n}
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,72,"* containing exactly the element instance specified, i.e. for which"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,73,* {@code n.getElement() == element}. This is purposely
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,74,* <em>different</em> from the specification of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,75,"* {@code java.util.Set} {@code remove} method (in fact,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,76,* this is the reason why a specific class has been developed).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,77,* @param element element to delete (silently ignored if null)
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,78,* @return true if the element was deleted from the tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,80,public boolean delete(final T element) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,81,if (element != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,82,for (Node node = getNotSmaller(element); node != null; node = node.getNext()) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,83,// loop over all elements neither smaller nor larger
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,84,// than the specified one
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,85,if (node.element == element) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,86,node.delete();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,87,return true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,88,} else if (node.element.compareTo(element) > 0) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,89,"// all the remaining elements are known to be larger,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,90,// the element is not in the tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,91,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,95,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,98,/** Check if the tree is empty.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,99,* @return true if the tree is empty
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,101,public boolean isEmpty() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,102,return top == null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,106,/** Get the number of elements of the tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,107,* @return number of elements contained in the tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,109,public int size() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,110,return (top == null) ? 0 : top.size();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,113,/** Get the node whose element is the smallest one in the tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,114,* @return the tree node containing the smallest element in the tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,115,* or null if the tree is empty
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,116,* @see #getLargest
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,117,* @see #getNotSmaller
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,118,* @see #getNotLarger
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,119,* @see Node#getPrevious
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,120,* @see Node#getNext
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,122,public Node getSmallest() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,123,return (top == null) ? null : top.getSmallest();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,126,/** Get the node whose element is the largest one in the tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,127,* @return the tree node containing the largest element in the tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,128,* or null if the tree is empty
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,129,* @see #getSmallest
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,130,* @see #getNotSmaller
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,131,* @see #getNotLarger
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,132,* @see Node#getPrevious
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,133,* @see Node#getNext
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,135,public Node getLargest() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,136,return (top == null) ? null : top.getLargest();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,139,/** Get the node whose element is not smaller than the reference object.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,140,* @param reference reference object (may not be in the tree)
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,141,* @return the tree node containing the smallest element not smaller
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,142,* than the reference object or null if either the tree is empty or
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,143,* all its elements are smaller than the reference object
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,144,* @see #getSmallest
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,145,* @see #getLargest
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,146,* @see #getNotLarger
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,147,* @see Node#getPrevious
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,148,* @see Node#getNext
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,150,public Node getNotSmaller(final T reference) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,151,Node candidate = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,152,for (Node node = top; node != null;) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,153,if (node.element.compareTo(reference) < 0) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,154,if (node.right == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,155,return candidate;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,157,node = node.right;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,158,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,159,candidate = node;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,160,if (node.left == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,161,return candidate;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,163,node = node.left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,166,return null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,169,/** Get the node whose element is not larger than the reference object.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,170,* @param reference reference object (may not be in the tree)
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,171,* @return the tree node containing the largest element not larger
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,172,* than the reference object (in which case the node is guaranteed
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,173,* not to be empty) or null if either the tree is empty or all its
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,174,* elements are larger than the reference object
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,175,* @see #getSmallest
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,176,* @see #getLargest
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,177,* @see #getNotSmaller
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,178,* @see Node#getPrevious
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,179,* @see Node#getNext
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,181,public Node getNotLarger(final T reference) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,182,Node candidate = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,183,for (Node node = top; node != null;) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,184,if (node.element.compareTo(reference) > 0) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,185,if (node.left == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,186,return candidate;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,188,node = node.left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,189,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,190,candidate = node;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,191,if (node.right == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,192,return candidate;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,194,node = node.right;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,197,return null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,200,/** Enum for tree skew factor. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,201,private static enum Skew {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,202,/** Code for left high trees. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,203,"LEFT_HIGH,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,205,/** Code for right high trees. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,206,"RIGHT_HIGH,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,208,/** Code for Skew.BALANCED trees. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,209,BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,212,/** This class implements AVL trees nodes.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,213,* <p>AVL tree nodes implement all the logical structure of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,214,* tree. Nodes are created by the {@link AVLTree AVLTree} class.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,215,* <p>The nodes are not independant from each other but must obey
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,216,* specific balancing constraints and the tree structure is
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,217,* rearranged as elements are inserted or deleted from the tree. The
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,218,"* creation, modification and tree-related navigation methods have"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,219,"* therefore restricted access. Only the order-related navigation,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,220,* reading and delete methods are public.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,221,* @see AVLTree
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,223,public class Node {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,225,/** Element contained in the current node. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,226,private T element;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,228,/** Left sub-tree. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,229,private Node left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,231,/** Right sub-tree. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,232,private Node right;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,234,/** Parent tree. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,235,private Node parent;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,237,/** Skew factor. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,238,private Skew skew;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,240,/** Build a node for a specified element.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,241,* @param element element
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,242,* @param parent parent node
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,244,"Node(final T element, final Node parent) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,245,this.element = element;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,246,left         = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,247,right        = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,248,this.parent  = parent;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,249,skew         = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,252,/** Get the contained element.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,253,* @return element contained in the node
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,255,public T getElement() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,256,return element;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,259,/** Get the number of elements of the tree rooted at this node.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,260,* @return number of elements contained in the tree rooted at this node
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,262,int size() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,263,return 1 + ((left  == null) ? 0 : left.size()) + ((right == null) ? 0 : right.size());
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,266,/** Get the node whose element is the smallest one in the tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,267,* rooted at this node.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,268,* @return the tree node containing the smallest element in the
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,269,* tree rooted at this node or null if the tree is empty
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,270,* @see #getLargest
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,272,Node getSmallest() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,273,Node node = this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,274,while (node.left != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,275,node = node.left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,277,return node;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,280,/** Get the node whose element is the largest one in the tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,281,* rooted at this node.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,282,* @return the tree node containing the largest element in the
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,283,* tree rooted at this node or null if the tree is empty
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,284,* @see #getSmallest
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,286,Node getLargest() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,287,Node node = this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,288,while (node.right != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,289,node = node.right;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,291,return node;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,294,/** Get the node containing the next smaller or equal element.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,295,* @return node containing the next smaller or equal element or
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,296,* null if there is no smaller or equal element in the tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,297,* @see #getNext
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,299,public Node getPrevious() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,301,if (left != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,302,final Node node = left.getLargest();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,303,if (node != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,304,return node;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,308,for (Node node = this; node.parent != null; node = node.parent) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,309,if (node != node.parent.left) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,310,return node.parent;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,314,return null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,318,/** Get the node containing the next larger or equal element.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,319,* @return node containing the next larger or equal element (in
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,320,* which case the node is guaranteed not to be empty) or null if
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,321,* there is no larger or equal element in the tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,322,* @see #getPrevious
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,324,public Node getNext() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,326,if (right != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,327,final Node node = right.getSmallest();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,328,if (node != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,329,return node;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,333,for (Node node = this; node.parent != null; node = node.parent) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,334,if (node != node.parent.right) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,335,return node.parent;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,339,return null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,343,/** Insert an element in a sub-tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,344,* @param newElement element to insert
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,345,* @return true if the parent tree should be re-Skew.BALANCED
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,347,boolean insert(final T newElement) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,348,if (newElement.compareTo(this.element) < 0) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,349,// the inserted element is smaller than the node
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,350,if (left == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,351,"left = new Node(newElement, this);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,352,return rebalanceLeftGrown();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,354,return left.insert(newElement) ? rebalanceLeftGrown() : false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,357,// the inserted element is equal to or greater than the node
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,358,if (right == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,359,"right = new Node(newElement, this);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,360,return rebalanceRightGrown();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,362,return right.insert(newElement) ? rebalanceRightGrown() : false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,366,/** Delete the node from the tree.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,368,public void delete() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,369,if ((parent == null) && (left == null) && (right == null)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,370,"// this was the last node, the tree is now empty"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,371,element = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,372,top     = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,373,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,375,Node node;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,376,Node child;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,377,boolean leftShrunk;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,378,if ((left == null) && (right == null)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,379,node       = this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,380,element    = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,381,leftShrunk = node == node.parent.left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,382,child      = null;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,383,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,384,node       = (left != null) ? left.getLargest() : right.getSmallest();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,385,element    = node.element;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,386,leftShrunk = node == node.parent.left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,387,child      = (node.left != null) ? node.left : node.right;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,390,node = node.parent;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,391,if (leftShrunk) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,392,node.left = child;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,393,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,394,node.right = child;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,396,if (child != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,397,child.parent = node;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,400,while (leftShrunk ? node.rebalanceLeftShrunk() : node.rebalanceRightShrunk()) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,401,if (node.parent == null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,402,return;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,404,leftShrunk = node == node.parent.left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,405,node = node.parent;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,411,/** Re-balance the instance as left sub-tree has grown.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,412,* @return true if the parent tree should be reSkew.BALANCED too
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,414,private boolean rebalanceLeftGrown() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,415,switch (skew) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,416,case LEFT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,417,if (left.skew == Skew.LEFT_HIGH) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,418,rotateCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,419,skew       = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,420,right.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,421,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,422,final Skew s = left.right.skew;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,423,left.rotateCCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,424,rotateCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,425,switch(s) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,426,case LEFT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,427,left.skew  = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,428,right.skew = Skew.RIGHT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,429,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,430,case RIGHT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,431,left.skew  = Skew.LEFT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,432,right.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,433,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,434,default:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,435,left.skew  = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,436,right.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,438,skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,440,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,441,case RIGHT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,442,skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,443,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,444,default:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,445,skew = Skew.LEFT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,446,return true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,450,/** Re-balance the instance as right sub-tree has grown.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,451,* @return true if the parent tree should be reSkew.BALANCED too
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,453,private boolean rebalanceRightGrown() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,454,switch (skew) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,455,case LEFT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,456,skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,457,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,458,case RIGHT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,459,if (right.skew == Skew.RIGHT_HIGH) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,460,rotateCCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,461,skew      = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,462,left.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,463,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,464,final Skew s = right.left.skew;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,465,right.rotateCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,466,rotateCCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,467,switch (s) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,468,case LEFT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,469,left.skew  = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,470,right.skew = Skew.RIGHT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,471,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,472,case RIGHT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,473,left.skew  = Skew.LEFT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,474,right.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,475,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,476,default:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,477,left.skew  = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,478,right.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,480,skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,482,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,483,default:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,484,skew = Skew.RIGHT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,485,return true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,489,/** Re-balance the instance as left sub-tree has shrunk.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,490,* @return true if the parent tree should be reSkew.BALANCED too
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,492,private boolean rebalanceLeftShrunk() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,493,switch (skew) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,494,case LEFT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,495,skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,496,return true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,497,case RIGHT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,498,if (right.skew == Skew.RIGHT_HIGH) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,499,rotateCCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,500,skew      = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,501,left.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,502,return true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,503,} else if (right.skew == Skew.BALANCED) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,504,rotateCCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,505,skew      = Skew.LEFT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,506,left.skew = Skew.RIGHT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,507,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,508,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,509,final Skew s = right.left.skew;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,510,right.rotateCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,511,rotateCCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,512,switch (s) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,513,case LEFT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,514,left.skew  = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,515,right.skew = Skew.RIGHT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,516,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,517,case RIGHT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,518,left.skew  = Skew.LEFT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,519,right.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,520,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,521,default:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,522,left.skew  = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,523,right.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,525,skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,526,return true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,528,default:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,529,skew = Skew.RIGHT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,530,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,534,/** Re-balance the instance as right sub-tree has shrunk.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,535,* @return true if the parent tree should be reSkew.BALANCED too
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,537,private boolean rebalanceRightShrunk() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,538,switch (skew) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,539,case RIGHT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,540,skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,541,return true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,542,case LEFT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,543,if (left.skew == Skew.LEFT_HIGH) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,544,rotateCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,545,skew       = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,546,right.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,547,return true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,548,} else if (left.skew == Skew.BALANCED) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,549,rotateCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,550,skew       = Skew.RIGHT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,551,right.skew = Skew.LEFT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,552,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,553,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,554,final Skew s = left.right.skew;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,555,left.rotateCCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,556,rotateCW();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,557,switch (s) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,558,case LEFT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,559,left.skew  = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,560,right.skew = Skew.RIGHT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,561,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,562,case RIGHT_HIGH:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,563,left.skew  = Skew.LEFT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,564,right.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,565,break;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,566,default:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,567,left.skew  = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,568,right.skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,570,skew = Skew.BALANCED;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,571,return true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,573,default:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,574,skew = Skew.LEFT_HIGH;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,575,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,579,/** Perform a clockwise rotation rooted at the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,580,"* <p>The skew factor are not updated by this method, they"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,581,* <em>must</em> be updated by the caller</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,583,private void rotateCW() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,585,final T tmpElt       = element;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,586,element              = left.element;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,587,left.element         = tmpElt;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,589,final Node tmpNode   = left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,590,left                 = tmpNode.left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,591,tmpNode.left         = tmpNode.right;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,592,tmpNode.right        = right;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,593,right                = tmpNode;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,595,if (left != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,596,left.parent = this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,598,if (right.right != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,599,right.right.parent = right;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,604,/** Perform a counter-clockwise rotation rooted at the instance.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,605,"* <p>The skew factor are not updated by this method, they"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,606,* <em>must</em> be updated by the caller</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,608,private void rotateCCW() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,610,final T tmpElt        = element;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,611,element               = right.element;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,612,right.element         = tmpElt;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,614,final Node tmpNode    = right;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,615,right                 = tmpNode.right;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,616,tmpNode.right         = tmpNode.left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,617,tmpNode.left          = left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,618,left                  = tmpNode;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,620,if (right != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,621,right.parent = this;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,623,if (left.left != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java,624,left.left.parent = left;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,17,package org.apache.commons.math.geometry.partitioning.utilities;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,19,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,21,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,23,/** This class implements an ordering operation for T-uples.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,25,* <p>Ordering is done by encoding all components of the T-uple into a
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,26,* single scalar value and using this value as the sorting
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,27,* key. Encoding is performed using the method invented by Georg
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,28,* Cantor in 1877 when he proved it was possible to establish a
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,29,* bijection between a line and a plane. The binary representations of
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,30,* the components of the T-uple are mixed together to form a single
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,31,* scalar. This means that the 2<sup>k</sup> bit of component 0 is
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,32,"* followed by the 2<sup>k</sup> bit of component 1, then by the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,33,* 2<sup>k</sup> bit of component 2 up to the 2<sup>k</sup> bit of
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,34,"* component {@code t}, which is followed by the 2<sup>k-1</sup>"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,35,"* bit of component 0, followed by the 2<sup>k-1</sup> bit of"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,36,* component 1 ... The binary representations are extended as needed
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,37,* to handle numbers with different scales and a suitable
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,38,* 2<sup>p</sup> offset is added to the components in order to avoid
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,39,* negative numbers (this offset is adjusted as needed during the
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,40,* comparison operations).</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,42,* <p>The more interesting property of the encoding method for our
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,43,* purpose is that it allows to select all the points that are in a
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,44,* given range. This is depicted in dimension 2 by the following
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,45,* picure:</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,47,"* <img src=""doc-files/OrderedTuple.png"" />"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,49,* <p>This picture shows a set of 100000 random 2-D pairs having their
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,50,* first component between -50 and +150 and their second component
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,51,* between -350 and +50. We wanted to extract all pairs having their
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,52,* first component between +30 and +70 and their second component
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,53,* between -120 and -30. We built the lower left point at coordinates
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,54,"* (30, -120) and the upper right point at coordinates (70, -30). All"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,55,* points smaller than the lower left point are drawn in red and all
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,56,* points larger than the upper right point are drawn in blue. The
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,57,* green points are between the two limits. This picture shows that
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,58,"* all the desired points are selected, along with spurious points. In"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,59,"* this case, we get 15790 points, 4420 of which really belonging to"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,60,* the desired rectangle. It is possible to extract very small
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,61,* subsets. As an example extracting from the same 100000 points set
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,62,* the points having their first component between +30 and +31 and
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,63,"* their second component between -91 and -90, we get a subset of 11"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,64,"* points, 2 of which really belonging to the desired rectangle.</p>"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,66,* <p>the previous selection technique can be applied in all
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,67,"* dimensions, still using two points to define the interval. The"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,68,* first point will have all its components set to their lower bounds
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,69,* while the second point will have all its components set to their
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,70,* upper bounds.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,72,* <p>T-uples with negative infinite or positive infinite components
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,73,* are sorted logically.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,75,* <p>Since the specification of the {@code Comparator} interface
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,76,"* allows only {@code ClassCastException} errors, some arbitrary"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,77,* choices have been made to handle specific cases. The rationale for
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,78,* these choices is to keep <em>regular</em> and consistent T-uples
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,79,* together.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,80,* <ul>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,81,* <li>instances with different dimensions are sorted according to
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,82,* their dimension regardless of their components values</li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,83,* <li>instances with {@code Double.NaN} components are sorted
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,84,* after all other ones (even after instances with positive infinite
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,85,* components</li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,86,* <li>instances with both positive and negative infinite components
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,87,* are considered as if they had {@code Double.NaN}
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,88,* components</li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,89,* </ul>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,91,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,93,public class OrderedTuple implements Comparable<OrderedTuple> {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,95,/** Sign bit mask. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,96,private static final long SIGN_MASK     = 0x8000000000000000L;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,98,/** Exponent bits mask. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,99,private static final long EXPONENT_MASK = 0x7ff0000000000000L;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,101,/** Mantissa bits mask. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,102,private static final long MANTISSA_MASK = 0x000fffffffffffffL;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,104,/** Implicit MSB for normalized numbers. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,105,private static final long IMPLICIT_ONE  = 0x0010000000000000L;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,107,/** Double components of the T-uple. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,108,private double[] components;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,110,/** Offset scale. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,111,private int offset;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,113,/** Least Significant Bit scale. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,114,private int lsb;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,116,/** Ordering encoding of the double components. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,117,private long[] encoding;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,119,/** Positive infinity marker. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,120,private boolean posInf;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,122,/** Negative infinity marker. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,123,private boolean negInf;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,125,/** Not A Number marker. */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,126,private boolean nan;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,128,/** Build an ordered T-uple from its components.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,129,* @param components double components of the T-uple
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,131,public OrderedTuple(final double ... components) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,132,this.components = components.clone();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,133,int msb = Integer.MIN_VALUE;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,134,lsb     = Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,135,posInf  = false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,136,negInf  = false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,137,nan     = false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,138,for (int i = 0; i < components.length; ++i) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,139,if (Double.isInfinite(components[i])) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,140,if (components[i] < 0) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,141,negInf = true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,142,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,143,posInf = true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,145,} else if (Double.isNaN(components[i])) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,146,nan = true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,147,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,148,final long b = Double.doubleToLongBits(components[i]);
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,149,final long m = mantissa(b);
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,150,if (m != 0) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,151,final int e = exponent(b);
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,152,"msb = FastMath.max(msb, e + computeMSB(m));"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,153,"lsb = FastMath.min(lsb, e + computeLSB(m));"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,158,if (posInf && negInf) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,159,// instance cannot be sorted logically
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,160,posInf = false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,161,negInf = false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,162,nan    = true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,165,if (lsb <= msb) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,166,// encode the T-upple with the specified offset
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,167,encode(msb + 16);
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,168,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,169,encoding = new long[] {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,170,0x0L
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,176,/** Encode the T-uple with a given offset.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,177,* @param minOffset minimal scale of the offset to add to all
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,178,* components (must be greater than the MSBs of all components)
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,180,private void encode(final int minOffset) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,182,// choose an offset with some margins
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,183,offset  = minOffset + 31;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,184,offset -= offset % 32;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,186,if ((encoding != null) && (encoding.length == 1) && (encoding[0] == 0x0L)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,187,// the components are all zeroes
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,188,return;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,191,// allocate an integer array to encode the components (we use only
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,192,// 63 bits per element because there is no unsigned long in Java)
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,193,final int neededBits  = offset + 1 - lsb;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,194,final int neededLongs = (neededBits + 62) / 63;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,195,encoding = new long[components.length * neededLongs];
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,197,// mix the bits from all components
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,198,int  eIndex = 0;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,199,int  shift  = 62;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,200,long word   = 0x0L;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,201,for (int k = offset; eIndex < encoding.length; --k) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,202,for (int vIndex = 0; vIndex < components.length; ++vIndex) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,203,"if (getBit(vIndex, k) != 0) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,204,word |= 0x1L << shift;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,206,if (shift-- == 0) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,207,encoding[eIndex++] = word;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,208,word  = 0x0L;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,209,shift = 62;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,216,/** Compares this ordered T-uple with the specified object.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,218,* <p>The ordering method is detailed in the general description of
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,219,* the class. Its main property is to be consistent with distance:
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,220,* geometrically close T-uples stay close to each other when stored
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,221,* in a sorted collection using this comparison method.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,223,"* <p>T-uples with negative infinite, positive infinite are sorted"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,224,* logically.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,226,* <p>Some arbitrary choices have been made to handle specific
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,227,* cases. The rationale for these choices is to keep
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,228,* <em>normal</em> and consistent T-uples together.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,229,* <ul>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,230,* <li>instances with different dimensions are sorted according to
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,231,* their dimension regardless of their components values</li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,232,* <li>instances with {@code Double.NaN} components are sorted
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,233,* after all other ones (evan after instances with positive infinite
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,234,* components</li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,235,* <li>instances with both positive and negative infinite components
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,236,* are considered as if they had {@code Double.NaN}
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,237,* components</li>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,238,* </ul>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,240,* @param ot T-uple to compare instance with
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,241,* @return a negative integer if the instance is less than the
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,242,"* object, zero if they are equal, or a positive integer if the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,243,* instance is greater than the object
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,246,public int compareTo(final OrderedTuple ot) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,247,if (components.length == ot.components.length) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,248,if (nan) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,249,return +1;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,250,} else if (ot.nan) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,251,return -1;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,252,} else if (negInf || ot.posInf) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,253,return -1;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,254,} else if (posInf || ot.negInf) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,255,return +1;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,256,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,258,if (offset < ot.offset) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,259,encode(ot.offset);
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,260,} else if (offset > ot.offset) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,261,ot.encode(offset);
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,264,"final int limit = FastMath.min(encoding.length, ot.encoding.length);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,265,for (int i = 0; i < limit; ++i) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,266,if (encoding[i] < ot.encoding[i]) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,267,return -1;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,268,} else if (encoding[i] > ot.encoding[i]) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,269,return +1;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,273,if (encoding.length < ot.encoding.length) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,274,return -1;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,275,} else if (encoding.length > ot.encoding.length) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,276,return +1;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,277,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,278,return 0;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,284,return components.length - ot.components.length;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,288,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,289,@Override
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,290,public boolean equals(final Object other) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,291,if (this == other) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,292,return true;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,293,} else if (other instanceof OrderedTuple) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,294,return compareTo((OrderedTuple) other) == 0;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,295,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,296,return false;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,300,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,301,@Override
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,302,public int hashCode() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,303,return Arrays.hashCode(components)   ^
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,304,((Integer) offset).hashCode() ^
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,305,((Integer) lsb).hashCode()    ^
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,306,((Boolean) posInf).hashCode() ^
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,307,((Boolean) negInf).hashCode() ^
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,308,((Boolean) nan).hashCode();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,311,/** Get the components array.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,312,* @return array containing the T-uple components
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,314,public double[] getComponents() {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,315,return components.clone();
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,318,/** Extract the sign from the bits of a double.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,319,* @param bits binary representation of the double
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,320,"* @return sign bit (zero if positive, non zero if negative)"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,322,private static long sign(final long bits) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,323,return bits & SIGN_MASK;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,326,/** Extract the exponent from the bits of a double.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,327,* @param bits binary representation of the double
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,328,* @return exponent
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,330,private static int exponent(final long bits) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,331,return ((int) ((bits & EXPONENT_MASK) >> 52)) - 1075;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,334,/** Extract the mantissa from the bits of a double.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,335,* @param bits binary representation of the double
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,336,* @return mantissa
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,338,private static long mantissa(final long bits) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,339,return ((bits & EXPONENT_MASK) == 0) ?
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,340,((bits & MANTISSA_MASK) << 1) :          // subnormal number
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,341,(IMPLICIT_ONE | (bits & MANTISSA_MASK)); // normal number
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,344,/** Compute the most significant bit of a long.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,345,* @param l long from which the most significant bit is requested
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,346,"* @return scale of the most significant bit of {@code l},"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,347,* or 0 if {@code l} is zero
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,348,* @see #computeLSB
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,350,private static int computeMSB(final long l) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,352,long ll = l;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,353,long mask  = 0xffffffffL;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,354,int  scale = 32;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,355,int  msb   = 0;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,357,while (scale != 0) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,358,if ((ll & mask) != ll) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,359,msb |= scale;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,360,ll = ll >> scale;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,362,scale = scale >> 1;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,363,mask  = mask >> scale;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,366,return msb;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,370,/** Compute the least significant bit of a long.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,371,* @param l long from which the least significant bit is requested
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,372,"* @return scale of the least significant bit of {@code l},"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,373,* or 63 if {@code l} is zero
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,374,* @see #computeMSB
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,376,private static int computeLSB(final long l) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,378,long ll = l;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,379,long mask  = 0xffffffff00000000L;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,380,int  scale = 32;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,381,int  lsb   = 0;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,383,while (scale != 0) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,384,if ((ll & mask) == ll) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,385,lsb |= scale;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,386,ll = ll >> scale;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,388,scale = scale >> 1;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,389,mask  = mask >> scale;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,392,return lsb;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,396,/** Get a bit from the mantissa of a double.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,397,* @param i index of the component
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,398,* @param k scale of the requested bit
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,399,"* @return the specified bit (either 0 or 1), after the offset has"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,400,* been added to the double
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,402,"private int getBit(final int i, final int k) {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,403,final long bits = Double.doubleToLongBits(components[i]);
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,404,final int e = exponent(bits);
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,405,if ((k < e) || (k > offset)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,406,return 0;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,407,} else if (k == offset) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,408,return (sign(bits) == 0L) ? 1 : 0;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,409,} else if (k > (e + 52)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,410,return (sign(bits) == 0L) ? 0 : 1;
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,411,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,412,final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java,413,return (int) ((m >> (k - e)) & 0x1L);
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,17,package org.apache.commons.math.geometry.euclidean.oneD;
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,19,import java.util.List;
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,21,import org.apache.commons.math.geometry.euclidean.oneD.Interval;
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,22,import org.apache.commons.math.geometry.euclidean.oneD.IntervalsSet;
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,23,import org.apache.commons.math.geometry.euclidean.oneD.Point1D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,24,import org.apache.commons.math.geometry.partitioning.Region;
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,25,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,27,import org.junit.Test;
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,29,public class IntervalsSetTest {
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,31,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,32,public void testInterval() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,33,"IntervalsSet set = new IntervalsSet(2.3, 5.7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,34,"Assert.assertEquals(3.4, set.getSize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,35,"Assert.assertEquals(4.0, ((Point1D) set.getBarycenter()).getAbscissa(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,36,"Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Point1D(2.3)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,37,"Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Point1D(5.7)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,38,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(1.2)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,39,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(8.7)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,40,"Assert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Point1D(3.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,41,"Assert.assertEquals(2.3, set.getInf(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,42,"Assert.assertEquals(5.7, set.getSup(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,45,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,46,public void testInfinite() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,47,"IntervalsSet set = new IntervalsSet(9.0, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,48,"Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Point1D(9.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,49,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(8.4)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,50,for (double e = 1.0; e <= 6.0; e += 1.0) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,51,"Assert.assertEquals(Region.Location.INSIDE,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,52,"set.checkPoint(new Point1D(FastMath.pow(10.0, e))));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,54,Assert.assertTrue(Double.isInfinite(set.getSize()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,55,"Assert.assertEquals(9.0, set.getInf(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,56,Assert.assertTrue(Double.isInfinite(set.getSup()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,58,set = (IntervalsSet) set.getComplement();
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,59,"Assert.assertEquals(9.0, set.getSup(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,60,Assert.assertTrue(Double.isInfinite(set.getInf()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,64,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,65,public void testMultiple() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,66,IntervalsSet set = (IntervalsSet)
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,67,"Region.intersection(Region.union(Region.difference(new IntervalsSet(1.0, 6.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,68,"new IntervalsSet(3.0, 5.0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,69,"new IntervalsSet(9.0, Double.POSITIVE_INFINITY)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,70,"new IntervalsSet(Double.NEGATIVE_INFINITY, 11.0));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,71,"Assert.assertEquals(5.0, set.getSize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,72,"Assert.assertEquals(5.9, ((Point1D) set.getBarycenter()).getAbscissa(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,73,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(0.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,74,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(4.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,75,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(8.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,76,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(12.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,77,"Assert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Point1D(1.2)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,78,"Assert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Point1D(5.9)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,79,"Assert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Point1D(9.01)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,80,"Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Point1D(5.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,81,"Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Point1D(11.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,82,"Assert.assertEquals( 1.0, set.getInf(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,83,"Assert.assertEquals(11.0, set.getSup(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,85,List<Interval> list = set.asList();
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,86,"Assert.assertEquals(3, list.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,87,"Assert.assertEquals( 1.0, list.get(0).getLower(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,88,"Assert.assertEquals( 3.0, list.get(0).getUpper(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,89,"Assert.assertEquals( 5.0, list.get(1).getLower(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,90,"Assert.assertEquals( 6.0, list.get(1).getUpper(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,91,"Assert.assertEquals( 9.0, list.get(2).getLower(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oneD/IntervalsSetTest.java,92,"Assert.assertEquals(11.0, list.get(2).getUpper(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/FrenchVector3DFormatTest.java,18,ackage org.apache.commons.math.geometry;
True,src/test/java/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/FrenchVector3DFormatTest.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,17,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,19,import org.apache.commons.math.geometry.euclidean.threeD.Line;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,20,import org.apache.commons.math.geometry.euclidean.threeD.Vector3D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,21,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,25,public class LineTest {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,27,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,28,public void testContains() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,29,"Vector3D p1 = new Vector3D(0, 0, 1);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,30,"Line l = new Line(p1, new Vector3D(0, 0, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,31,Assert.assertTrue(l.contains(p1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,32,"Assert.assertTrue(l.contains(new Vector3D(1.0, p1, 0.3, l.getDirection())));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,33,Vector3D u = l.getDirection().orthogonal();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,34,"Vector3D v = Vector3D.crossProduct(l.getDirection(), u);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,35,for (double alpha = 0; alpha < 2 * FastMath.PI; alpha += 0.3) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,36,"Assert.assertTrue(! l.contains(p1.add(new Vector3D(FastMath.cos(alpha), u,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,37,"FastMath.sin(alpha), v))));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,41,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,42,public void testSimilar() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,43,"Vector3D p1  = new Vector3D (1.2, 3.4, -5.8);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,44,"Vector3D p2  = new Vector3D (3.4, -5.8, 1.2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,45,"Line     lA  = new Line(p1, p2.subtract(p1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,46,"Line     lB  = new Line(p2, p1.subtract(p2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,47,Assert.assertTrue(lA.isSimilarTo(lB));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,48,"Assert.assertTrue(! lA.isSimilarTo(new Line(p1, lA.getDirection().orthogonal())));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,51,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,52,public void testPointDistance() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,53,"Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,54,"Assert.assertEquals(FastMath.sqrt(3.0 / 2.0), l.distance(new Vector3D(1, 0, 1)), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,55,"Assert.assertEquals(0, l.distance(new Vector3D(0, -4, -4)), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,58,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,59,public void testLineDistance() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,60,"Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,61,"Assert.assertEquals(1.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,62,"l.distance(new Line(new Vector3D(1, 0, 1), Vector3D.PLUS_K)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,63,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,64,"Assert.assertEquals(0.5,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,65,"l.distance(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(0, -1, -1))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,66,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,67,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,68,"l.distance(l),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,69,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,70,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,71,"l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -1, -1))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/LineTest.java,72,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,17,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,19,import org.apache.commons.math.geometry.euclidean.threeD.Line;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,20,import org.apache.commons.math.geometry.euclidean.threeD.Plane;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,21,import org.apache.commons.math.geometry.euclidean.threeD.Point3D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,22,import org.apache.commons.math.geometry.euclidean.threeD.Rotation;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,23,import org.apache.commons.math.geometry.euclidean.threeD.Vector3D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,27,public class PlaneTest {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,29,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,30,public void testContains() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,31,"Plane p = new Plane(new Vector3D(0, 0, 1), new Vector3D(0, 0, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,32,"Assert.assertTrue(p.contains(new Point3D(0, 0, 1)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,33,"Assert.assertTrue(p.contains(new Point3D(17, -32, 1)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,34,"Assert.assertTrue(! p.contains(new Point3D(17, -32, 1.001)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,37,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,38,public void testOffset() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,39,"Vector3D p1 = new Vector3D(1, 1, 1);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,40,"Plane p = new Plane(p1, new Vector3D(0.2, 0, 0));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,41,"Assert.assertEquals(-5.0, p.getOffset(new Point3D(-4, 0, 0)), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,42,"Assert.assertEquals(+5.0, p.getOffset(new Point3D(6, 10, -12)), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,43,"Assert.assertEquals(0.3,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,44,"p.getOffset(new Point3D(1.0, p1, 0.3, p.getNormal())),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,45,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,46,"Assert.assertEquals(-0.3,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,47,"p.getOffset(new Point3D(1.0, p1, -0.3, p.getNormal())),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,48,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,51,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,52,public void testPoint() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,53,"Plane p = new Plane(new Vector3D(2, -3, 1), new Vector3D(1, 4, 9));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,54,Assert.assertTrue(p.contains(p.getOrigin()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,57,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,58,public void testThreePoints() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,59,"Point3D p1 = new Point3D(1.2, 3.4, -5.8);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,60,"Point3D p2 = new Point3D(3.4, -5.8, 1.2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,61,"Point3D p3 = new Point3D(-2.0, 4.3, 0.7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,62,"Plane    p  = new Plane(p1, p2, p3);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,63,Assert.assertTrue(p.contains(p1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,64,Assert.assertTrue(p.contains(p2));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,65,Assert.assertTrue(p.contains(p3));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,68,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,69,public void testRotate() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,70,"Point3D p1 = new Point3D(1.2, 3.4, -5.8);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,71,"Point3D p2 = new Point3D(3.4, -5.8, 1.2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,72,"Point3D p3 = new Point3D(-2.0, 4.3, 0.7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,73,"Plane    p  = new Plane(p1, p2, p3);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,74,Vector3D oldNormal = p.getNormal();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,76,"p = p.rotate(p2, new Rotation(p2.subtract(p1), 1.7));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,77,Assert.assertTrue(p.contains(p1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,78,Assert.assertTrue(p.contains(p2));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,79,Assert.assertTrue(! p.contains(p3));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,81,"p = p.rotate(p2, new Rotation(oldNormal, 0.1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,82,Assert.assertTrue(! p.contains(p1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,83,Assert.assertTrue(p.contains(p2));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,84,Assert.assertTrue(! p.contains(p3));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,86,"p = p.rotate(p1, new Rotation(oldNormal, 0.1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,87,Assert.assertTrue(! p.contains(p1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,88,Assert.assertTrue(! p.contains(p2));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,89,Assert.assertTrue(! p.contains(p3));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,93,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,94,public void testTranslate() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,95,"Point3D p1 = new Point3D(1.2, 3.4, -5.8);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,96,"Point3D p2 = new Point3D(3.4, -5.8, 1.2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,97,"Point3D p3 = new Point3D(-2.0, 4.3, 0.7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,98,"Plane    p  = new Plane(p1, p2, p3);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,100,"p = p.translate(new Vector3D(2.0, p.getU(), -1.5, p.getV()));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,101,Assert.assertTrue(p.contains(p1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,102,Assert.assertTrue(p.contains(p2));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,103,Assert.assertTrue(p.contains(p3));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,105,"p = p.translate(new Vector3D(-1.2, p.getNormal()));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,106,Assert.assertTrue(! p.contains(p1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,107,Assert.assertTrue(! p.contains(p2));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,108,Assert.assertTrue(! p.contains(p3));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,110,"p = p.translate(new Vector3D(+1.2, p.getNormal()));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,111,Assert.assertTrue(p.contains(p1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,112,Assert.assertTrue(p.contains(p2));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,113,Assert.assertTrue(p.contains(p3));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,117,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,118,public void testIntersection() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,119,"Plane p = new Plane(new Vector3D(1, 2, 3), new Vector3D(-4, 1, -5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,120,"Line  l = new Line(new Vector3D(0.2, -3.5, 0.7), new Vector3D(1, 1, -1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,121,Point3D point = p.intersection(l);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,122,Assert.assertTrue(p.contains(point));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,123,Assert.assertTrue(l.contains(point));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,124,"Assert.assertNull(p.intersection(new Line(new Vector3D(10, 10, 10),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,125,p.getNormal().orthogonal())));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,128,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,129,public void testIntersection2() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,130,"Vector3D p1  = new Vector3D (1.2, 3.4, -5.8);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,131,"Vector3D p2  = new Vector3D (3.4, -5.8, 1.2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,132,"Plane    pA  = new Plane(p1, p2, new Vector3D (-2.0, 4.3, 0.7));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,133,"Plane    pB  = new Plane(p1, new Vector3D (11.4, -3.8, 5.1), p2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,134,Line     l   = (Line) pA.intersection(pB);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,135,Assert.assertTrue(l.contains(p1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,136,Assert.assertTrue(l.contains(p2));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,137,Assert.assertNull(pA.intersection(pA));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,140,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,141,public void testIntersection3() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,142,"Vector3D reference = new Vector3D (1.2, 3.4, -5.8);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,143,"Plane p1 = new Plane(reference, new Vector3D(1, 3, 3));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,144,"Plane p2 = new Plane(reference, new Vector3D(-2, 4, 0));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,145,"Plane p3 = new Plane(reference, new Vector3D(7, 0, -4));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,146,"Vector3D p = Plane.intersection(p1, p2, p3);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,147,"Assert.assertEquals(reference.getX(), p.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,148,"Assert.assertEquals(reference.getY(), p.getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,149,"Assert.assertEquals(reference.getZ(), p.getZ(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,152,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,153,public void testSimilar() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,154,"Vector3D p1  = new Vector3D (1.2, 3.4, -5.8);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,155,"Vector3D p2  = new Vector3D (3.4, -5.8, 1.2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,156,"Vector3D p3  = new Vector3D (-2.0, 4.3, 0.7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,157,"Plane    pA  = new Plane(p1, p2, p3);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,158,"Plane    pB  = new Plane(p1, new Vector3D (11.4, -3.8, 5.1), p2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,159,Assert.assertTrue(! pA.isSimilarTo(pB));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,160,Assert.assertTrue(pA.isSimilarTo(pA));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,161,"Assert.assertTrue(pA.isSimilarTo(new Plane(p1, p3, p2)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,162,"Vector3D shift = new Vector3D(0.3, pA.getNormal());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,163,"Assert.assertTrue(! pA.isSimilarTo(new Plane(p1.add(shift),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,164,"p3.add(shift),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PlaneTest.java,165,p2.add(shift))));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,17,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,19,import java.util.Arrays;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,21,import org.apache.commons.math.geometry.euclidean.threeD.Plane;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,22,import org.apache.commons.math.geometry.euclidean.threeD.Point3D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,23,import org.apache.commons.math.geometry.euclidean.threeD.PolyhedronsSet;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,24,import org.apache.commons.math.geometry.euclidean.threeD.Rotation;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,25,import org.apache.commons.math.geometry.euclidean.threeD.Vector3D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,26,import org.apache.commons.math.geometry.euclidean.twoD.Point2D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,27,import org.apache.commons.math.geometry.euclidean.twoD.PolygonsSet;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,28,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,29,import org.apache.commons.math.geometry.partitioning.BSPTreeVisitor;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,30,import org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,31,import org.apache.commons.math.geometry.partitioning.Region;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,32,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,33,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,34,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,35,import org.junit.Test;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,37,public class PolyhedronsSetTest {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,39,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,40,public void testBox() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,41,"PolyhedronsSet tree = new PolyhedronsSet(0, 1, 0, 1, 0, 1);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,42,"Assert.assertEquals(1.0, tree.getSize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,43,"Assert.assertEquals(6.0, tree.getBoundarySize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,44,Vector3D barycenter = (Vector3D) tree.getBarycenter();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,45,"Assert.assertEquals(0.5, barycenter.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,46,"Assert.assertEquals(0.5, barycenter.getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,47,"Assert.assertEquals(0.5, barycenter.getZ(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,48,for (double x = -0.25; x < 1.25; x += 0.1) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,49,boolean xOK = (x >= 0.0) && (x <= 1.0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,50,for (double y = -0.25; y < 1.25; y += 0.1) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,51,boolean yOK = (y >= 0.0) && (y <= 1.0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,52,for (double z = -0.25; z < 1.25; z += 0.1) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,53,boolean zOK = (z >= 0.0) && (z <= 1.0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,54,Region.Location expected =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,55,(xOK && yOK && zOK) ? Region.Location.INSIDE : Region.Location.OUTSIDE;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,56,"Assert.assertEquals(expected, tree.checkPoint(new Point3D(x, y, z)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,60,"checkPoints(Region.Location.BOUNDARY, tree, new Point3D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,61,"new Point3D(0.0, 0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,62,"new Point3D(1.0, 0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,63,"new Point3D(0.5, 0.0, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,64,"new Point3D(0.5, 1.0, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,65,"new Point3D(0.5, 0.5, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,66,"new Point3D(0.5, 0.5, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,68,"checkPoints(Region.Location.OUTSIDE, tree, new Point3D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,69,"new Point3D(0.0, 1.2, 1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,70,"new Point3D(1.0, 1.2, 1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,71,"new Point3D(1.2, 0.0, 1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,72,"new Point3D(1.2, 1.0, 1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,73,"new Point3D(1.2, 1.2, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,74,"new Point3D(1.2, 1.2, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,78,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,79,public void testTetrahedron() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,80,"Point3D vertex1 = new Point3D(1, 2, 3);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,81,"Point3D vertex2 = new Point3D(2, 2, 4);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,82,"Point3D vertex3 = new Point3D(2, 3, 3);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,83,"Point3D vertex4 = new Point3D(1, 3, 4);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,84,PolyhedronsSet tree =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,85,(PolyhedronsSet) Region.buildConvex(Arrays.asList(new Hyperplane[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,86,"new Plane(vertex3, vertex2, vertex1),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,87,"new Plane(vertex2, vertex3, vertex4),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,88,"new Plane(vertex4, vertex3, vertex1),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,89,"new Plane(vertex1, vertex2, vertex4)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,91,"Assert.assertEquals(1.0 / 3.0, tree.getSize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,92,"Assert.assertEquals(2.0 * FastMath.sqrt(3.0), tree.getBoundarySize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,93,Vector3D barycenter = (Vector3D) tree.getBarycenter();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,94,"Assert.assertEquals(1.5, barycenter.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,95,"Assert.assertEquals(2.5, barycenter.getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,96,"Assert.assertEquals(3.5, barycenter.getZ(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,97,double third = 1.0 / 3.0;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,98,"checkPoints(Region.Location.BOUNDARY, tree, new Point3D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,99,"vertex1, vertex2, vertex3, vertex4,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,100,"new Point3D(third, vertex1, third, vertex2, third, vertex3),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,101,"new Point3D(third, vertex2, third, vertex3, third, vertex4),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,102,"new Point3D(third, vertex3, third, vertex4, third, vertex1),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,103,"new Point3D(third, vertex4, third, vertex1, third, vertex2)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,105,"checkPoints(Region.Location.OUTSIDE, tree, new Point3D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,106,"new Point3D(1, 2, 4),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,107,"new Point3D(2, 2, 3),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,108,"new Point3D(2, 3, 4),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,109,"new Point3D(1, 3, 3)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,113,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,114,public void testIsometry() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,115,"Vector3D vertex1 = new Vector3D(1.1, 2.2, 3.3);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,116,"Vector3D vertex2 = new Vector3D(2.0, 2.4, 4.2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,117,"Vector3D vertex3 = new Vector3D(2.8, 3.3, 3.7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,118,"Vector3D vertex4 = new Vector3D(1.0, 3.6, 4.5);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,119,PolyhedronsSet tree =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,120,(PolyhedronsSet) Region.buildConvex(Arrays.asList(new Hyperplane[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,121,"new Plane(vertex3, vertex2, vertex1),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,122,"new Plane(vertex2, vertex3, vertex4),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,123,"new Plane(vertex4, vertex3, vertex1),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,124,"new Plane(vertex1, vertex2, vertex4)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,126,Vector3D barycenter = (Vector3D) tree.getBarycenter();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,127,"Vector3D s = new Vector3D(10.2, 4.3, -6.7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,128,"Vector3D c = new Vector3D(-0.2, 2.1, -3.2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,129,"Rotation r = new Rotation(new Vector3D(6.2, -4.4, 2.1), 0.12);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,131,"tree = tree.rotate(c, r).translate(s);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,133,Vector3D newB =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,134,"new Vector3D(1.0, s,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,135,"1.0, c,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,136,"1.0, r.applyTo(barycenter.subtract(c)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,137,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,138,"newB.subtract((Vector3D) tree.getBarycenter()).getNorm(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,139,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,141,final Vector3D[] expectedV = new Vector3D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,142,"new Vector3D(1.0, s,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,143,"1.0, c,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,144,"1.0, r.applyTo(vertex1.subtract(c))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,145,"new Vector3D(1.0, s,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,146,"1.0, c,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,147,"1.0, r.applyTo(vertex2.subtract(c))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,148,"new Vector3D(1.0, s,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,149,"1.0, c,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,150,"1.0, r.applyTo(vertex3.subtract(c))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,151,"new Vector3D(1.0, s,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,152,"1.0, c,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,153,"1.0, r.applyTo(vertex4.subtract(c)))"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,155,tree.getTree(true).visit(new BSPTreeVisitor() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,157,public Order visitOrder(BSPTree node) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,158,return Order.MINUS_SUB_PLUS;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,161,public void visitInternalNode(BSPTree node) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,162,Region.BoundaryAttribute attribute =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,163,(Region.BoundaryAttribute) node.getAttribute();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,164,if (attribute.getPlusOutside() != null) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,165,checkFacet(attribute.getPlusOutside());
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,167,if (attribute.getPlusInside() != null) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,168,checkFacet(attribute.getPlusInside());
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,172,public void visitLeafNode(BSPTree node) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,175,private void checkFacet(SubHyperplane facet) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,176,Plane plane = (Plane) facet.getHyperplane();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,177,Point2D[][] vertices =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,178,((PolygonsSet) facet.getRemainingRegion()).getVertices();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,179,"Assert.assertEquals(1, vertices.length);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,180,for (int i = 0; i < vertices[0].length; ++i) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,181,Vector3D v = (Vector3D) plane.toSpace(vertices[0][i]);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,182,double d = Double.POSITIVE_INFINITY;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,183,for (int k = 0; k < expectedV.length; ++k) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,184,"d = FastMath.min(d, v.subtract(expectedV[k]).getNorm());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,186,"Assert.assertEquals(0, d, 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,194,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,195,public void testBuildBox() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,196,double x = 1.0;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,197,double y = 2.0;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,198,double z = 3.0;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,199,double w = 0.1;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,200,double l = 1.0;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,201,PolyhedronsSet tree =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,202,"new PolyhedronsSet(x - l, x + l, y - w, y + w, z - w, z + w);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,203,Vector3D barycenter = (Vector3D) tree.getBarycenter();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,204,"Assert.assertEquals(x, barycenter.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,205,"Assert.assertEquals(y, barycenter.getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,206,"Assert.assertEquals(z, barycenter.getZ(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,207,"Assert.assertEquals(8 * l * w * w, tree.getSize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,208,"Assert.assertEquals(8 * w * (2 * l + w), tree.getBoundarySize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,211,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,212,public void testCross() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,214,double x = 1.0;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,215,double y = 2.0;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,216,double z = 3.0;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,217,double w = 0.1;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,218,double l = 1.0;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,219,PolyhedronsSet xBeam =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,220,"new PolyhedronsSet(x - l, x + l, y - w, y + w, z - w, z + w);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,221,PolyhedronsSet yBeam =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,222,"new PolyhedronsSet(x - w, x + w, y - l, y + l, z - w, z + w);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,223,PolyhedronsSet zBeam =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,224,"new PolyhedronsSet(x - w, x + w, y - w, y + w, z - l, z + l);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,225,PolyhedronsSet tree =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,226,"(PolyhedronsSet) Region.union(xBeam, Region.union(yBeam, zBeam));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,227,Vector3D barycenter = (Vector3D) tree.getBarycenter();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,229,"Assert.assertEquals(x, barycenter.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,230,"Assert.assertEquals(y, barycenter.getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,231,"Assert.assertEquals(z, barycenter.getZ(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,232,"Assert.assertEquals(8 * w * w * (3 * l - 2 * w), tree.getSize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,233,"Assert.assertEquals(24 * w * (2 * l - w), tree.getBoundarySize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,237,"private void checkPoints(Region.Location expected, PolyhedronsSet tree, Point3D[] points) {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,238,for (int i = 0; i < points.length; ++i) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/PolyhedronsSetTest.java,239,"Assert.assertEquals(expected, tree.checkPoint(points[i]));"
False,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrderTest.java,18,ackage org.apache.commons.math.geometry;
True,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrderTest.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
False,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrderTest.java,22,mport org.apache.commons.math.geometry.RotationOrder;
True,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrderTest.java,22,import org.apache.commons.math.geometry.euclidean.threeD.RotationOrder;
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,18,ackage org.apache.commons.math.geometry;
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,20,mport org.apache.commons.math.geometry.CardanEulerSingularityException;
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,21,mport org.apache.commons.math.geometry.NotARotationMatrixException;
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,22,mport org.apache.commons.math.geometry.Rotation;
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,23,mport org.apache.commons.math.geometry.RotationOrder;
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,24,mport org.apache.commons.math.geometry.Vector3D;
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,20,import org.apache.commons.math.geometry.euclidean.threeD.CardanEulerSingularityException;
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,21,import org.apache.commons.math.geometry.euclidean.threeD.NotARotationMatrixException;
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,22,import org.apache.commons.math.geometry.euclidean.threeD.Rotation;
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,23,import org.apache.commons.math.geometry.euclidean.threeD.RotationOrder;
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/RotationTest.java,24,import org.apache.commons.math.geometry.euclidean.threeD.Vector3D;
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DFormatAbstractTest.java,18,ackage org.apache.commons.math.geometry;
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DFormatAbstractTest.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DFormatAbstractTest.java,24,import org.apache.commons.math.geometry.euclidean.threeD.Vector3D;
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DFormatAbstractTest.java,25,import org.apache.commons.math.geometry.euclidean.threeD.Vector3DFormat;
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DFormatTest.java,18,ackage org.apache.commons.math.geometry;
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DFormatTest.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DTest.java,18,ackage org.apache.commons.math.geometry;
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DTest.java,18,package org.apache.commons.math.geometry.euclidean.threeD;
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DTest.java,20,mport org.apache.commons.math.geometry.Vector3D;
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DTest.java,20,import org.apache.commons.math.geometry.euclidean.threeD.Vector3D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,17,package org.apache.commons.math.geometry.euclidean.twoD;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,19,import org.apache.commons.math.geometry.euclidean.oneD.Point1D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,20,import org.apache.commons.math.geometry.euclidean.twoD.Line;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,21,import org.apache.commons.math.geometry.euclidean.twoD.Point2D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,22,import org.apache.commons.math.geometry.partitioning.Transform;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,23,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,27,import java.awt.geom.AffineTransform;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,29,public class LineTest {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,31,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,32,public void testContains() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,33,"Line l = new Line(new Point2D(0, 1), new Point2D(1, 2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,34,"Assert.assertTrue(l.contains(new Point2D(0, 1)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,35,"Assert.assertTrue(l.contains(new Point2D(1, 2)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,36,"Assert.assertTrue(l.contains(new Point2D(7, 8)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,37,"Assert.assertTrue(! l.contains(new Point2D(8, 7)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,40,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,41,public void testAbscissa() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,42,"Line l = new Line(new Point2D(2, 1), new Point2D(-2, -2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,43,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,44,"((Point1D) l.toSubSpace(new Point2D(-3,  4))).getAbscissa(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,45,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,46,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,47,"((Point1D) l.toSubSpace(new Point2D( 3, -4))).getAbscissa(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,48,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,49,"Assert.assertEquals(-5.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,50,"((Point1D) l.toSubSpace(new Point2D( 7, -1))).getAbscissa(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,51,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,52,"Assert.assertEquals( 5.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,53,"((Point1D) l.toSubSpace(new Point2D(-1, -7))).getAbscissa(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,54,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,57,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,58,public void testOffset() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,59,"Line l = new Line(new Point2D(2, 1), new Point2D(-2, -2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,60,"Assert.assertEquals(-5.0, l.getOffset(new Point2D(5, -3)), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,61,"Assert.assertEquals(+5.0, l.getOffset(new Point2D(-5, 2)), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,64,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,65,public void testPointAt() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,66,"Line l = new Line(new Point2D(2, 1), new Point2D(-2, -2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,67,for (double a = -2.0; a < 2.0; a += 0.2) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,68,Point1D pA = new Point1D(a);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,69,Point2D point = (Point2D) l.toSpace(pA);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,70,"Assert.assertEquals(a, ((Point1D) l.toSubSpace(point)).getAbscissa(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,71,"Assert.assertEquals(0.0, l.getOffset(point),   1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,72,for (double o = -2.0; o < 2.0; o += 0.2) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,73,"point = l.getPointAt(pA, o);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,74,"Assert.assertEquals(a, ((Point1D) l.toSubSpace(point)).getAbscissa(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,75,"Assert.assertEquals(o, l.getOffset(point),   1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,80,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,81,public void testOriginOffset() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,82,"Line l1 = new Line(new Point2D(0, 1), new Point2D(1, 2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,83,"Assert.assertEquals(FastMath.sqrt(0.5), l1.getOriginOffset(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,84,"Line l2 = new Line(new Point2D(1, 2), new Point2D(0, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,85,"Assert.assertEquals(-FastMath.sqrt(0.5), l2.getOriginOffset(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,88,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,89,public void testParallel() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,90,"Line l1 = new Line(new Point2D(0, 1), new Point2D(1, 2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,91,"Line l2 = new Line(new Point2D(2, 2), new Point2D(3, 3));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,92,Assert.assertTrue(l1.isParallelTo(l2));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,93,"Line l3 = new Line(new Point2D(1, 0), new Point2D(0.5, -0.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,94,Assert.assertTrue(l1.isParallelTo(l3));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,95,"Line l4 = new Line(new Point2D(1, 0), new Point2D(0.5, -0.51));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,96,Assert.assertTrue(! l1.isParallelTo(l4));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,99,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,100,public void testTransform() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,102,"Line l1 = new Line(new Point2D(1.0 ,1.0), new Point2D(4.0 ,1.0));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,103,"Transform t1 = Line.getTransform(new AffineTransform(0.0, 0.5,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,104,"-1.0, 0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,105,"1.0, 1.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,106,"Assert.assertEquals(0.5 * FastMath.PI,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,107,"((Line) t1.apply(l1)).getAngle(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,108,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,110,"Line l2 = new Line(new Point2D(0.0, 0.0), new Point2D(1.0, 1.0));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,111,"Transform t2 = Line.getTransform(new AffineTransform(0.0, 0.5,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,112,"-1.0, 0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,113,"1.0, 1.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,114,"Assert.assertEquals(FastMath.atan2(1.0, -2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,115,"((Line) t2.apply(l2)).getAngle(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,116,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,120,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,121,public void testIntersection() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,122,"Line    l1 = new Line(new Point2D( 0, 1), new Point2D(1, 2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,123,"Line    l2 = new Line(new Point2D(-1, 2), new Point2D(2, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,124,Point2D p  = (Point2D) l1.intersection(l2);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,125,"Assert.assertEquals(0.5, p.x, 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/LineTest.java,126,"Assert.assertEquals(1.5, p.y, 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,17,package org.apache.commons.math.geometry.euclidean.twoD;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,19,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,20,import java.util.List;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,22,import org.apache.commons.math.geometry.euclidean.oneD.Interval;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,23,import org.apache.commons.math.geometry.euclidean.oneD.IntervalsSet;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,24,import org.apache.commons.math.geometry.euclidean.oneD.Point1D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,25,import org.apache.commons.math.geometry.euclidean.twoD.Line;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,26,import org.apache.commons.math.geometry.euclidean.twoD.Point2D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,27,import org.apache.commons.math.geometry.euclidean.twoD.PolygonsSet;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,28,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,29,import org.apache.commons.math.geometry.partitioning.Region;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,30,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,31,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,32,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,33,import org.junit.Test;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,35,public class PolygonsSetTest {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,37,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,38,public void testSimplyConnected() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,39,Point2D[][] vertices = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,40,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,41,"new Point2D(36.0, 22.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,42,"new Point2D(39.0, 32.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,43,"new Point2D(19.0, 32.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,44,"new Point2D( 6.0, 16.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,45,"new Point2D(31.0, 10.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,46,"new Point2D(42.0, 16.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,47,"new Point2D(34.0, 20.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,48,"new Point2D(29.0, 19.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,49,"new Point2D(23.0, 22.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,50,"new Point2D(33.0, 25.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,53,PolygonsSet set = buildSet(vertices);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,54,"Assert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(new Point2D(50.0, 30.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,55,"checkPoints(Region.Location.INSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,56,"new Point2D(30.0, 15.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,57,"new Point2D(15.0, 20.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,58,"new Point2D(24.0, 25.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,59,"new Point2D(35.0, 30.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,60,"new Point2D(19.0, 17.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,62,"checkPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,63,"new Point2D(50.0, 30.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,64,"new Point2D(30.0, 35.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,65,"new Point2D(10.0, 25.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,66,"new Point2D(10.0, 10.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,67,"new Point2D(40.0, 10.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,68,"new Point2D(50.0, 15.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,69,"new Point2D(30.0, 22.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,71,"checkPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,72,"new Point2D(30.0, 32.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,73,"new Point2D(34.0, 20.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,75,"checkVertices(set.getVertices(), vertices);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,78,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,79,public void testStair() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,80,Point2D[][] vertices = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,81,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,82,"new Point2D( 0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,83,"new Point2D( 0.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,84,"new Point2D(-0.1, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,85,"new Point2D(-0.1, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,86,"new Point2D(-0.3, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,87,"new Point2D(-0.3, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,88,"new Point2D(-1.3, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,89,"new Point2D(-1.3, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,90,"new Point2D(-1.8, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,91,"new Point2D(-1.8 - 1.0 / FastMath.sqrt(2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,92,2.0 - 1.0 / FastMath.sqrt(2.0))
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,96,PolygonsSet set = buildSet(vertices);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,97,"checkVertices(set.getVertices(), vertices);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,99,"Assert.assertEquals(1.1 + 0.95 * FastMath.sqrt(2.0), set.getSize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,103,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,104,public void testHole() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,105,Point2D[][] vertices = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,106,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,107,"new Point2D(0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,108,"new Point2D(3.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,109,"new Point2D(3.0, 3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,110,"new Point2D(0.0, 3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,111,"}, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,112,"new Point2D(1.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,113,"new Point2D(2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,114,"new Point2D(2.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,115,"new Point2D(1.0, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,118,PolygonsSet set = buildSet(vertices);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,119,"checkPoints(Region.Location.INSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,120,"new Point2D(0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,121,"new Point2D(1.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,122,"new Point2D(2.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,123,"new Point2D(0.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,124,"new Point2D(2.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,125,"new Point2D(0.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,126,"new Point2D(1.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,127,"new Point2D(2.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,128,"new Point2D(0.5, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,130,"checkPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,131,"new Point2D(1.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,132,"new Point2D(3.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,133,"new Point2D(4.0, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,134,"new Point2D(6.0, 6.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,136,"checkPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,137,"new Point2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,138,"new Point2D(1.5, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,139,"new Point2D(1.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,140,"new Point2D(1.5, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,141,"new Point2D(1.5, 3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,142,"new Point2D(3.0, 3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,144,"checkVertices(set.getVertices(), vertices);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,147,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,148,public void testDisjointPolygons() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,149,Point2D[][] vertices = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,150,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,151,"new Point2D(0.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,152,"new Point2D(2.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,153,"new Point2D(1.0, 2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,154,"}, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,155,"new Point2D(4.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,156,"new Point2D(5.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,157,"new Point2D(3.0, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,160,PolygonsSet set = buildSet(vertices);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,161,"Assert.assertEquals(Region.Location.INSIDE, set.checkPoint(new Point2D(1.0, 1.5)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,162,"checkPoints(Region.Location.INSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,163,"new Point2D(1.0, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,164,"new Point2D(4.5, 0.8)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,166,"checkPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,167,"new Point2D(1.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,168,"new Point2D(3.5, 1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,169,"new Point2D(2.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,170,"new Point2D(3.0, 4.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,172,"checkPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,173,"new Point2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,174,"new Point2D(3.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,175,"new Point2D(0.0, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,177,"checkVertices(set.getVertices(), vertices);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,180,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,181,public void testOppositeHyperplanes() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,182,Point2D[][] vertices = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,183,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,184,"new Point2D(1.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,185,"new Point2D(2.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,186,"new Point2D(3.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,187,"new Point2D(2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,188,"new Point2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,189,"new Point2D(0.0, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,192,PolygonsSet set = buildSet(vertices);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,193,"checkVertices(set.getVertices(), vertices);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,196,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,197,public void testSingularPoint() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,198,Point2D[][] vertices = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,199,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,200,"new Point2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,201,"new Point2D( 1.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,202,"new Point2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,203,"new Point2D( 0.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,204,"new Point2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,205,"new Point2D(-1.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,206,"new Point2D(-1.0, -1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,207,"new Point2D( 0.0, -1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,210,PolygonsSet set = buildSet(vertices);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,211,"checkVertices(set.getVertices(), vertices);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,214,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,215,public void testLineIntersection() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,216,Point2D[][] vertices = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,217,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,218,"new Point2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,219,"new Point2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,220,"new Point2D( 2.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,221,"new Point2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,222,"new Point2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,223,"new Point2D( 1.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,224,"new Point2D( 1.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,225,"new Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,228,PolygonsSet set = buildSet(vertices);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,230,"Line l1 = new Line(new Point2D(-1.5, 0.0), FastMath.PI / 4);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,231,SubHyperplane s1 = set.intersection(new SubHyperplane(l1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,232,List<Interval> i1 = ((IntervalsSet) s1.getRemainingRegion()).asList();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,233,"Assert.assertEquals(2, i1.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,234,Interval v10 = (Interval) i1.get(0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,235,Point2D p10Lower = (Point2D) l1.toSpace(new Point1D(v10.getLower()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,236,"Assert.assertEquals(0.0, p10Lower.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,237,"Assert.assertEquals(1.5, p10Lower.getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,238,Point2D p10Upper = (Point2D) l1.toSpace(new Point1D(v10.getUpper()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,239,"Assert.assertEquals(0.5, p10Upper.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,240,"Assert.assertEquals(2.0, p10Upper.getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,241,Interval v11 = (Interval) i1.get(1);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,242,Point2D p11Lower = (Point2D) l1.toSpace(new Point1D(v11.getLower()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,243,"Assert.assertEquals(1.0, p11Lower.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,244,"Assert.assertEquals(2.5, p11Lower.getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,245,Point2D p11Upper = (Point2D) l1.toSpace(new Point1D(v11.getUpper()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,246,"Assert.assertEquals(1.5, p11Upper.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,247,"Assert.assertEquals(3.0, p11Upper.getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,249,"Line l2 = new Line(new Point2D(-1.0, 2.0), 0);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,250,SubHyperplane s2 = set.intersection(new SubHyperplane(l2));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,251,List<Interval> i2 = ((IntervalsSet) s2.getRemainingRegion()).asList();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,252,"Assert.assertEquals(1, i2.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,253,Interval v20 = (Interval) i2.get(0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,254,Point2D p20Lower = (Point2D) l2.toSpace(new Point1D(v20.getLower()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,255,"Assert.assertEquals(1.0, p20Lower.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,256,"Assert.assertEquals(2.0, p20Lower.getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,257,Point2D p20Upper = (Point2D) l2.toSpace(new Point1D(v20.getUpper()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,258,"Assert.assertEquals(3.0, p20Upper.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,259,"Assert.assertEquals(2.0, p20Upper.getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,263,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,264,public void testUnlimitedSubHyperplane() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,265,Point2D[][] vertices1 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,266,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,267,"new Point2D(0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,268,"new Point2D(4.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,269,"new Point2D(1.4, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,270,"new Point2D(0.0, 3.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,273,PolygonsSet set1 = buildSet(vertices1);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,274,Point2D[][] vertices2 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,275,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,276,"new Point2D(1.4,  0.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,277,"new Point2D(2.8, -1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,278,"new Point2D(2.5,  0.6)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,281,PolygonsSet set2 = buildSet(vertices2);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,283,"PolygonsSet set = (PolygonsSet) Region.union(set1.copySelf(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,284,set2.copySelf());
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,285,"checkVertices(set1.getVertices(), vertices1);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,286,"checkVertices(set2.getVertices(), vertices2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,287,"checkVertices(set.getVertices(), new Point2D[][] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,288,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,289,"new Point2D(0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,290,"new Point2D(1.6,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,291,"new Point2D(2.8, -1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,292,"new Point2D(2.6,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,293,"new Point2D(4.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,294,"new Point2D(1.4,  1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,295,"new Point2D(0.0,  3.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,301,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,302,public void testUnion() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,303,Point2D[][] vertices1 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,304,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,305,"new Point2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,306,"new Point2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,307,"new Point2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,308,"new Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,311,PolygonsSet set1 = buildSet(vertices1);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,312,Point2D[][] vertices2 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,313,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,314,"new Point2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,315,"new Point2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,316,"new Point2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,317,"new Point2D( 1.0,  3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,320,PolygonsSet set2 = buildSet(vertices2);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,321,"PolygonsSet set  = (PolygonsSet) Region.union(set1.copySelf(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,322,set2.copySelf());
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,323,"checkVertices(set1.getVertices(), vertices1);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,324,"checkVertices(set2.getVertices(), vertices2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,325,"checkVertices(set.getVertices(), new Point2D[][] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,326,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,327,"new Point2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,328,"new Point2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,329,"new Point2D( 2.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,330,"new Point2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,331,"new Point2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,332,"new Point2D( 1.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,333,"new Point2D( 1.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,334,"new Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,337,"checkPoints(Region.Location.INSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,338,"new Point2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,339,"new Point2D(0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,340,"new Point2D(2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,341,"new Point2D(2.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,342,"new Point2D(0.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,343,"new Point2D(1.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,344,"new Point2D(1.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,345,"new Point2D(1.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,346,"new Point2D(2.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,347,"new Point2D(2.5, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,349,"checkPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,350,"new Point2D(-0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,351,"new Point2D( 0.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,352,"new Point2D( 2.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,353,"new Point2D( 3.5, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,355,"checkPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,356,"new Point2D(0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,357,"new Point2D(0.5, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,358,"new Point2D(2.0, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,359,"new Point2D(2.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,360,"new Point2D(3.0, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,365,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,366,public void testIntersection() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,367,Point2D[][] vertices1 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,368,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,369,"new Point2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,370,"new Point2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,371,"new Point2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,372,"new Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,375,PolygonsSet set1 = buildSet(vertices1);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,376,Point2D[][] vertices2 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,377,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,378,"new Point2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,379,"new Point2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,380,"new Point2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,381,"new Point2D( 1.0,  3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,384,PolygonsSet set2 = buildSet(vertices2);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,385,"PolygonsSet set  = (PolygonsSet) Region.intersection(set1.copySelf(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,386,set2.copySelf());
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,387,"checkVertices(set1.getVertices(), vertices1);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,388,"checkVertices(set2.getVertices(), vertices2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,389,"checkVertices(set.getVertices(), new Point2D[][] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,390,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,391,"new Point2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,392,"new Point2D( 2.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,393,"new Point2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,394,"new Point2D( 1.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,397,"checkPoints(Region.Location.INSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,398,"new Point2D(1.5, 1.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,400,"checkPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,401,"new Point2D(0.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,402,"new Point2D(2.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,403,"new Point2D(1.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,404,"new Point2D(0.5, 0.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,406,"checkPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,407,"new Point2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,408,"new Point2D(2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,409,"new Point2D(1.0, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,410,"new Point2D(1.5, 2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,414,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,415,public void testXor() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,416,Point2D[][] vertices1 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,417,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,418,"new Point2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,419,"new Point2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,420,"new Point2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,421,"new Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,424,PolygonsSet set1 = buildSet(vertices1);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,425,Point2D[][] vertices2 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,426,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,427,"new Point2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,428,"new Point2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,429,"new Point2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,430,"new Point2D( 1.0,  3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,433,PolygonsSet set2 = buildSet(vertices2);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,434,"PolygonsSet set  = (PolygonsSet) Region.xor(set1.copySelf(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,435,set2.copySelf());
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,436,"checkVertices(set1.getVertices(), vertices1);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,437,"checkVertices(set2.getVertices(), vertices2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,438,"checkVertices(set.getVertices(), new Point2D[][] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,439,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,440,"new Point2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,441,"new Point2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,442,"new Point2D( 2.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,443,"new Point2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,444,"new Point2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,445,"new Point2D( 1.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,446,"new Point2D( 1.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,447,"new Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,449,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,450,"new Point2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,451,"new Point2D( 1.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,452,"new Point2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,453,"new Point2D( 2.0,  1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,456,"checkPoints(Region.Location.INSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,457,"new Point2D(0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,458,"new Point2D(2.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,459,"new Point2D(0.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,460,"new Point2D(1.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,461,"new Point2D(1.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,462,"new Point2D(2.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,463,"new Point2D(2.5, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,465,"checkPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,466,"new Point2D(-0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,467,"new Point2D( 0.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,468,"new Point2D( 2.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,469,"new Point2D( 1.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,470,"new Point2D( 3.5, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,472,"checkPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,473,"new Point2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,474,"new Point2D(2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,475,"new Point2D(1.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,476,"new Point2D(2.0, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,477,"new Point2D(0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,478,"new Point2D(0.5, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,479,"new Point2D(2.0, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,480,"new Point2D(2.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,481,"new Point2D(3.0, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,485,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,486,public void testDifference() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,487,Point2D[][] vertices1 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,488,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,489,"new Point2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,490,"new Point2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,491,"new Point2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,492,"new Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,495,PolygonsSet set1 = buildSet(vertices1);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,496,Point2D[][] vertices2 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,497,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,498,"new Point2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,499,"new Point2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,500,"new Point2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,501,"new Point2D( 1.0,  3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,504,PolygonsSet set2 = buildSet(vertices2);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,505,"PolygonsSet set  = (PolygonsSet) Region.difference(set1.copySelf(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,506,set2.copySelf());
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,507,"checkVertices(set1.getVertices(), vertices1);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,508,"checkVertices(set2.getVertices(), vertices2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,509,"checkVertices(set.getVertices(), new Point2D[][] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,510,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,511,"new Point2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,512,"new Point2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,513,"new Point2D( 2.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,514,"new Point2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,515,"new Point2D( 1.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,516,"new Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,519,"checkPoints(Region.Location.INSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,520,"new Point2D(0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,521,"new Point2D(0.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,522,"new Point2D(1.5, 0.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,524,"checkPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,525,"new Point2D( 2.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,526,"new Point2D(-0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,527,"new Point2D( 0.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,528,"new Point2D( 2.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,529,"new Point2D( 1.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,530,"new Point2D( 3.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,531,"new Point2D( 1.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,532,"new Point2D( 2.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,533,"new Point2D( 2.0, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,534,"new Point2D( 2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,535,"new Point2D( 2.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,536,"new Point2D( 2.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,537,"new Point2D( 3.0, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,539,"checkPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,540,"new Point2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,541,"new Point2D(1.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,542,"new Point2D(0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,543,"new Point2D(0.5, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,544,"new Point2D(2.0, 0.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,548,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,549,public void testEmptyDifference() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,550,Point2D[][] vertices1 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,551,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,552,"new Point2D( 0.5, 3.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,553,"new Point2D( 0.5, 4.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,554,"new Point2D(-0.5, 4.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,555,"new Point2D(-0.5, 3.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,558,PolygonsSet set1 = buildSet(vertices1);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,559,Point2D[][] vertices2 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,560,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,561,"new Point2D( 1.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,562,"new Point2D( 1.0, 8.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,563,"new Point2D(-1.0, 8.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,564,"new Point2D(-1.0, 2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,567,PolygonsSet set2 = buildSet(vertices2);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,568,"Assert.assertTrue(Region.difference(set1.copySelf(), set2.copySelf()).isEmpty());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,571,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,572,public void testChoppedHexagon() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,573,double pi6   = FastMath.PI / 6.0;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,574,double sqrt3 = FastMath.sqrt(3.0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,575,SubHyperplane[] hyp = {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,576,"new SubHyperplane(new Line(new Point2D(   0.0, 1.0),  5 * pi6)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,577,"new SubHyperplane(new Line(new Point2D(-sqrt3, 1.0),  7 * pi6)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,578,"new SubHyperplane(new Line(new Point2D(-sqrt3, 1.0),  9 * pi6)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,579,"new SubHyperplane(new Line(new Point2D(-sqrt3, 0.0), 11 * pi6)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,580,"new SubHyperplane(new Line(new Point2D(   0.0, 0.0), 13 * pi6)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,581,"new SubHyperplane(new Line(new Point2D(   0.0, 1.0),  3 * pi6)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,582,"new SubHyperplane(new Line(new Point2D(-5.0 * sqrt3 / 6.0, 0.0), 9 * pi6))"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,584,hyp[1] =                              hyp[0].getHyperplane().split(hyp[1]).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,585,hyp[2] =                              hyp[1].getHyperplane().split(hyp[2]).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,586,hyp[3] =                              hyp[2].getHyperplane().split(hyp[3]).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,587,hyp[4] = hyp[0].getHyperplane().split(hyp[3].getHyperplane().split(hyp[4]).getMinus()).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,588,hyp[5] = hyp[0].getHyperplane().split(hyp[4].getHyperplane().split(hyp[5]).getMinus()).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,589,hyp[6] = hyp[1].getHyperplane().split(hyp[3].getHyperplane().split(hyp[6]).getMinus()).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,590,BSPTree tree = new BSPTree(Boolean.TRUE);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,591,for (int i = hyp.length - 1; i >= 0; --i) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,592,"tree = new BSPTree(hyp[i], new BSPTree(Boolean.FALSE), tree, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,594,PolygonsSet set = new PolygonsSet(tree);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,595,SubHyperplane splitter =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,596,"new SubHyperplane(new Line(new Point2D(-2.0 * sqrt3 / 3.0, 0.0), 9 * pi6));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,597,PolygonsSet slice =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,598,"new PolygonsSet(new BSPTree(splitter,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,599,"set.getTree(false).split(splitter).getPlus(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,600,"new BSPTree(Boolean.FALSE), null));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,601,"Assert.assertEquals(Region.Location.OUTSIDE,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,602,"slice.checkPoint(new Point2D(0.1, 0.5)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,603,"Assert.assertEquals(11.0 / 3.0, slice.getBoundarySize(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,607,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,608,public void testConcentric() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,609,double h = FastMath.sqrt(3.0) / 2.0;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,610,Point2D[][] vertices1 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,611,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,612,"new Point2D( 0.00, 0.1 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,613,"new Point2D( 0.05, 0.1 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,614,"new Point2D( 0.10, 0.2 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,615,"new Point2D( 0.05, 0.3 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,616,"new Point2D(-0.05, 0.3 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,617,"new Point2D(-0.10, 0.2 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,618,"new Point2D(-0.05, 0.1 * h)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,621,PolygonsSet set1 = buildSet(vertices1);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,622,Point2D[][] vertices2 = new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,623,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,624,"new Point2D( 0.00, 0.0 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,625,"new Point2D( 0.10, 0.0 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,626,"new Point2D( 0.20, 0.2 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,627,"new Point2D( 0.10, 0.4 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,628,"new Point2D(-0.10, 0.4 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,629,"new Point2D(-0.20, 0.2 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,630,"new Point2D(-0.10, 0.0 * h)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,633,PolygonsSet set2 = buildSet(vertices2);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,634,Assert.assertTrue(set2.contains(set1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,637,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,638,public void testBug20040520() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,639,"BSPTree a0 = new BSPTree(buildSegment(new Point2D(0.85, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,640,"new Point2D(0.90, -0.10)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,641,"new BSPTree(Boolean.FALSE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,642,"new BSPTree(Boolean.TRUE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,643,null);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,644,"BSPTree a1 = new BSPTree(buildSegment(new Point2D(0.85, -0.10),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,645,"new Point2D(0.90, -0.10)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,646,"new BSPTree(Boolean.FALSE), a0, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,647,"BSPTree a2 = new BSPTree(buildSegment(new Point2D(0.90, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,648,"new Point2D(0.85, -0.05)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,649,"new BSPTree(Boolean.FALSE), a1, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,650,"BSPTree a3 = new BSPTree(buildSegment(new Point2D(0.82, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,651,"new Point2D(0.82, -0.08)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,652,"new BSPTree(Boolean.FALSE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,653,"new BSPTree(Boolean.TRUE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,654,null);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,655,"BSPTree a4 = new BSPTree(buildHalfLine(new Point2D(0.85, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,656,"new Point2D(0.80, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,657,"false),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,658,"new BSPTree(Boolean.FALSE), a3, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,659,"BSPTree a5 = new BSPTree(buildSegment(new Point2D(0.82, -0.08),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,660,"new Point2D(0.82, -0.18)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,661,"new BSPTree(Boolean.FALSE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,662,"new BSPTree(Boolean.TRUE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,663,null);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,664,"BSPTree a6 = new BSPTree(buildHalfLine(new Point2D(0.82, -0.18),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,665,"new Point2D(0.85, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,666,"true),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,667,"new BSPTree(Boolean.FALSE), a5, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,668,"BSPTree a7 = new BSPTree(buildHalfLine(new Point2D(0.85, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,669,"new Point2D(0.82, -0.08),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,670,"false),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,671,"a4, a6, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,672,"BSPTree a8 = new BSPTree(buildLine(new Point2D(0.85, -0.25),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,673,"new Point2D(0.85,  0.05)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,674,"a2, a7, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,675,"BSPTree a9 = new BSPTree(buildLine(new Point2D(0.90,  0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,676,"new Point2D(0.90, -0.50)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,677,"a8, new BSPTree(Boolean.FALSE), null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,679,"BSPTree b0 = new BSPTree(buildSegment(new Point2D(0.92, -0.12),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,680,"new Point2D(0.92, -0.08)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,681,"new BSPTree(Boolean.FALSE), new BSPTree(Boolean.TRUE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,682,null);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,683,"BSPTree b1 = new BSPTree(buildHalfLine(new Point2D(0.92, -0.08),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,684,"new Point2D(0.90, -0.10),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,685,"true),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,686,"new BSPTree(Boolean.FALSE), b0, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,687,"BSPTree b2 = new BSPTree(buildSegment(new Point2D(0.92, -0.18),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,688,"new Point2D(0.92, -0.12)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,689,"new BSPTree(Boolean.FALSE), new BSPTree(Boolean.TRUE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,690,null);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,691,"BSPTree b3 = new BSPTree(buildSegment(new Point2D(0.85, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,692,"new Point2D(0.90, -0.20)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,693,"new BSPTree(Boolean.FALSE), b2, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,694,"BSPTree b4 = new BSPTree(buildSegment(new Point2D(0.95, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,695,"new Point2D(0.85, -0.05)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,696,"b1, b3, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,697,"BSPTree b5 = new BSPTree(buildHalfLine(new Point2D(0.85, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,698,"new Point2D(0.85, -0.25),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,699,"true),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,700,"new BSPTree(Boolean.FALSE), b4, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,701,"BSPTree b6 = new BSPTree(buildLine(new Point2D(0.0, -1.10),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,702,"new Point2D(1.0, -0.10)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,703,"new BSPTree(Boolean.FALSE), b5, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,705,"PolygonsSet c = (PolygonsSet) Region.union(new PolygonsSet(a9),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,706,new PolygonsSet(b6));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,708,"checkPoints(Region.Location.INSIDE, c, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,709,"new Point2D(0.83, -0.06),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,710,"new Point2D(0.83, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,711,"new Point2D(0.88, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,712,"new Point2D(0.88, -0.09),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,713,"new Point2D(0.88, -0.07),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,714,"new Point2D(0.91, -0.18),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,715,"new Point2D(0.91, -0.10)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,718,"checkPoints(Region.Location.OUTSIDE, c, new Point2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,719,"new Point2D(0.80, -0.10),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,720,"new Point2D(0.83, -0.50),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,721,"new Point2D(0.83, -0.20),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,722,"new Point2D(0.83, -0.02),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,723,"new Point2D(0.87, -0.50),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,724,"new Point2D(0.87, -0.20),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,725,"new Point2D(0.87, -0.02),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,726,"new Point2D(0.91, -0.20),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,727,"new Point2D(0.91, -0.08),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,728,"new Point2D(0.93, -0.15)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,731,"checkVertices(c.getVertices(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,732,new Point2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,733,new Point2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,734,"new Point2D(0.85, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,735,"new Point2D(0.90, -0.20),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,736,"new Point2D(0.92, -0.18),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,737,"new Point2D(0.92, -0.08),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,738,"new Point2D(0.90, -0.10),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,739,"new Point2D(0.90, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,740,"new Point2D(0.82, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,741,"new Point2D(0.82, -0.18),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,747,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,748,public void testBug20041003() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,750,Line[] l = {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,751,"new Line(new Point2D(0.0, 0.625000007541172),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,752,"new Point2D(1.0, 0.625000007541172)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,753,"new Line(new Point2D(-0.19204433621902645, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,754,"new Point2D(-0.19204433621902645, 1.0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,755,"new Line(new Point2D(-0.40303524786887,  0.4248364535319128),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,756,"new Point2D(-1.12851149797877, -0.2634107480798909)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,757,"new Line(new Point2D(0.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,758,"new Point2D(1.0, 2.0))"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,761,BSPTree node1 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,762,"new BSPTree(new SubHyperplane(l[0],"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,763,"new IntervalsSet(intersectionAbscissa(l[0], l[1]),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,764,"intersectionAbscissa(l[0], l[2]))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,765,"new BSPTree(Boolean.TRUE), new BSPTree(Boolean.FALSE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,766,null);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,767,BSPTree node2 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,768,"new BSPTree(new SubHyperplane(l[1],"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,769,"new IntervalsSet(intersectionAbscissa(l[1], l[2]),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,770,"intersectionAbscissa(l[1], l[3]))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,771,"node1, new BSPTree(Boolean.FALSE), null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,772,BSPTree node3 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,773,"new BSPTree(new SubHyperplane(l[2],"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,774,"new IntervalsSet(intersectionAbscissa(l[2], l[3]),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,775,"Double.POSITIVE_INFINITY)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,776,"node2, new BSPTree(Boolean.FALSE), null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,777,BSPTree node4 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,778,"new BSPTree(new SubHyperplane(l[3]),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,779,"node3, new BSPTree(Boolean.FALSE), null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,781,PolygonsSet set = new PolygonsSet(node4);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,782,"Assert.assertEquals(0, set.getVertices().length);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,786,private PolygonsSet buildSet(Point2D[][] vertices) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,787,ArrayList<SubHyperplane> edges = new ArrayList<SubHyperplane>();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,788,for (int i = 0; i < vertices.length; ++i) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,789,int l = vertices[i].length;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,790,for (int j = 0; j < l; ++j) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,791,"edges.add(buildSegment(vertices[i][j], vertices[i][(j + 1) % l]));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,794,return new PolygonsSet(edges);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,797,"private SubHyperplane buildLine(Point2D start, Point2D end) {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,798,"return new SubHyperplane(new Line(start, end));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,801,"private double intersectionAbscissa(Line l0, Line l1) {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,802,Point2D p = (Point2D) l0.intersection(l1);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,803,return ((Point1D) l0.toSubSpace(p)).getAbscissa();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,806,"private SubHyperplane buildHalfLine(Point2D start, Point2D end,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,807,boolean startIsVirtual) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,808,"Line   line  = new Line(start, end);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,809,double lower = startIsVirtual
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,810,? Double.NEGATIVE_INFINITY
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,811,: ((Point1D) line.toSubSpace(start)).getAbscissa();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,812,double upper = startIsVirtual
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,813,? ((Point1D) line.toSubSpace(end)).getAbscissa()
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,814,: Double.POSITIVE_INFINITY;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,815,"return new SubHyperplane(line, new IntervalsSet(lower, upper));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,818,"private SubHyperplane buildSegment(Point2D start, Point2D end) {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,819,"Line   line  = new Line(start, end);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,820,double lower = ((Point1D) line.toSubSpace(start)).getAbscissa();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,821,double upper = ((Point1D) line.toSubSpace(end)).getAbscissa();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,822,"return new SubHyperplane(line, new IntervalsSet(lower, upper));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,825,"private void checkPoints(Region.Location expected, PolygonsSet set,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,826,Point2D[] points) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,827,for (int i = 0; i < points.length; ++i) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,828,"Assert.assertEquals(expected, set.checkPoint(points[i]));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,832,"private boolean checkInSegment(Point2D p,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,833,"Point2D p1, Point2D p2,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,834,double tolerance) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,835,"Line line = new Line(p1, p2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,836,if (line.getOffset(p) < tolerance) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,837,double x  = ((Point1D) line.toSubSpace(p)).getAbscissa();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,838,double x1 = ((Point1D) line.toSubSpace(p1)).getAbscissa();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,839,double x2 = ((Point1D) line.toSubSpace(p2)).getAbscissa();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,840,return (((x - x1) * (x - x2) <= 0.0)
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,841,|| (p1.distance(p) < tolerance)
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,842,|| (p2.distance(p) < tolerance));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,843,} else {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,844,return false;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,848,"private void checkVertices(Point2D[][] rebuiltVertices,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,849,Point2D[][] vertices) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,851,// each rebuilt vertex should be in a segment joining two original vertices
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,852,for (int i = 0; i < rebuiltVertices.length; ++i) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,853,for (int j = 0; j < rebuiltVertices[i].length; ++j) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,854,boolean inSegment = false;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,855,Point2D p = rebuiltVertices[i][j];
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,856,for (int k = 0; k < vertices.length; ++k) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,857,Point2D[] loop = vertices[k];
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,858,int length = loop.length;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,859,for (int l = 0; (! inSegment) && (l < length); ++l) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,860,"inSegment = checkInSegment(p, loop[l], loop[(l + 1) % length], 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,863,Assert.assertTrue(inSegment);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,867,// each original vertex should have a corresponding rebuilt vertex
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,868,for (int k = 0; k < vertices.length; ++k) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,869,for (int l = 0; l < vertices[k].length; ++l) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,870,double min = Double.POSITIVE_INFINITY;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,871,for (int i = 0; i < rebuiltVertices.length; ++i) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,872,for (int j = 0; j < rebuiltVertices[i].length; ++j) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,873,"min = FastMath.min(vertices[k][l].distance(rebuiltVertices[i][j]),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,874,min);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twoD/PolygonsSetTest.java,877,"Assert.assertEquals(0.0, min, 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,17,package org.apache.commons.math.geometry.partitioning.utilities;
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,19,import org.apache.commons.math.geometry.partitioning.utilities.AVLTree;
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,23,public class AVLTreeTest {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,25,@Test
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,26,public void testInsert() {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,27,// this array in this order allows to pass in all branches
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,28,// of the insertion algorithm
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,29,"int[] array = { 16, 13, 15, 14,  2,  0, 12,  9,  8,  5,"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,30,"11, 18, 19, 17,  4,  7,  1,  3,  6, 10 };"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,31,AVLTree<Integer> tree = buildTree(array);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,33,"Assert.assertEquals(array.length, tree.size());"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,35,for (int i = 0; i < array.length; ++i) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,36,"Assert.assertEquals(array[i], value(tree.getNotSmaller(new Integer(array[i]))));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,39,checkOrder(tree);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,43,@Test
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,44,public void testDelete1() {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,45,int[][][] arrays = {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,46,"{ { 16, 13, 15, 14, 2, 0, 12, 9, 8, 5, 11, 18, 19, 17, 4, 7, 1, 3, 6, 10 },"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,47,"{ 11, 10, 9, 12, 16, 15, 13, 18, 5, 0, 3, 2, 14, 6, 19, 17, 8, 4, 7, 1 } },"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,48,"{ { 16, 13, 15, 14, 2, 0, 12, 9, 8, 5, 11, 18, 19, 17, 4, 7, 1, 3, 6, 10 },"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,49,"{ 0, 17, 14, 15, 16, 18,  6 } },"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,50,"{ { 6, 2, 7, 8, 1, 4, 3, 5 }, { 8 } },"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,51,"{ { 6, 2, 7, 8, 1, 4, 5 }, { 8 } },"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,52,"{ { 3, 7, 2, 1, 5, 8, 4 }, { 1 } },"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,53,"{ { 3, 7, 2, 1, 5, 8, 6 }, { 1 } }"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,55,for (int i = 0; i < arrays.length; ++i) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,56,AVLTree<Integer> tree = buildTree(arrays[i][0]);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,57,Assert.assertTrue(! tree.delete(new Integer(-2000)));
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,58,for (int j = 0; j < arrays[i][1].length; ++j) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,59,Assert.assertTrue(tree.delete(tree.getNotSmaller(new Integer(arrays[i][1][j])).getElement()));
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,60,"Assert.assertEquals(arrays[i][0].length - j - 1, tree.size());"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,65,@Test
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,66,public void testNavigation() {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,67,"int[] array = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,68,AVLTree<Integer> tree = buildTree(array);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,70,AVLTree<Integer>.Node node = tree.getSmallest();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,71,"Assert.assertEquals(array[0], value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,72,for (int i = 0; i < array.length; ++i) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,73,"Assert.assertEquals(array[i], value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,74,node = node.getNext();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,76,Assert.assertNull(node);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,78,node = tree.getLargest();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,79,"Assert.assertEquals(array[array.length - 1], value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,80,for (int i = array.length - 1; i >= 0; --i) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,81,"Assert.assertEquals(array[i], value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,82,node = node.getPrevious();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,84,Assert.assertNull(node);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,86,checkOrder(tree);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,90,@Test
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,91,public void testSearch() {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,92,"int[] array = { 2, 4, 6, 8, 10, 12, 14 };"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,93,AVLTree<Integer> tree = buildTree(array);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,95,Assert.assertNull(tree.getNotLarger(new Integer(array[0] - 1)));
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,96,Assert.assertNull(tree.getNotSmaller(new Integer(array[array.length - 1] + 1)));
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,98,for (int i = 0; i < array.length; ++i) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,99,"Assert.assertEquals(array[i],"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,100,value(tree.getNotSmaller(new Integer(array[i] - 1))));
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,101,"Assert.assertEquals(array[i],"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,102,value(tree.getNotLarger(new Integer(array[i] + 1))));
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,105,checkOrder(tree);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,109,@Test
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,110,public void testRepetition() {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,111,"int[] array = { 1, 1, 3, 3, 4, 5, 6, 7, 7, 7, 7, 7 };"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,112,AVLTree<Integer> tree = buildTree(array);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,113,"Assert.assertEquals(array.length, tree.size());"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,115,AVLTree<Integer>.Node node = tree.getNotSmaller(new Integer(3));
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,116,"Assert.assertEquals(3, value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,117,"Assert.assertEquals(1, value(node.getPrevious()));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,118,"Assert.assertEquals(3, value(node.getNext()));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,119,"Assert.assertEquals(4, value(node.getNext().getNext()));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,121,node = tree.getNotLarger(new Integer(2));
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,122,"Assert.assertEquals(1, value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,123,"Assert.assertEquals(1, value(node.getPrevious()));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,124,"Assert.assertEquals(3, value(node.getNext()));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,125,Assert.assertNull(node.getPrevious().getPrevious());
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,127,AVLTree<Integer>.Node otherNode = tree.getNotSmaller(new Integer(1));
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,128,Assert.assertTrue(node != otherNode);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,129,"Assert.assertEquals(1, value(otherNode));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,130,Assert.assertNull(otherNode.getPrevious());
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,132,node = tree.getNotLarger(new Integer(10));
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,133,"Assert.assertEquals(7, value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,134,Assert.assertNull(node.getNext());
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,135,node = node.getPrevious();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,136,"Assert.assertEquals(7, value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,137,node = node.getPrevious();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,138,"Assert.assertEquals(7, value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,139,node = node.getPrevious();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,140,"Assert.assertEquals(7, value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,141,node = node.getPrevious();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,142,"Assert.assertEquals(7, value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,143,node = node.getPrevious();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,144,"Assert.assertEquals(6, value(node));"
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,146,checkOrder(tree);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,150,private AVLTree<Integer> buildTree(int[] array) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,151,AVLTree<Integer> tree = new AVLTree<Integer>();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,152,for (int i = 0; i < array.length; ++i) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,153,tree.insert(new Integer(array[i]));
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,154,tree.insert(null);
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,156,return tree;
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,159,private int value(AVLTree<Integer>.Node node) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,160,return ((Integer) node.getElement()).intValue();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,163,private void checkOrder(AVLTree<Integer> tree) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,164,AVLTree<Integer>.Node next = null;
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,165,for (AVLTree<Integer>.Node node = tree.getSmallest();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,166,node != null;
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,167,node = next) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,168,next = node.getNext();
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,169,if (next != null) {
True,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java,170,Assert.assertTrue(node.getElement().compareTo(next.getElement()) <= 0);

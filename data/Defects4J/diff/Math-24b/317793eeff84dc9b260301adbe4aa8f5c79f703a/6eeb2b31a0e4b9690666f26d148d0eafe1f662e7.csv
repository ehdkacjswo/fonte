is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,24,import org.apache.commons.math.optimization.RealConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,64,final RealConvergenceChecker checker = getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,96,// check convergence
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,97,final int iter = getIterations();
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,98,boolean converged = true;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,99,for (int i = 0; i < simplex.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,100,"converged &= checker.converged(iter, original[i], simplex[i]);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,102,if (converged) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,103,return;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,20,mport junit.framework.Test;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,21,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,22,mport junit.framework.TestSuite;
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,24,import org.apache.commons.math.optimization.OptimizationException;
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,28,import org.junit.Test;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,31,ublic class MultiDirectionalTest
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,32,xtends TestCase {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,34,ublic MultiDirectionalTest(String name) {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,30,public class MultiDirectionalTest {
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,32,@Test
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,55,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,50,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,58,ssertNull(ce.getCause());
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,53,Assert.assertNull(ce.getCause());
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,60,"ail(""wrong exception caught: "" + e.getMessage());"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,55,"Assert.fail(""wrong exception caught: "" + e.getMessage());"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,65,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,60,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,68,ssertNotNull(ce.getCause());
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,63,Assert.assertNotNull(ce.getCause());
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,70,"ail(""wrong exception caught: "" + e.getMessage());"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,65,"Assert.fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,69,@Test
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,96,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-10, 1.0e-30));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,92,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,103,"ssertEquals(xM,        optimum.getPoint()[0], 4.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,104,"ssertEquals(yP,        optimum.getPoint()[1], 3.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,105,"ssertEquals(valueXmYp, optimum.getValue(),    8.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,106,ssertTrue(optimizer.getEvaluations() > 120);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,107,ssertTrue(optimizer.getEvaluations() < 150);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,99,"Assert.assertEquals(xM,        optimum.getPoint()[0], 4.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,100,"Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,101,"Assert.assertEquals(valueXmYp, optimum.getValue(),    8.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,102,Assert.assertTrue(optimizer.getEvaluations() > 120);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,103,Assert.assertTrue(optimizer.getEvaluations() < 150);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,110,"ssertEquals(xP,        optimum.getPoint()[0], 2.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,111,"ssertEquals(yM,        optimum.getPoint()[1], 3.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,112,"ssertEquals(valueXpYm, optimum.getValue(),    2.0e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,113,ssertTrue(optimizer.getEvaluations() > 120);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,114,ssertTrue(optimizer.getEvaluations() < 150);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,106,"Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,107,"Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,108,"Assert.assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,109,Assert.assertTrue(optimizer.getEvaluations() > 120);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,110,Assert.assertTrue(optimizer.getEvaluations() < 150);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,118,"ssertEquals(xM,        optimum.getPoint()[0], 7.0e-7);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,119,"ssertEquals(yM,        optimum.getPoint()[1], 3.0e-7);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,120,"ssertEquals(valueXmYm, optimum.getValue(),    2.0e-14);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,121,ssertTrue(optimizer.getEvaluations() > 120);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,122,ssertTrue(optimizer.getEvaluations() < 150);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,114,"Assert.assertEquals(xM,        optimum.getPoint()[0], 7.0e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,115,"Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,116,"Assert.assertEquals(valueXmYm, optimum.getValue(),    2.0e-14);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,117,Assert.assertTrue(optimizer.getEvaluations() > 120);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,118,Assert.assertTrue(optimizer.getEvaluations() < 150);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,120,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,125,"ssertEquals(xP,        optimum.getPoint()[0], 2.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,126,"ssertEquals(yP,        optimum.getPoint()[1], 3.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,127,"ssertEquals(valueXpYp, optimum.getValue(),    2.0e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,128,ssertTrue(optimizer.getEvaluations() > 120);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,129,ssertTrue(optimizer.getEvaluations() < 150);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,122,"Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,123,"Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,124,"Assert.assertEquals(valueXpYp, optimum.getValue(),    2.0e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,125,Assert.assertTrue(optimizer.getEvaluations() > 180);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,126,Assert.assertTrue(optimizer.getEvaluations() < 220);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,130,@Test
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,157,"ssertEquals(count, optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,158,ssertTrue(optimizer.getEvaluations() > 70);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,159,ssertTrue(optimizer.getEvaluations() < 100);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,160,ssertTrue(optimum.getValue() > 1.0e-2);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,155,"Assert.assertEquals(count, optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,156,Assert.assertTrue(optimizer.getEvaluations() > 50);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,157,Assert.assertTrue(optimizer.getEvaluations() < 100);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,158,Assert.assertTrue(optimum.getValue() > 1.0e-2);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,162,@Test
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,186,"ssertEquals(count, optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,187,ssertTrue(optimizer.getEvaluations() > 800);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,188,ssertTrue(optimizer.getEvaluations() < 900);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,189,ssertTrue(optimum.getValue() > 1.0e-2);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,185,"Assert.assertEquals(count, optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,186,Assert.assertTrue(optimizer.getEvaluations() > 800);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,187,Assert.assertTrue(optimizer.getEvaluations() < 900);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,188,Assert.assertTrue(optimum.getValue() > 1.0e-2);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,193,ublic static Test suite() {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,194,eturn new TestSuite(MultiDirectionalTest.class);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,192,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,193,public void testMath283()
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,194,"throws FunctionEvaluationException, OptimizationException {"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,195,// fails because MultiDirectional.iterateSimplex is looping forever
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,196,// the while(true) should be replaced with a convergence check
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,197,MultiDirectional multiDirectional = new MultiDirectional();
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,198,multiDirectional.setMaxIterations(100);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,199,multiDirectional.setMaxEvaluations(1000);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,201,"final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,203,"RealPointValuePair estimate = multiDirectional.optimize(function,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,204,"GoalType.MAXIMIZE, function.getMaximumPosition());"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,206,final double EPSILON = 1e-5;
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,208,final double expectedMaximum = function.getMaximum();
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,209,final double actualMaximum = estimate.getValue();
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,210,"Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,212,final double[] expectedPosition = function.getMaximumPosition();
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,213,final double[] actualPosition = estimate.getPoint();
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,214,"Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,215,"Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,219,private static class Gaussian2D implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,221,private final double[] maximumPosition;
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,223,private final double std;
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,225,"public Gaussian2D(double xOpt, double yOpt, double std) {"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,226,"maximumPosition = new double[] { xOpt, yOpt };"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,227,this.std = std;
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,230,public double getMaximum() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,231,return value(maximumPosition);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,234,public double[] getMaximumPosition() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,235,return maximumPosition.clone();
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,238,public double value(double[] point) {
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,239,"final double x = point[0], y = point[1];"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,240,final double twoS2 = 2.0 * std * std;
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,241,return 1.0 / (twoS2 * Math.PI) * Math.exp(-(x * x + y * y) / twoS2);

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,166,"** Sign bit: & for positive, -1 for negative. */"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,166,"/** Sign bit: 1 for positive, -1 for negative. */"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,272,// make sure 0 has the right sign
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,273,if ((bits & 0x8000000000000000L) != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,274,sign = -1;
False,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2318,f (lessThan(getZero())) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2322,"int cmp0 = compare(this, getZero());"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2323,if (cmp0 == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2324,return sign < 0 ? -0.0 : +0.0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2325,} else if (cmp0 < 0) {
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,20,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,21,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1509,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1510,public void testIssue567() {
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1511,DfpField field = new DfpField(100);
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1512,"Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1513,"Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1514,"Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1515,"Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);"

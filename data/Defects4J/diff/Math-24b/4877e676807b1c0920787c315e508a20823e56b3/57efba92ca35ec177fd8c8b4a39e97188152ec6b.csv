is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,20,mport java.io.Serializable;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,23,import org.apache.commons.math.FieldElement;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,43,ublic class Complex implements Serializable  {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,43,public class Complex implements FieldElement<Complex>  {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,46,rivate static final long serialVersionUID = -6530173849413811929L;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,46,private static final long serialVersionUID = -6195664516687396620L;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,957,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,958,public ComplexField getField() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,959,return ComplexField.getInstance();
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,18,package org.apache.commons.math.complex;
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,20,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,23,* Representation of the complex numbers field.
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,24,* <p>
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,25,* This class is a singleton.
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,26,* </p>
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,27,* @see Complex
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,28,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,29,* @since 2.0
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,31,public class ComplexField implements Field<Complex>  {
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,33,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,34,private static final long serialVersionUID = -6130362688700788798L;
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,36,/** Private constructor for the singleton.
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,38,private ComplexField() {
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,41,/** Get the unique instance.
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,42,* @return the unique instance
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,44,public static ComplexField getInstance() {
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,45,return LazyHolder.INSTANCE;
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,48,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,49,public Complex getOne() {
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,50,return Complex.ONE;
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,53,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,54,public Complex getZero() {
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,55,return Complex.ZERO;
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,58,/** Holder for the instance.
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,59,* <p>We use here the Initialization On Demand Holder Idiom.</p>
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,61,private static class LazyHolder {
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,62,/** Cached field instance. */
True,src/java/org/apache/commons/math/complex/ComplexField.java,src/java/org/apache/commons/math/complex/ComplexField.java,63,private static final ComplexField INSTANCE = new ComplexField();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,22,import org.apache.commons.math.FieldElement;
False,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,32,ublic class BigFraction extends Number implements Comparable<BigFraction> {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,33,"public class BigFraction extends Number implements FieldElement<BigFraction>, Comparable<BigFraction> {"
False,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,77,rivate static final long serialVersionUID = -130662482360701382L;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,78,private static final long serialVersionUID = -5630213147331578515L;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1124,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1125,public BigFractionField getField() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1126,return BigFractionField.getInstance();
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,18,package org.apache.commons.math.fraction;
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,20,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,23,* Representation of the fractional numbers  without any overflow field.
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,24,* <p>
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,25,* This class is a singleton.
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,26,* </p>
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,27,* @see Fraction
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,28,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,29,* @since 2.0
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,31,public class BigFractionField implements Field<BigFraction>  {
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,33,/** Serializable version identifier */
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,34,private static final long serialVersionUID = -1699294557189741703L;
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,36,/** Private constructor for the singleton.
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,38,private BigFractionField() {
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,41,/** Get the unique instance.
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,42,* @return the unique instance
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,44,public static BigFractionField getInstance() {
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,45,return LazyHolder.INSTANCE;
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,48,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,49,public BigFraction getOne() {
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,50,return BigFraction.ONE;
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,53,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,54,public BigFraction getZero() {
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,55,return BigFraction.ZERO;
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,58,/** Holder for the instance.
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,59,* <p>We use here the Initialization On Demand Holder Idiom.</p>
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,61,private static class LazyHolder {
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,62,/** Cached field instance. */
True,src/java/org/apache/commons/math/fraction/BigFractionField.java,src/java/org/apache/commons/math/fraction/BigFractionField.java,63,private static final BigFractionField INSTANCE = new BigFractionField();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,21,import org.apache.commons.math.FieldElement;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,30,ublic class Fraction extends Number implements Comparable<Fraction> {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,31,"public class Fraction extends Number implements FieldElement<Fraction>, Comparable<Fraction> {"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,75,rivate static final long serialVersionUID = 3071409609509774764L;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,76,private static final long serialVersionUID = 3698073679419233275L;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,653,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,654,public FractionField getField() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,655,return FractionField.getInstance();
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,18,package org.apache.commons.math.fraction;
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,20,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,23,* Representation of the fractional numbers field.
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,24,* <p>
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,25,* This class is a singleton.
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,26,* </p>
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,27,* @see Fraction
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,28,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,29,* @since 2.0
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,31,public class FractionField implements Field<Fraction>  {
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,33,/** Serializable version identifier */
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,34,private static final long serialVersionUID = -1257768487499119313L;
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,36,/** Private constructor for the singleton.
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,38,private FractionField() {
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,41,/** Get the unique instance.
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,42,* @return the unique instance
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,44,public static FractionField getInstance() {
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,45,return LazyHolder.INSTANCE;
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,48,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,49,public Fraction getOne() {
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,50,return Fraction.ONE;
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,53,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,54,public Fraction getZero() {
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,55,return Fraction.ZERO;
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,58,/** Holder for the instance.
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,59,* <p>We use here the Initialization On Demand Holder Idiom.</p>
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,61,private static class LazyHolder {
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,62,/** Cached field instance. */
True,src/java/org/apache/commons/math/fraction/FractionField.java,src/java/org/apache/commons/math/fraction/FractionField.java,63,private static final FractionField INSTANCE = new FractionField();
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,17,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,20,import java.math.BigDecimal;
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,21,import java.math.BigInteger;
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,22,import java.math.MathContext;
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,24,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,25,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,28,* Arbitrary precision decimal number.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,29,* <p>
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,30,* This class is a simple wrapper around the standard <code>BigDecimal</code>
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,31,* in order to implement the {@link FieldElement} interface.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,32,* </p>
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,33,* @since 2.0
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,34,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,36,"public class BigReal implements FieldElement<BigReal>, Comparable<BigReal> {"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,38,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,39,private static final long serialVersionUID = 7887631840434052850L;
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,41,/** A big real representing 0. */
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,42,public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,44,/** A big real representing 1. */
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,45,public static final BigReal ONE = new BigReal(BigDecimal.ONE);
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,47,/** Underlying BigDecimal. */
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,48,private final BigDecimal d;
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,50,/** Build an instance from a BigDecimal.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,51,* @param val value of the instance
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,53,public BigReal(BigDecimal val) {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,54,d =  val;
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,57,/** Build an instance from a BigInteger.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,58,* @param val value of the instance
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,60,public BigReal(BigInteger val) {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,61,d = new BigDecimal(val);
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,64,/** Build an instance from an unscaled BigInteger.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,65,* @param unscaledVal unscaled value
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,66,* @param scale scale to use
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,68,"public BigReal(BigInteger unscaledVal, int scale) {"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,69,"d = new BigDecimal(unscaledVal, scale);"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,72,/** Build an instance from an unscaled BigInteger.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,73,* @param unscaledVal unscaled value
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,74,* @param scale scale to use
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,75,* @param mc to used
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,77,"public BigReal(BigInteger unscaledVal, int scale, MathContext mc) {"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,78,"d = new BigDecimal(unscaledVal, scale, mc);"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,81,/** Build an instance from a BigInteger.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,82,* @param val value of the instance
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,83,* @param mc context to use
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,85,"public BigReal(BigInteger val, MathContext mc) {"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,86,"d = new BigDecimal(val, mc);"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,89,/** Build an instance from a characters representation.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,90,* @param in character representation of the value
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,92,public BigReal(char[] in) {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,93,d = new BigDecimal(in);
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,96,/** Build an instance from a characters representation.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,97,* @param in character representation of the value
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,98,* @param offset offset of the first character to analyze
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,99,* @param len length of the array slice to analyze
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,101,"public BigReal(char[] in, int offset, int len) {"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,102,"d = new BigDecimal(in, offset, len);"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,105,/** Build an instance from a characters representation.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,106,* @param in character representation of the value
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,107,* @param offset offset of the first character to analyze
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,108,* @param len length of the array slice to analyze
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,109,* @param mc context to use
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,111,"public BigReal(char[] in, int offset, int len, MathContext mc) {"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,112,"d = new BigDecimal(in, offset, len, mc);"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,115,/** Build an instance from a characters representation.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,116,* @param in character representation of the value
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,117,* @param mc context to use
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,119,"public BigReal(char[] in, MathContext mc) {"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,120,"d = new BigDecimal(in, mc);"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,123,/** Build an instance from a double.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,124,* @param val value of the instance
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,126,public BigReal(double val) {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,127,d = new BigDecimal(val);
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,130,/** Build an instance from a double.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,131,* @param val value of the instance
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,132,* @param mc context to use
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,134,"public BigReal(double val, MathContext mc) {"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,135,"d = new BigDecimal(val, mc);"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,138,/** Build an instance from an int.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,139,* @param val value of the instance
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,141,public BigReal(int val) {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,142,d = new BigDecimal(val);
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,145,/** Build an instance from an int.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,146,* @param val value of the instance
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,147,* @param mc context to use
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,149,"public BigReal(int val, MathContext mc) {"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,150,"d = new BigDecimal(val, mc);"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,153,/** Build an instance from a long.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,154,* @param val value of the instance
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,156,public BigReal(long val) {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,157,d = new BigDecimal(val);
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,160,/** Build an instance from a long.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,161,* @param val value of the instance
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,162,* @param mc context to use
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,164,"public BigReal(long val, MathContext mc) {"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,165,"d = new BigDecimal(val, mc);"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,168,/** Build an instance from a String representation.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,169,* @param val character representation of the value
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,171,public BigReal(String val) {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,172,d = new BigDecimal(val);
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,175,/** Build an instance from a String representation.
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,176,* @param val character representation of the value
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,177,* @param mc context to use
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,179,"public BigReal(String val, MathContext mc)  {"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,180,"d = new BigDecimal(val, mc);"
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,183,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,184,public BigReal add(BigReal a) {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,185,return new BigReal(d.add(a.d));
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,188,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,189,public BigReal subtract(BigReal a) {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,190,return new BigReal(d.subtract(a.d));
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,193,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,194,public BigReal divide(BigReal a) throws ArithmeticException {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,195,return new BigReal(d.divide(a.d));
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,198,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,199,public BigReal multiply(BigReal a) {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,200,return new BigReal(d.multiply(a.d));
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,203,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,204,public int compareTo(BigReal a) {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,205,return d.compareTo(a.d);
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,208,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,209,public Field<BigReal> getField() {
True,src/java/org/apache/commons/math/util/BigReal.java,src/java/org/apache/commons/math/util/BigReal.java,210,return BigRealField.getInstance();
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,18,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,20,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,23,* Representation of real numbers with arbitrary precision field.
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,24,* <p>
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,25,* This class is a singleton.
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,26,* </p>
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,27,* @see BigReal
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,28,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,29,* @since 2.0
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,31,public class BigRealField implements Field<BigReal>  {
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,33,/** Serializable version identifier */
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,34,private static final long serialVersionUID = 4756431066541037559L;
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,36,/** Private constructor for the singleton.
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,38,private BigRealField() {
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,41,/** Get the unique instance.
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,42,* @return the unique instance
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,44,public static BigRealField getInstance() {
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,45,return LazyHolder.INSTANCE;
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,48,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,49,public BigReal getOne() {
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,50,return BigReal.ONE;
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,53,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,54,public BigReal getZero() {
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,55,return BigReal.ZERO;
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,58,/** Holder for the instance.
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,59,* <p>We use here the Initialization On Demand Holder Idiom.</p>
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,61,private static class LazyHolder {
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,62,/** Cached field instance. */
True,src/java/org/apache/commons/math/util/BigRealField.java,src/java/org/apache/commons/math/util/BigRealField.java,63,private static final BigRealField INSTANCE = new BigRealField();

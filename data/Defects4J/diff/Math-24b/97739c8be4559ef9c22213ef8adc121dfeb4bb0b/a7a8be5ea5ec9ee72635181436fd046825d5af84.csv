is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,62,/ tolerances
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,63,rotected double entryTolerance = 10E-16;
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,64,rotected double normTolerance = 10E-14;
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,514,Test
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,515,ublic void testMapFunctions() {
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,516,rrayRealVector v1 = new ArrayRealVector(vec1);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,518,/octave =  v1 .+ 2.0
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,519,ealVector v_mapAdd = v1.mapAdd(2.0d);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,520,"ouble[] result_mapAdd = {3d, 4d, 5d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,521,"ssertClose(""compare vectors"" ,result_mapAdd,v_mapAdd.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,523,/octave =  v1 .+ 2.0
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,524,ealVector v_mapAddToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,525,_mapAddToSelf.mapAddToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,526,"ouble[] result_mapAddToSelf = {3d, 4d, 5d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,527,"ssertClose(""compare vectors"" ,result_mapAddToSelf,v_mapAddToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,529,/octave =  v1 .- 2.0
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,530,ealVector v_mapSubtract = v1.mapSubtract(2.0d);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,531,"ouble[] result_mapSubtract = {-1d, 0d, 1d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,532,"ssertClose(""compare vectors"" ,result_mapSubtract,v_mapSubtract.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,534,/octave =  v1 .- 2.0
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,535,ealVector v_mapSubtractToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,536,_mapSubtractToSelf.mapSubtractToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,537,"ouble[] result_mapSubtractToSelf = {-1d, 0d, 1d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,538,"ssertClose(""compare vectors"" ,result_mapSubtractToSelf,v_mapSubtractToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,540,/octave =  v1 .* 2.0
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,541,ealVector v_mapMultiply = v1.mapMultiply(2.0d);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,542,"ouble[] result_mapMultiply = {2d, 4d, 6d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,543,"ssertClose(""compare vectors"" ,result_mapMultiply,v_mapMultiply.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,545,/octave =  v1 .* 2.0
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,546,ealVector v_mapMultiplyToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,547,_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,548,"ouble[] result_mapMultiplyToSelf = {2d, 4d, 6d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,549,"ssertClose(""compare vectors"" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,551,/octave =  v1 ./ 2.0
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,552,ealVector v_mapDivide = v1.mapDivide(2.0d);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,553,"ouble[] result_mapDivide = {.5d, 1d, 1.5d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,554,"ssertClose(""compare vectors"" ,result_mapDivide,v_mapDivide.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,556,/octave =  v1 ./ 2.0
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,557,ealVector v_mapDivideToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,558,_mapDivideToSelf.mapDivideToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,559,"ouble[] result_mapDivideToSelf = {.5d, 1d, 1.5d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,560,"ssertClose(""compare vectors"" ,result_mapDivideToSelf,v_mapDivideToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,562,/octave =  v1 .^ 2.0
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,563,ealVector v_mapPow = v1.map(new Power(2));
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,564,"ouble[] result_mapPow = {1d, 4d, 9d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,565,"ssertClose(""compare vectors"" ,result_mapPow,v_mapPow.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,567,/octave =  v1 .^ 2.0
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,568,ealVector v_mapPowToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,569,_mapPowToSelf.mapToSelf(new Power(2));
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,570,"ouble[] result_mapPowToSelf = {1d, 4d, 9d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,571,"ssertClose(""compare vectors"" ,result_mapPowToSelf,v_mapPowToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,573,/octave =  exp(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,574,ealVector v_mapExp = v1.map(new Exp());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,575,"ouble[] result_mapExp = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,576,"ssertClose(""compare vectors"" ,result_mapExp,v_mapExp.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,578,/octave =  exp(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,579,ealVector v_mapExpToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,580,_mapExpToSelf.mapToSelf(new Exp());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,581,"ouble[] result_mapExpToSelf = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,582,"ssertClose(""compare vectors"" ,result_mapExpToSelf,v_mapExpToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,585,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,586,ealVector v_mapExpm1 = v1.map(new Expm1());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,587,"ouble[] result_mapExpm1 = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,588,"ssertClose(""compare vectors"" ,result_mapExpm1,v_mapExpm1.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,590,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,591,ealVector v_mapExpm1ToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,592,_mapExpm1ToSelf.mapToSelf(new Expm1());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,593,"ouble[] result_mapExpm1ToSelf = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,594,"ssertClose(""compare vectors"" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,596,/octave =  log(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,597,ealVector v_mapLog = v1.map(new Log());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,598,"ouble[] result_mapLog = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,599,"ssertClose(""compare vectors"" ,result_mapLog,v_mapLog.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,601,/octave =  log(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,602,ealVector v_mapLogToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,603,_mapLogToSelf.mapToSelf(new Log());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,604,"ouble[] result_mapLogToSelf = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,605,"ssertClose(""compare vectors"" ,result_mapLogToSelf,v_mapLogToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,607,/octave =  log10(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,608,ealVector v_mapLog10 = v1.map(new Log10());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,609,"ouble[] result_mapLog10 = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,610,"ssertClose(""compare vectors"" ,result_mapLog10,v_mapLog10.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,612,/octave =  log(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,613,ealVector v_mapLog10ToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,614,_mapLog10ToSelf.mapToSelf(new Log10());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,615,"ouble[] result_mapLog10ToSelf = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,616,"ssertClose(""compare vectors"" ,result_mapLog10ToSelf,v_mapLog10ToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,618,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,619,ealVector v_mapLog1p = v1.map(new Log1p());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,620,"ouble[] result_mapLog1p = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,621,"ssertClose(""compare vectors"" ,result_mapLog1p,v_mapLog1p.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,623,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,624,ealVector v_mapLog1pToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,625,_mapLog1pToSelf.mapToSelf(new Log1p());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,626,"ouble[] result_mapLog1pToSelf = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,627,"ssertClose(""compare vectors"" ,result_mapLog1pToSelf,v_mapLog1pToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,629,/octave =  cosh(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,630,ealVector v_mapCosh = v1.map(new Cosh());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,631,"ouble[] result_mapCosh = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,632,"ssertClose(""compare vectors"" ,result_mapCosh,v_mapCosh.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,634,/octave =  cosh(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,635,ealVector v_mapCoshToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,636,_mapCoshToSelf.mapToSelf(new Cosh());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,637,"ouble[] result_mapCoshToSelf = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,638,"ssertClose(""compare vectors"" ,result_mapCoshToSelf,v_mapCoshToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,640,/octave =  sinh(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,641,ealVector v_mapSinh = v1.map(new Sinh());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,642,"ouble[] result_mapSinh = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,643,"ssertClose(""compare vectors"" ,result_mapSinh,v_mapSinh.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,645,/octave =  sinh(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,646,ealVector v_mapSinhToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,647,_mapSinhToSelf.mapToSelf(new Sinh());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,648,"ouble[] result_mapSinhToSelf = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,649,"ssertClose(""compare vectors"" ,result_mapSinhToSelf,v_mapSinhToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,651,/octave =  tanh(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,652,ealVector v_mapTanh = v1.map(new Tanh());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,653,"ouble[] result_mapTanh = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,654,"ssertClose(""compare vectors"" ,result_mapTanh,v_mapTanh.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,656,/octave =  tanh(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,657,ealVector v_mapTanhToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,658,_mapTanhToSelf.mapToSelf(new Tanh());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,659,"ouble[] result_mapTanhToSelf = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,660,"ssertClose(""compare vectors"" ,result_mapTanhToSelf,v_mapTanhToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,662,/octave =  cos(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,663,ealVector v_mapCos = v1.map(new Cos());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,664,"ouble[] result_mapCos = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,665,"ssertClose(""compare vectors"" ,result_mapCos,v_mapCos.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,667,/octave =  cos(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,668,ealVector v_mapCosToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,669,_mapCosToSelf.mapToSelf(new Cos());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,670,"ouble[] result_mapCosToSelf = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,671,"ssertClose(""compare vectors"" ,result_mapCosToSelf,v_mapCosToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,673,/octave =  sin(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,674,ealVector v_mapSin = v1.map(new Sin());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,675,"ouble[] result_mapSin = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,676,"ssertClose(""compare vectors"" ,result_mapSin,v_mapSin.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,678,/octave =  sin(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,679,ealVector v_mapSinToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,680,_mapSinToSelf.mapToSelf(new Sin());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,681,"ouble[] result_mapSinToSelf = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,682,"ssertClose(""compare vectors"" ,result_mapSinToSelf,v_mapSinToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,684,/octave =  tan(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,685,ealVector v_mapTan = v1.map(new Tan());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,686,"ouble[] result_mapTan = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,687,"ssertClose(""compare vectors"" ,result_mapTan,v_mapTan.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,689,/octave =  tan(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,690,ealVector v_mapTanToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,691,_mapTanToSelf.mapToSelf(new Tan());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,692,"ouble[] result_mapTanToSelf = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,693,"ssertClose(""compare vectors"" ,result_mapTanToSelf,v_mapTanToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,695,"ouble[] vat_a = {0d, 0.5d, 1.0d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,696,rrayRealVector vat = new ArrayRealVector(vat_a);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,698,/octave =  acos(vat)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,699,ealVector v_mapAcos = vat.map(new Acos());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,700,"ouble[] result_mapAcos = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,701,"ssertClose(""compare vectors"" ,result_mapAcos,v_mapAcos.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,703,/octave =  acos(vat)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,704,ealVector v_mapAcosToSelf = vat.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,705,_mapAcosToSelf.mapToSelf(new Acos());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,706,"ouble[] result_mapAcosToSelf = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,707,"ssertClose(""compare vectors"" ,result_mapAcosToSelf,v_mapAcosToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,709,/octave =  asin(vat)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,710,ealVector v_mapAsin = vat.map(new Asin());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,711,"ouble[] result_mapAsin = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,712,"ssertClose(""compare vectors"" ,result_mapAsin,v_mapAsin.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,714,/octave =  asin(vat)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,715,ealVector v_mapAsinToSelf = vat.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,716,_mapAsinToSelf.mapToSelf(new Asin());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,717,"ouble[] result_mapAsinToSelf = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,718,"ssertClose(""compare vectors"" ,result_mapAsinToSelf,v_mapAsinToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,720,/octave =  atan(vat)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,721,ealVector v_mapAtan = vat.map(new Atan());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,722,"ouble[] result_mapAtan = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,723,"ssertClose(""compare vectors"" ,result_mapAtan,v_mapAtan.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,725,/octave =  atan(vat)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,726,ealVector v_mapAtanToSelf = vat.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,727,_mapAtanToSelf.mapToSelf(new Atan());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,728,"ouble[] result_mapAtanToSelf = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,729,"ssertClose(""compare vectors"" ,result_mapAtanToSelf,v_mapAtanToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,731,/octave =  v1 .^-1
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,732,ealVector v_mapInv = v1.map(new Inverse());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,733,"ouble[] result_mapInv = {1d,0.5d,3.333333333333333e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,734,"ssertClose(""compare vectors"" ,result_mapInv,v_mapInv.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,736,/octave =  v1 .^-1
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,737,ealVector v_mapInvToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,738,_mapInvToSelf.mapToSelf(new Inverse());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,739,"ouble[] result_mapInvToSelf = {1d,0.5d,3.333333333333333e-01d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,740,"ssertClose(""compare vectors"" ,result_mapInvToSelf,v_mapInvToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,742,"ouble[] abs_a = {-1.0d, 0.0d, 1.0d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,743,rrayRealVector abs_v = new ArrayRealVector(abs_a);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,745,/octave =  abs(abs_v)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,746,ealVector v_mapAbs = abs_v.map(new Abs());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,747,"ouble[] result_mapAbs = {1d,0d,1d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,748,"ssertClose(""compare vectors"" ,result_mapAbs,v_mapAbs.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,750,/octave = abs(abs_v)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,751,ealVector v_mapAbsToSelf = abs_v.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,752,_mapAbsToSelf.mapToSelf(new Abs());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,753,"ouble[] result_mapAbsToSelf = {1d,0d,1d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,754,"ssertClose(""compare vectors"" ,result_mapAbsToSelf,v_mapAbsToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,756,/octave =   sqrt(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,757,ealVector v_mapSqrt = v1.map(new Sqrt());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,758,"ouble[] result_mapSqrt = {1d,1.414213562373095e+00d,1.732050807568877e+00d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,759,"ssertClose(""compare vectors"" ,result_mapSqrt,v_mapSqrt.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,761,/octave =  sqrt(v1)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,762,ealVector v_mapSqrtToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,763,_mapSqrtToSelf.mapToSelf(new Sqrt());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,764,"ouble[] result_mapSqrtToSelf = {1d,1.414213562373095e+00d,1.732050807568877e+00d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,765,"ssertClose(""compare vectors"" ,result_mapSqrtToSelf,v_mapSqrtToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,767,"ouble[] cbrt_a = {-2.0d, 0.0d, 2.0d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,768,rrayRealVector cbrt_v = new ArrayRealVector(cbrt_a);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,770,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,771,ealVector v_mapCbrt = cbrt_v.map(new Cbrt());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,772,"ouble[] result_mapCbrt = {-1.2599210498948732d,0d,1.2599210498948732d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,773,"ssertClose(""compare vectors"" ,result_mapCbrt,v_mapCbrt.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,775,/octave = ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,776,ealVector v_mapCbrtToSelf = cbrt_v.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,777,_mapCbrtToSelf.mapToSelf(new Cbrt());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,778,"ouble[] result_mapCbrtToSelf =  {-1.2599210498948732d,0d,1.2599210498948732d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,779,"ssertClose(""compare vectors"" ,result_mapCbrtToSelf,v_mapCbrtToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,781,"ouble[] ceil_a = {-1.1d, 0.9d, 1.1d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,782,rrayRealVector ceil_v = new ArrayRealVector(ceil_a);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,784,/octave =  ceil(ceil_v)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,785,ealVector v_mapCeil = ceil_v.map(new Ceil());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,786,"ouble[] result_mapCeil = {-1d,1d,2d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,787,"ssertClose(""compare vectors"" ,result_mapCeil,v_mapCeil.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,789,/octave = ceil(ceil_v)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,790,ealVector v_mapCeilToSelf = ceil_v.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,791,_mapCeilToSelf.mapToSelf(new Ceil());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,792,"ouble[] result_mapCeilToSelf =  {-1d,1d,2d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,793,"ssertClose(""compare vectors"" ,result_mapCeilToSelf,v_mapCeilToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,795,/octave =  floor(ceil_v)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,796,ealVector v_mapFloor = ceil_v.map(new Floor());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,797,"ouble[] result_mapFloor = {-2d,0d,1d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,798,"ssertClose(""compare vectors"" ,result_mapFloor,v_mapFloor.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,800,/octave = floor(ceil_v)
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,801,ealVector v_mapFloorToSelf = ceil_v.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,802,_mapFloorToSelf.mapToSelf(new Floor());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,803,"ouble[] result_mapFloorToSelf =  {-2d,0d,1d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,804,"ssertClose(""compare vectors"" ,result_mapFloorToSelf,v_mapFloorToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,806,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,807,ealVector v_mapRint = ceil_v.map(new Rint());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,808,"ouble[] result_mapRint = {-1d,1d,1d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,809,"ssertClose(""compare vectors"" ,result_mapRint,v_mapRint.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,811,/octave = ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,812,ealVector v_mapRintToSelf = ceil_v.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,813,_mapRintToSelf.mapToSelf(new Rint());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,814,"ouble[] result_mapRintToSelf =  {-1d,1d,1d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,815,"ssertClose(""compare vectors"" ,result_mapRintToSelf,v_mapRintToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,817,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,818,ealVector v_mapSignum = ceil_v.map(new Signum());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,819,"ouble[] result_mapSignum = {-1d,1d,1d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,820,"ssertClose(""compare vectors"" ,result_mapSignum,v_mapSignum.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,822,/octave = ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,823,ealVector v_mapSignumToSelf = ceil_v.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,824,_mapSignumToSelf.mapToSelf(new Signum());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,825,"ouble[] result_mapSignumToSelf =  {-1d,1d,1d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,826,"ssertClose(""compare vectors"" ,result_mapSignumToSelf,v_mapSignumToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,829,/ Is with the used resolutions of limited value as test
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,830,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,831,ealVector v_mapUlp = ceil_v.map(new Ulp());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,832,"ouble[] result_mapUlp = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,833,"ssertClose(""compare vectors"" ,result_mapUlp,v_mapUlp.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,835,/octave = ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,836,ealVector v_mapUlpToSelf = ceil_v.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,837,_mapUlpToSelf.mapToSelf(new Ulp());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,838,"ouble[] result_mapUlpToSelf = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,839,"ssertClose(""compare vectors"" ,result_mapUlpToSelf,v_mapUlpToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,1337,** verifies that two vectors are close (sup norm) */
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,1338,"rotected void assertClose(String msg, double[] m, double[] n,"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,1339,ouble tolerance) {
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,1340,f (m.length != n.length) {
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,1341,"ssert.fail(""vectors have different lengths"");"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,1343,or (int i = 0; i < m.length; i++) {
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,1344,"ssert.assertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i],tolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,23,import org.apache.commons.math3.analysis.function.Abs;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,24,import org.apache.commons.math3.analysis.function.Acos;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,25,import org.apache.commons.math3.analysis.function.Asin;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,26,import org.apache.commons.math3.analysis.function.Atan;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,27,import org.apache.commons.math3.analysis.function.Cbrt;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,28,import org.apache.commons.math3.analysis.function.Ceil;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,29,import org.apache.commons.math3.analysis.function.Cos;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,30,import org.apache.commons.math3.analysis.function.Cosh;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,31,import org.apache.commons.math3.analysis.function.Exp;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,32,import org.apache.commons.math3.analysis.function.Expm1;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,33,import org.apache.commons.math3.analysis.function.Floor;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,34,import org.apache.commons.math3.analysis.function.Inverse;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,35,import org.apache.commons.math3.analysis.function.Log;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,36,import org.apache.commons.math3.analysis.function.Log10;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,37,import org.apache.commons.math3.analysis.function.Log1p;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,38,import org.apache.commons.math3.analysis.function.Power;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,39,import org.apache.commons.math3.analysis.function.Rint;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,40,import org.apache.commons.math3.analysis.function.Signum;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,41,import org.apache.commons.math3.analysis.function.Sin;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,42,import org.apache.commons.math3.analysis.function.Sinh;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,43,import org.apache.commons.math3.analysis.function.Sqrt;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,44,import org.apache.commons.math3.analysis.function.Tan;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,45,import org.apache.commons.math3.analysis.function.Tanh;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,46,import org.apache.commons.math3.analysis.function.Ulp;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,72,/** verifies that two vectors are close (sup norm) */
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,73,"protected void assertClose(String msg, double[] m, double[] n,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,74,double tolerance) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,75,if (m.length != n.length) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,76,"Assert.fail(""vectors have different lengths"");"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,78,for (int i = 0; i < m.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,79,"Assert.assertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i],tolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,93,// tolerances
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,94,protected double entryTolerance = 10E-16;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,95,protected double normTolerance = 10E-14;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,180,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,181,public void testMapFunctions() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,182,final RealVector v1 = create(vec1);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,184,//octave =  v1 .+ 2.0
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,185,RealVector v_mapAdd = v1.mapAdd(2.0d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,186,"double[] result_mapAdd = {3d, 4d, 5d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,187,"assertClose(""compare vectors"" ,result_mapAdd,v_mapAdd.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,189,//octave =  v1 .+ 2.0
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,190,RealVector v_mapAddToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,191,v_mapAddToSelf.mapAddToSelf(2.0d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,192,"double[] result_mapAddToSelf = {3d, 4d, 5d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,193,"assertClose(""compare vectors"" ,result_mapAddToSelf,v_mapAddToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,195,//octave =  v1 .- 2.0
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,196,RealVector v_mapSubtract = v1.mapSubtract(2.0d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,197,"double[] result_mapSubtract = {-1d, 0d, 1d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,198,"assertClose(""compare vectors"" ,result_mapSubtract,v_mapSubtract.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,200,//octave =  v1 .- 2.0
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,201,RealVector v_mapSubtractToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,202,v_mapSubtractToSelf.mapSubtractToSelf(2.0d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,203,"double[] result_mapSubtractToSelf = {-1d, 0d, 1d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,204,"assertClose(""compare vectors"" ,result_mapSubtractToSelf,v_mapSubtractToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,206,//octave =  v1 .* 2.0
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,207,RealVector v_mapMultiply = v1.mapMultiply(2.0d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,208,"double[] result_mapMultiply = {2d, 4d, 6d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,209,"assertClose(""compare vectors"" ,result_mapMultiply,v_mapMultiply.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,211,//octave =  v1 .* 2.0
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,212,RealVector v_mapMultiplyToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,213,v_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,214,"double[] result_mapMultiplyToSelf = {2d, 4d, 6d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,215,"assertClose(""compare vectors"" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,217,//octave =  v1 ./ 2.0
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,218,RealVector v_mapDivide = v1.mapDivide(2.0d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,219,"double[] result_mapDivide = {.5d, 1d, 1.5d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,220,"assertClose(""compare vectors"" ,result_mapDivide,v_mapDivide.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,222,//octave =  v1 ./ 2.0
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,223,RealVector v_mapDivideToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,224,v_mapDivideToSelf.mapDivideToSelf(2.0d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,225,"double[] result_mapDivideToSelf = {.5d, 1d, 1.5d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,226,"assertClose(""compare vectors"" ,result_mapDivideToSelf,v_mapDivideToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,229,//octave =  v1 .^ 2.0
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,230,RealVector v_mapPow = v1.map(new Power(2));
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,231,"double[] result_mapPow = {1d, 4d, 9d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,232,"assertClose(""compare vectors"" ,result_mapPow,v_mapPow.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,234,//octave =  v1 .^ 2.0
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,235,RealVector v_mapPowToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,236,v_mapPowToSelf.mapToSelf(new Power(2));
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,237,"double[] result_mapPowToSelf = {1d, 4d, 9d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,238,"assertClose(""compare vectors"" ,result_mapPowToSelf,v_mapPowToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,240,//octave =  exp(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,241,RealVector v_mapExp = v1.map(new Exp());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,242,"double[] result_mapExp = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,243,"assertClose(""compare vectors"" ,result_mapExp,v_mapExp.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,245,//octave =  exp(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,246,RealVector v_mapExpToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,247,v_mapExpToSelf.mapToSelf(new Exp());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,248,"double[] result_mapExpToSelf = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,249,"assertClose(""compare vectors"" ,result_mapExpToSelf,v_mapExpToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,252,//octave =  ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,253,RealVector v_mapExpm1 = v1.map(new Expm1());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,254,"double[] result_mapExpm1 = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,255,"assertClose(""compare vectors"" ,result_mapExpm1,v_mapExpm1.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,257,//octave =  ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,258,RealVector v_mapExpm1ToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,259,v_mapExpm1ToSelf.mapToSelf(new Expm1());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,260,"double[] result_mapExpm1ToSelf = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,261,"assertClose(""compare vectors"" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,263,//octave =  log(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,264,RealVector v_mapLog = v1.map(new Log());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,265,"double[] result_mapLog = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,266,"assertClose(""compare vectors"" ,result_mapLog,v_mapLog.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,268,//octave =  log(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,269,RealVector v_mapLogToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,270,v_mapLogToSelf.mapToSelf(new Log());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,271,"double[] result_mapLogToSelf = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,272,"assertClose(""compare vectors"" ,result_mapLogToSelf,v_mapLogToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,274,//octave =  log10(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,275,RealVector v_mapLog10 = v1.map(new Log10());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,276,"double[] result_mapLog10 = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,277,"assertClose(""compare vectors"" ,result_mapLog10,v_mapLog10.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,279,//octave =  log(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,280,RealVector v_mapLog10ToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,281,v_mapLog10ToSelf.mapToSelf(new Log10());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,282,"double[] result_mapLog10ToSelf = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,283,"assertClose(""compare vectors"" ,result_mapLog10ToSelf,v_mapLog10ToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,285,//octave =  ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,286,RealVector v_mapLog1p = v1.map(new Log1p());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,287,"double[] result_mapLog1p = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,288,"assertClose(""compare vectors"" ,result_mapLog1p,v_mapLog1p.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,290,//octave =  ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,291,RealVector v_mapLog1pToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,292,v_mapLog1pToSelf.mapToSelf(new Log1p());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,293,"double[] result_mapLog1pToSelf = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,294,"assertClose(""compare vectors"" ,result_mapLog1pToSelf,v_mapLog1pToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,296,//octave =  cosh(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,297,RealVector v_mapCosh = v1.map(new Cosh());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,298,"double[] result_mapCosh = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,299,"assertClose(""compare vectors"" ,result_mapCosh,v_mapCosh.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,301,//octave =  cosh(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,302,RealVector v_mapCoshToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,303,v_mapCoshToSelf.mapToSelf(new Cosh());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,304,"double[] result_mapCoshToSelf = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,305,"assertClose(""compare vectors"" ,result_mapCoshToSelf,v_mapCoshToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,307,//octave =  sinh(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,308,RealVector v_mapSinh = v1.map(new Sinh());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,309,"double[] result_mapSinh = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,310,"assertClose(""compare vectors"" ,result_mapSinh,v_mapSinh.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,312,//octave =  sinh(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,313,RealVector v_mapSinhToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,314,v_mapSinhToSelf.mapToSelf(new Sinh());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,315,"double[] result_mapSinhToSelf = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,316,"assertClose(""compare vectors"" ,result_mapSinhToSelf,v_mapSinhToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,318,//octave =  tanh(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,319,RealVector v_mapTanh = v1.map(new Tanh());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,320,"double[] result_mapTanh = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,321,"assertClose(""compare vectors"" ,result_mapTanh,v_mapTanh.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,323,//octave =  tanh(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,324,RealVector v_mapTanhToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,325,v_mapTanhToSelf.mapToSelf(new Tanh());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,326,"double[] result_mapTanhToSelf = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,327,"assertClose(""compare vectors"" ,result_mapTanhToSelf,v_mapTanhToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,329,//octave =  cos(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,330,RealVector v_mapCos = v1.map(new Cos());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,331,"double[] result_mapCos = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,332,"assertClose(""compare vectors"" ,result_mapCos,v_mapCos.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,334,//octave =  cos(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,335,RealVector v_mapCosToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,336,v_mapCosToSelf.mapToSelf(new Cos());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,337,"double[] result_mapCosToSelf = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,338,"assertClose(""compare vectors"" ,result_mapCosToSelf,v_mapCosToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,340,//octave =  sin(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,341,RealVector v_mapSin = v1.map(new Sin());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,342,"double[] result_mapSin = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,343,"assertClose(""compare vectors"" ,result_mapSin,v_mapSin.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,345,//octave =  sin(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,346,RealVector v_mapSinToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,347,v_mapSinToSelf.mapToSelf(new Sin());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,348,"double[] result_mapSinToSelf = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,349,"assertClose(""compare vectors"" ,result_mapSinToSelf,v_mapSinToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,351,//octave =  tan(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,352,RealVector v_mapTan = v1.map(new Tan());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,353,"double[] result_mapTan = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,354,"assertClose(""compare vectors"" ,result_mapTan,v_mapTan.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,356,//octave =  tan(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,357,RealVector v_mapTanToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,358,v_mapTanToSelf.mapToSelf(new Tan());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,359,"double[] result_mapTanToSelf = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,360,"assertClose(""compare vectors"" ,result_mapTanToSelf,v_mapTanToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,362,"double[] vat_a = {0d, 0.5d, 1.0d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,363,final RealVector vat = create(vat_a);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,365,//octave =  acos(vat)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,366,RealVector v_mapAcos = vat.map(new Acos());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,367,"double[] result_mapAcos = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,368,"assertClose(""compare vectors"" ,result_mapAcos,v_mapAcos.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,370,//octave =  acos(vat)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,371,RealVector v_mapAcosToSelf = vat.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,372,v_mapAcosToSelf.mapToSelf(new Acos());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,373,"double[] result_mapAcosToSelf = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,374,"assertClose(""compare vectors"" ,result_mapAcosToSelf,v_mapAcosToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,376,//octave =  asin(vat)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,377,RealVector v_mapAsin = vat.map(new Asin());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,378,"double[] result_mapAsin = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,379,"assertClose(""compare vectors"" ,result_mapAsin,v_mapAsin.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,381,//octave =  asin(vat)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,382,RealVector v_mapAsinToSelf = vat.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,383,v_mapAsinToSelf.mapToSelf(new Asin());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,384,"double[] result_mapAsinToSelf = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,385,"assertClose(""compare vectors"" ,result_mapAsinToSelf,v_mapAsinToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,387,//octave =  atan(vat)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,388,RealVector v_mapAtan = vat.map(new Atan());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,389,"double[] result_mapAtan = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,390,"assertClose(""compare vectors"" ,result_mapAtan,v_mapAtan.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,392,//octave =  atan(vat)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,393,RealVector v_mapAtanToSelf = vat.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,394,v_mapAtanToSelf.mapToSelf(new Atan());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,395,"double[] result_mapAtanToSelf = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,396,"assertClose(""compare vectors"" ,result_mapAtanToSelf,v_mapAtanToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,398,//octave =  v1 .^-1
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,399,RealVector v_mapInv = v1.map(new Inverse());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,400,"double[] result_mapInv = {1d,0.5d,3.333333333333333e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,401,"assertClose(""compare vectors"" ,result_mapInv,v_mapInv.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,403,//octave =  v1 .^-1
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,404,RealVector v_mapInvToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,405,v_mapInvToSelf.mapToSelf(new Inverse());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,406,"double[] result_mapInvToSelf = {1d,0.5d,3.333333333333333e-01d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,407,"assertClose(""compare vectors"" ,result_mapInvToSelf,v_mapInvToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,409,"double[] abs_a = {-1.0d, 0.0d, 1.0d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,410,final RealVector abs_v = create(abs_a);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,412,//octave =  abs(abs_v)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,413,RealVector v_mapAbs = abs_v.map(new Abs());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,414,"double[] result_mapAbs = {1d,0d,1d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,415,"assertClose(""compare vectors"" ,result_mapAbs,v_mapAbs.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,417,//octave = abs(abs_v)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,418,RealVector v_mapAbsToSelf = abs_v.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,419,v_mapAbsToSelf.mapToSelf(new Abs());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,420,"double[] result_mapAbsToSelf = {1d,0d,1d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,421,"assertClose(""compare vectors"" ,result_mapAbsToSelf,v_mapAbsToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,423,//octave =   sqrt(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,424,RealVector v_mapSqrt = v1.map(new Sqrt());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,425,"double[] result_mapSqrt = {1d,1.414213562373095e+00d,1.732050807568877e+00d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,426,"assertClose(""compare vectors"" ,result_mapSqrt,v_mapSqrt.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,428,//octave =  sqrt(v1)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,429,RealVector v_mapSqrtToSelf = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,430,v_mapSqrtToSelf.mapToSelf(new Sqrt());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,431,"double[] result_mapSqrtToSelf = {1d,1.414213562373095e+00d,1.732050807568877e+00d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,432,"assertClose(""compare vectors"" ,result_mapSqrtToSelf,v_mapSqrtToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,434,"double[] cbrt_a = {-2.0d, 0.0d, 2.0d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,435,final RealVector cbrt_v = create(cbrt_a);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,437,//octave =  ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,438,RealVector v_mapCbrt = cbrt_v.map(new Cbrt());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,439,"double[] result_mapCbrt = {-1.2599210498948732d,0d,1.2599210498948732d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,440,"assertClose(""compare vectors"" ,result_mapCbrt,v_mapCbrt.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,442,//octave = ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,443,RealVector v_mapCbrtToSelf = cbrt_v.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,444,v_mapCbrtToSelf.mapToSelf(new Cbrt());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,445,"double[] result_mapCbrtToSelf =  {-1.2599210498948732d,0d,1.2599210498948732d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,446,"assertClose(""compare vectors"" ,result_mapCbrtToSelf,v_mapCbrtToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,448,"double[] ceil_a = {-1.1d, 0.9d, 1.1d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,449,ArrayRealVector ceil_v = new ArrayRealVector(ceil_a);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,451,//octave =  ceil(ceil_v)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,452,RealVector v_mapCeil = ceil_v.map(new Ceil());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,453,"double[] result_mapCeil = {-1d,1d,2d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,454,"assertClose(""compare vectors"" ,result_mapCeil,v_mapCeil.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,456,//octave = ceil(ceil_v)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,457,RealVector v_mapCeilToSelf = ceil_v.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,458,v_mapCeilToSelf.mapToSelf(new Ceil());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,459,"double[] result_mapCeilToSelf =  {-1d,1d,2d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,460,"assertClose(""compare vectors"" ,result_mapCeilToSelf,v_mapCeilToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,462,//octave =  floor(ceil_v)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,463,RealVector v_mapFloor = ceil_v.map(new Floor());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,464,"double[] result_mapFloor = {-2d,0d,1d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,465,"assertClose(""compare vectors"" ,result_mapFloor,v_mapFloor.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,467,//octave = floor(ceil_v)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,468,RealVector v_mapFloorToSelf = ceil_v.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,469,v_mapFloorToSelf.mapToSelf(new Floor());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,470,"double[] result_mapFloorToSelf =  {-2d,0d,1d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,471,"assertClose(""compare vectors"" ,result_mapFloorToSelf,v_mapFloorToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,473,//octave =  ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,474,RealVector v_mapRint = ceil_v.map(new Rint());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,475,"double[] result_mapRint = {-1d,1d,1d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,476,"assertClose(""compare vectors"" ,result_mapRint,v_mapRint.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,478,//octave = ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,479,RealVector v_mapRintToSelf = ceil_v.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,480,v_mapRintToSelf.mapToSelf(new Rint());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,481,"double[] result_mapRintToSelf =  {-1d,1d,1d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,482,"assertClose(""compare vectors"" ,result_mapRintToSelf,v_mapRintToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,484,//octave =  ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,485,RealVector v_mapSignum = ceil_v.map(new Signum());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,486,"double[] result_mapSignum = {-1d,1d,1d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,487,"assertClose(""compare vectors"" ,result_mapSignum,v_mapSignum.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,489,//octave = ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,490,RealVector v_mapSignumToSelf = ceil_v.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,491,v_mapSignumToSelf.mapToSelf(new Signum());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,492,"double[] result_mapSignumToSelf =  {-1d,1d,1d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,493,"assertClose(""compare vectors"" ,result_mapSignumToSelf,v_mapSignumToSelf.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,496,// Is with the used resolutions of limited value as test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,497,//octave =  ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,498,RealVector v_mapUlp = ceil_v.map(new Ulp());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,499,"double[] result_mapUlp = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,500,"assertClose(""compare vectors"" ,result_mapUlp,v_mapUlp.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,502,//octave = ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,503,RealVector v_mapUlpToSelf = ceil_v.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,504,v_mapUlpToSelf.mapToSelf(new Ulp());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,505,"double[] result_mapUlpToSelf = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,506,"assertClose(""compare vectors"" ,result_mapUlpToSelf,v_mapUlpToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,61,/ tolerances
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,62,rotected double entryTolerance = 10E-16;
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,63,rotected double normTolerance = 10E-14;
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,330,Test
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,331,ublic void testMapFunctions() {
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,332,penMapRealVector v1 = new OpenMapRealVector(vec1);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,334,/octave =  v1 .+ 2.0
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,335,ealVector v_mapAdd = v1.mapAdd(2.0d);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,336,"ouble[] result_mapAdd = {3d, 4d, 5d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,337,"ssertClose(""compare vectors"" ,result_mapAdd,v_mapAdd.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,339,/octave =  v1 .+ 2.0
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,340,ealVector v_mapAddToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,341,_mapAddToSelf.mapAddToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,342,"ouble[] result_mapAddToSelf = {3d, 4d, 5d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,343,"ssertClose(""compare vectors"" ,result_mapAddToSelf,v_mapAddToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,345,/octave =  v1 .- 2.0
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,346,ealVector v_mapSubtract = v1.mapSubtract(2.0d);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,347,"ouble[] result_mapSubtract = {-1d, 0d, 1d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,348,"ssertClose(""compare vectors"" ,result_mapSubtract,v_mapSubtract.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,350,/octave =  v1 .- 2.0
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,351,ealVector v_mapSubtractToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,352,_mapSubtractToSelf.mapSubtractToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,353,"ouble[] result_mapSubtractToSelf = {-1d, 0d, 1d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,354,"ssertClose(""compare vectors"" ,result_mapSubtractToSelf,v_mapSubtractToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,356,/octave =  v1 .* 2.0
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,357,ealVector v_mapMultiply = v1.mapMultiply(2.0d);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,358,"ouble[] result_mapMultiply = {2d, 4d, 6d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,359,"ssertClose(""compare vectors"" ,result_mapMultiply,v_mapMultiply.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,361,/octave =  v1 .* 2.0
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,362,ealVector v_mapMultiplyToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,363,_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,364,"ouble[] result_mapMultiplyToSelf = {2d, 4d, 6d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,365,"ssertClose(""compare vectors"" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,367,/octave =  v1 ./ 2.0
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,368,ealVector v_mapDivide = v1.mapDivide(2.0d);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,369,"ouble[] result_mapDivide = {.5d, 1d, 1.5d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,370,"ssertClose(""compare vectors"" ,result_mapDivide,v_mapDivide.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,372,/octave =  v1 ./ 2.0
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,373,ealVector v_mapDivideToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,374,_mapDivideToSelf.mapDivideToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,375,"ouble[] result_mapDivideToSelf = {.5d, 1d, 1.5d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,376,"ssertClose(""compare vectors"" ,result_mapDivideToSelf,v_mapDivideToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,378,/octave =  v1 .^ 2.0
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,379,ealVector v_mapPow = v1.map(new Power(2));
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,380,"ouble[] result_mapPow = {1d, 4d, 9d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,381,"ssertClose(""compare vectors"" ,result_mapPow,v_mapPow.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,383,/octave =  v1 .^ 2.0
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,384,ealVector v_mapPowToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,385,_mapPowToSelf.mapToSelf(new Power(2));
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,386,"ouble[] result_mapPowToSelf = {1d, 4d, 9d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,387,"ssertClose(""compare vectors"" ,result_mapPowToSelf,v_mapPowToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,389,/octave =  exp(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,390,ealVector v_mapExp = v1.map(new Exp());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,391,"ouble[] result_mapExp = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,392,"ssertClose(""compare vectors"" ,result_mapExp,v_mapExp.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,394,/octave =  exp(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,395,ealVector v_mapExpToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,396,_mapExpToSelf.mapToSelf(new Exp());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,397,"ouble[] result_mapExpToSelf = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,398,"ssertClose(""compare vectors"" ,result_mapExpToSelf,v_mapExpToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,401,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,402,ealVector v_mapExpm1 = v1.map(new Expm1());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,403,"ouble[] result_mapExpm1 = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,404,"ssertClose(""compare vectors"" ,result_mapExpm1,v_mapExpm1.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,406,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,407,ealVector v_mapExpm1ToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,408,_mapExpm1ToSelf.mapToSelf(new Expm1());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,409,"ouble[] result_mapExpm1ToSelf = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,410,"ssertClose(""compare vectors"" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,412,/octave =  log(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,413,ealVector v_mapLog = v1.map(new Log());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,414,"ouble[] result_mapLog = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,415,"ssertClose(""compare vectors"" ,result_mapLog,v_mapLog.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,417,/octave =  log(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,418,ealVector v_mapLogToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,419,_mapLogToSelf.mapToSelf(new Log());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,420,"ouble[] result_mapLogToSelf = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,421,"ssertClose(""compare vectors"" ,result_mapLogToSelf,v_mapLogToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,423,/octave =  log10(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,424,ealVector v_mapLog10 = v1.map(new Log10());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,425,"ouble[] result_mapLog10 = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,426,"ssertClose(""compare vectors"" ,result_mapLog10,v_mapLog10.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,428,/octave =  log(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,429,ealVector v_mapLog10ToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,430,_mapLog10ToSelf.mapToSelf(new Log10());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,431,"ouble[] result_mapLog10ToSelf = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,432,"ssertClose(""compare vectors"" ,result_mapLog10ToSelf,v_mapLog10ToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,434,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,435,ealVector v_mapLog1p = v1.map(new Log1p());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,436,"ouble[] result_mapLog1p = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,437,"ssertClose(""compare vectors"" ,result_mapLog1p,v_mapLog1p.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,439,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,440,ealVector v_mapLog1pToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,441,_mapLog1pToSelf.mapToSelf(new Log1p());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,442,"ouble[] result_mapLog1pToSelf = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,443,"ssertClose(""compare vectors"" ,result_mapLog1pToSelf,v_mapLog1pToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,445,/octave =  cosh(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,446,ealVector v_mapCosh = v1.map(new Cosh());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,447,"ouble[] result_mapCosh = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,448,"ssertClose(""compare vectors"" ,result_mapCosh,v_mapCosh.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,450,/octave =  cosh(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,451,ealVector v_mapCoshToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,452,_mapCoshToSelf.mapToSelf(new Cosh());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,453,"ouble[] result_mapCoshToSelf = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,454,"ssertClose(""compare vectors"" ,result_mapCoshToSelf,v_mapCoshToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,456,/octave =  sinh(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,457,ealVector v_mapSinh = v1.map(new Sinh());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,458,"ouble[] result_mapSinh = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,459,"ssertClose(""compare vectors"" ,result_mapSinh,v_mapSinh.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,461,/octave =  sinh(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,462,ealVector v_mapSinhToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,463,_mapSinhToSelf.mapToSelf(new Sinh());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,464,"ouble[] result_mapSinhToSelf = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,465,"ssertClose(""compare vectors"" ,result_mapSinhToSelf,v_mapSinhToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,467,/octave =  tanh(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,468,ealVector v_mapTanh = v1.map(new Tanh());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,469,"ouble[] result_mapTanh = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,470,"ssertClose(""compare vectors"" ,result_mapTanh,v_mapTanh.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,472,/octave =  tanh(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,473,ealVector v_mapTanhToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,474,_mapTanhToSelf.mapToSelf(new Tanh());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,475,"ouble[] result_mapTanhToSelf = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,476,"ssertClose(""compare vectors"" ,result_mapTanhToSelf,v_mapTanhToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,478,/octave =  cos(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,479,ealVector v_mapCos = v1.map(new Cos());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,480,"ouble[] result_mapCos = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,481,"ssertClose(""compare vectors"" ,result_mapCos,v_mapCos.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,483,/octave =  cos(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,484,ealVector v_mapCosToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,485,_mapCosToSelf.mapToSelf(new Cos());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,486,"ouble[] result_mapCosToSelf = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,487,"ssertClose(""compare vectors"" ,result_mapCosToSelf,v_mapCosToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,489,/octave =  sin(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,490,ealVector v_mapSin = v1.map(new Sin());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,491,"ouble[] result_mapSin = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,492,"ssertClose(""compare vectors"" ,result_mapSin,v_mapSin.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,494,/octave =  sin(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,495,ealVector v_mapSinToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,496,_mapSinToSelf.mapToSelf(new Sin());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,497,"ouble[] result_mapSinToSelf = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,498,"ssertClose(""compare vectors"" ,result_mapSinToSelf,v_mapSinToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,500,/octave =  tan(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,501,ealVector v_mapTan = v1.map(new Tan());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,502,"ouble[] result_mapTan = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,503,"ssertClose(""compare vectors"" ,result_mapTan,v_mapTan.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,505,/octave =  tan(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,506,ealVector v_mapTanToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,507,_mapTanToSelf.mapToSelf(new Tan());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,508,"ouble[] result_mapTanToSelf = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,509,"ssertClose(""compare vectors"" ,result_mapTanToSelf,v_mapTanToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,511,"ouble[] vat_a = {0d, 0.5d, 1.0d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,512,penMapRealVector vat = new OpenMapRealVector(vat_a);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,514,/octave =  acos(vat)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,515,ealVector v_mapAcos = vat.map(new Acos());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,516,"ouble[] result_mapAcos = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,517,"ssertClose(""compare vectors"" ,result_mapAcos,v_mapAcos.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,519,/octave =  acos(vat)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,520,ealVector v_mapAcosToSelf = vat.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,521,_mapAcosToSelf.mapToSelf(new Acos());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,522,"ouble[] result_mapAcosToSelf = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,523,"ssertClose(""compare vectors"" ,result_mapAcosToSelf,v_mapAcosToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,525,/octave =  asin(vat)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,526,ealVector v_mapAsin = vat.map(new Asin());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,527,"ouble[] result_mapAsin = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,528,"ssertClose(""compare vectors"" ,result_mapAsin,v_mapAsin.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,530,/octave =  asin(vat)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,531,ealVector v_mapAsinToSelf = vat.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,532,_mapAsinToSelf.mapToSelf(new Asin());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,533,"ouble[] result_mapAsinToSelf = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,534,"ssertClose(""compare vectors"" ,result_mapAsinToSelf,v_mapAsinToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,536,/octave =  atan(vat)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,537,ealVector v_mapAtan = vat.map(new Atan());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,538,"ouble[] result_mapAtan = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,539,"ssertClose(""compare vectors"" ,result_mapAtan,v_mapAtan.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,541,/octave =  atan(vat)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,542,ealVector v_mapAtanToSelf = vat.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,543,_mapAtanToSelf.mapToSelf(new Atan());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,544,"ouble[] result_mapAtanToSelf = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,545,"ssertClose(""compare vectors"" ,result_mapAtanToSelf,v_mapAtanToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,547,/octave =  v1 .^-1
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,548,ealVector v_mapInv = v1.map(new Inverse());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,549,"ouble[] result_mapInv = {1d,0.5d,3.333333333333333e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,550,"ssertClose(""compare vectors"" ,result_mapInv,v_mapInv.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,552,/octave =  v1 .^-1
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,553,ealVector v_mapInvToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,554,_mapInvToSelf.mapToSelf(new Inverse());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,555,"ouble[] result_mapInvToSelf = {1d,0.5d,3.333333333333333e-01d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,556,"ssertClose(""compare vectors"" ,result_mapInvToSelf,v_mapInvToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,558,"ouble[] abs_a = {-1.0d, 0.0d, 1.0d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,559,penMapRealVector abs_v = new OpenMapRealVector(abs_a);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,561,/octave =  abs(abs_v)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,562,ealVector v_mapAbs = abs_v.map(new Abs());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,563,"ouble[] result_mapAbs = {1d,0d,1d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,564,"ssertClose(""compare vectors"" ,result_mapAbs,v_mapAbs.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,566,/octave = abs(abs_v)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,567,ealVector v_mapAbsToSelf = abs_v.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,568,_mapAbsToSelf.mapToSelf(new Abs());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,569,"ouble[] result_mapAbsToSelf = {1d,0d,1d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,570,"ssertClose(""compare vectors"" ,result_mapAbsToSelf,v_mapAbsToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,572,/octave =   sqrt(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,573,ealVector v_mapSqrt = v1.map(new Sqrt());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,574,"ouble[] result_mapSqrt = {1d,1.414213562373095e+00d,1.732050807568877e+00d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,575,"ssertClose(""compare vectors"" ,result_mapSqrt,v_mapSqrt.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,577,/octave =  sqrt(v1)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,578,ealVector v_mapSqrtToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,579,_mapSqrtToSelf.mapToSelf(new Sqrt());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,580,"ouble[] result_mapSqrtToSelf = {1d,1.414213562373095e+00d,1.732050807568877e+00d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,581,"ssertClose(""compare vectors"" ,result_mapSqrtToSelf,v_mapSqrtToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,583,"ouble[] cbrt_a = {-2.0d, 0.0d, 2.0d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,584,penMapRealVector cbrt_v = new OpenMapRealVector(cbrt_a);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,586,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,587,ealVector v_mapCbrt = cbrt_v.map(new Cbrt());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,588,"ouble[] result_mapCbrt = {-1.2599210498948732d,0d,1.2599210498948732d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,589,"ssertClose(""compare vectors"" ,result_mapCbrt,v_mapCbrt.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,591,/octave = ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,592,ealVector v_mapCbrtToSelf = cbrt_v.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,593,_mapCbrtToSelf.mapToSelf(new Cbrt());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,594,"ouble[] result_mapCbrtToSelf =  {-1.2599210498948732d,0d,1.2599210498948732d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,595,"ssertClose(""compare vectors"" ,result_mapCbrtToSelf,v_mapCbrtToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,597,"ouble[] ceil_a = {-1.1d, 0.9d, 1.1d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,598,penMapRealVector ceil_v = new OpenMapRealVector(ceil_a);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,600,/octave =  ceil(ceil_v)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,601,ealVector v_mapCeil = ceil_v.map(new Ceil());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,602,"ouble[] result_mapCeil = {-1d,1d,2d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,603,"ssertClose(""compare vectors"" ,result_mapCeil,v_mapCeil.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,605,/octave = ceil(ceil_v)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,606,ealVector v_mapCeilToSelf = ceil_v.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,607,_mapCeilToSelf.mapToSelf(new Ceil());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,608,"ouble[] result_mapCeilToSelf =  {-1d,1d,2d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,609,"ssertClose(""compare vectors"" ,result_mapCeilToSelf,v_mapCeilToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,611,/octave =  floor(ceil_v)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,612,ealVector v_mapFloor = ceil_v.map(new Floor());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,613,"ouble[] result_mapFloor = {-2d,0d,1d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,614,"ssertClose(""compare vectors"" ,result_mapFloor,v_mapFloor.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,616,/octave = floor(ceil_v)
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,617,ealVector v_mapFloorToSelf = ceil_v.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,618,_mapFloorToSelf.mapToSelf(new Floor());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,619,"ouble[] result_mapFloorToSelf =  {-2d,0d,1d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,620,"ssertClose(""compare vectors"" ,result_mapFloorToSelf,v_mapFloorToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,622,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,623,ealVector v_mapRint = ceil_v.map(new Rint());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,624,"ouble[] result_mapRint = {-1d,1d,1d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,625,"ssertClose(""compare vectors"" ,result_mapRint,v_mapRint.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,627,/octave = ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,628,ealVector v_mapRintToSelf = ceil_v.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,629,_mapRintToSelf.mapToSelf(new Rint());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,630,"ouble[] result_mapRintToSelf =  {-1d,1d,1d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,631,"ssertClose(""compare vectors"" ,result_mapRintToSelf,v_mapRintToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,633,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,634,ealVector v_mapSignum = ceil_v.map(new Signum());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,635,"ouble[] result_mapSignum = {-1d,1d,1d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,636,"ssertClose(""compare vectors"" ,result_mapSignum,v_mapSignum.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,638,/octave = ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,639,ealVector v_mapSignumToSelf = ceil_v.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,640,_mapSignumToSelf.mapToSelf(new Signum());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,641,"ouble[] result_mapSignumToSelf =  {-1d,1d,1d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,642,"ssertClose(""compare vectors"" ,result_mapSignumToSelf,v_mapSignumToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,645,/ Is with the used resolutions of limited value as test
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,646,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,647,ealVector v_mapUlp = ceil_v.map(new Ulp());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,648,"ouble[] result_mapUlp = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,649,"ssertClose(""compare vectors"" ,result_mapUlp,v_mapUlp.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,651,/octave = ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,652,ealVector v_mapUlpToSelf = ceil_v.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,653,_mapUlpToSelf.mapToSelf(new Ulp());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,654,"ouble[] result_mapUlpToSelf = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,655,"ssertClose(""compare vectors"" ,result_mapUlpToSelf,v_mapUlpToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,843,** verifies that two vectors are close (sup norm) */
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,844,"rotected void assertClose(String msg, double[] m, double[] n,"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,845,ouble tolerance) {
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,846,f (m.length != n.length) {
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,847,"ssert.fail(""vectors have different lengths"");"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,849,or (int i = 0; i < m.length; i++) {
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,850,"ssert.assertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i],tolerance);"

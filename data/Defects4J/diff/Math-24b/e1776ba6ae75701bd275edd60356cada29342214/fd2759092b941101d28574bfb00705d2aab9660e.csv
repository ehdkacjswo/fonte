is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,74,"f (Precision.compareTo(entry, minValue, maxUlps) < 0) {"
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,74,// check if the entry is strictly smaller than the current minimum
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,75,// do not use a ulp/epsilon check
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,76,if (entry < minValue) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,98,"inal int cmp = Precision.compareTo(ratio, minRatio, maxUlps);"
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,100,// check if the entry is strictly equal to the current min ratio
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,101,// do not use a ulp/epsilon check
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,102,"final int cmp = Double.compare(ratio, minRatio);"
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,110,eturn null;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,114,return null;
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,112,/ there's a degeneracy as indicated by a tie in the minimum ratio test
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,113,/ check if there's an artificial variable that can be forced out of the basis
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,114,or (Integer row : minRatioPositions) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,115,or (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,116,nt column = i + tableau.getArtificialVariableOffset();
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,117,"inal double entry = tableau.getEntry(row, column);"
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,118,"f (Precision.equals(entry, 1d, maxUlps) &&"
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,119,ow.equals(tableau.getBasicRow(column))) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,120,eturn row;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,116,// there's a degeneracy as indicated by a tie in the minimum ratio test
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,118,// 1. check if there's an artificial variable that can be forced out of the basis
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,119,for (Integer row : minRatioPositions) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,120,for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,121,int column = i + tableau.getArtificialVariableOffset();
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,122,"final double entry = tableau.getEntry(row, column);"
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,123,"if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {"
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,124,return row;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,129,// 2. apply Bland's rule to prevent cycling:
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,130,//    take the row for which the corresponding basic variable has the smallest index
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,132,// see http://www.stanford.edu/class/msande310/blandrule.pdf
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,133,// see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,134,Integer minRow = null;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,135,int minIndex = tableau.getWidth();
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,136,for (Integer row : minRatioPositions) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,137,for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1 && minRow != row; i++) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,138,if (row == tableau.getBasicRow(i)) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,139,if (i < minIndex) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,140,minIndex = i;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,141,minRow = row;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,147,return minRow;
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,152,"ouble multiplier = tableau.getEntry(i, pivotCol);"
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,176,"final double multiplier = tableau.getEntry(i, pivotCol);"
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,30,import odk.lang.FastMath;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,73,/** The cut-off threshold to zero-out entries. */
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,74,private static final double CUTOFF_THRESHOLD = 1e-12;
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,456,"ableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)"
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,457,subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,461,for (int i = 0; i < getWidth(); i++) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,462,"double result = tableau.getEntry(minuendRow, i) - tableau.getEntry(subtrahendRow, i) * multiple;"
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,463,"// cut-off values smaller than the CUTOFF_THRESHOLD, otherwise may lead to numerical instabilities"
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,464,if (FastMath.abs(result) < CUTOFF_THRESHOLD) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,465,result = 0.0;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,467,"tableau.setEntry(minuendRow, i, result);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,24,import java.util.List;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,33,@Test
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,34,public void testMath828() {
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,35,LinearObjectiveFunction f = new LinearObjectiveFunction(
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,36,"new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,38,ArrayList <LinearConstraint>constraints = new ArrayList<LinearConstraint>();
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,40,"constraints.add(new LinearConstraint(new double[] {0.0, 39.0, 23.0, 96.0, 15.0, 48.0, 9.0, 21.0, 48.0, 36.0, 76.0, 19.0, 88.0, 17.0, 16.0, 36.0,}, Relationship.GEQ, 15.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,41,"constraints.add(new LinearConstraint(new double[] {0.0, 59.0, 93.0, 12.0, 29.0, 78.0, 73.0, 87.0, 32.0, 70.0, 68.0, 24.0, 11.0, 26.0, 65.0, 25.0,}, Relationship.GEQ, 29.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,42,"constraints.add(new LinearConstraint(new double[] {0.0, 74.0, 5.0, 82.0, 6.0, 97.0, 55.0, 44.0, 52.0, 54.0, 5.0, 93.0, 91.0, 8.0, 20.0, 97.0,}, Relationship.GEQ, 6.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,43,"constraints.add(new LinearConstraint(new double[] {8.0, -3.0, -28.0, -72.0, -8.0, -31.0, -31.0, -74.0, -47.0, -59.0, -24.0, -57.0, -56.0, -16.0, -92.0, -59.0,}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,44,"constraints.add(new LinearConstraint(new double[] {25.0, -7.0, -99.0, -78.0, -25.0, -14.0, -16.0, -89.0, -39.0, -56.0, -53.0, -9.0, -18.0, -26.0, -11.0, -61.0,}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,45,"constraints.add(new LinearConstraint(new double[] {33.0, -95.0, -15.0, -4.0, -33.0, -3.0, -20.0, -96.0, -27.0, -13.0, -80.0, -24.0, -3.0, -13.0, -57.0, -76.0,}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,46,"constraints.add(new LinearConstraint(new double[] {7.0, -95.0, -39.0, -93.0, -7.0, -94.0, -94.0, -62.0, -76.0, -26.0, -53.0, -57.0, -31.0, -76.0, -53.0, -52.0,}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,48,double epsilon = 1e-6;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,49,"PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,50,"Assert.assertEquals(1.0d, solution.getValue(), epsilon);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,51,"Assert.assertTrue(validSolution(solution, constraints, epsilon));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,585,"private static boolean validSolution(PointValuePair solution, List<LinearConstraint> constraints, double epsilon) {"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,586,double[] vals = solution.getPoint();
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,587,for (LinearConstraint c : constraints) {
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,588,double[] coeffs = c.getCoefficients().toArray();
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,589,double result = 0.0d;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,590,for (int i = 0; i < vals.length; i++) {
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,591,result += vals[i] * coeffs[i];
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,594,switch (c.getRelationship()) {
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,595,case EQ:
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,596,"if (!Precision.equals(result, c.getValue(), epsilon)) {"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,597,return false;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,599,break;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,601,case GEQ:
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,602,"if (Precision.compareTo(result, c.getValue(), epsilon) < 0) {"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,603,return false;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,605,break;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,607,case LEQ:
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,608,"if (Precision.compareTo(result, c.getValue(), epsilon) > 0) {"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,609,return false;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,611,break;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,615,return true;

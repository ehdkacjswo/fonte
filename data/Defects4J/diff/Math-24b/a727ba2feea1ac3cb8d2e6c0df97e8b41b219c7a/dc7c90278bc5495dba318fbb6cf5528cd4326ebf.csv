is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,20,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,184,f (MathUtils.sign(y0) + MathUtils.sign(ym) == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,183,if (FastMath.signum(y0) + FastMath.signum(ym) == 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,20,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,100,inal double correction = (MathUtils.sign(y2) * MathUtils.sign(y3)) *
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,99,final double correction = (FastMath.signum(y2) * FastMath.signum(y3)) *
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,117,f (MathUtils.sign(y1) + MathUtils.sign(y) == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,116,if (FastMath.signum(y1) + FastMath.signum(y) == 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,127,f (MathUtils.sign(y2) + MathUtils.sign(y) == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,126,if (FastMath.signum(y2) + FastMath.signum(y) == 0.0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,422," Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,423, for double precision {@code x}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,424, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,425," For a double value {@code x}, this method returns"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,426," {@code +1.0} if {@code x > 0}, {@code 0.0} if"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,427," {@code x = 0.0}, and {@code -1.0} if {@code x < 0}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,428, Returns {@code NaN} if {@code x} is {@code NaN}.</p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,430," @param x the value, a double"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,431," @return +1.0, 0.0, or -1.0, depending on the sign of x"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,433,ublic static double sign(final double x) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,434,f (Double.isNaN(x)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,435,eturn Double.NaN;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,437,eturn (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,441," Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,442, for float value {@code x}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,443, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,444," For a float value x, this method returns +1.0F if x > 0, 0.0F if x ="
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,445," 0.0F, and -1.0F if x < 0. Returns {@code NaN} if {@code x}"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,446, is {@code NaN}.</p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,448," @param x the value, a float"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,449," @return +1.0F, 0.0F, or -1.0F, depending on the sign of x"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,451,ublic static float sign(final float x) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,452,f (Float.isNaN(x)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,453,eturn Float.NaN;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,455,eturn (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,28,import org.apache.commons.math.TestUtils;
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1064,@Test
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1065,public void testSignumDouble() {
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1066,final double delta = 0.0;
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1067,"Assert.assertEquals(1.0, FastMath.signum(2.0), delta);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1068,"Assert.assertEquals(0.0, FastMath.signum(0.0), delta);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1069,"Assert.assertEquals(-1.0, FastMath.signum(-2.0), delta);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1070,"TestUtils.assertSame(-0. / 0., FastMath.signum(Double.NaN));"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1073,@Test
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1074,public void testSignumFloat() {
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1075,final float delta = 0.0F;
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1076,"Assert.assertEquals(1.0F, FastMath.signum(2.0F), delta);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1077,"Assert.assertEquals(0.0F, FastMath.signum(0.0F), delta);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1078,"Assert.assertEquals(-1.0F, FastMath.signum(-2.0F), delta);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1079,"TestUtils.assertSame(Float.NaN, FastMath.signum(Float.NaN));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,457,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,458,ublic void testSignDouble() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,459,ouble delta = 0.0;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,460,"ssert.assertEquals(1.0, MathUtils.sign(2.0), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,461,"ssert.assertEquals(0.0, MathUtils.sign(0.0), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,462,"ssert.assertEquals(-1.0, MathUtils.sign(-2.0), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,463,"estUtils.assertSame(-0. / 0., MathUtils.sign(Double.NaN));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,466,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,467,ublic void testSignFloat() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,468,loat delta = 0.0F;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,469,"ssert.assertEquals(1.0F, MathUtils.sign(2.0F), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,470,"ssert.assertEquals(0.0F, MathUtils.sign(0.0F), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,471,"ssert.assertEquals(-1.0F, MathUtils.sign(-2.0F), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,472,"estUtils.assertSame(Float.NaN, MathUtils.sign(Float.NaN));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,40,astFourierTransformer transformer = new FastFourierTransformer();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,40,FastFourierTransformer transformer = FastFourierTransformer.create();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,70,esult = transformer.transform2(y2);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,70,transformer = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,71,result = transformer.transform(y2);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,76,esult = transformer.inverseTransform2(x2);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,77,result = transformer.inverseTransform(x2);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,85,astFourierTransformer transformer = new FastFourierTransformer();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,86,FastFourierTransformer transformer = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,87,double tolerance = 1E-12;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,88,"Complex[][] input = new Complex[][] {new Complex[] {new Complex(1, 0),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,89,"new Complex(2, 0)},"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,90,"new Complex[] {new Complex(3, 1),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,91,"new Complex(4, 2)}};"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,92,"Complex[][] goodOutput = new Complex[][] {new Complex[] {new Complex(5,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,93,"1.5), new Complex(-1, -.5)}, new Complex[] {new Complex(-2,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,94,"-1.5), new Complex(0, .5)}};"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,95,for (int i = 0; i < goodOutput.length; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,96,FastFourierTransformer.scaleArray(
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,97,"goodOutput[i],"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,98,FastMath.sqrt(goodOutput[i].length) *
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,99,FastMath.sqrt(goodOutput.length));
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,101,"Complex[][] output = (Complex[][])transformer.mdfft(input, true);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,102,"Complex[][] output2 = (Complex[][])transformer.mdfft(output, false);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,104,"Assert.assertEquals(input.length, output.length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,105,"Assert.assertEquals(input.length, output2.length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,106,"Assert.assertEquals(input[0].length, output[0].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,107,"Assert.assertEquals(input[0].length, output2[0].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,108,"Assert.assertEquals(input[1].length, output[1].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,109,"Assert.assertEquals(input[1].length, output2[1].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,111,for (int i = 0; i < input.length; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,112,for (int j = 0; j < input[0].length; j++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,113,"Assert.assertEquals(input[i][j].getImaginary(), output2[i][j].getImaginary(),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,114,tolerance);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,115,"Assert.assertEquals(input[i][j].getReal(), output2[i][j].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,116,"Assert.assertEquals(goodOutput[i][j].getImaginary(), output[i][j].getImaginary(),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,117,tolerance);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,118,"Assert.assertEquals(goodOutput[i][j].getReal(), output[i][j].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,123,@Test
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,124,public void test2DDataUnitary() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,125,FastFourierTransformer transformer = FastFourierTransformer.createUnitary();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,122,astFourierTransformer transformer = new FastFourierTransformer();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,162,FastFourierTransformer transformer = FastFourierTransformer.create();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,155,astFourierTransformer transformer = new FastFourierTransformer();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,195,FastFourierTransformer transformer = FastFourierTransformer.create();

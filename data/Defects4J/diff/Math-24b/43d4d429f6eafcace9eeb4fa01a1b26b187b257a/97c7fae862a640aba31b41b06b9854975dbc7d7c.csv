is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,30,ublic interface UnivariateDifferential {
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,32,** Get the primitive function associated with this differential.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,33, <p>Each {@link UnivariateDifferential} instance is tightly bound
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,34, to an {@link UnivariateDifferentiable} instance. If the state of
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,35, the primitive instance changes in any way that affects the
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,36," differential computation, this binding allows this change to"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,37," be immediately seen by the derivative instance, there is no need"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,38, to differentiate the primitive again. The existing instance is aware
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,39, of the primitive changes.</p>
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,40," <p>In other words in the following code snippet, the three values"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,41," f1, f2 and f3 should be equal (at least at machine tolerance level)</p>"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,42, <pre>
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,43,    UnivariateDifferential derivative = differentiator.differentiate(derivable);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,44,    derivable.someFunctionThatMutatesHeavilyTheInstance();
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,45,    double f1 = derivable.f(t);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,46,    double f2 = derivative.getPrimitive().f(t);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,47,"    double f3 = derivative.f(new DerivativeStructure(variables, order, index, t)).getValue();"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,48, </pre>
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,49, @return primitive function bound to this derivative
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,51,nivariateFunction getPrimitive();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,30,public interface UnivariateDifferentiable extends UnivariateFunction {
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,54, <p>{@link UnivariateDifferential} classes compute both the
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,33,* <p>{@link UnivariateDifferentiable} classes compute both the
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,59,erivativeStructure f(DerivativeStructure t);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.java,38,DerivativeStructure value(DerivativeStructure t);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,32,nivariateDifferential differentiate(UnivariateFunction function);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,32,UnivariateDifferentiable differentiate(UnivariateFunction function);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,25,   the input and the output type for the {@link UnivariateDifferential}
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,25,*   the input and the output type for the {@link UnivariateDifferentiable}
False,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,29,   The {@link UnivariateDifferentiator} interface defines a way to differentation
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,29,*   The {@link UnivariateDifferentiator} interface defines a way to differentiation

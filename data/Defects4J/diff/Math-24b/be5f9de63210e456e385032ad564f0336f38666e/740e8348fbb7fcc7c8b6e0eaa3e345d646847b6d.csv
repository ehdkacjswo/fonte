is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,306,* <p>This method returns the bias-corrected sample variance (using {@code n - 1} in
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,307,* the denominator).  Use {@link #populationVariance()} for the non-bias-corrected
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,308,* population variance.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,330,* <p>This method returns the bias-corrected sample variance (using {@code n - 1} in
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,331,* the denominator).  Use {@link #populationVariance()} for the non-bias-corrected
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,332,* population variance.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,359,* <p>This method returns the bias-corrected sample variance (using {@code n - 1} in
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,360,* the denominator).  Use {@link #populationVariance()} for the non-bias-corrected
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,361,* population variance.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,394,* <p>This method returns the bias-corrected sample variance (using {@code n - 1} in
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,395,* the denominator).  Use {@link #populationVariance()} for the non-bias-corrected
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,396,* population variance.</p>
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,210, Returns the variance of the available values.
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,210,* Returns the (sample) variance of the available values.
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,212,* <p>This method returns the bias-corrected sample variance (using {@code n - 1} in
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,213,* the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,214,* population variance.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,224,"* Returns the <a href=""http://en.wikibooks.org/wiki/Statistics/Summary/Variance"">"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,225,* population variance</a> of the available values.
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,227,"* @return The population variance, Double.NaN if no values have been added,"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,228,* or 0.0 for a single value set.
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,230,public double getPopulationVariance() {
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,231,return apply(new Variance(false));
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,228, Returns the variance of the values that have been added.
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,229, <p>
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,230, Double.NaN is returned if no values have been added.
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,231, </p>
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,228,* Returns the (sample) variance of the available values.
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,230,* <p>This method returns the bias-corrected sample variance (using {@code n - 1} in
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,231,* the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,232,* population variance.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,234,* <p>Double.NaN is returned if no values have been added.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,243,"* Returns the <a href=""http://en.wikibooks.org/wiki/Statistics/Summary/Variance"">"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,244,* population variance</a> of the values that have been added.
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,246,* <p>Double.NaN is returned if no values have been added.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,248,* @return the population variance
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,250,public double getPopulationVariance() {
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,251,Variance populationVariance = new Variance(secondMoment);
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,252,populationVariance.setBiasCorrected(false);
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,253,return populationVariance.getResult();
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,121,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,123,@Override
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,124,public synchronized double getPopulationVariance() {
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,125,return super.getPopulationVariance();
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,19,import org.apache.commons.math.TestUtils;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,21,import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,22,import org.apache.commons.math.stat.descriptive.moment.Mean;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,23,import org.apache.commons.math.stat.descriptive.moment.Variance;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,24,import org.apache.commons.math.stat.descriptive.rank.Max;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,25,import org.apache.commons.math.stat.descriptive.rank.Min;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,26,import org.apache.commons.math.stat.descriptive.summary.Sum;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,27,import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,215,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,216,public void testSummaryConsistency() {
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,217,final DescriptiveStatistics dstats = new DescriptiveStatistics();
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,218,final SummaryStatistics sstats = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,219,final int windowSize = 5;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,220,dstats.setWindowSize(windowSize);
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,221,final double tol = 1E-12;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,222,for (int i = 0; i < 20; i++) {
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,223,dstats.addValue(i);
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,224,sstats.clear();
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,225,double[] values = dstats.getValues();
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,226,for (int j = 0; j < values.length; j++) {
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,227,sstats.addValue(values[j]);
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,229,"TestUtils.assertEquals(dstats.getMean(), sstats.getMean(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,230,"TestUtils.assertEquals(new Mean().evaluate(values), dstats.getMean(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,231,"TestUtils.assertEquals(dstats.getMax(), sstats.getMax(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,232,"TestUtils.assertEquals(new Max().evaluate(values), dstats.getMax(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,233,"TestUtils.assertEquals(dstats.getGeometricMean(), sstats.getGeometricMean(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,234,"TestUtils.assertEquals(new GeometricMean().evaluate(values), dstats.getGeometricMean(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,235,"TestUtils.assertEquals(dstats.getMin(), sstats.getMin(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,236,"TestUtils.assertEquals(new Min().evaluate(values), dstats.getMin(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,237,"TestUtils.assertEquals(dstats.getStandardDeviation(), sstats.getStandardDeviation(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,238,"TestUtils.assertEquals(dstats.getVariance(), sstats.getVariance(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,239,"TestUtils.assertEquals(new Variance().evaluate(values), dstats.getVariance(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,240,"TestUtils.assertEquals(dstats.getSum(), sstats.getSum(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,241,"TestUtils.assertEquals(new Sum().evaluate(values), dstats.getSum(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,242,"TestUtils.assertEquals(dstats.getSumsq(), sstats.getSumsq(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,243,"TestUtils.assertEquals(new SumOfSquares().evaluate(values), dstats.getSumsq(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,244,"TestUtils.assertEquals(dstats.getPopulationVariance(), sstats.getPopulationVariance(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,245,"TestUtils.assertEquals(new Variance(false).evaluate(values), dstats.getPopulationVariance(), tol);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,42,private double popVar = 0.5;
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,66,"Assert.assertEquals(""population var"",popVar,u.getPopulationVariance(),tolerance);"

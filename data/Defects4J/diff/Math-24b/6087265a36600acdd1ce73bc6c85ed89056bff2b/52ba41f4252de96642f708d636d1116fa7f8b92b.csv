is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,17,package org.apache.commons.math3.genetics;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,22,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,23,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,24,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,25,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,26,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,27,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,30,* N-point crossover policy. For each iteration a random crossover point is
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,31,* selected and the first part from each parent is copied to the corresponding
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,32,"* child, and the second parts are copied crosswise."
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,34,* Example (2-point crossover):
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,35,* <pre>
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,36,* -C- denotes a crossover point
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,37,*           -C-       -C-                         -C-        -C-
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,38,* p1 = (1 0  | 1 0 0 1 | 0 1 1)    X    p2 = (0 1  | 1 0 1 0  | 1 1 1)
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,41,*        VV      (**)      VV                  VV      (*)        VV
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,43,* c1 = (1 0  | 1 0 1 0  | 0 1 1)    X   c2 = (0 1  | 1 0 0 1  | 0 1 1)
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,44,* </pre>
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,46,"* This policy works only on {@link AbstractListChromosome}, and therefore it"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,47,"* is parameterized by T. Moreover, the chromosomes must have same lengths."
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,49,* @param <T> generic type of the {@link AbstractListChromosome}s for crossover
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,50,* @since 3.1
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,51,* @version $Id$
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,53,public class NPointCrossover<T> implements CrossoverPolicy {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,55,/** The number of crossover points. */
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,56,private final int crossoverPoints;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,59,* Creates a new {@link NPointCrossover} policy using the given number of points.
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,61,* <p><b>Note</b>: the number of crossover points must be &lt; <code>chromosome length - 1</code>.
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,62,"* This condition can only be checked at runtime, as the chromosome length is not known in advance."
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,63,* </p>
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,65,* @param crossoverPoints the number of crossover points
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,66,* @throws NotStrictlyPositiveException if the number of {@code crossoverPoints} is not
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,67,* strictly positive
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,69,public NPointCrossover(final int crossoverPoints) {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,70,if (crossoverPoints <= 0) {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,71,throw new NotStrictlyPositiveException(crossoverPoints);
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,73,this.crossoverPoints = crossoverPoints;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,77,* Returns the number of crossover points used by this {@link CrossoverPolicy}.
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,79,* @return the number of crossover points
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,81,public int getCrossoverPoints() {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,82,return crossoverPoints;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,86,* Performs a N-point crossover. N random crossover points are selected and are used
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,87,* to divide the parent chromosomes into segments. The segments are copied in alternate
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,88,* order from the two parents to the corresponding child chromosomes.
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,90,* Example (2-point crossover):
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,91,* <pre>
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,92,* -C- denotes a crossover point
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,93,*           -C-       -C-                         -C-        -C-
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,94,* p1 = (1 0  | 1 0 0 1 | 0 1 1)    X    p2 = (0 1  | 1 0 1 0  | 1 1 1)
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,97,*        VV      (**)      VV                  VV      (*)        VV
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,99,* c1 = (1 0  | 1 0 1 0  | 0 1 1)    X   c2 = (0 1  | 1 0 0 1  | 0 1 1)
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,100,* </pre>
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,102,* @param first first parent (p1)
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,103,* @param second second parent (p2)
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,104,"* @return pair of two children (c1,c2)"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,105,* @throws MathIllegalArgumentException iff one of the chromosomes is
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,106,*         not an instance of {@link AbstractListChromosome}
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,107,* @throws DimensionMismatchException if the length of the two chromosomes is different
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,109,"@SuppressWarnings(""unchecked"") // OK because of instanceof checks"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,110,"public ChromosomePair crossover(final Chromosome first, final Chromosome second) {"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,111,if (!(first instanceof AbstractListChromosome<?> && second instanceof AbstractListChromosome<?>)) {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,112,throw new MathIllegalArgumentException(LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME);
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,114,"return mate((AbstractListChromosome<T>) first, (AbstractListChromosome<T>) second);"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,118,"* Helper for {@link #crossover(Chromosome, Chromosome)}. Performs the actual crossover."
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,120,* @param first the first chromosome
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,121,* @param second the second chromosome
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,122,* @return the pair of new chromosomes that resulted from the crossover
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,123,* @throws DimensionMismatchException if the length of the two chromosomes is different
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,124,* @throws NumberIsTooLargeException if the number of crossoverPoints is too large for the
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,125,* actual chromosomes
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,127,"private ChromosomePair mate(final AbstractListChromosome<T> first,"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,128,final AbstractListChromosome<T> second) {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,129,final int length = first.getLength();
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,130,if (length != second.getLength()) {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,131,"throw new DimensionMismatchException(second.getLength(), length);"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,133,if (crossoverPoints >= length) {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,134,"throw new NumberIsTooLargeException(crossoverPoints, length, false);"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,137,// array representations of the parents
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,138,final List<T> parent1Rep = first.getRepresentation();
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,139,final List<T> parent2Rep = second.getRepresentation();
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,140,// and of the children
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,141,final ArrayList<T> child1Rep = new ArrayList<T>(first.getLength());
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,142,final ArrayList<T> child2Rep = new ArrayList<T>(second.getLength());
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,144,final RandomGenerator random = GeneticAlgorithm.getRandomGenerator();
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,146,ArrayList<T> c1 = child1Rep;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,147,ArrayList<T> c2 = child2Rep;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,149,int remainingPoints = crossoverPoints;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,150,int lastIndex = 0;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,151,"for (int i = 0; i < crossoverPoints; i++, remainingPoints--) {"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,152,// select the next crossover point at random
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,153,final int crossoverIndex = 1 + lastIndex + random.nextInt(length - lastIndex - remainingPoints);
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,155,// copy the current segment
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,156,for (int j = lastIndex; j < crossoverIndex; j++) {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,157,c1.add(parent1Rep.get(j));
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,158,c2.add(parent2Rep.get(j));
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,161,// swap the children for the next segment
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,162,ArrayList<T> tmp = c1;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,163,c1 = c2;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,164,c2 = tmp;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,166,lastIndex = crossoverIndex;
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,169,// copy the last segment
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,170,for (int j = lastIndex; j < length; j++) {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,171,c1.add(parent1Rep.get(j));
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,172,c2.add(parent2Rep.get(j));
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,175,"return new ChromosomePair(first.newFixedLengthChromosome(child1Rep),"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,176,second.newFixedLengthChromosome(child2Rep));
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,1,package org.apache.commons.math3.genetics;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,3,import java.util.List;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,5,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,6,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,7,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,8,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,9,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,11,public class NPointCrossoverTest {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,13,@Test(expected = DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,14,public void testCrossoverDimensionMismatchException() {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,15,"final Integer[] p1 = new Integer[] {1,0,1,0,0,1,0,1,1};"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,16,"final Integer[] p2 = new Integer[] {0,1,1,0,1};"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,18,final BinaryChromosome p1c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,19,final BinaryChromosome p2c = new DummyBinaryChromosome(p2);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,21,final CrossoverPolicy cp = new NPointCrossover<Integer>(1);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,22,"cp.crossover(p1c,p2c);"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,25,@Test(expected = NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,26,public void testNumberIsTooLargeException() {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,27,"final Integer[] p1 = new Integer[] {1,0,1,0,0,1,0,1,1};"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,28,"final Integer[] p2 = new Integer[] {0,1,1,0,1,0,1,1,1};"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,30,final BinaryChromosome p1c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,31,final BinaryChromosome p2c = new DummyBinaryChromosome(p2);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,33,final CrossoverPolicy cp = new NPointCrossover<Integer>(15);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,34,"cp.crossover(p1c,p2c);"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,37,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,38,public void testCrossoverInvalidFixedLengthChromosomeFirst() {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,39,"final Integer[] p1 = new Integer[] {1,0,1,0,0,1,0,1,1};"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,40,final BinaryChromosome p1c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,41,final Chromosome p2c = new Chromosome() {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,42,public double fitness() {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,43,// Not important
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,44,return 0;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,48,final CrossoverPolicy cp = new NPointCrossover<Integer>(1);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,49,"cp.crossover(p1c,p2c);"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,52,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,53,public void testCrossoverInvalidFixedLengthChromosomeSecond() {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,54,"final Integer[] p1 = new Integer[] {1,0,1,0,0,1,0,1,1};"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,55,final BinaryChromosome p2c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,56,final Chromosome p1c = new Chromosome() {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,57,public double fitness() {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,58,// Not important
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,59,return 0;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,63,final CrossoverPolicy cp = new NPointCrossover<Integer>(1);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,64,"cp.crossover(p1c,p2c);"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,67,@Test
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,68,public void testCrossover() {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,69,"Integer[] p1 = new Integer[] {1,0,1,0,1,0,1,0,1};"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,70,"Integer[] p2 = new Integer[] {0,1,0,1,0,1,0,1,0};"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,72,BinaryChromosome p1c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,73,BinaryChromosome p2c = new DummyBinaryChromosome(p2);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,75,final int order = 3;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,76,NPointCrossover<Integer> npc = new NPointCrossover<Integer>(order);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,78,"// the two parent chromosomes are different at each position, so it is easy to detect"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,79,// the number of crossovers that happened for each child
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,80,for (int i=0; i<20; i++) {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,81,"ChromosomePair pair = npc.crossover(p1c,p2c);"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,83,Integer[] c1 = new Integer[p1.length];
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,84,Integer[] c2 = new Integer[p2.length];
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,86,c1 = ((BinaryChromosome) pair.getFirst()).getRepresentation().toArray(c1);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,87,c2 = ((BinaryChromosome) pair.getSecond()).getRepresentation().toArray(c2);
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,89,"Assert.assertEquals(order, detectCrossoverPoints(p1c, p2c, (BinaryChromosome) pair.getFirst()));"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,90,"Assert.assertEquals(order, detectCrossoverPoints(p2c, p1c, (BinaryChromosome) pair.getSecond()));"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,94,"private int detectCrossoverPoints(BinaryChromosome p1, BinaryChromosome p2, BinaryChromosome c) {"
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,95,int crossovers = 0;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,96,final int length = p1.getLength();
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,98,final List<Integer> p1Rep = p1.getRepresentation();
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,99,final List<Integer> p2Rep = p2.getRepresentation();
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,100,final List<Integer> cRep = c.getRepresentation();
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,102,List<Integer> rep = p1Rep;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,103,for (int i = 0; i < length; i++) {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,104,if (rep.get(i) != cRep.get(i)) {
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,105,crossovers++;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,106,rep = rep == p1Rep ? p2Rep : p1Rep;
True,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java,110,return crossovers;

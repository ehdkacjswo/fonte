is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,169,clear();  // Clear normal deviate cache
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,161,* Clears the cache used by the default implementation of
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,162,* {@link #nextGaussian}.
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,164,public void clear() {
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,165,nextGaussian = Double.NaN;
True,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,154,clear(); // Clear normal deviate cache
True,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,205,clear(); // Clear normal deviate cache
False,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,49,an.setSeed(seed);
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,49,ran.setSeed(seed);
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,50,clear();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,339,@Test
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,340,public void testSeeding() throws Exception {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,341,// makeGenerator initializes with fixed seed
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,342,RandomGenerator gen = makeGenerator();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,343,RandomGenerator gen1 = makeGenerator();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,344,"checkSameSequence(gen, gen1);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,345,"// reseed, but recreate the second one"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,346,// verifies MATH-723
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,347,gen.setSeed(100);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,348,gen1 = makeGenerator();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,349,gen1.setSeed(100);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,350,"checkSameSequence(gen, gen1);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,353,"private void checkSameSequence(RandomGenerator gen1, RandomGenerator gen2) throws Exception {"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,354,final int len = 11;  // Needs to be an odd number to check MATH-723
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,355,final double[][] values = new double[2][len];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,356,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,357,values[0][i] = gen1.nextDouble();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,359,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,360,values[1][i] = gen2.nextDouble();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,362,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,363,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,364,values[0][i] = gen1.nextFloat();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,366,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,367,values[1][i] = gen2.nextFloat();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,369,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,370,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,371,values[0][i] = gen1.nextInt();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,373,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,374,values[1][i] = gen2.nextInt();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,376,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,377,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,378,values[0][i] = gen1.nextLong();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,380,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,381,values[1][i] = gen2.nextLong();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,383,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,384,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,385,values[0][i] = gen1.nextInt(len);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,387,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,388,values[1][i] = gen2.nextInt(len);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,390,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,391,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,392,values[0][i] = gen1.nextBoolean() ? 1 : 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,394,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,395,values[1][i] = gen2.nextBoolean() ? 1 : 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,397,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,398,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,399,values[0][i] = gen1.nextGaussian();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,401,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,402,values[1][i] = gen2.nextGaussian();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,404,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,4,mport org.apache.commons.math3.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,12,mport org.apache.commons.math3.stat.correlation.Covariance;
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,154,inal double kernel = getKernel(vals);
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,158,astMath.exp(kernel);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,154,getExponentTerm(vals);
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,196, Precomputes some of the multiplications used for determining densities.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,192,* Computes the term used in the exponent (see definition of the distribution).
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,201,rivate double getKernel(final double[] values) {
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,202,ouble k = 0;
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,203,or (int col = 0; col < values.length; col++) {
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,204,or (int v = 0; v < values.length; v++) {
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,205," += covarianceMatrixInverse.getEntry(v, col)"
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,206," FastMath.pow(values[v] - means[v], 2);"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,197,private double getExponentTerm(final double[] values) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,198,final double[] centered = new double[values.length];
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,199,for (int i = 0; i < centered.length; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,200,centered[i] = values[i] - getMeans()[i];
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,202,final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,203,double sum = 0;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,204,for (int i = 0; i < preMultiplied.length; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,205,sum += preMultiplied[i] * centered[i];
False,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,209,eturn -0.5 * k;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,207,return FastMath.exp(-0.5 * sum);
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,18,package org.apache.commons.math3.distribution;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,20,import org.apache.commons.math3.stat.correlation.Covariance;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,21,import org.apache.commons.math3.linear.RealMatrix;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,23,import org.junit.After;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,25,import org.junit.Before;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,26,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,29,* Test cases for {@link MultivariateNormalDistribution}.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,31,public class MultivariateNormalDistributionTest {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,33,* Test the ability of the distribution to report its mean value parameter.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,35,@Test
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,36,public void testGetMean() {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,37,"final double[] mu = { -1.5, 2 };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,38,"final double[][] sigma = { { 2, -1.1 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,39,"{ -1.1, 2 } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,40,"final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,42,final double[] m = d.getMeans();
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,43,for (int i = 0; i < m.length; i++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,44,"Assert.assertEquals(mu[i], m[i], 0);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,49,* Test the ability of the distribution to report its covariance matrix parameter.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,51,@Test
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,52,public void testGetCovarianceMatrix() {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,53,"final double[] mu = { -1.5, 2 };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,54,"final double[][] sigma = { { 2, -1.1 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,55,"{ -1.1, 2 } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,56,"final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,58,final RealMatrix s = d.getCovariances();
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,59,final int dim = d.getDimensions();
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,60,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,61,for (int j = 0; j < dim; j++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,62,"Assert.assertEquals(sigma[i][j], s.getEntry(i, j), 0);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,68,* Test the accuracy of sampling from the distribution.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,70,@Test
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,71,public void testSampling() {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,72,"final double[] mu = { -1.5, 2 };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,73,"final double[][] sigma = { { 2, -1.1 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,74,"{ -1.1, 2 } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,75,"final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,76,d.reseedRandomGenerator(50);
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,78,final int n = 30;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,80,final double[][] samples = d.sample(n);
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,81,final int dim = d.getDimensions();
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,82,final double[] sampleMeans = new double[dim];
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,84,for (int i = 0; i < samples.length; i++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,85,for (int j = 0; j < dim; j++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,86,sampleMeans[j] += samples[i][j];
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,90,final double sampledMeanTolerance = 1e-1;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,91,for (int j = 0; j < dim; j++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,92,sampleMeans[j] /= samples.length;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,93,"Assert.assertEquals(mu[j], sampleMeans[j], sampledMeanTolerance);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,96,final double sampledCovarianceTolerance = 2;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,97,final double[][] sampleSigma = new Covariance(samples).getCovarianceMatrix().getData();
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,98,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,99,for (int j = 0; j < dim; j++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,100,"Assert.assertEquals(sigma[i][j], sampleSigma[i][j], sampledCovarianceTolerance);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,106,* Test the accuracy of the distribution when calculating densities.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,108,@Test
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,109,public void testDensities() {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,110,"final double[] mu = { -1.5, 2 };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,111,"final double[][] sigma = { { 2, -1.1 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,112,"{ -1.1, 2 } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,113,"final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,115,"final double[][] testValues = { { -1.5, 2 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,116,"{ 4, 4 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,117,"{ 1.5, -2 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,118,"{ 0, 0 } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,119,final double[] densities = new double[testValues.length];
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,120,for (int i = 0; i < densities.length; i++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,121,densities[i] = d.density(testValues[i]);
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,124,// From dmvnorm function in R 2.15 CRAN package Mixtools v0.4.5
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,125,"final double[] correctDensities = { 0.09528357207691344,"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,126,"5.80932710124009e-09,"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,127,"0.001387448895173267,"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,128,0.03309922090210541 };
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,130,for (int i = 0; i < testValues.length; i++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,131,"Assert.assertEquals(correctDensities[i], densities[i], 1e-16);"

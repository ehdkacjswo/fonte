is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,28, @version $Revision$ $Date$
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,28,"* @version $Revision$ $Date: 2008-02-08 09:44:11 -0600 (Fri, 08 Feb"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,29,*          2008) $
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,30,ublic class FDistributionImpl
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,31,xtends AbstractContinuousDistribution
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,32,"mplements FDistribution, Serializable  {"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,34,** Serializable version identifier */
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,35,rivate static final long serialVersionUID = -8516354193418641566L;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,37,** The numerator degrees of freedom*/
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,38,rivate double numeratorDegreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,40,** The numerator degrees of freedom*/
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,41,rivate double denominatorDegreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,44, Create a F distribution using the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,45, @param numeratorDegreesOfFreedom the numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,46, @param denominatorDegreesOfFreedom the denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,48,"ublic FDistributionImpl(double numeratorDegreesOfFreedom,"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,49,ouble denominatorDegreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,50,uper();
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,51,etNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,52,etDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,56," For this distribution, X, this method returns P(X &lt; x)."
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,58, The implementation of this method is based on:
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,59, <ul>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,60, <li>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,61," <a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,62," F-Distribution</a>, equation (4).</li>"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,63, </ul>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,65, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,66, @return CDF for this distribution.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,67, @throws MathException if the cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,68,            computed due to convergence or other numerical errors.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,70,ublic double cumulativeProbability(double x) throws MathException {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,71,ouble ret;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,72,f (x <= 0.0) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,73,et = 0.0;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,74, else {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,75,ouble n = getNumeratorDegreesOfFreedom();
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,76,ouble m = getDenominatorDegreesOfFreedom();
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,78,"et = Beta.regularizedBeta((n * x) / (m + n * x),"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,79,".5 * n,"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,80,.5 * m);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,82,eturn ret;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,86," For this distribution, X, this method returns the critical point x, such"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,87, that P(X &lt; x) = <code>p</code>.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,88, <p>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,89, Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.</p>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,91, @param p the desired probability
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,92," @return x, such that P(X &lt; x) = <code>p</code>"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,93, @throws MathException if the inverse cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,94,         computed due to convergence or other numerical errors.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,95, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,96,         probability.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,98,ublic double inverseCumulativeProbability(final double p)
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,99,hrows MathException {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,100,f (p == 0) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,101,eturn 0d;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,103,f (p == 1) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,104,eturn Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,106,eturn super.inverseCumulativeProbability(p);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,110," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,111, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,112, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,114, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,115," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,116,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,118,rotected double getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,119,eturn 0.0;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,123," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,124, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,125, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,127, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,128," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,129,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,131,rotected double getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,132,eturn Double.MAX_VALUE;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,136," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,137, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,138, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,140, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,141, @return initial domain value
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,143,rotected double getInitialDomain(double p) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,144,eturn getDenominatorDegreesOfFreedom() /
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,145,getDenominatorDegreesOfFreedom() - 2.0);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,149, Modify the numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,150, @param degreesOfFreedom the new numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,151, @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,152,         positive.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,154,ublic void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,155,f (degreesOfFreedom <= 0.0) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,156,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,157,"degrees of freedom must be positive."");"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,159,his.numeratorDegreesOfFreedom = degreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,163, Access the numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,164, @return the numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,166,ublic double getNumeratorDegreesOfFreedom() {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,167,eturn numeratorDegreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,171, Modify the denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,172, @param degreesOfFreedom the new denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,173, @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,174,         positive.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,176,ublic void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,177,f (degreesOfFreedom <= 0.0) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,178,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,179,"degrees of freedom must be positive."");"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,181,his.denominatorDegreesOfFreedom = degreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,185, Access the denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,186, @return the denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,188,ublic double getDenominatorDegreesOfFreedom() {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,189,eturn denominatorDegreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,31,public class FDistributionImpl extends AbstractContinuousDistribution implements
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,32,"FDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,34,/** Serializable version identifier */
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,35,private static final long serialVersionUID = -8516354193418641566L;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,37,/** The numerator degrees of freedom */
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,38,private double numeratorDegreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,40,/** The numerator degrees of freedom */
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,41,private double denominatorDegreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,44,* Create a F distribution using the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,46,* @param numeratorDegreesOfFreedom
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,47,*            the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,48,* @param denominatorDegreesOfFreedom
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,49,*            the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,51,"public FDistributionImpl(double numeratorDegreesOfFreedom,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,52,double denominatorDegreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,53,super();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,54,setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,55,setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,59,"* For this distribution, X, this method returns P(X &lt; x)."
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,61,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,62,* <ul>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,63,* <li>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,64,"* <a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,65,"* F-Distribution</a>, equation (4).</li>"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,66,* </ul>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,68,* @param x
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,69,*            the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,70,* @return CDF for this distribution.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,71,* @throws MathException
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,72,*             if the cumulative probability can not be computed due to
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,73,*             convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,75,public double cumulativeProbability(double x) throws MathException {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,76,double ret;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,77,if (x <= 0.0) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,78,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,79,} else {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,80,double n = getNumeratorDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,81,double m = getDenominatorDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,83,"ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m);"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,85,return ret;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,89,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,90,* that P(X &lt; x) = <code>p</code>.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,91,* <p>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,92,* Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,93,* </p>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,95,* @param p
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,96,*            the desired probability
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,97,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,98,* @throws MathException
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,99,*             if the inverse cumulative probability can not be computed due
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,100,*             to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,101,* @throws IllegalArgumentException
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,102,*             if <code>p</code> is not a valid probability.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,104,public double inverseCumulativeProbability(final double p)
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,105,throws MathException {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,106,if (p == 0) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,107,return 0d;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,109,if (p == 1) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,110,return Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,112,return super.inverseCumulativeProbability(p);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,116,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,117,* bracket a CDF root. This method is used by
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,118,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,120,* @param p
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,121,*            the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,122,"* @return domain value lower bound, i.e. P(X &lt; <i>lower bound</i>) &lt;"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,123,*         <code>p</code>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,125,protected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,126,return 0.0;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,130,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,131,* bracket a CDF root. This method is used by
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,132,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,134,* @param p
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,135,*            the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,136,"* @return domain value upper bound, i.e. P(X &lt; <i>upper bound</i>) &gt;"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,137,*         <code>p</code>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,139,protected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,140,return Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,144,"* Access the initial domain value, based on <code>p</code>, used to bracket"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,145,* a CDF root. This method is used by
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,146,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,148,* @param p
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,149,*            the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,150,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,152,protected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,153,double ret = 1.0;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,154,double d = getDenominatorDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,155,if (d > 2.0) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,156,// use mean
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,157,ret = d / (d - 2.0);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,159,return ret;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,163,* Modify the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,165,* @param degreesOfFreedom
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,166,*            the new numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,167,* @throws IllegalArgumentException
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,168,*             if <code>degreesOfFreedom</code> is not positive.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,170,public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,171,if (degreesOfFreedom <= 0.0) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,172,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,173,"""degrees of freedom must be positive."");"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,175,this.numeratorDegreesOfFreedom = degreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,179,* Access the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,181,* @return the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,183,public double getNumeratorDegreesOfFreedom() {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,184,return numeratorDegreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,188,* Modify the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,190,* @param degreesOfFreedom
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,191,*            the new denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,192,* @throws IllegalArgumentException
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,193,*             if <code>degreesOfFreedom</code> is not positive.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,195,public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,196,if (degreesOfFreedom <= 0.0) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,197,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,198,"""degrees of freedom must be positive."");"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,200,this.denominatorDegreesOfFreedom = degreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,204,* Access the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,206,* @return the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,208,public double getDenominatorDegreesOfFreedom() {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,209,return denominatorDegreesOfFreedom;
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,109,public void testSmallDegreesOfFreedom() throws Exception {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,110,org.apache.commons.math.distribution.FDistributionImpl fd =
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,111,new org.apache.commons.math.distribution.FDistributionImpl(
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,112,"1.0, 1.0);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,113,double p = fd.cumulativeProbability(0.975);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,114,double x = fd.inverseCumulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,115,"assertEquals(0.975, x, 1.0e-5);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,117,fd.setDenominatorDegreesOfFreedom(2.0);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,118,p = fd.cumulativeProbability(0.975);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,119,x = fd.inverseCumulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,120,"assertEquals(0.975, x, 1.0e-5);"

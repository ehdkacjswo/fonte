is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,46,/** Maximum allowed iterations for convergence of the transformation. */
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,47,private static final int MAX_ITERATIONS = 100;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,57,** Maximum allowed iterations for convergence of the transformation. */
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,58,rivate final int maxIterations = 100;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,208,f (++iteration > maxIterations) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,208,if (++iteration > MAX_ITERATIONS) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,210,axIterations);
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,210,MAX_ITERATIONS);
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,373,"f (Precision.compareTo(p, 0.0, epsilon) < 0) {"
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,373,if (p < 0.0) {

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,21,import org.apache.commons.math.exception.NonMonotonicSequenceException;
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,298,* <p>
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,299,* Samples the specified univariate real function on the specified interval.
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,300,* </p>
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,301,* <p>
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,302,* The interval is divided equally into {@code n} sections and sample points
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,303,* are taken from {@code min} to {@code max - (max - min) / n}; therefore
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,304,* {@code f} is not sampled at the upper bound {@code max}.
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,305,* </p>
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,307,* @param f the function to be sampled
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,308,* @param min the (inclusive) lower bound of the interval
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,309,* @param max the (exclusive) upper bound of the interval
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,310,* @param n the number of sample points
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,311,* @return the array of samples
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,312,* @throws NonMonotonicSequenceException if the lower bound {@code min} is
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,313,"* greater than, or equal to the upper bound {@code max}"
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,314,* @throws NotStrictlyPositiveException if the number of sample points
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,315,* {@code n} is negative
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,317,"public static double[] sample(UnivariateFunction f,"
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,318,"double min, double max, int n) throws"
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,319,"NonMonotonicSequenceException,"
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,320,NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,322,if (n <= 0) {
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,323,throw new NotStrictlyPositiveException(
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,324,"LocalizedFormats.NOT_POSITIVE_NUMBER_OF_SAMPLES,"
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,325,Integer.valueOf(n));
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,327,if (min >= max) {
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,328,throw new NonMonotonicSequenceException(
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,329,"Double.valueOf(max),"
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,330,"Double.valueOf(min),"
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,331,1);
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,334,double[] s = new double[n];
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,335,double h = (max - min) / n;
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,336,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,337,s[i] = f.value(min + i * h);
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,339,return s;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,19,import org.apache.commons.math.analysis.FunctionUtils;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,190,"inal double[] data = FastFourierTransformer.sample(f, min, max, n);"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,191,"final double[] data = FunctionUtils.sample(f, min, max, n);"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,224,"inal double[] data = FastFourierTransformer.sample(f, min, max, n);"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,225,"final double[] data = FunctionUtils.sample(f, min, max, n);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,22,import org.apache.commons.math.analysis.FunctionUtils;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,183,"inal double[] data = sample(f, min, max, n);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,184,"final double[] data = FunctionUtils.sample(f, min, max, n);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,248,"inal double[] data = sample(f, min, max, n);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,249,"final double[] data = FunctionUtils.sample(f, min, max, n);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,396, <p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,397, Sample the given univariate real function on the given interval.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,398, </p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,399, <p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,400, The interval is divided equally into {@code n} sections and sample points
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,401, are taken from {@code min} to {@code max - (max - min) / N}. Usually
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,402, {@code f(x)} is periodic such that {@code f(min) = f(max)} (note that
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,403," {@code max} is not sampled), but this condition is not required by the"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,404, present method.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,405, </p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,407, @param f the function to be sampled
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,408, @param min the (inclusive) lower bound for the interval
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,409, @param max the (exclusive) upper bound for the interval
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,410, @param n the number of sample points
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,411, @return the samples array
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,412, @throws NonMonotonicSequenceException if the lower bound is greater
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,413," than, or equal to the upper bound"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,414, @throws NotStrictlyPositiveException if the number of sample points
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,415, {@code n} is negative
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,417,"ublic static double[] sample(UnivariateFunction f,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,418,"ouble min, double max, int n) throws"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,419,"onMonotonicSequenceException,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,420,otStrictlyPositiveException {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,422,f (n <= 0) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,423,hrow new NotStrictlyPositiveException(
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,424,"ocalizedFormats.NOT_POSITIVE_NUMBER_OF_SAMPLES,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,425,nteger.valueOf(n));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,427,"erifyInterval(min, max);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,429,ouble[] s = new double[n];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,430,ouble h = (max - min) / n;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,431,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,432,[i] = f.value(min + i * h);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,434,eturn s;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,502, Verifies that the end-points specify an interval.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,504, @param lower the lower end-point
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,505, @param upper the upper end-point
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,506, @throws NonMonotonicSequenceException if the lower end-point is greater
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,507," than, or equal to the upper end-point"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,509,"ublic static void verifyInterval(double lower, double upper)"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,510,hrows NonMonotonicSequenceException {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,512,f (lower >= upper) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,513,hrow new NonMonotonicSequenceException(
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,514,"ouble.valueOf(upper),"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,515,"ouble.valueOf(lower),"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,516,);
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,19,import org.apache.commons.math.analysis.FunctionUtils;
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,65,"eturn fht(FastFourierTransformer.sample(f, min, max, n));"
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,66,"return fht(FunctionUtils.sample(f, min, max, n));"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,97,"ht(FastFourierTransformer.sample(f, min, max, n));"
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,98,"fht(FunctionUtils.sample(f, min, max, n));"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,19,import org.apache.commons.math.analysis.FunctionUtils;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,192,"inal double[] data = FastFourierTransformer.sample(f, min, max, n);"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,193,"final double[] data = FunctionUtils.sample(f, min, max, n);"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,241,"inal double[] data = FastFourierTransformer.sample(f, min, max, n);"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,242,"final double[] data = FunctionUtils.sample(f, min, max, n);"
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,20,mport org.apache.commons.math.analysis.UnivariateFunction;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,21,mport org.apache.commons.math.analysis.function.Identity;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,20,import org.apache.commons.math.analysis.function.Add;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,23,mport org.apache.commons.math.analysis.function.Minus;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,24,mport org.apache.commons.math.analysis.function.Inverse;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,25,mport org.apache.commons.math.analysis.function.Power;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,26,mport org.apache.commons.math.analysis.function.Sin;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,27,mport org.apache.commons.math.analysis.function.Sinc;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,30,mport org.apache.commons.math.analysis.BivariateRealFunction;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,31,mport org.apache.commons.math.analysis.function.Add;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,32,mport org.apache.commons.math.analysis.function.Multiply;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,34,mport org.apache.commons.math.analysis.function.Min;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,25,import org.apache.commons.math.analysis.function.Identity;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,26,import org.apache.commons.math.analysis.function.Inverse;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,27,import org.apache.commons.math.analysis.function.Log;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,29,import org.apache.commons.math.analysis.function.Min;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,30,import org.apache.commons.math.analysis.function.Minus;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,31,import org.apache.commons.math.analysis.function.Multiply;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,37,mport org.apache.commons.math.analysis.function.Log;
False,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,38,mport org.apache.commons.math.analysis.MultivariateFunction;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,33,import org.apache.commons.math.analysis.function.Power;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,34,import org.apache.commons.math.analysis.function.Sin;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,35,import org.apache.commons.math.analysis.function.Sinc;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,36,import org.apache.commons.math.exception.NonMonotonicSequenceException;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,37,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,38,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,207,@Test(expected = NonMonotonicSequenceException.class)
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,208,public void testSampleWrongBounds(){
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,209,"FunctionUtils.sample(new Sin(), Math.PI, 0.0, 10);"
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,212,@Test(expected = NotStrictlyPositiveException.class)
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,213,public void testSampleNegativeNumberOfPoints(){
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,214,"FunctionUtils.sample(new Sin(), 0.0, Math.PI, -1);"
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,217,@Test(expected = NotStrictlyPositiveException.class)
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,218,public void testSampleNullNumberOfPoints(){
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,219,"FunctionUtils.sample(new Sin(), 0.0, Math.PI, 0);"
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,222,@Test
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,223,public void testSample() {
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,224,final int n = 11;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,225,final double min = 0.0;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,226,final double max = Math.PI;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,227,"final double[] actual = FunctionUtils.sample(new Sin(), min, max, n);"
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,228,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,229,final double x = min + (max - min) / n * i;
True,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java,230,"Assert.assertEquals(""x = "" + x, FastMath.sin(x), actual[i], 0.0);"

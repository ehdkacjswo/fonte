is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,31,/ TODO: Add Serializable documentation
False,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,32,/ TODO: Check Serializable implementation
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,18,package org.apache.commons.math.stat.clustering;
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,21,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,23,import java.util.ArrayList;
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,24,import java.util.List;
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,26,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,27,import org.junit.Test;
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,29,public class EuclideanIntegerPointTest {
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,31,@Test
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,32,public void testArrayIsReference() {
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,33,"int[] array = { -3, -2, -1, 0, 1 };"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,34,assertTrue(array == new EuclideanIntegerPoint(array).getPoint());
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,37,@Test
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,38,public void testDistance() {
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,39,"EuclideanIntegerPoint e1 = new EuclideanIntegerPoint(new int[] { -3, -2, -1, 0, 1 });"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,40,"EuclideanIntegerPoint e2 = new EuclideanIntegerPoint(new int[] {  1,  0, -1, 1, 1 });"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,41,"assertEquals(Math.sqrt(21.0), e1.distanceFrom(e2), 1.0e-15);"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,42,"assertEquals(0.0, e1.distanceFrom(e1), 1.0e-15);"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,43,"assertEquals(0.0, e2.distanceFrom(e2), 1.0e-15);"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,46,@Test
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,47,public void testCentroid() {
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,48,List<EuclideanIntegerPoint> list = new ArrayList<EuclideanIntegerPoint>();
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,49,"list.add(new EuclideanIntegerPoint(new int[] {  1,  3 }));"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,50,"list.add(new EuclideanIntegerPoint(new int[] {  2,  2 }));"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,51,"list.add(new EuclideanIntegerPoint(new int[] {  3,  3 }));"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,52,"list.add(new EuclideanIntegerPoint(new int[] {  2,  4 }));"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,53,EuclideanIntegerPoint c = list.get(0).centroidOf(list);
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,54,"assertEquals(2, c.getPoint()[0]);"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,55,"assertEquals(3, c.getPoint()[1]);"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,58,@Test
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,59,public void testSerial() {
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,60,"EuclideanIntegerPoint p = new EuclideanIntegerPoint(new int[] { -3, -2, -1, 0, 1 });"
True,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,61,"assertEquals(p, TestUtils.serializeAndRecover(p));"

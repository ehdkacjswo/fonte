is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,30,rivate static final long serialVersionUID = -3657394299929217890L;
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,30,private static final long serialVersionUID = 7426445244781020663L;
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,36,"his(null, null);"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,36,"super(""Convergence failed"", new Object[0]);"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,41, @param message descriptive error message.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,41,* @param message descriptive error message
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,42,"* @deprecated as of 1.2, replaced by {@link #ConvergenceException(String, Object[])}"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,44,"his(message, null);"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,45,super(message);
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,49,* Constructs an exception with specified formatted detail message.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,50,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,51,* @param pattern format specifier
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,52,* @param arguments format arguments
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,54,"public ConvergenceException(String pattern, Object[] arguments) {"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,55,"super(pattern, arguments);"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,49, @param message descriptive error message.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,50, @param cause root cause.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,60,* @param message descriptive error message
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,61,* @param cause  the exception or error that caused this exception to be thrown
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,62,"* @deprecated as of 1.2, replaced by {@link #ConvergenceException(String, Object[], Throwable)}"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,58, @param throwable caught exception causing this problem
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,70,* @param cause  the exception or error that caused this exception to be thrown
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,60,ublic ConvergenceException(Throwable throwable) {
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,61,"his(null, throwable);"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,72,public ConvergenceException(Throwable cause) {
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,73,super(cause);
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,77,* Constructs an exception with specified formatted detail message and root cause.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,78,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,79,* @param pattern format specifier
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,80,* @param arguments format arguments
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,81,* @param cause  the exception or error that caused this exception to be thrown
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,83,"public ConvergenceException(String pattern, Object[] arguments, Throwable cause) {"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,84,"super(pattern, arguments, cause);"
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,29,** Serializable version identifier */
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,30,rivate static final long serialVersionUID = -317289374378977972L;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,29,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,30,private static final long serialVersionUID = -7619974756160279127L;
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,37, that caused the function evaluation to fail.  Generates an exception
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,38," message of the form ""Evaluation failed for argument = "" + argument."
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,37,* that caused the function evaluation to fail.
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,43,"his(argument, ""Evaluation failed for argument = "" + argument);"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,42,"super(""Evaluation failed for argument = {0}"","
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,43,new Object[] { new Double(argument) });
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,44,this.argument = argument;
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,48, text.  The message text of the exception will start with
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,49, <code>message</code> and be followed by
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,50," "" Evaluation failed for argument = "" + argument."
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,49,* text.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,53,"* @deprecated as of 1.2, replaced by {@link #FunctionEvaluationException(double, String, Object[])"
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,56,"his(argument, message, null);"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,56,super(message);
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,57,this.argument = argument;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,61,* Constructs an exception with specified formatted detail message.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,62,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,63,* @param argument  the failing function argument
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,64,* @param pattern format specifier
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,65,* @param arguments format arguments
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,67,"public FunctionEvaluationException(double argument,"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,68,"String pattern, Object[] arguments) {"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,69,"super(pattern, arguments);"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,70,this.argument = argument;
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,61, The message text of the exception will start with  <code>message</code>
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,62," and be followed by "" Evaluation failed for argument = "" + argument."
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,79,"* @deprecated as of 1.2, replaced by {@link #FunctionEvaluationException(double, String, Object[], Throwable)}"
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,68,"ublic FunctionEvaluationException(double argument, String message,"
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,69,hrowable cause) {
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,70,"uper(message + "" Evaluation failed for argument="" + argument, cause);"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,81,"public FunctionEvaluationException(double argument,"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,82,"String message, Throwable cause) {"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,83,"super(message, cause);"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,88,* Constructs an exception with specified formatted detail message and root cause.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,89,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,90,* @param argument  the failing function argument
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,91,* @param pattern format specifier
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,92,* @param arguments format arguments
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,93,* @param cause  the exception or error that caused this exception to be thrown
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,95,"public FunctionEvaluationException(double argument,"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,96,"String pattern, Object[] arguments,"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,97,Throwable cause) {
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,98,"super(pattern, arguments, cause);"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,99,this.argument = argument;
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,25,ublic class MathConfigurationException extends MathException implements Serializable {
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,27,** Serializable version identifier */
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,28,rivate static final long serialVersionUID = -7958299004965931723L;
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,25,public class MathConfigurationException extends MathException implements Serializable{
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,27,/** Serializable version identifier */
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,28,private static final long serialVersionUID = -4056541384141349722L;
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,34,"his(null, null);"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,33,super();
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,39, @param message message describing the problem
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,38,* @param message descriptive error message
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,39,"* @deprecated as of 1.2, replaced by {@link #MathConfigurationException(String, Object[])}"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,41,public MathConfigurationException(String message) {
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,42,super(message);
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,46,* Constructs an exception with specified formatted detail message.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,47,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,48,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,49,* @param arguments format arguments
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,41,ublic MathConfigurationException(final String message) {
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,42,"his(message, null);"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,51,"public MathConfigurationException(String pattern, Object[] arguments) {"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,52,"super(pattern, arguments);"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,47, @param message message describing the problem
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,48, @param throwable caught exception causing this problem
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,57,* @param message descriptive error message
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,58,* @param cause  the exception or error that caused this exception to be thrown
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,59,"* @deprecated as of 1.2, replaced by {@link #MathConfigurationException(String, Object[], Throwable)}"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,50,ublic MathConfigurationException(
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,51,"inal String message,"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,52,inal Throwable throwable) {
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,53,"uper(message, throwable);"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,61,"public MathConfigurationException(String message, Throwable cause) {"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,62,"super(message, cause);"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,57, Construct an exception with the given root cause.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,58, @param throwable caught exception causing this problem
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,66,* Create an exception with a given root cause.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,67,* @param cause  the exception or error that caused this exception to be thrown
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,60,ublic MathConfigurationException(final Throwable throwable) {
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,61,"his(null, throwable);"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,69,public MathConfigurationException(Throwable cause) {
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,70,super(cause);
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,74,* Constructs an exception with specified formatted detail message and root cause.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,75,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,76,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,77,* @param arguments format arguments
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,78,* @param cause  the exception or error that caused this exception to be thrown
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,80,"public MathConfigurationException(String pattern, Object[] arguments, Throwable cause) {"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,81,"super(pattern, arguments, cause);"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,21,import java.text.MessageFormat;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,22,import java.util.Locale;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,23,import java.util.MissingResourceException;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,24,import java.util.ResourceBundle;
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,35,rivate static final long serialVersionUID = -8594613561393443827L;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,39,private static final long serialVersionUID = -8602234299177097102L;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,57,private static ResourceBundle cachedResources = null;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,60,* Pattern used to build the message.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,62,private final String pattern;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,65,* Arguments used to build the message.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,67,private final Object[] arguments;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,75,* Translate a string to a given locale.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,76,* @param s string to translate
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,77,* @param locale locale into which to translate the string
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,78,* @return translated string or original string
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,79,* for unsupported locales or unknown strings
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,81,"private static String translate(String s, Locale locale) {"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,82,try {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,83,if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,84,// caching the resource bundle
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,85,cachedResources =
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,86,"ResourceBundle.getBundle(""org.apache.commons.math.MessagesResources"", locale);"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,89,if (cachedResources.getLocale().equals(locale)) {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,90,// the value of the resource is the translated string
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,91,return cachedResources.getString(s);
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,94,} catch (MissingResourceException mre) {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,95,// do nothing here
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,98,// the locale is not supported or the resource is unknown
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,99,// don't translate and fall back to using the string as is
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,100,return s;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,110,this.pattern   = null;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,111,this.arguments = new Object[0];
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,120,"* @deprecated as of 1.2, replaced by {@link #MathException(String, Object[])}"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,124,this.pattern   = msg;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,125,this.arguments = new Object[0];
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,130,* Constructs a new <code>MathException</code> with specified
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,131,* formatted detail message.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,132,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,133,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,134,* @param arguments format arguments
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,136,"public MathException(String pattern, Object[] arguments) {"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,137,"super(new MessageFormat(pattern, Locale.US).format(arguments));"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,138,this.pattern   = pattern;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,139,this.arguments = arguments;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,140,this.rootCause = null;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,152,this.pattern   = getMessage();
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,153,this.arguments = new Object[0];
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,164,"* @deprecated as of 1.2, replaced by {@link #MathException(String, Object[], Throwable)}"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,168,this.pattern   = msg;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,169,this.arguments = new Object[0];
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,174,* Constructs a new <code>MathException</code> with specified
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,175,* formatted detail message and nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,176,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,177,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,178,* @param arguments format arguments
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,179,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,180,*                   to be thrown.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,182,"public MathException(String pattern, Object[] arguments, Throwable rootCause) {"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,183,"super(new MessageFormat(pattern, Locale.US).format(arguments));"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,184,this.pattern   = pattern;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,185,this.arguments = arguments;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,186,this.rootCause = rootCause;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,189,/** Gets the pattern used to build the message of this throwable.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,191,* @return the pattern used to build the message of this throwable
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,193,public String getPattern() {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,194,return pattern;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,197,/** Gets the arguments used to build the message of this throwable.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,199,* @return the arguments used to build the message of this throwable
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,201,public Object[] getArguments() {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,202,return arguments;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,205,/** Gets the message in a specified locale.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,207,* @param locale Locale in which the message should be translated
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,209,* @return localized message
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,211,public String getMessage(Locale locale) {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,212,if (pattern == null) {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,213,return null;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,215,"return new MessageFormat(translate(pattern, locale), locale).format(arguments);"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,1,// Licensed to the Apache Software Foundation (ASF) under one
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,2,// or more contributor license agreements.  See the NOTICE file
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,3,// distributed with this work for additional information
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,4,// regarding copyright ownership.  The ASF licenses this file
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,5,"// to you under the Apache License, Version 2.0 (the"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,6,"// ""License""); you may not use this file except in compliance"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,7,// with the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,9,//   http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,11,"// Unless required by applicable law or agreed to in writing,"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,12,// software distributed under the License is distributed on an
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,13,"// ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,14,"// KIND, either express or implied.  See the License for the"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,15,// specific language governing permissions and limitations
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,16,// under the License.
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,18,package org.apache.commons.math;
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,20,import java.util.ListResourceBundle;
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,22,/** French localization message resources for the commons-math library.
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,23,* @version $Revision:$
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,25,public class MessagesResources_fr
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,26,extends ListResourceBundle {
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,28,/** Simple constructor.
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,30,public MessagesResources_fr() {
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,33,public Object[][] getContents() {
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,34,return (Object[][]) contents.clone();
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,37,static final Object[][] contents = {
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,39,// org.apache.commons.math.FunctionEvaluationException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,40,"{ ""Evaluation failed for argument = {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,41,"""Erreur d''\u00e9valuation pour l''argument {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,43,// org.apache.commons.math.DuplicateSampleAbscissaException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,44,"{ ""Abscissa {0} is duplicated at both indices {1} and {2}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,45,"""Abscisse {0} dupliqu\u00e9e aux indices {1} et {2}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,47,// org.apache.commons.math.ConvergenceException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,48,"{ ""Convergence failed"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,49,"""\u00c9chec de convergence"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,51,// org.apache.commons.math.ArgumentOutsideDomainException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,52,"{ ""Argument {0} outside domain [{1} ; {2}]"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,53,"""Argument {0} hors du domaine [{1} ; {2}]"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,55,// org.apache.commons.math.MaxIterationsExceededException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,56,"{ ""Maximal number of iterations ({0}) exceeded"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,57,"""Nombre maximal d''it\u00e9rations ({0}) d\u00e9pass\u00e9"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,59,// org.apache.commons.math.fraction.FractionConversionException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,60,"{ ""Unable to convert {0} to fraction after {1} iterations"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,61,"""Impossible de convertir {0} en fraction apr\u00e8s {1} it\u00e9rations"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,63,// org.apache.commons.math.analysis.UnivariateRealSolverUtils
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,64,"{ ""Number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4},"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,65,""" final a value={5}, final b value={6}, f(a)={7}, f(b)={8}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,66,"""Nombre d''it\u00e9rations = {0}, it\u00e9rations maximum = {1}, valeur initiale = {2},"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,67,""" borne inf\u00e9rieure = {3}, borne sup\u00e9rieure = {4},"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,68,""" valeur a finale = {5}, valeur b finale = {6}, f(a) = {7}, f(b) = {8}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,70,// org.apache.commons.math.util.ContinuedFraction
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,71,"{ ""Continued fraction convergents diverged to +/- infinity for value {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,72,"""Divergence de fraction continue \u00e0 l''infini pour la valeur {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,73,"{ ""Continued fraction convergents failed to converge for value {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,74,"""\u00c9chec de convergence de fraction continue pour la valeur {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,76,// org.apache.commons.math.util.DefaultTransformer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,77,"{ ""Conversion Exception in Transformation, Object is null"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,78,"""Exception de conversion dans une transformation, l''objet est nul"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,79,"{ ""Conversion Exception in Transformation: {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,80,"""Exception de conversion dans une transformation : {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,82,// org.apache.commons.math.estimation.GaussNewtonEstimator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,83,"{ ""unable to converge in {0} iterations"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,84,"""pas de convergence apr\u00e8s {0} it\u00e9rations"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,86,// org.apache.commons.math.estimation.LevenbergMarquardtEstimator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,87,"{ ""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,88,"""trop petite tol\u00e9rance relative sur le co\u00fbt ({0}), aucune r\u00e9duction de la somme des carr\u00e9s n''est possible"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,89,"{ ""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,90,"""trop petite tol\u00e9rance relative sur les param\u00e8tres ({0}), aucune am\u00e9lioration de la solution approximative n''est possible"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,91,"{ ""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,92,"""trop petite tol\u00e9rance sur l''orthogonalit\u00e9 ({0}), la solution est orthogonale \u00e0 la jacobienne"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,93,"{ ""maximal number of evaluations exceeded ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,94,"""nombre maximal d''\u00e9valuations d\u00e9pass\u00e9 ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,96,// org.apache.commons.math.geometry.CardanEulerSingularityException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,97,"{ ""Cardan angles singularity"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,98,"""singularit\u00e9 d''angles de Cardan"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,99,"{ ""Euler angles singularity"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,100,"""singularit\u00e9 d''angles d''Euler"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,102,// org.apache.commons.math.geometry.Rotation
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,103,"{ ""a {0}x{1} matrix cannot be a rotation matrix"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,104,"""une matrice {0}x{1} ne peut pas \u00e9tre une matrice de rotation"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,105,"{ ""the closest orthogonal matrix has a negative determinant {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,106,"""la matrice orthogonale la plus proche a un d\u00e9terminant n\u00e9gatif {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,107,"{ ""unable to orthogonalize matrix in {0} iterations"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,108,"""impossible de rendre la matrice orthogonale en {0} it\u00e9rations"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,110,// org.apache.commons.math.ode.AdaptiveStepsizeIntegrator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,111,"{ ""minimal step size ({0}) reached, integration needs {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,112,"""pas minimal ({0}) atteint, l''int\u00e9gration n\u00e9cessite {1}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,114,"// org.apache.commons.math.ode.GraggBulirschStoerIntegrator,"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,115,"// org.apache.commons.math.ode.RungeKuttaFehlbergIntegrator,"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,116,// org.apache.commons.math.ode.RungeKuttaIntegrator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,117,"{ ""dimensions mismatch: ODE problem has dimension {0},"""
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,118,"+ "" state vector has dimension {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,119,"""incompatibilit\u00e9 de dimensions entre le probl\u00e8me ODE ({0}),"""
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,120,"+ "" et le vecteur d''\u00e9tat ({1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,121,"{ ""too small integration interval: length = {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,122,"""intervalle d''int\u00e9gration trop petit : {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,124,// org.apache.commons.math.optimization.DirectSearchOptimizer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,125,"{ ""none of the {0} start points lead to convergence"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,126,"""aucun des {0} points de d\u00e9part n''aboutit \u00e0 une convergence""  }"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,18,package org.apache.commons.math;
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,22,import java.util.Locale;
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,25,"* @version $Revision: 480442 $ $Date: 2006-11-29 08:21:22 +0100 (mer., 29 nov. 2006) $"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,27,public class ConvergenceExceptionTest extends TestCase {
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,29,public void testConstructor(){
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,30,ConvergenceException ex = new ConvergenceException();
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,31,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,32,assertNotNull(ex.getMessage());
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,33,assertNotNull(ex.getMessage(Locale.FRENCH));
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,34,assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,37,public void testConstructorPatternArguments(){
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,38,"String pattern = ""a {0}x{1} matrix cannot be a rotation matrix"";"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,39,"Object[] arguments = { new Integer(6), new Integer(4) };"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,40,"ConvergenceException ex = new ConvergenceException(pattern, arguments);"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,41,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,42,"assertEquals(pattern, ex.getPattern());"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,43,"assertEquals(arguments.length, ex.getArguments().length);"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,44,for (int i = 0; i < arguments.length; ++i) {
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,45,"assertEquals(arguments[i], ex.getArguments()[i]);"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,47,assertFalse(pattern.equals(ex.getMessage()));
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,48,assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,51,public void testConstructorCause(){
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,52,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,53,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,54,ConvergenceException ex = new ConvergenceException(cause);
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,55,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,58,public void testConstructorPatternArgumentsCause(){
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,59,"String pattern = ""a {0}x{1} matrix cannot be a rotation matrix"";"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,60,"Object[] arguments = { new Integer(6), new Integer(4) };"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,61,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,62,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,63,"ConvergenceException ex = new ConvergenceException(pattern, arguments, cause);"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,64,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,65,"assertEquals(pattern, ex.getPattern());"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,66,"assertEquals(arguments.length, ex.getArguments().length);"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,67,for (int i = 0; i < arguments.length; ++i) {
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,68,"assertEquals(arguments[i], ex.getArguments()[i]);"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,70,assertFalse(pattern.equals(ex.getMessage()));
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,71,assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,20,import java.util.Locale;
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,33,"assertTrue(ex.getMessage().indexOf(""0"") > 0);"
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,34,ublic void testConstructorMessage(){
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,35,"tring msg = ""message"";"
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,36,"unctionEvaluationException  ex = new FunctionEvaluationException(0.0, msg);"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,37,public void testConstructorPatternArguments(){
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,38,"String pattern = ""Evaluation failed for argument = {0}"";"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,39,Object[] arguments = { new Double(0.0) };
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,40,"FunctionEvaluationException ex = new FunctionEvaluationException(0.0, pattern, arguments);"
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,38,ssertTrue(ex.getMessage().startsWith(msg));
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,39,"ssertTrue(ex.getMessage().indexOf(""0"") > 0);"
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,40,"ssertEquals(0.0, ex.getArgument(), 0);"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,42,"assertEquals(pattern, ex.getPattern());"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,43,"assertEquals(arguments.length, ex.getArguments().length);"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,44,for (int i = 0; i < arguments.length; ++i) {
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,45,"assertEquals(arguments[i], ex.getArguments()[i]);"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,47,assertFalse(pattern.equals(ex.getMessage()));
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,48,assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,43,ublic void testConstructorMessageCause(){
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,44,"tring outMsg = ""outer message"";"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,51,public void testConstructorPatternArgumentsCause(){
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,52,"String pattern = ""Evaluation failed for argument = {0}"";"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,53,Object[] arguments = { new Double(0.0) };
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,47,"unctionEvaluationException ex = new FunctionEvaluationException(0, outMsg, cause);"
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,48,ssertTrue(ex.getMessage().startsWith(outMsg));
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,49,"ssertTrue(ex.getMessage().indexOf(""0"") > 0);"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,56,"FunctionEvaluationException ex = new FunctionEvaluationException(0.0, pattern, arguments, cause);"
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,51,"ssertEquals(0.0, ex.getArgument(), 0);"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,58,"assertEquals(pattern, ex.getPattern());"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,59,"assertEquals(arguments.length, ex.getArguments().length);"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,60,for (int i = 0; i < arguments.length; ++i) {
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,61,"assertEquals(arguments[i], ex.getArguments()[i]);"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,63,assertFalse(pattern.equals(ex.getMessage()));
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,64,assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,22,import java.util.Locale;
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,33,assertNull(ex.getMessage(Locale.FRENCH));
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,38,ublic void testConstructorMessage(){
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,39,"tring msg = ""message"";"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,40,athConfigurationException ex = new MathConfigurationException(msg);
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,36,public void testConstructorPatternArguments(){
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,37,"String pattern = ""a {0}x{1} matrix cannot be a rotation matrix"";"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,38,"Object[] arguments = { new Integer(6), new Integer(4) };"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,39,"MathConfigurationException ex = new MathConfigurationException(pattern, arguments);"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,42,"ssertEquals(msg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,41,"assertEquals(pattern, ex.getPattern());"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,42,"assertEquals(arguments.length, ex.getArguments().length);"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,43,for (int i = 0; i < arguments.length; ++i) {
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,44,"assertEquals(arguments[i], ex.getArguments()[i]);"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,46,assertFalse(pattern.equals(ex.getMessage()));
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,47,assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,48,ublic void testConstructorMessageCause(){
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,49,"tring outMsg = ""outer message"";"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,50,public void testConstructorCause(){
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,52,"athConfigurationException ex = new MathConfigurationException(outMsg, cause);"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,53,"ssertEquals(outMsg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,53,MathConfigurationException ex = new MathConfigurationException(cause);
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,60,ublic void testConstructorCause(){
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,57,public void testConstructorPatternArgumentsCause(){
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,58,"String pattern = ""a {0}x{1} matrix cannot be a rotation matrix"";"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,59,"Object[] arguments = { new Integer(6), new Integer(4) };"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,63,athConfigurationException ex = new MathConfigurationException(cause);
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,62,"MathConfigurationException ex = new MathConfigurationException(pattern, arguments, cause);"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,64,"assertEquals(pattern, ex.getPattern());"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,65,"assertEquals(arguments.length, ex.getArguments().length);"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,66,for (int i = 0; i < arguments.length; ++i) {
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,67,"assertEquals(arguments[i], ex.getArguments()[i]);"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,69,assertFalse(pattern.equals(ex.getMessage()));
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,70,assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,25,import java.util.Locale;
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,36,assertNull(ex.getMessage(Locale.FRENCH));
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,42,ublic void testConstructorMessage(){
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,43,"tring msg = ""message"";"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,44,athException ex = new MathException(msg);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,39,public void testConstructorPatternArguments(){
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,40,"String pattern = ""a {0}x{1} matrix cannot be a rotation matrix"";"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,41,"Object[] arguments = { new Integer(6), new Integer(4) };"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,42,"MathException ex = new MathException(pattern, arguments);"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,46,"ssertEquals(msg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,44,"assertEquals(pattern, ex.getPattern());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,45,"assertEquals(arguments.length, ex.getArguments().length);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,46,for (int i = 0; i < arguments.length; ++i) {
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,47,"assertEquals(arguments[i], ex.getArguments()[i]);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,49,assertFalse(pattern.equals(ex.getMessage()));
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,50,assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,52,ublic void testConstructorMessageCause(){
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,53,"tring outMsg = ""outer message"";"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,53,public void testConstructorCause(){
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,56,"athException ex = new MathException(outMsg, cause);"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,57,"ssertEquals(outMsg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,56,MathException ex = new MathException(cause);
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,64,ublic void testConstructorCause(){
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,60,public void testConstructorPatternArgumentsCause(){
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,61,"String pattern = ""a {0}x{1} matrix cannot be a rotation matrix"";"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,62,"Object[] arguments = { new Integer(6), new Integer(4) };"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,67,athException ex = new MathException(cause);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,65,"MathException ex = new MathException(pattern, arguments, cause);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,67,"assertEquals(pattern, ex.getPattern());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,68,"assertEquals(arguments.length, ex.getArguments().length);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,69,for (int i = 0; i < arguments.length; ++i) {
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,70,"assertEquals(arguments[i], ex.getArguments()[i]);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,72,assertFalse(pattern.equals(ex.getMessage()));
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,73,assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,77,athException cause = new MathConfigurationException(inMsg);
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,78,"athException ex = new MathException(outMsg, cause);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,82,"MathException cause = new MathConfigurationException(inMsg, new Object[0]);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,83,"MathException ex = new MathException(outMsg, new Object[0], cause);"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,102,athException cause = new MathConfigurationException(inMsg);
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,103,"athException ex = new MathException(outMsg, cause);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,107,"MathException cause = new MathConfigurationException(inMsg, new Object[0]);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,108,"MathException ex = new MathException(outMsg, new Object[0], cause);"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,108,"rintWriter pw = new PrintWriter(ps, true);"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,114,"rintWriter pw2 = new PrintWriter(ps2, true);"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,18,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,20,mport org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,22,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,25, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,27,ublic class ConvergenceExceptionTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,31,ublic void testConstructor(){
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,32,onvergenceException ex = new ConvergenceException();
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,33,ssertNull(ex.getCause());
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,34,ssertNull(ex.getMessage());
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,40,ublic void testConstructorMessage(){
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,41,"tring msg = ""message"";"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,42,onvergenceException ex = new ConvergenceException(msg);
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,43,ssertNull(ex.getCause());
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,44,"ssertEquals(msg, ex.getMessage());"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,50,ublic void testConstructorMessageCause(){
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,51,"tring outMsg = ""outer message"";"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,52,"tring inMsg = ""inner message"";"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,53,xception cause = new Exception(inMsg);
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,54,"onvergenceException ex = new ConvergenceException(outMsg, cause);"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,55,"ssertEquals(outMsg, ex.getMessage());"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,56,"ssertEquals(cause, ex.getCause());"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,62,ublic void testConstructorCause(){
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,63,"tring inMsg = ""inner message"";"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,64,xception cause = new Exception(inMsg);
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,65,onvergenceException ex = new ConvergenceException(cause);
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,66,"ssertEquals(cause, ex.getCause());"

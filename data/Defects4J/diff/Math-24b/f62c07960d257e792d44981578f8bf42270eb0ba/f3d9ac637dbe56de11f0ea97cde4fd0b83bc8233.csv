is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,24,mport org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,27,import org.apache.commons.math.linear.MatrixUtils;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,29,mport org.apache.commons.math.linear.RealMatrixImpl;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,119,onvertor convertor = new Convertor();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,120,igNtoM.walkInOptimizedOrder(convertor);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,121,ordsieckToMultistep = convertor.getConvertedMatrix();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,118,nordsieckToMultistep = MatrixUtils.bigFractionMatrixToRealMatrix(bigNtoM);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,126,inal FieldMatrix<BigFraction> bigMtoN = solver.getInverse();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,127,onvertor = new Convertor();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,128,igMtoN.walkInOptimizedOrder(convertor);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,129,ultistepToNordsieck = convertor.getConvertedMatrix();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,123,multistepToNordsieck = MatrixUtils.bigFractionMatrixToRealMatrix(solver.getInverse());
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,188,** Convertor for {@link FieldMatrix}/{@link BigFraction}. */
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,189,rivate static class Convertor extends DefaultFieldMatrixPreservingVisitor<BigFraction> {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,191,** Converted array. */
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,192,rivate double[][] data;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,194,** Simple constructor. */
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,195,ublic Convertor() {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,196,uper(BigFraction.ZERO);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,199,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,200,Override
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,201,"ublic void start(int rows, int columns,"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,202,"nt startRow, int endRow, int startColumn, int endColumn) {"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,203,ata = new double[rows][columns];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,206,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,207,Override
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,208,"ublic void visit(int row, int column, BigFraction value) {"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,209,ata[row][column] = value.doubleValue();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,212,** Get the converted matrix.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,213, @return converted matrix
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,215,ealMatrix getConvertedMatrix() {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,216,"eturn new RealMatrixImpl(data, false);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,26,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,62,/** State variation. */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,63,protected double[] stateVariation;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,90,if (interpolator.stateVariation != null) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,91,stateVariation = interpolator.stateVariation.clone();
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,111,stateVariation = new double[y.length];
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,163,* Get the state vector variation from current to interpolated state.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,164,* <p>This method is aimed at computing y(t<sub>interpolation</sub>)
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,165,* -y(t<sub>current</sub>) accurately by avoiding the cancellation errors
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,166,* that would occur if the subtraction were performed explicitly.</p>
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,167,"* <p>The returned vector is a reference to a reused array, so"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,168,* it should not be modified and it should be copied if it needs
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,169,* to be preserved across several calls.</p>
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,170,* @return state vector at time {@link #getInterpolatedTime}
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,171,* @see #getInterpolatedDerivatives()
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,172,* @throws DerivativeException if this call induces an automatic
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,173,* step finalization that throws one
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,175,public double[] getInterpolatedStateVariation()
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,176,throws DerivativeException {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,177,// compute and ignore interpolated state
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,178,// to make sure state variation is computed as a side effect
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,179,getInterpolatedState();
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,180,return stateVariation;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,161,"rrays.fill(interpolatedState, 0.0);"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,190,"Arrays.fill(stateVariation, 0.0);"
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,173,nterpolatedState[j]       += d;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,202,stateVariation[j]          += d;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,179,nterpolatedState[j] += currentState[j] + scaled[j] * normalizedAbscissa;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,208,stateVariation[j] += scaled[j] * normalizedAbscissa;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,209,interpolatedState[j] = currentState[j] + stateVariation[j];
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,245,"// we don't save state variation, it will be recomputed"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,281,stateVariation = new double[n];
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,283,} else {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,284,stateVariation = null;

is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,18,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,21, @version $Revision: 1.13 $ $Date: 2004/05/23 21:34:19 $
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,20,* Test cases for FDistribution.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,21,* Extends ContinuousDistributionAbstractTest.  See class javadoc for
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,22,* ContinuousDistributionAbstractTest for details.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,24,* @version $Revision: 1.14 $ $Date: 2004/05/30 01:39:33 $
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,23,ublic class FDistributionTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,24,rivate FDistribution f;
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,26,public class FDistributionTest extends ContinuousDistributionAbstractTest {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,27, Constructor for ChiSquareDistributionTest.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,29,* Constructor for FDistributionTest.
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,35, @see TestCase#setUp()
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,37,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,38,uper.setUp();
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,39," = DistributionFactory.newInstance().createFDistribution(5.0, 6.0);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,36,//-------------- Implementations for abstract methods -----------------------
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,38,/** Creates the default continuous distribution instance to use in tests. */
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,39,public ContinuousDistribution makeDistribution() {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,40,"return DistributionFactory.newInstance().createFDistribution(5.0, 6.0);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,43,/** Creates the default cumulative probability distribution test input values */
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,44,public double[] makeCumulativeTestPoints() {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,45,// quantiles computed using R version 1.8.1 (linux version)
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,46,"return new double[] {0.03468084d ,0.09370091d, 0.1433137d,"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,47,"0.2020084d, 0.2937283d, 20.80266d, 8.745895d, 5.987565d,"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,48,"4.387374d, 3.107512d};"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,43, @see TestCase#tearDown()
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,45,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,46, = null;
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,47,uper.tearDown();
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,51,/** Creates the default cumulative probability density test expected values */
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,52,public double[] makeCumulativeTestValues() {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,53,"return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,54,"0.990d, 0.975d, 0.950d, 0.900d};"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,50,ublic void testLowerTailProbability() throws Exception {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,51,"estProbability(1.0 / 10.67, .010);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,52,"estProbability(1.0 / 6.98, .025);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,53,"estProbability(1.0 / 4.95, .050);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,54,"estProbability(1.0 / 3.40, .100);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,57,// --------------------- Override tolerance  --------------
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,58,protected void setup() throws Exception {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,59,super.setUp();
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,60,setTolerance(1E-6);
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,57,ublic void testUpperTailProbability() throws Exception {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,58,"estProbability(8.75, .990);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,59,"estProbability(5.99, .975);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,60,"estProbability(4.39, .950);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,61,"estProbability(3.11, .900);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,63,//---------------------------- Additional test cases -------------------------
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,64,ublic void testLowerTailValues() throws Exception {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,65,"estValue(1.0 / 10.67, .010);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,66,"estValue(1.0 / 6.98, .025);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,67,"estValue(1.0 / 4.95, .050);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,68,"estValue(1.0 / 3.40, .100);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,65,public void testCumulativeProbabilityExtremes() throws Exception {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,66,"setCumulativeTestPoints(new double[] {-2, 0});"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,67,"setCumulativeTestValues(new double[] {0, 0});"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,68,verifyCumulativeProbabilities();
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,71,ublic void testUpperTailValues() throws Exception {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,72,"estValue(8.75, .990);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,73,"estValue(5.99, .975);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,74,"estValue(4.39, .950);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,75,"estValue(3.11, .900);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,71,public void testInverseCumulativeProbabilityExtremes() throws Exception {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,72,//TODO: decide what to do about p = 1.  This currently blows up the solver.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,73,setInverseCumulativeTestPoints(new double[] {0});
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,74,setInverseCumulativeTestValues(new double[] {0});
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,75,verifyInverseCumulativeProbabilities();
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,78,public void testDfAccessors() {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,79,FDistribution distribution = (FDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,80,"assertEquals(5d, distribution.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,81,distribution.setNumeratorDegreesOfFreedom(4d);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,82,"assertEquals(4d, distribution.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,83,"assertEquals(6d, distribution.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,84,distribution.setDenominatorDegreesOfFreedom(4d);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,85,"assertEquals(4d, distribution.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,86,try {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,87,distribution.setNumeratorDegreesOfFreedom(0d);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,88,"fail(""Expecting IllegalArgumentException for df = 0"");"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,89,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,90,// expected
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,92,try {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,93,distribution.setDenominatorDegreesOfFreedom(0d);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,94,"fail(""Expecting IllegalArgumentException for df = 0"");"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,95,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,96,// expected
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,78,"rivate void testProbability(double x, double expected) throws Exception {"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,79,ouble actual = f.cumulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,80,"ssertEquals(""probability for "" + x, expected, actual, 1e-3);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,83,"rivate void testValue(double expected, double p) throws Exception {"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,84,ouble actual = f.inverseCumulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,85,"ssertEquals(""value for "" + p, expected, actual, 1e-2);"

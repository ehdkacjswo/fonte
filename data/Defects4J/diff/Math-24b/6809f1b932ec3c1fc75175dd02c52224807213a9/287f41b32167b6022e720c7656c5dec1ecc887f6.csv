is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,18,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,20,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,21,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,25, Calculates the Cholesky decomposition of a matrix.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,26, <p>The Cholesky decomposition of a real symmetric positive-definite
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,27, matrix A consists of a lower triangular matrix L with same size such
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,28," that: A = LL<sup>T</sup>. In a sense, this is the square root of A.</p>"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,29, <p>This class is based on the class with similar name from the
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,30," <a href=""http://math.nist.gov/javanumerics/jama/"">JAMA</a> library, with the"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,31, following changes:</p>
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,32, <ul>
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,33,"   <li>a {@link #getLT() getLT} method has been added,</li>"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,34,"   <li>the {@code isspd} method has been removed, since the constructor of"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,35,   this class throws a {@link NonPositiveDefiniteMatrixException} when a
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,36,"   matrix cannot be decomposed,</li>"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,37,"   <li>a {@link #getDeterminant() getDeterminant} method has been added,</li>"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,38,   <li>the {@code solve} method has been replaced by a {@link #getSolver()
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,39,   getSolver} method and the equivalent method provided by the returned
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,40,   {@link DecompositionSolver}.</li>
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,41, </ul>
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,43," @see <a href=""http://mathworld.wolfram.com/CholeskyDecomposition.html"">MathWorld</a>"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,44," @see <a href=""http://en.wikipedia.org/wiki/Cholesky_decomposition"">Wikipedia</a>"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,45, @version $Id$
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,46, @since 2.0
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,48,ublic class CholeskyDecomposition {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,50, Default threshold above which off-diagonal elements are considered too different
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,51, and matrix not symmetric.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,53,ublic static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,55, Default threshold below which diagonal elements are considered null
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,56, and matrix not positive definite.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,58,ublic static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,59,** Row-oriented storage for L<sup>T</sup> matrix data. */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,60,rivate double[][] lTData;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,61,** Cached value of L. */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,62,rivate RealMatrix cachedL;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,63,** Cached value of LT. */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,64,rivate RealMatrix cachedLT;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,67, Calculates the Cholesky decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,68, <p>
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,69, Calling this constructor is equivalent to call {@link
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,70," #CholeskyDecompositionImpl(RealMatrix, double, double)} with the"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,71, thresholds set to the default values {@link
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,72, #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD} and {@link
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,73, #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD}
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,74, </p>
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,75, @param matrix the matrix to decompose
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,76, @throws NonSquareMatrixException if the matrix is not square.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,77, @throws NonSymmetricMatrixException if the matrix is not symmetric.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,78, @throws NonPositiveDefiniteMatrixException if the matrix is not
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,79, strictly positive definite.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,80," @see #CholeskyDecompositionImpl(RealMatrix, double, double)"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,81, @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,82, @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,84,ublic CholeskyDecomposition(final RealMatrix matrix) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,85,"his(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,86,EFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,90, Calculates the Cholesky decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,91, @param matrix the matrix to decompose
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,92, @param relativeSymmetryThreshold threshold above which off-diagonal
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,93, elements are considered too different and matrix not symmetric
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,94, @param absolutePositivityThreshold threshold below which diagonal
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,95, elements are considered null and matrix not positive definite
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,96, @throws NonSquareMatrixException if the matrix is not square.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,97, @throws NonSymmetricMatrixException if the matrix is not symmetric.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,98, @throws NonPositiveDefiniteMatrixException if the matrix is not
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,99, strictly positive definite.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,100, @see #CholeskyDecompositionImpl(RealMatrix)
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,101, @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,102, @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,104,"ublic CholeskyDecomposition(final RealMatrix matrix,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,105,"inal double relativeSymmetryThreshold,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,106,inal double absolutePositivityThreshold) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,107,f (!matrix.isSquare()) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,108,"hrow new NonSquareMatrixException(matrix.getRowDimension(),"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,109,atrix.getColumnDimension());
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,112,inal int order = matrix.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,113,TData   = matrix.getData();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,114,achedL  = null;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,115,achedLT = null;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,117,/ check the matrix before transformation
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,118,or (int i = 0; i < order; ++i) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,119,inal double[] lI = lTData[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,121,/ check off-diagonal elements (and reset them to 0)
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,122,or (int j = i + 1; j < order; ++j) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,123,inal double[] lJ = lTData[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,124,inal double lIJ = lI[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,125,inal double lJI = lJ[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,126,inal double maxDelta =
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,127,"elativeSymmetryThreshold * FastMath.max(FastMath.abs(lIJ), FastMath.abs(lJI));"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,128,f (FastMath.abs(lIJ - lJI) > maxDelta) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,129,"hrow new NonSymmetricMatrixException(i, j, relativeSymmetryThreshold);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,131,J[i] = 0;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,135,/ transform the matrix
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,136,or (int i = 0; i < order; ++i) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,138,inal double[] ltI = lTData[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,140,/ check diagonal element
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,141,f (ltI[i] <= absolutePositivityThreshold) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,142,"hrow new NonPositiveDefiniteMatrixException(ltI[i], i, absolutePositivityThreshold);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,145,tI[i] = FastMath.sqrt(ltI[i]);
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,146,inal double inverse = 1.0 / ltI[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,148,or (int q = order - 1; q > i; --q) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,149,tI[q] *= inverse;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,150,inal double[] ltQ = lTData[q];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,151,or (int p = q; p < order; ++p) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,152,tQ[p] -= ltI[q] * ltI[p];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,159, Returns the matrix L of the decomposition.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,160, <p>L is an lower-triangular matrix</p>
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,161, @return the L matrix
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,163,ublic RealMatrix getL() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,164,f (cachedL == null) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,165,achedL = getLT().transpose();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,167,eturn cachedL;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,171, Returns the transpose of the matrix L of the decomposition.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,172, <p>L<sup>T</sup> is an upper-triangular matrix</p>
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,173, @return the transpose of the matrix L of the decomposition
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,175,ublic RealMatrix getLT() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,177,f (cachedLT == null) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,178,achedLT = MatrixUtils.createRealMatrix(lTData);
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,181,/ return the cached matrix
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,182,eturn cachedLT;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,186, Return the determinant of the matrix
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,187, @return determinant of the matrix
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,189,ublic double getDeterminant() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,190,ouble determinant = 1.0;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,191,or (int i = 0; i < lTData.length; ++i) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,192,ouble lTii = lTData[i][i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,193,eterminant *= lTii * lTii;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,195,eturn determinant;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,199, Get a solver for finding the A &times; X = B solution in least square sense.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,200, @return a solver
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,202,ublic DecompositionSolver getSolver() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,203,eturn new Solver(lTData);
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,206,** Specialized solver. */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,207,rivate static class Solver implements DecompositionSolver {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,208,** Row-oriented storage for L<sup>T</sup> matrix data. */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,209,rivate final double[][] lTData;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,212, Build a solver from decomposed matrix.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,213, @param lTData row-oriented storage for L<sup>T</sup> matrix data
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,215,rivate Solver(final double[][] lTData) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,216,his.lTData = lTData;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,219,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,220,ublic boolean isNonSingular() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,221,"/ if we get this far, the matrix was positive definite, hence non-singular"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,222,eturn true;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,225,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,226,ublic RealVector solve(final RealVector b) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,227,inal int m = lTData.length;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,228,f (b.getDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,229,"hrow new DimensionMismatchException(b.getDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,232,inal double[] x = b.toArray();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,234,/ Solve LY = b
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,235,or (int j = 0; j < m; j++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,236,inal double[] lJ = lTData[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,237,[j] /= lJ[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,238,inal double xJ = x[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,239,or (int i = j + 1; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,240,[i] -= xJ * lJ[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,244,/ Solve LTX = Y
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,245,or (int j = m - 1; j >= 0; j--) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,246,[j] /= lTData[j][j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,247,inal double xJ = x[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,248,or (int i = 0; i < j; i++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,249,[i] -= xJ * lTData[i][j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,253,"eturn new ArrayRealVector(x, false);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,256,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,257,ublic RealMatrix solve(RealMatrix b) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,258,inal int m = lTData.length;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,259,f (b.getRowDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,260,"hrow new DimensionMismatchException(b.getRowDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,263,inal int nColB = b.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,264,inal double[][] x = b.getData();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,266,/ Solve LY = b
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,267,or (int j = 0; j < m; j++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,268,inal double[] lJ = lTData[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,269,inal double lJJ = lJ[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,270,inal double[] xJ = x[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,271,or (int k = 0; k < nColB; ++k) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,272,J[k] /= lJJ;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,274,or (int i = j + 1; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,275,inal double[] xI = x[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,276,inal double lJI = lJ[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,277,or (int k = 0; k < nColB; ++k) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,278,I[k] -= xJ[k] * lJI;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,283,/ Solve LTX = Y
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,284,or (int j = m - 1; j >= 0; j--) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,285,inal double lJJ = lTData[j][j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,286,inal double[] xJ = x[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,287,or (int k = 0; k < nColB; ++k) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,288,J[k] /= lJJ;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,290,or (int i = 0; i < j; i++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,291,inal double[] xI = x[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,292,inal double lIJ = lTData[i][j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,293,or (int k = 0; k < nColB; ++k) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,294,I[k] -= xJ[k] * lIJ;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,299,eturn new Array2DRowRealMatrix(x);
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,302,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,303,ublic RealMatrix getInverse() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,304,eturn solve(MatrixUtils.createRealIdentityMatrix(lTData.length));
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,18,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,21,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,25,* Calculates the Cholesky decomposition of a matrix.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,26,* <p>The Cholesky decomposition of a real symmetric positive-definite
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,27,* matrix A consists of a lower triangular matrix L with same size such
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,28,"* that: A = LL<sup>T</sup>. In a sense, this is the square root of A.</p>"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,29,* <p>This class is based on the class with similar name from the
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,30,"* <a href=""http://math.nist.gov/javanumerics/jama/"">JAMA</a> library, with the"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,31,* following changes:</p>
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,32,* <ul>
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,33,"*   <li>a {@link #getLT() getLT} method has been added,</li>"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,34,"*   <li>the {@code isspd} method has been removed, since the constructor of"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,35,*   this class throws a {@link NonPositiveDefiniteMatrixException} when a
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,36,"*   matrix cannot be decomposed,</li>"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,37,"*   <li>a {@link #getDeterminant() getDeterminant} method has been added,</li>"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,38,*   <li>the {@code solve} method has been replaced by a {@link #getSolver()
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,39,*   getSolver} method and the equivalent method provided by the returned
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,40,*   {@link DecompositionSolver}.</li>
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,41,* </ul>
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,43,"* @see <a href=""http://mathworld.wolfram.com/CholeskyDecomposition.html"">MathWorld</a>"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,44,"* @see <a href=""http://en.wikipedia.org/wiki/Cholesky_decomposition"">Wikipedia</a>"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,45,* @version $Id: CholeskyDecomposition.java 1173481 2011-09-21 03:45:37Z celestin $
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,46,* @since 2.0 (changed to concrete class in 3.0)
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,48,public class CholeskyDecomposition {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,50,* Default threshold above which off-diagonal elements are considered too different
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,51,* and matrix not symmetric.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,53,public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,55,* Default threshold below which diagonal elements are considered null
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,56,* and matrix not positive definite.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,58,public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,59,/** Row-oriented storage for L<sup>T</sup> matrix data. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,60,private double[][] lTData;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,61,/** Cached value of L. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,62,private RealMatrix cachedL;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,63,/** Cached value of LT. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,64,private RealMatrix cachedLT;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,67,* Calculates the Cholesky decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,68,* <p>
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,69,* Calling this constructor is equivalent to call {@link
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,70,"* #CholeskyDecompositionImpl(RealMatrix, double, double)} with the"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,71,* thresholds set to the default values {@link
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,72,* #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD} and {@link
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,73,* #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD}
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,74,* </p>
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,75,* @param matrix the matrix to decompose
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,76,* @throws NonSquareMatrixException if the matrix is not square.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,77,* @throws NonSymmetricMatrixException if the matrix is not symmetric.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,78,* @throws NonPositiveDefiniteMatrixException if the matrix is not
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,79,* strictly positive definite.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,80,"* @see #CholeskyDecompositionImpl(RealMatrix, double, double)"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,81,* @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,82,* @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,84,public CholeskyDecomposition(final RealMatrix matrix) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,85,"this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,86,DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,90,* Calculates the Cholesky decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,91,* @param matrix the matrix to decompose
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,92,* @param relativeSymmetryThreshold threshold above which off-diagonal
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,93,* elements are considered too different and matrix not symmetric
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,94,* @param absolutePositivityThreshold threshold below which diagonal
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,95,* elements are considered null and matrix not positive definite
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,96,* @throws NonSquareMatrixException if the matrix is not square.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,97,* @throws NonSymmetricMatrixException if the matrix is not symmetric.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,98,* @throws NonPositiveDefiniteMatrixException if the matrix is not
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,99,* strictly positive definite.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,100,* @see #CholeskyDecompositionImpl(RealMatrix)
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,101,* @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,102,* @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,104,"public CholeskyDecomposition(final RealMatrix matrix,"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,105,"final double relativeSymmetryThreshold,"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,106,final double absolutePositivityThreshold) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,107,if (!matrix.isSquare()) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,108,"throw new NonSquareMatrixException(matrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,109,matrix.getColumnDimension());
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,112,final int order = matrix.getRowDimension();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,113,lTData   = matrix.getData();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,114,cachedL  = null;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,115,cachedLT = null;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,117,// check the matrix before transformation
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,118,for (int i = 0; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,119,final double[] lI = lTData[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,121,// check off-diagonal elements (and reset them to 0)
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,122,for (int j = i + 1; j < order; ++j) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,123,final double[] lJ = lTData[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,124,final double lIJ = lI[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,125,final double lJI = lJ[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,126,final double maxDelta =
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,127,"relativeSymmetryThreshold * FastMath.max(FastMath.abs(lIJ), FastMath.abs(lJI));"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,128,if (FastMath.abs(lIJ - lJI) > maxDelta) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,129,"throw new NonSymmetricMatrixException(i, j, relativeSymmetryThreshold);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,131,lJ[i] = 0;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,135,// transform the matrix
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,136,for (int i = 0; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,138,final double[] ltI = lTData[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,140,// check diagonal element
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,141,if (ltI[i] <= absolutePositivityThreshold) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,142,"throw new NonPositiveDefiniteMatrixException(ltI[i], i, absolutePositivityThreshold);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,145,ltI[i] = FastMath.sqrt(ltI[i]);
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,146,final double inverse = 1.0 / ltI[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,148,for (int q = order - 1; q > i; --q) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,149,ltI[q] *= inverse;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,150,final double[] ltQ = lTData[q];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,151,for (int p = q; p < order; ++p) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,152,ltQ[p] -= ltI[q] * ltI[p];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,159,* Returns the matrix L of the decomposition.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,160,* <p>L is an lower-triangular matrix</p>
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,161,* @return the L matrix
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,163,public RealMatrix getL() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,164,if (cachedL == null) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,165,cachedL = getLT().transpose();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,167,return cachedL;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,171,* Returns the transpose of the matrix L of the decomposition.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,172,* <p>L<sup>T</sup> is an upper-triangular matrix</p>
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,173,* @return the transpose of the matrix L of the decomposition
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,175,public RealMatrix getLT() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,177,if (cachedLT == null) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,178,cachedLT = MatrixUtils.createRealMatrix(lTData);
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,181,// return the cached matrix
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,182,return cachedLT;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,186,* Return the determinant of the matrix
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,187,* @return determinant of the matrix
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,189,public double getDeterminant() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,190,double determinant = 1.0;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,191,for (int i = 0; i < lTData.length; ++i) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,192,double lTii = lTData[i][i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,193,determinant *= lTii * lTii;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,195,return determinant;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,199,* Get a solver for finding the A &times; X = B solution in least square sense.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,200,* @return a solver
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,202,public DecompositionSolver getSolver() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,203,return new Solver(lTData);
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,206,/** Specialized solver. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,207,private static class Solver implements DecompositionSolver {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,208,/** Row-oriented storage for L<sup>T</sup> matrix data. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,209,private final double[][] lTData;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,212,* Build a solver from decomposed matrix.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,213,* @param lTData row-oriented storage for L<sup>T</sup> matrix data
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,215,private Solver(final double[][] lTData) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,216,this.lTData = lTData;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,219,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,220,public boolean isNonSingular() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,221,"// if we get this far, the matrix was positive definite, hence non-singular"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,222,return true;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,225,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,226,public RealVector solve(final RealVector b) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,227,final int m = lTData.length;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,228,if (b.getDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,229,"throw new DimensionMismatchException(b.getDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,232,final double[] x = b.toArray();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,234,// Solve LY = b
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,235,for (int j = 0; j < m; j++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,236,final double[] lJ = lTData[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,237,x[j] /= lJ[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,238,final double xJ = x[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,239,for (int i = j + 1; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,240,x[i] -= xJ * lJ[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,244,// Solve LTX = Y
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,245,for (int j = m - 1; j >= 0; j--) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,246,x[j] /= lTData[j][j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,247,final double xJ = x[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,248,for (int i = 0; i < j; i++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,249,x[i] -= xJ * lTData[i][j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,253,"return new ArrayRealVector(x, false);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,256,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,257,public RealMatrix solve(RealMatrix b) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,258,final int m = lTData.length;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,259,if (b.getRowDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,260,"throw new DimensionMismatchException(b.getRowDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,263,final int nColB = b.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,264,final double[][] x = b.getData();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,266,// Solve LY = b
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,267,for (int j = 0; j < m; j++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,268,final double[] lJ = lTData[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,269,final double lJJ = lJ[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,270,final double[] xJ = x[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,271,for (int k = 0; k < nColB; ++k) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,272,xJ[k] /= lJJ;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,274,for (int i = j + 1; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,275,final double[] xI = x[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,276,final double lJI = lJ[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,277,for (int k = 0; k < nColB; ++k) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,278,xI[k] -= xJ[k] * lJI;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,283,// Solve LTX = Y
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,284,for (int j = m - 1; j >= 0; j--) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,285,final double lJJ = lTData[j][j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,286,final double[] xJ = x[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,287,for (int k = 0; k < nColB; ++k) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,288,xJ[k] /= lJJ;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,290,for (int i = 0; i < j; i++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,291,final double[] xI = x[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,292,final double lIJ = lTData[i][j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,293,for (int k = 0; k < nColB; ++k) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,294,xI[k] -= xJ[k] * lIJ;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,299,return new Array2DRowRealMatrix(x);
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,302,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,303,public RealMatrix getInverse() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,304,return solve(MatrixUtils.createRealIdentityMatrix(lTData.length));

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,22,mport org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolator;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,201," @see DividedDifferenceInterpolator#computeDividedDifference(double[],"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,200,"* @see org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolator#computeDividedDifference(double[],"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,24,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,159, @exception InvalidMatrixException (wrapping a {@link ConvergenceException}
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,160, if algorithm fails to converge
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,158,* @exception InvalidMatrixException (wrapping a {@link
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,159,* org.apache.commons.math.ConvergenceException} if algorithm fails to converge
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,183, @exception InvalidMatrixException (wrapping a {@link ConvergenceException}
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,184, if algorithm fails to converge
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,182,* @exception InvalidMatrixException (wrapping a {@link
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,183,* org.apache.commons.math.ConvergenceException} if algorithm fails to converge
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,229, @exception InvalidMatrixException (wrapping a {@link ConvergenceException}
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,230, if algorithm fails to converge
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,228,* @exception InvalidMatrixException (wrapping a {@link
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,229,* org.apache.commons.math.ConvergenceException} if algorithm fails to converge
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,20,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,82, @exception InvalidMatrixException (wrapping a {@link ConvergenceException}
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,83, if algorithm fails to converge
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,81,* @exception InvalidMatrixException (wrapping a {@link
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,82,* org.apache.commons.math.ConvergenceException} if algorithm fails to converge
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,25,mport org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,78, AdaptiveStepsizeIntegrator adaptive step size integrators}).</p>
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,77,* org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator adaptive
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,78,* step size integrators}).</p>
False,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,20,mport org.apache.commons.math.ode.events.EventHandler;
False,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,21,mport org.apache.commons.math.ode.sampling.StepHandler;
False,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,32, @see StepHandler
False,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,33, @see EventHandler
True,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,29,* @see org.apache.commons.math.ode.sampling.StepHandler
True,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,30,* @see org.apache.commons.math.ode.events.EventHandler
False,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,53," target, but may be different if some {@link EventHandler} stops it at some point."
True,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,50,"* target, but may be different if some {@link"
True,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,51,* org.apache.commons.math.ode.events.EventHandler} stops it at some point.
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,20,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,21,mport org.apache.commons.math.ode.sampling.StepHandler;
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,76, FirstOrderDifferentialEquations#computeDerivatives} method).</p>
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,73,* org.apache.commons.math.ode.FirstOrderDifferentialEquations#computeDerivatives}
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,74,* method).</p>
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,110, FirstOrderDifferentialEquations differential equations} to switch
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,111," the derivatives computation in case of discontinuity), or to"
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,112," direct the integrator to either stop or continue integration,"
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,113, possibly with a reset state or derivatives.</p>
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,108,* org.apache.commons.math.ode.FirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,109,* differential equations} to switch the derivatives computation in
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,110,"* case of discontinuity), or to direct the integrator to either stop"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,111,"* or continue integration, possibly with a reset state or derivatives.</p>"
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,118,   StepHandler#handleStep handleStep} method set to true and the
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,119,"   integration will be stopped,</li>"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,116,*   org.apache.commons.math.ode.sampling.StepHandler#handleStep handleStep}
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,117,"*   method set to true and the integration will be stopped,</li>"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,21,mport org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,51, {@link AbstractStepInterpolator#reinitialize} method should be called
False,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,52, before using the instance in order to initialize the internal arrays. This
False,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,53, constructor is used only in order to delay the initialization in
False,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,54, some cases. The {@link RungeKuttaIntegrator} class uses the
False,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,55, prototyping design pattern to create the step interpolators by
False,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,56, cloning an uninitialized model and latter initializing the copy.
True,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,50,* {@link
True,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,51,* org.apache.commons.math.ode.sampling.AbstractStepInterpolator#reinitialize}
True,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,52,* method should be called before using the instance in order to
True,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,53,* initialize the internal arrays. This constructor is used only
True,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,54,* in order to delay the initialization in some cases. The {@link
True,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,55,* RungeKuttaIntegrator} class uses the prototyping design pattern
True,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,56,* to create the step interpolators by cloning an uninitialized model
True,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,57,* and later initializing the copy.
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,21,mport org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,53, {@link AbstractStepInterpolator#reinitialize} method should be called
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,54, before using the instance in order to initialize the internal arrays. This
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,55, constructor is used only in order to delay the initialization in
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,56, some cases. The {@link RungeKuttaIntegrator} class uses the
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,57, prototyping design pattern to create the step interpolators by
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,58, cloning an uninitialized model and latter initializing the copy.
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,52,* {@link
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,53,* org.apache.commons.math.ode.sampling.AbstractStepInterpolator#reinitialize}
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,54,* method should be called before using the instance in order to
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,55,* initialize the internal arrays. This constructor is used only
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,56,* in order to delay the initialization in some cases. The {@link
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,57,* RungeKuttaIntegrator} class uses the prototyping design pattern
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,58,* to create the step interpolators by cloning an uninitialized model
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,59,* and later initializing the copy.
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,21,mport org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,39, {@link AbstractStepInterpolator#reinitialize} method should be called
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,40, before using the instance in order to initialize the internal arrays. This
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,41, constructor is used only in order to delay the initialization in
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,42, some cases. The {@link EmbeddedRungeKuttaIntegrator} uses the
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,43, prototyping design pattern to create the step interpolators by
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,44, cloning an uninitialized model and latter initializing the copy.
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,38,* {@link
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,39,* org.apache.commons.math.ode.sampling.AbstractStepInterpolator#reinitialize}
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,40,* method should be called before using the instance in order to
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,41,* initialize the internal arrays. This constructor is used only
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,42,* in order to delay the initialization in some cases. The {@link
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,43,* EmbeddedRungeKuttaIntegrator} uses the prototyping design pattern
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,44,* to create the step interpolators by cloning an uninitialized model
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,45,* and later initializing the copy.
False,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,21,mport org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,50, {@link AbstractStepInterpolator#reinitialize} method should be called
False,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,51, before using the instance in order to initialize the internal arrays. This
False,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,52, constructor is used only in order to delay the initialization in
False,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,53, some cases. The {@link RungeKuttaIntegrator} class uses the
False,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,54, prototyping design pattern to create the step interpolators by
False,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,55, cloning an uninitialized model and latter initializing the copy.
True,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,49,* {@link
True,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,50,* org.apache.commons.math.ode.sampling.AbstractStepInterpolator#reinitialize}
True,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,51,* method should be called before using the instance in order to
True,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,52,* initialize the internal arrays. This constructor is used only
True,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,53,* in order to delay the initialization in some cases. The {@link
True,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,54,* RungeKuttaIntegrator} class uses the prototyping design pattern
True,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,55,* to create the step interpolators by cloning an uninitialized model
True,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,56,* and later initializing the copy.
False,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,21,mport org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,55, {@link AbstractStepInterpolator#reinitialize} method should be called
False,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,56, before using the instance in order to initialize the internal arrays. This
False,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,57, constructor is used only in order to delay the initialization in
False,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,58, some cases. The {@link RungeKuttaIntegrator} class uses the
False,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,59, prototyping design pattern to create the step interpolators by
False,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,60, cloning an uninitialized model and latter initializing the copy.
True,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,54,* {@link
True,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,55,* org.apache.commons.math.ode.sampling.AbstractStepInterpolator#reinitialize}
True,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,56,* method should be called before using the instance in order to
True,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,57,* initialize the internal arrays. This constructor is used only
True,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,58,* in order to delay the initialization in some cases. The {@link
True,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,59,* RungeKuttaIntegrator} class uses the prototyping design pattern
True,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,60,* to create the step interpolators by cloning an uninitialized model
True,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,61,* and later initializing the copy.
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,26,mport org.apache.commons.math.ode.FirstOrderIntegrator;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,27,mport org.apache.commons.math.ode.SecondOrderIntegrator;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,28,mport org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,38, @see FirstOrderIntegrator
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,39, @see SecondOrderIntegrator
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,35,* @see org.apache.commons.math.ode.FirstOrderIntegrator
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,36,* @see org.apache.commons.math.ode.SecondOrderIntegrator
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,87, EmbeddedRungeKuttaIntegrator} uses the prototyping design pattern
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,88, to create the step interpolators by cloning an uninitialized
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,89, model and latter initializing the copy.
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,84,* org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator}
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,85,* class uses the prototyping design pattern to create the step
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,86,* interpolators by cloning an uninitialized model and latter
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,87,* initializing the copy.
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,25,mport org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,50, EmbeddedRungeKuttaIntegrator} uses the prototyping design pattern
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,51, to create the step interpolators by cloning an uninitialized
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,52, model and latter initializing the copy.
True,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,49,* org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator} uses
True,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,50,* the prototyping design pattern to create the step interpolators by
True,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,51,* cloning an uninitialized model and latter initializing the copy.
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,20,mport org.apache.commons.math.ode.ContinuousOutputModel;
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,22,mport org.apache.commons.math.ode.FirstOrderIntegrator;
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,23,mport org.apache.commons.math.ode.SecondOrderIntegrator;
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,38, @see FirstOrderIntegrator
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,39, @see SecondOrderIntegrator
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,35,* @see org.apache.commons.math.ode.FirstOrderIntegrator
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,36,* @see org.apache.commons.math.ode.SecondOrderIntegrator
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,70," {@link ContinuousOutputModel ContinuousOutputModel} class does),"
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,71, it should build a local copy using the clone method of the
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,72, interpolator and store this copy. Keeping only a reference to the
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,73, interpolator and reusing it will result in unpredictable
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,74, behaviour (potentially crashing the application).
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,67,* {@link org.apache.commons.math.ode.ContinuousOutputModel
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,68,"* ContinuousOutputModel} class does), it should build a local copy"
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,69,* using the clone method of the interpolator and store this copy.
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,70,* Keeping only a reference to the interpolator and reusing it will
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,71,* result in unpredictable behavior (potentially crashing the application).
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,23,mport org.apache.commons.math.ode.FirstOrderIntegrator;
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,24,mport org.apache.commons.math.ode.SecondOrderIntegrator;
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,44, @see FirstOrderIntegrator
False,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,45, @see SecondOrderIntegrator
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,42,* @see org.apache.commons.math.ode.FirstOrderIntegrator
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,43,* @see org.apache.commons.math.ode.SecondOrderIntegrator
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,23,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,112, ConvergenceException ConvergenceException}). This also means that
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,113," if the first element is non null, it is the best point found across"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,114, all starts.</p>
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,111,* org.apache.commons.math.ConvergenceException ConvergenceException}).
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,112,"* This also means that if the first element is non null, it is the best"
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,113,* point found across all starts.</p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,23,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,116, ConvergenceException ConvergenceException}). This also means that
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,117," if the first element is non null, it is the best point found across"
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,118, all starts.</p>
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,115,* org.apache.commons.math.ConvergenceException ConvergenceException}).
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,116,"* This also means that if the first element is non null, it is the best"
True,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,117,* point found across all starts.</p>
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,23,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,107, ConvergenceException ConvergenceException}). This also means that
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,108," if the first element is non null, it is the best point found across"
False,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,109, all starts.</p>
True,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,106,* org.apache.commons.math.ConvergenceException ConvergenceException}).
True,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,107,"* This also means that if the first element is non null, it is the best"
True,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,108,* point found across all starts.</p>
False,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,22,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,28, @see MultivariateRealFunction
True,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,27,* @see org.apache.commons.math.analysis.MultivariateRealFunction
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,22,mport org.apache.commons.math.analysis.MultivariateVectorialFunction;
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,28, @see MultivariateVectorialFunction
True,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,26,* @see org.apache.commons.math.analysis.MultivariateVectorialFunction
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,28,mport org.apache.commons.math.optimization.SimpleVectorialValueChecker;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,51, <p>The convergence check is set to a {@link SimpleVectorialValueChecker}
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,50,* <p>The convergence check is set to a {@link
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,51,* org.apache.commons.math.optimization.SimpleVectorialValueChecker}
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,29,mport org.apache.commons.math.optimization.SimpleVectorialValueChecker;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,61, <p>The convergence check is set to a {@link SimpleVectorialValueChecker}
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,60,* <p>The convergence check is set to a {@link
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,61,* org.apache.commons.math.optimization.SimpleVectorialValueChecker}
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,19,mport org.apache.commons.math.analysis.*;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,20,mport org.apache.commons.math.complex.*;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,21,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,22,import org.apache.commons.math.complex.Complex;
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,21,mport org.apache.commons.math.complex.Complex;
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,29, interface since it produces {@link Complex complex} results instead of real
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,30, ones.
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,28,* interface since it produces {@link org.apache.commons.math.complex.Complex complex}
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,29,* results instead of real ones.

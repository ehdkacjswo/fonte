is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,29,import org.apache.commons.math.exception.MathInternalError;
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,182,StringBuffer imAppendTo = new StringBuffer();
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,183,"ompositeFormat.formatDouble(-im, getImaginaryFormat(), toAppendTo, pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,185,"imAppendTo = formatImaginary(-im, new StringBuffer(), pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,186,toAppendTo.append(imAppendTo);
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,187,"ompositeFormat.formatDouble(im, getImaginaryFormat(), toAppendTo, pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,190,"imAppendTo = formatImaginary(im, new StringBuffer(), pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,191,toAppendTo.append(imAppendTo);
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,199,* Format the absolute value of the imaginary part.
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,201,* @param absIm Absolute value of the imaginary part of a complex number.
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,202,* @param toAppendTo where the text is to be appended.
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,203,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,204,* offsets of the alignment field.
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,205,* @return the value passed in as toAppendTo.
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,206,* @throws MathInternalError if {@code absIm} is not positive.
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,208,"private StringBuffer formatImaginary(double absIm,"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,209,"StringBuffer toAppendTo,"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,210,FieldPosition pos) {
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,211,if (absIm < 0) {
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,212,throw new MathInternalError();
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,215,pos.setBeginIndex(0);
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,216,pos.setEndIndex(0);
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,218,"CompositeFormat.formatDouble(absIm, getImaginaryFormat(), toAppendTo, pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,219,"if (toAppendTo.toString().equals(""1"")) {"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,220,"// Remove the character ""1"" if it is the only one."
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,221,toAppendTo.setLength(0);
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,224,return toAppendTo;
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,45,"omplex c = new Complex(1, 1);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,46,"tring expected = ""1 + 1i"";"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,45,"Complex c = new Complex(1, 2);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,46,"String expected = ""1 + 2i"";"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,51,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,52,public void testTrimOneImaginary() {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,53,final ComplexFormat fmt = ComplexFormat.getInstance(getLocale());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,54,fmt.getImaginaryFormat().setMaximumFractionDigits(1);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,56,"Complex c = new Complex(1, 1.04);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,57,"String expected = ""1 + i"";"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,58,String actual = fmt.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,59,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,61,"c = new Complex(1, 1.09);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,62,"expected = ""1 + 1"" + getDecimalCharacter() + ""1i"";"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,63,actual = fmt.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,64,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,66,"c = new Complex(1, -1.09);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,67,"expected = ""1 - 1"" + getDecimalCharacter() + ""1i"";"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,68,actual = fmt.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,69,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,71,"c = new Complex(1, -1.04);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,72,"expected = ""1 - i"";"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,73,actual = fmt.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,74,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,110,"tring expected = ""1 + 1j"";"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,136,"String expected = ""1 + j"";"

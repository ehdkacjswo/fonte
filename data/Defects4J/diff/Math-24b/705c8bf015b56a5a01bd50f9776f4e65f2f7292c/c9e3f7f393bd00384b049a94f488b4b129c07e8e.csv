is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,18,package org.apache.commons.math.distribution;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,20,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,21,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,22,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,24,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,27,* Implementation of the triangular real distribution.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,29,"* @see <a href=""http://en.wikipedia.org/wiki/Triangular_distribution"">"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,30,* Triangular distribution (Wikipedia)</a>
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,32,* @version $Id$
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,33,* @since 3.0
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,35,public class TriangularDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,36,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,37,private static final long serialVersionUID = 20120112L;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,39,/** Lower limit of this distribution (inclusive). */
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,40,private final double a;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,42,/** Upper limit of this distribution (inclusive). */
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,43,private final double b;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,45,/** Mode of this distribution. */
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,46,private final double c;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,48,/** Inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,49,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,52,"* Create a triangular real distribution using the given lower limit,"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,53,"* upper limit, and mode."
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,55,* @param a Lower limit of this distribution (inclusive).
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,56,* @param b Upper limit of this distribution (inclusive).
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,57,* @param c Mode of this distribution.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,58,* @throws NumberIsTooLargeException if {@code a >= b} or if {@code c > b}
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,59,* @throws NumberIsTooSmallException if {@code c < a}
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,61,"public TriangularDistribution(double a, double c, double b)"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,62,"throws NumberIsTooLargeException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,63,if (a >= b) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,64,throw new NumberIsTooLargeException(
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,65,"LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,66,"a, b, false);"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,68,if (c < a) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,69,throw new NumberIsTooSmallException(
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,70,"LocalizedFormats.NUMBER_TOO_SMALL, c, a, true);"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,72,if (c > b) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,73,throw new NumberIsTooLargeException(
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,74,"LocalizedFormats.NUMBER_TOO_LARGE, c, b, true);"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,77,this.a = a;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,78,this.c = c;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,79,this.b = b;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,80,solverAbsoluteAccuracy = FastMath.ulp(c);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,84,* Returns the mode {@code c} of this distribution.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,86,* @return the mode {@code c} of this distribution
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,88,public double getMode() {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,89,return c;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,92,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,93,@Override
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,94,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,95,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,99,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,101,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,103,* @return 0
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,105,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,106,return 0;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,110,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,112,"* For lower limit {@code a}, upper limit {@code b} and mode {@code c}, the"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,113,* PDF is given by
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,114,* <ul>
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,115,"* <li>{@code 2 * (x - a) / [(b - a) * (c - a)]} if {@code a <= x < c},</li>"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,116,"* <li>{@code 2 / (b - a)} if {@code x = c},</li>"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,117,"* <li>{@code 2 * (b - x) / [(b - a) * (b - c)]} if {@code c < x <= b},</li>"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,118,* <li>{@code 0} otherwise.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,119,* </ul>
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,121,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,122,if (x < a) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,123,return 0;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,125,if (a <= x && x < c) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,126,double divident = 2 * (x - a);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,127,double divisor = (b - a) * (c - a);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,128,return divident / divisor;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,130,if (x == c) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,131,return 2 / (b - a);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,133,if (c < x && x <= b) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,134,double divident = 2 * (b - x);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,135,double divisor = (b - a) * (b - c);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,136,return divident / divisor;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,138,return 0;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,142,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,144,"* For lower limit {@code a}, upper limit {@code b} and mode {@code c}, the"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,145,* CDF is given by
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,146,* <ul>
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,147,"* <li>{@code 0} if {@code x < a},</li>"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,148,"* <li>{@code (x - a)^2 / [(b - a) * (c - a)]} if {@code a <= x < c},</li>"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,149,"* <li>{@code (c - a) / (b - a)} if {@code x = c},</li>"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,150,"* <li>{@code 1 - (b - x)^2 / [(b - a) * (b - c)]} if {@code c < x <= b},</li>"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,151,* <li>{@code 1} if {@code x > b}.</li>
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,152,* </ul>
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,154,public double cumulativeProbability(double x)  {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,155,if (x < a) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,156,return 0;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,158,if (a <= x && x < c) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,159,double divident = (x - a) * (x - a);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,160,double divisor = (b - a) * (c - a);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,161,return divident / divisor;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,163,if (x == c) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,164,return (c - a) / (b - a);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,166,if (c < x && x <= b) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,167,double divident = (b - x) * (b - x);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,168,double divisor = (b - a) * (b - c);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,169,return 1 - (divident / divisor);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,171,return 1;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,175,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,177,"* For lower limit {@code a}, upper limit {@code b}, and mode {@code c},"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,178,* the mean is {@code (a + b + c) / 3}.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,180,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,181,return (a + b + c) / 3;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,185,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,187,"* For lower limit {@code a}, upper limit {@code b}, and mode {@code c},"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,188,* the variance is {@code (a^2 + b^2 + c^2 - a * b - a * c - b * c) / 18}.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,190,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,191,return (a * a + b * b + c * c - a * b - a * c - b * c) / 18;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,195,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,197,* The lower bound of the support is equal to the lower limit parameter
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,198,* {@code a} of the distribution.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,200,* @return lower bound of the support
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,202,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,203,return a;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,207,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,209,* The upper bound of the support is equal to the upper limit parameter
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,210,* {@code b} of the distribution.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,212,* @return upper bound of the support
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,214,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,215,return b;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,218,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,219,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,220,return true;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,223,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,224,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,225,return true;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,229,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,231,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,233,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,235,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,236,return true;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,239,@Override
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,240,public double inverseCumulativeProbability(double p)
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,241,throws OutOfRangeException {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,242,if (p < 0.0 || p > 1.0) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,243,"throw new OutOfRangeException(p, 0, 1);"
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,245,if (p == 0.0) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,246,return a;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,248,if (p == 1.0) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,249,return b;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,251,final double pc = (c - a) / (b - a);
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,252,if (p == pc) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,253,return c;
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,255,if (p < pc) {
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,256,return a + FastMath.sqrt(p * (b - a) * (c - a));
True,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math/distribution/TriangularDistribution.java,258,return b - FastMath.sqrt((1 - p) * (b - a) * (b - c));
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,18,package org.apache.commons.math.distribution;
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,20,import java.util.Arrays;
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,22,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,23,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,28,* Test cases for {@link TriangularDistribution}. See class javadoc for
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,29,* {@link RealDistributionAbstractTest} for further details.
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,31,public class TriangularDistributionTest extends RealDistributionAbstractTest {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,33,// --- Override tolerance -------------------------------------------------
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,35,@Override
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,36,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,37,super.setUp();
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,38,setTolerance(1e-4);
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,41,//--- Implementations for abstract methods --------------------------------
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,44,* Creates the default triangular distribution instance to use in tests.
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,46,@Override
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,47,public TriangularDistribution makeDistribution() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,48,"// Left side 5 wide, right side 10 wide."
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,49,"return new TriangularDistribution(-3, 2, 12);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,53,* Creates the default cumulative probability distribution test input
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,54,* values.
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,56,@Override
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,57,public double[] makeCumulativeTestPoints() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,58,"return new double[] { -3.0001,                 // below lower limit"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,59,"-3.0,                    // at lower limit"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,60,"-2.0, -1.0, 0.0, 1.0,    // on lower side"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,61,"2.0,                     // at mode"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,62,"3.0, 4.0, 10.0, 11.0,    // on upper side"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,63,"12.0,                    // at upper limit"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,64,12.0001                  // above upper limit
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,69,* Creates the default cumulative probability density test expected values.
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,71,@Override
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,72,public double[] makeCumulativeTestValues() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,73,// Top at 2 / (b - a) = 2 / (12 - -3) = 2 / 15 = 7.5
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,74,// Area left  = 7.5 * 5  * 0.5 = 18.75 (1/3 of the total area)
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,75,// Area right = 7.5 * 10 * 0.5 = 37.5  (2/3 of the total area)
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,76,// Area total = 18.75 + 37.5 = 56.25
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,77,// Derivative left side = 7.5 / 5 = 1.5
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,78,// Derivative right side = -7.5 / 10 = -0.75
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,79,double third = 1 / 3.0;
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,80,double left = 18.75;
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,81,double area = 56.25;
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,82,"return new double[] { 0.0,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,83,"0.0,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,84,"0.75 / area, 3 / area, 6.75 / area, 12 / area,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,85,"third,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,86,"(left + 7.125) / area, (left + 13.5) / area,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,87,"(left + 36) / area, (left + 37.125) / area,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,88,"1.0,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,89,1.0
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,94,* Creates the default inverse cumulative probability distribution test
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,95,* input values.
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,97,@Override
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,98,public double[] makeInverseCumulativeTestPoints() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,99,"// Exclude the points outside the limits, as they have cumulative"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,100,"// probability of zero and one, meaning the inverse returns the"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,101,// limits and not the points outside the limits.
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,102,double[] points = makeCumulativeTestValues();
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,103,"return Arrays.copyOfRange(points, 1, points.length - 1);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,107,* Creates the default inverse cumulative probability density test expected
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,108,* values.
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,110,@Override
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,111,public double[] makeInverseCumulativeTestValues() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,112,"// Exclude the points outside the limits, as they have cumulative"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,113,"// probability of zero and one, meaning the inverse returns the"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,114,// limits and not the points outside the limits.
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,115,double[] points = makeCumulativeTestPoints();
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,116,"return Arrays.copyOfRange(points, 1, points.length - 1);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,119,/** Creates the default probability density test expected values. */
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,120,@Override
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,121,public double[] makeDensityTestValues() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,122,"return new double[] { 0,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,123,"0,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,124,"2 / 75.0, 4 / 75.0, 6 / 75.0, 8 / 75.0,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,125,"10 / 75.0,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,126,"9 / 75.0, 8 / 75.0, 2 / 75.0, 1 / 75.0,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,127,"0,"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,128,0
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,132,//--- Additional test cases -----------------------------------------------
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,134,/** Test lower bound getter. */
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,135,@Test
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,136,public void testGetLowerBound() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,137,TriangularDistribution distribution = makeDistribution();
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,138,"Assert.assertEquals(-3.0, distribution.getSupportLowerBound(), 0);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,141,/** Test upper bound getter. */
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,142,@Test
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,143,public void testGetUpperBound() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,144,TriangularDistribution distribution = makeDistribution();
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,145,"Assert.assertEquals(12.0, distribution.getSupportUpperBound(), 0);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,148,/** Test pre-condition for equal lower/upper limit. */
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,149,@Test(expected=NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,150,public void testPreconditions1() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,151,"new TriangularDistribution(0, 0, 0);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,154,/** Test pre-condition for lower limit larger than upper limit. */
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,155,@Test(expected=NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,156,public void testPreconditions2() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,157,"new TriangularDistribution(1, 1, 0);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,160,/** Test pre-condition for mode larger than upper limit. */
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,161,@Test(expected=NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,162,public void testPreconditions3() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,163,"new TriangularDistribution(0, 2, 1);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,166,/** Test pre-condition for mode smaller than lower limit. */
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,167,@Test(expected=NumberIsTooSmallException.class)
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,168,public void testPreconditions4() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,169,"new TriangularDistribution(2, 1, 3);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,172,/** Test mean/variance. */
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,173,@Test
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,174,public void testMeanVariance() {
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,175,TriangularDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,177,"dist = new TriangularDistribution(0, 0.5, 1.0);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,178,"Assert.assertEquals(dist.getNumericalMean(), 0.5, 0);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,179,"Assert.assertEquals(dist.getNumericalVariance(), 1 / 24.0, 0);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,181,"dist = new TriangularDistribution(0, 1, 1);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,182,"Assert.assertEquals(dist.getNumericalMean(), 2 / 3.0, 0);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,183,"Assert.assertEquals(dist.getNumericalVariance(), 1 / 18.0, 0);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,185,"dist = new TriangularDistribution(-3, 2, 12);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,186,"Assert.assertEquals(dist.getNumericalMean(), 3 + (2 / 3.0), 0);"
True,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TriangularDistributionTest.java,187,"Assert.assertEquals(dist.getNumericalVariance(), 175 / 18.0, 0);"

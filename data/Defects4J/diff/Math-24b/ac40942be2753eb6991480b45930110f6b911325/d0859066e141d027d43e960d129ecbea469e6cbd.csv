is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,41,ublic void testConstructor() {
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,41,public void testConstructor() throws Exception {
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,55,ry {
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,56,"ssertFraction(0, 1, new BigFraction(0.00000000000001, 1.0e-5, 100));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,57,"ssertFraction(2, 5, new BigFraction(0.40000000000001, 1.0e-5, 100));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,58,"ssertFraction(15, 1, new BigFraction(15.0000000000001, 1.0e-5, 100));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,59, catch (ConvergenceException ex) {
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,60,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,55,"assertFraction(0, 1, new BigFraction(0.00000000000001, 1.0e-5, 100));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,56,"assertFraction(2, 5, new BigFraction(0.40000000000001, 1.0e-5, 100));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,57,"assertFraction(15, 1, new BigFraction(15.0000000000001, 1.0e-5, 100));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,37,ublic void testConstructor() {
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,37,public void testConstructor() throws Exception {
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,61,ry {
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,62,"ssertFraction(0, 1, new Fraction(0.00000000000001));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,63,"ssertFraction(2, 5, new Fraction(0.40000000000001));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,64,"ssertFraction(15, 1, new Fraction(15.0000000000001));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,66, catch (ConvergenceException ex) {
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,67,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,61,"assertFraction(0, 1, new Fraction(0.00000000000001));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,62,"assertFraction(2, 5, new Fraction(0.40000000000001));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,63,"assertFraction(15, 1, new Fraction(15.0000000000001));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,215,ublic void testConstructorDouble() {
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,216,ry {
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,217,"ssertFraction(1, 2, new Fraction(0.5));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,218,"ssertFraction(1, 3, new Fraction(1.0 / 3.0));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,219,"ssertFraction(17, 100, new Fraction(17.0 / 100.0));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,220,"ssertFraction(317, 100, new Fraction(317.0 / 100.0));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,221,"ssertFraction(-1, 2, new Fraction(-0.5));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,222,"ssertFraction(-1, 3, new Fraction(-1.0 / 3.0));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,223,"ssertFraction(-17, 100, new Fraction(17.0 / -100.0));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,224,"ssertFraction(-317, 100, new Fraction(-317.0 / 100.0));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,225, catch (ConvergenceException ex) {
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,226,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,210,public void testConstructorDouble() throws Exception {
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,211,"assertFraction(1, 2, new Fraction(0.5));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,212,"assertFraction(1, 3, new Fraction(1.0 / 3.0));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,213,"assertFraction(17, 100, new Fraction(17.0 / 100.0));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,214,"assertFraction(317, 100, new Fraction(317.0 / 100.0));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,215,"assertFraction(-1, 2, new Fraction(-0.5));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,216,"assertFraction(-1, 3, new Fraction(-1.0 / 3.0));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,217,"assertFraction(-17, 100, new Fraction(17.0 / -100.0));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,218,"assertFraction(-317, 100, new Fraction(-317.0 / 100.0));"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,166,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,167,ector3D actual = vector3DFormat.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,168,"ssert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,169, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,170,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,166,Vector3D actual = vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,167,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,195,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,196,ector3D actual = vector3DFormat.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,197,"ssert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,198, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,199,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,191,Vector3D actual = vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,192,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,211,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,212,ector3D actual = vector3DFormat.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,213,"ssert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,214, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,215,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,203,Vector3D actual = vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,204,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,227,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,228,ector3D actual = vector3DFormat.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,229,"ssert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,230, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,231,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,215,Vector3D actual = vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,216,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,243,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,244,ector3D actual = vector3DFormat.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,245,"ssert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,246, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,247,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,227,Vector3D actual = vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,228,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,259,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,260,ector3D actual = vector3DFormat.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,261,"ssert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,262, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,263,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,239,Vector3D actual = vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,240,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,275,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,276,ector3D actual = vector3DFormat.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,277,"ssert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,278, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,279,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,251,Vector3D actual = vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,252,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,291,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,292,ector3D actual = vector3DFormat.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,293,"ssert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,294, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,295,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,263,Vector3D actual = vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,264,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,307,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,308,ector3D actual = vector3DFormatSquare.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,309,"ssert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,310, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,311,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,275,Vector3D actual = vector3DFormatSquare.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,276,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,318,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,319,ector3D actual = vector3DFormat.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,320,"ssert.assertEquals(Vector3D.NaN, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,321, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,322,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,282,Vector3D actual = vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,283,"Assert.assertEquals(Vector3D.NaN, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,329,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,330,ector3D actual = vector3DFormat.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,331,"ssert.assertEquals(Vector3D.POSITIVE_INFINITY, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,332, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,333,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,289,Vector3D actual = vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,290,"Assert.assertEquals(Vector3D.POSITIVE_INFINITY, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,340,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,341,ector3D actual = vector3DFormat.parse(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,342,"ssert.assertEquals(Vector3D.NEGATIVE_INFINITY, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,343, catch (MathParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,344,ssert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,296,Vector3D actual = vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,297,"Assert.assertEquals(Vector3D.NEGATIVE_INFINITY, actual);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,200,ublic void testToString(){
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,200,public void testToString() throws Exception {
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,210,ry {
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,211,tring line = reader.readLine(); // header line
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,212,ssertNotNull(line);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,210,String line = reader.readLine(); // header line
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,211,assertNotNull(line);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,214,ine = reader.readLine(); // one's or two's line
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,215,ssertNotNull(line);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,213,line = reader.readLine(); // one's or two's line
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,214,assertNotNull(line);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,217,ine = reader.readLine(); // one's or two's line
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,218,ssertNotNull(line);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,216,line = reader.readLine(); // one's or two's line
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,217,assertNotNull(line);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,220,ine = reader.readLine(); // no more elements
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,221,ssertNull(line);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,222, catch(IOException ex){
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,223,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,219,line = reader.readLine(); // no more elements
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,220,assertNull(line);
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,35,ublic void testGoldenRatio(){
True,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,35,public void testGoldenRatio() throws Exception {
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,49,ry {
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,50,"ouble gr = cf.evaluate(0.0, 10e-9);"
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,51,"ssertEquals(1.61803399, gr, 10e-9);"
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,52, catch (MathException e) {
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,53,ail(e.getMessage());
True,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,49,"double gr = cf.evaluate(0.0, 10e-9);"
True,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,50,"assertEquals(1.61803399, gr, 10e-9);"

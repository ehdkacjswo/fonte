is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,22,mport java.util.Arrays;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,24,import org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,25,import org.apache.commons.math.linear.FieldMatrix;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,26,import org.apache.commons.math.linear.FieldMatrixImpl;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,29,import org.apache.commons.math.linear.decomposition.FieldDecompositionSolver;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,30,import org.apache.commons.math.linear.decomposition.FieldLUDecompositionImpl;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,32, {@link MultistepIntegrator multistep integrators} use state history
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,33, from several previous steps to compute the current state. They may also use
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,34, the first derivative of current state. All states are separated by a fixed
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,35, step size h from each other. Since these methods are based on polynomial
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,36," interpolation, the information from the previous state may be represented"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,37, in another equivalent way: using the state higher order derivatives at
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,38, current step rather. This class transforms state history between these three
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,39, equivalent forms.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,40, <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,36,* {@link MultistepIntegrator multistep integrators} use state and state
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,37,* derivative history from several previous steps to compute the current state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,38,* All states are separated by a fixed step size h from each other. Since these
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,39,"* methods are based on polynomial interpolation, the information from the"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,40,* previous states may be represented in another equivalent way: using the state
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,41,* higher order derivatives at current step only. This class transforms state
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,42,* history between these equivalent forms.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,43,* </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,42, The supported forms for a dimension n history are:
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,43, <ul>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,44,   <li>multistep without derivatives:<br/>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,45,     <pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,46,"       y<sub>k</sub>, y<sub>k-1</sub> ... y<sub>k-(n-2), y<sub>k-(n-1)</sub>"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,47,     </pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,48,   </li>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,49,   <li>multistep with first derivative at current step:<br/>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,50,     <pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,51,"       y<sub>k</sub>, y'<sub>k</sub>, y<sub>k-1</sub> ... y<sub>k-(n-2)</sub>"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,52,     </pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,53,   </li>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,54,   <li>Nordsieck:
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,55,     <pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,56,"       y<sub>k</sub>, h y'<sub>k</sub>, h<sup>2</sup>/2 y''<sub>k</sub> ... h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,57,     </pre>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,58,   </li>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,59, </ul>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,60," In these expressions, y<sub>k</sub> is the state at the current step. For each p,"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,61," y<sub>k-p</sub> is the state at the p<sup>th</sup> previous step. y'<sub>k</sub>,"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,62," y''<sub>k</sub> ... yn-1<sub>k</sub> are respectively the first, second, ..."
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,63, (n-1)<sup>th</sup> derivatives of the state at current step and h is the fixed
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,64, step size.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,45,* The general multistep form for a dimension n state history at step k is
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,46,* composed of q-p previous states followed by s-r previous scaled derivatives
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,47,* with n = (q-p) + (s-r):
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,48,* <pre>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,49,"*   y<sub>k-p</sub>, y<sub>k-(p+1)</sub> ... y<sub>k-(q-1)</sub>"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,50,"*   h y'<sub>k-r</sub>, h y'<sub>k-(r+1)</sub> ... h y'<sub>k-(s-1)</sub>"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,51,* </pre>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,52,"* As an example, the {@link"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,53,* org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator Adams-Bashforth}
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,54,"* integrator uses p=1, q=2, r=1, s=n. The {@link"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,55,* org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator Adams-Moulton}
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,56,"* integrator uses p=1, q=2, r=0, s=n-1."
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,67, The transforms are exact for polynomials.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,59,* The Nordsieck form for a dimension n state history at step k is composed of the
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,60,* current state followed by n-1 current scaled derivatives:
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,61,* <pre>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,62,* y<sub>k</sub>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,63,"* h y'<sub>k</sub>, h<sup>2</sup>/2 y''<sub>k</sub> ... h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,64,* </pre>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,65,"* Where y'<sub>k</sub>, y''<sub>k</sub> ... yn-1<sub>k</sub> are respectively the"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,66,"* first, second, ... (n-1)<sup>th</sup> derivatives of the state at current step"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,67,* and h is the fixed step size.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,71," size h' by rescaling each component by 1, h'/h, (h'/h)<sup>2</sup> ..."
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,71,"* size h' by scaling each component by 1, h'/h, (h'/h)<sup>2</sup> ..."
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,75,* The transform between general multistep and Nordsieck forms is exact for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,76,* polynomials.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,77,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,78,* <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,86,rivate static final long serialVersionUID = -2707468304560314664L;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,88,** Nordsieck to Multistep  without derivatives matrix. */
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,89,rivate final RealMatrix matNtoMWD;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,91,** Multistep without derivatives to Nordsieck matrix. */
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,92,rivate final RealMatrix matMWDtoN;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,90,private static final long serialVersionUID = 2216907099394084076L;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,95,rivate final RealMatrix matNtoM;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,93,private final RealMatrix nordsieckToMultistep;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,98,rivate final RealMatrix matMtoN;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,96,private final RealMatrix multistepToNordsieck;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,102, @param n dimension of the history
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,100,"* <p>states considered are y<sub>k-p</sub>, y<sub>k-(p+1)</sub> ..."
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,101,* y<sub>k-(q-1)</sub> and scaled derivatives considered are
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,102,"* h y'<sub>k-r</sub>, h y'<sub>k-(r+1)</sub> ... h y'<sub>k-(s-1)</sub>"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,103,* @param p start state index offset in multistep form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,104,* @param q end state index offset in multistep form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,105,* @param r start state derivative index offset in multistep form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,106,* @param s end state derivative index offset in multistep form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,104,ublic NordsieckTransformer(final int n) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,106,/ from Nordsieck to multistep without derivatives
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,107,inal BigInteger[][] bigNtoMWD = buildNordsieckToMultistepWithoutDerivatives(n);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,108,ouble[][] dataNtoMWD = new double[n][n];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,109,or (int i = 0; i < n; ++i) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,110,ouble[]     dRow = dataNtoMWD[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,111,igInteger[] bRow = bigNtoMWD[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,112,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,113,Row[j] = bRow[j].doubleValue();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,116,"atNtoMWD = new RealMatrixImpl(dataNtoMWD, false);"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,118,/ from multistep without derivatives to Nordsieck
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,119,inal BigFraction[][] bigToN = buildMultistepWithoutDerivativesToNordsieck(n);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,120,ouble[][] dataMWDtoN = new double[n][n];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,121,or (int i = 0; i < n; ++i) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,122,ouble[]     dRow = dataMWDtoN[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,123,igFraction[] bRow = bigToN[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,124,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,125,Row[j] = bRow[j].doubleValue();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,128,"atMWDtoN = new RealMatrixImpl(dataMWDtoN, false);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,108,"public NordsieckTransformer(final int p, final int q, final int r, final int s) {"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,131,inal BigInteger[][] bigNtoM = buildNordsieckToMultistep(n);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,132,ouble[][] dataNtoM = new double[n][n];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,133,or (int i = 0; i < n; ++i) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,134,ouble[]     dRow = dataNtoM[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,135,igInteger[] bRow = bigNtoM[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,136,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,137,Row[j] = bRow[j].doubleValue();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,140,"atNtoM = new RealMatrixImpl(dataNtoM, false);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,111,"final FieldMatrix<BigFraction> bigNtoM = buildNordsieckToMultistep(p, q, r, s);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,112,Convertor convertor = new Convertor();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,113,bigNtoM.walkInOptimizedOrder(convertor);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,114,nordsieckToMultistep = convertor.getConvertedMatrix();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,143,onvertMWDtNtoMtN(bigToN);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,144,ouble[][] dataMtoN = new double[n][n];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,145,or (int i = 0; i < n; ++i) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,146,ouble[]     dRow = dataMtoN[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,147,igFraction[] bRow = bigToN[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,148,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,149,Row[j] = bRow[j].doubleValue();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,152,"atMtoN = new RealMatrixImpl(dataMtoN, false);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,117,final FieldDecompositionSolver<BigFraction> solver =
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,118,new FieldLUDecompositionImpl<BigFraction>(bigNtoM).getSolver();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,119,final FieldMatrix<BigFraction> bigMtoN = solver.getInverse();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,120,convertor = new Convertor();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,121,bigMtoN.walkInOptimizedOrder(convertor);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,122,multistepToNordsieck = convertor.getConvertedMatrix();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,157, Build the transform from Nordsieck to multistep without derivatives.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,158, @param n dimension of the history
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,159, @return transform from Nordsieck to multistep without derivatives
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,127,* Build the transform from Nordsieck to multistep.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,128,"* <p>states considered are y<sub>k-p</sub>, y<sub>k-(p+1)</sub> ..."
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,129,* y<sub>k-(q-1)</sub> and scaled derivatives considered are
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,130,"* h y'<sub>k-r</sub>, h y'<sub>k-(r+1)</sub> ... h y'<sub>k-(s-1)</sub>"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,131,* @param p start state index offset in multistep form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,132,* @param q end state index offset in multistep form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,133,* @param r start state derivative index offset in multistep form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,134,* @param s end state derivative index offset in multistep form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,135,* @return transform from Nordsieck to multistep
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,161,ublic static BigInteger[][] buildNordsieckToMultistepWithoutDerivatives(final int n) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,137,"public static FieldMatrix<BigFraction> buildNordsieckToMultistep(final int p, final int q,"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,138,"final int r, final int s) {"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,163,inal BigInteger[][] array = new BigInteger[n][n];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,140,final int n = (q - p) + (s - r);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,141,final BigFraction[][] array = new BigFraction[n][n];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,165,/ row 0: [1 0 0 0 ... 0 ]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,166,rray[0][0] = BigInteger.ONE;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,167,"rrays.fill(array[0], 1, n, BigInteger.ZERO);"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,169,/ the following expressions are direct applications of Taylor series
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,170,/ rows 1 to n-1: aij = (-i)^j
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,171,/ [ 1  -1   1  -1   1 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,172,/ [ 1  -2   4  -8  16 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,173,/ [ 1  -3   9 -27  81 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,174,/ [ 1  -4  16 -64 256 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,175,or (int i = 1; i < n; ++i) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,176,inal BigInteger[] row  = array[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,177,inal BigInteger factor = BigInteger.valueOf(-i);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,178,igInteger aj = BigInteger.ONE;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,143,int i = 0;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,144,for (int l = p; l < q; ++l) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,145,// handle previous state y<sub>(k-l)</sub>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,146,// the following expressions are direct applications of Taylor series
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,147,// y<sub>k-1</sub>: [ 1  -1   1  -1   1 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,148,// y<sub>k-2</sub>: [ 1  -2   4  -8  16 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,149,// y<sub>k-3</sub>: [ 1  -3   9 -27  81 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,150,// y<sub>k-4</sub>: [ 1  -4  16 -64 256 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,151,final BigFraction[] row = array[i++];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,152,final BigInteger factor = BigInteger.valueOf(-l);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,153,BigInteger al = BigInteger.ONE;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,180,ow[j] = aj;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,181,j = aj.multiply(factor);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,155,"row[j] = new BigFraction(al, BigInteger.ONE);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,156,al = al.multiply(factor);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,185,eturn array;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,190, Build the transform from multistep without derivatives to Nordsieck.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,191, @param n dimension of the history
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,192, @return transform from multistep without derivatives to Nordsieck
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,194,ublic static BigFraction[][] buildMultistepWithoutDerivativesToNordsieck(final int n) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,196,inal BigInteger[][] iArray = new BigInteger[n][n];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,198,/ row 0: [1 0 0 0 ... 0 ]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,199,Array[0][0] = BigInteger.ONE;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,200,"rrays.fill(iArray[0], 1, n, BigInteger.ZERO);"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,202,/ We use recursive definitions of triangular integer series for each column.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,203,/ For example column 0 of matrices of increasing dimensions are:
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,204,/  1/0! for dimension 1
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,205,"/  1/1!,  1/1! for dimension 2"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,206,"/  2/2!,  3/2!,  1/2! for dimension 3"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,207,"/  6/3!, 11/3!,  6/3!,  1/3! for dimension 4"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,208,"/ 24/4!, 50/4!, 35/4!, 10/4!, 1/4! for dimension 5"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,209,"/ The numerators are the Stirling numbers of the first kind, (A008275 in"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,210,/ Sloane's encyclopedia http://www.research.att.com/~njas/sequences/A008275)
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,211,"/ with a multiplicative factor of +/-1 (which we will write +/-binomial(n-1, 0))."
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,212,"/ In the same way, column 1 is A049444 with a multiplicative factor of"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,213,"/ +/-binomial(n-1, 1) and column 2 is A123319 with a multiplicative factor of"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,214,"/ +/-binomial(n-1, 2). The next columns are defined by similar definitions but"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,215,/ are not identified in Sloane's encyclopedia.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,216,"/ Another interesting observation is that for each dimension k, the last column"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,217,"/ (except the initial 0) is a copy of the first column of the dimension k-1 matrix,"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,218,/ possibly with an opposite sign (i.e. these columns are also linked to Stirling
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,219,/ numbers of the first kind).
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,220,or (int i = 1; i < n; ++i) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,222,inal BigInteger bigI = BigInteger.valueOf(i);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,224,/ row i
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,225,igInteger[] rowK   = iArray[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,226,igInteger[] rowKm1 = iArray[i - 1];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,227,or (int j = 0; j < i; ++j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,228,owK[j] = BigInteger.ONE;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,230,owK[i] = rowKm1[0];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,232,/ rows i-1 to 1
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,233,or (int k = i - 1; k > 0; --k) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,235,/ select rows
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,236,owK   = rowKm1;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,237,owKm1 = iArray[k - 1];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,239,/ apply recursive defining formula
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,240,or (int j = 0; j < i; ++j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,241,owK[j] = rowK[j].multiply(bigI).add(rowKm1[j]);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,244,/ initialize new last column
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,245,owK[i] = rowKm1[0];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,248,owKm1[0] = rowKm1[0].multiply(bigI);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,252,/ apply column specific factors
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,253,inal BigInteger factorial = iArray[0][0];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,254,inal BigFraction[][] fArray = new BigFraction[n][n];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,255,or (int i = 0; i < n; ++i) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,256,inal BigFraction[] fRow = fArray[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,257,inal BigInteger[]  iRow = iArray[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,258,igInteger binomial = BigInteger.ONE;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,259,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,260,"Row[j] = new BigFraction(binomial.multiply(iRow[j]), factorial);"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,261,inomial = binomial.negate().multiply(BigInteger.valueOf(n - j - 1)).divide(BigInteger.valueOf(j + 1));
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,160,for (int l = r; l < s; ++l) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,161,// handle previous state scaled derivative h y'<sub>(k-l)</sub>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,162,// the following expressions are direct applications of Taylor series
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,163,// h y'<sub>k-1</sub>: [ 0  1  -2   3  -4   5 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,164,// h y'<sub>k-2</sub>: [ 0  1  -4   6  -8  10 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,165,// h y'<sub>k-3</sub>: [ 0  1  -6   9 -12  15 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,166,// h y'<sub>k-4</sub>: [ 0  1  -8  12 -16  20 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,167,final BigFraction[] row = array[i++];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,168,final BigInteger factor = BigInteger.valueOf(-l);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,169,row[0] = BigFraction.ZERO;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,170,BigInteger al = BigInteger.ONE;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,171,for (int j = 1; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,172,"row[j] = new BigFraction(al.multiply(BigInteger.valueOf(j)), BigInteger.ONE);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,173,al = al.multiply(factor);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,265,eturn fArray;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,177,"return new FieldMatrixImpl<BigFraction>(array, false);"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,270, Build the transform from Nordsieck to multistep.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,271, @param n dimension of the history
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,272, @return transform from Nordsieck to multistep
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,274,ublic static BigInteger[][] buildNordsieckToMultistep(final int n) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,276,inal BigInteger[][] array = new BigInteger[n][n];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,181,/** Convertor for {@link FieldMatrix}/{@link BigFraction}. */
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,182,private static class Convertor extends DefaultFieldMatrixPreservingVisitor<BigFraction> {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,278,/ row 0: [1 0 0 0 ... 0 ]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,279,rray[0][0] = BigInteger.ONE;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,280,"rrays.fill(array[0], 1, n, BigInteger.ZERO);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,184,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,185,private static final long serialVersionUID = -1799685632320460982L;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,282,f (n > 1) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,284,/ row 1: [0 1 0 0 ... 0 ]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,285,rray[1][0] = BigInteger.ZERO;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,286,rray[1][1] = BigInteger.ONE;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,287,"rrays.fill(array[1], 2, n, BigInteger.ZERO);"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,289,/ the following expressions are direct applications of Taylor series
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,290,/ rows 2 to n-1: aij = (1-i)^j
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,291,/ [ 1  -1   1  -1   1 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,292,/ [ 1  -2   4  -8  16 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,293,/ [ 1  -3   9 -27  81 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,294,/ [ 1  -4  16 -64 256 ...]
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,295,or (int i = 2; i < n; ++i) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,296,inal BigInteger[] row  = array[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,297,inal BigInteger factor = BigInteger.valueOf(1 - i);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,298,igInteger aj = BigInteger.ONE;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,299,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,300,ow[j] = aj;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,301,j = aj.multiply(factor);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,187,/** Converted array. */
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,188,private double[][] data;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,190,/** Simple constructor. */
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,191,public Convertor() {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,192,super(BigFraction.ZERO);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,307,eturn array;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,312, Build the transform from multistep to Nordsieck.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,313, @param n dimension of the history
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,314, @return transform from multistep to Nordsieck
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,316,ublic static BigFraction[][] buildMultistepToNordsieck(final int n) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,317,inal BigFraction[][] array = buildMultistepWithoutDerivativesToNordsieck(n);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,318,onvertMWDtNtoMtN(array);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,319,eturn array;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,323, Convert a transform from multistep without derivatives to Nordsieck to
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,324, multistep to Nordsieck.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,325," @param work array, contains tansform from multistep without derivatives"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,326," to Nordsieck on input, will be overwritten with tansform from multistep"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,327, to Nordsieck on output
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,329,rivate static void convertMWDtNtoMtN(BigFraction[][] array) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,331,inal int n = array.length;
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,332,f (n == 1) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,333,eturn;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,195,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,196,@Override
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,197,"public void start(int rows, int columns,"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,198,"int startRow, int endRow, int startColumn, int endColumn) {"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,199,data = new double[rows][columns];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,336,/ the second row of the matrix without derivatives represents the linear equation:
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,337,/ hy' = a0 yk + a1 yk-1 + ... + a(n-1) yk-(n-1)
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,338,/ we solve it with respect to the oldest state yk-(n-1) and get
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,339,/ yk-(n-1) = -a0/a(n-1) yk + 1/a(n-1) hy' - a1/a(n-1) yk-1 - ...
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,340,inal BigFraction[] secondRow = array[1];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,341,inal BigFraction[] solved    = new BigFraction[n];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,342,inal BigFraction f = secondRow[n - 1].reciprocal().negate();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,343,olved[0] = secondRow[0].multiply(f);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,344,olved[1] = f.negate();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,345,or (int j = 2; j < n; ++j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,346,olved[j] = secondRow[j - 1].multiply(f);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,202,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,203,@Override
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,204,"public void visit(int row, int column, BigFraction value) {"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,205,data[row][column] = value.doubleValue();
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,349,/ update the matrix so it expects hy' in second element
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,350,/ rather than yk-(n-1) in last elements when post-multiplied
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,351,or (int i = 0; i < n; ++i) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,352,inal BigFraction[] rowI = array[i];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,353,inal BigFraction last = rowI[n - 1];
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,354,or (int j = n - 1; j > 1; --j) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,355,owI[j] = rowI[j - 1].add(last.multiply(solved[j]));
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,357,owI[1] = last.multiply(solved[1]);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,358,owI[0] = rowI[0].add(last.multiply(solved[0]));
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,208,/** Get the converted matrix.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,209,* @return converted matrix
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,211,RealMatrix getConvertedMatrix() {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,212,"return new RealMatrixImpl(data, false);"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,367," current state, element 1 for current state scaled first derivative, element"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,368, 2 for previous state ... element n-1 for (n-2)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,221,"* y<sub>k-p</sub>, element 1 for y<sub>k-(p+1)</sub> ... element q-p-1 for"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,222,"* y<sub>k-(q-1)</sub>, element q-p for h y'<sub>k-r</sub>, element q-p+1"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,223,* for h y'<sub>k-(r+1)</sub> ... element n-1 for h y'<sub>k-(s-1)</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,370," current state, element 1 for current state scaled first derivative, element"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,371, 2 for current state scaled second derivative ... element n-1 for current state
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,372, scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,225,"* y<sub>k</sub>, element 1 for h y'<sub>k</sub>, element 2 for"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,226,* h<sup>2</sup>/2 y''<sub>k</sub> ... element n-1 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,227,* h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,378,eturn matMtoN.operate(multistepHistory);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,233,return multistepToNordsieck.operate(multistepHistory);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,385," current state, row 1 for current state scaled first derivative, row"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,386, 2 for previous state ... row n-1 for (n-2)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,240,"* y<sub>k-p</sub>, row 1 for y<sub>k-(p+1)</sub> ... row q-p-1 for"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,241,"* y<sub>k-(q-1)</sub>, row q-p for h y'<sub>k-r</sub>, row q-p+1"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,242,* for h y'<sub>k-(r+1)</sub> ... row n-1 for h y'<sub>k-(s-1)</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,388," current state, row 1 for current state scaled first derivative, row"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,389, 2 for current state scaled second derivative ... row n-1 for current state
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,390, scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,244,"* y<sub>k</sub>, row 1 for h y'<sub>k</sub>, row 2 for"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,245,* h<sup>2</sup>/2 y''<sub>k</sub> ... row n-1 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,246,* h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,396,eturn matMtoN.multiply(multistepHistory);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,252,return multistepToNordsieck.multiply(multistepHistory);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,403," current state, element 1 for current state scaled first derivative, element"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,404, 2 for current state scaled second derivative ... element n-1 for current state
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,405, scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,259,"* y<sub>k</sub>, element 1 for h y'<sub>k</sub>, element 2 for"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,260,* h<sup>2</sup>/2 y''<sub>k</sub> ... element n-1 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,261,* h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,407," current state, element 1 for current state scaled first derivative, element"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,408, 2 for previous state ... element n-1 for (n-2)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,263,"* y<sub>k-p</sub>, element 1 for y<sub>k-(p+1)</sub> ... element q-p-1 for"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,264,"* y<sub>k-(q-1)</sub>, element q-p for h y'<sub>k-r</sub>, element q-p+1"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,265,* for h y'<sub>k-(r+1)</sub> ... element n-1 for h y'<sub>k-(s-1)</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,414,eturn matNtoM.operate(nordsieckHistory);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,271,return nordsieckToMultistep.operate(nordsieckHistory);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,421," current state, row 1 for current state scaled first derivative, row"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,422, 2 for current state scaled second derivative ... row n-1 for current state
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,423, scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,278,"* y<sub>k</sub>, row 1 for h y'<sub>k</sub>, row 2 for"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,279,* h<sup>2</sup>/2 y''<sub>k</sub> ... row n-1 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,280,* h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,425," current state, row 1 for current state scaled first derivative, row"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,426, 2 for previous state ... row n-1 for (n-2)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,282,"* y<sub>k-p</sub>, row 1 for y<sub>k-(p+1)</sub> ... row q-p-1 for"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,283,"* y<sub>k-(q-1)</sub>, row q-p for h y'<sub>k-r</sub>, row q-p+1"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,284,* for h y'<sub>k-(r+1)</sub> ... row n-1 for h y'<sub>k-(s-1)</sub>.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,432,eturn matNtoM.multiply(nordsieckHistory);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,436, Transform a scalar state history from multistep without derivatives form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,437, to Nordsieck form.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,438, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,439, The input state history must be in multistep without derivatives form with
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,440," element 0 for current state, element 1 for previous state ... element n-1"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,441, for (n-1)<sup>th</sup> previous state.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,442, The output state history will be in Nordsieck form with element 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,443," current state, element 1 for current state scaled first derivative, element"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,444, 2 for current state scaled second derivative ... element n-1 for current state
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,445, scaled (n-1)<sup>th</sup> derivative.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,446, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,447, @param mwdHistory scalar state history in multistep without derivatives form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,448, @return scalar state history in Nordsieck form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,450,ublic double[] multistepWithoutDerivativesToNordsieck(final double[] mwdHistory) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,451,eturn matMWDtoN.operate(mwdHistory);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,455, Transform a vectorial state history from multistep without derivatives form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,456, to Nordsieck form.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,457, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,458, The input state history must be in multistep without derivatives form with
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,459," row 0 for current state, row 1 for previous state ... row n-1"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,460, for (n-1)<sup>th</sup> previous state.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,461, The output state history will be in Nordsieck form with row 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,462," current state, row 1 for current state scaled first derivative, row"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,463, 2 for current state scaled second derivative ... row n-1 for current state
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,464, scaled (n-1)<sup>th</sup> derivative.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,465, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,466, @param mwdHistory vectorial state history in multistep without derivatives form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,467, @return vectorial state history in Nordsieck form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,469,ublic RealMatrix multistepWithoutDerivativesToNordsieck(final RealMatrix mwdHistory) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,470,eturn matMWDtoN.multiply(mwdHistory);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,474, Transform a scalar state history from Nordsieck form to multistep without
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,475, derivatives form.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,476, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,477, The input state history must be in Nordsieck form with element 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,478," current state, element 1 for current state scaled first derivative, element"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,479, 2 for current state scaled second derivative ... element n-1 for current state
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,480, scaled (n-1)<sup>th</sup> derivative.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,481, The output state history will be in multistep without derivatives form with
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,482," element 0 for current state, element 1 for previous state ... element n-1"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,483, for (n-1)<sup>th</sup> previous state.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,484, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,485, @param nordsieckHistory scalar state history in Nordsieck form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,486, @return scalar state history in multistep without derivatives form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,488,ublic double[] nordsieckToMultistepWithoutDerivatives(final double[] nordsieckHistory) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,489,eturn matNtoMWD.operate(nordsieckHistory);
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,493, Transform a vectorial state history from Nordsieck form to multistep without
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,494, derivatives form.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,495, <p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,496, The input state history must be in Nordsieck form with row 0 for
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,497," current state, row 1 for current state scaled first derivative, row"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,498, 2 for current state scaled second derivative ... row n-1 for current state
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,499, scaled (n-1)<sup>th</sup> derivative.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,500, The output state history will be in multistep without derivatives form with
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,501," row 0 for current state, row 1 for previous state ... row n-1"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,502, for (n-1)<sup>th</sup> previous state.
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,503, </p>
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,504, @param nordsieckHistory vectorial state history in Nordsieck form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,505, @return vectorial state history in multistep without derivatives form
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,507,ublic RealMatrix nordsieckToMultistepWithoutDerivatives(final RealMatrix nordsieckHistory) {
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,508,eturn matNtoMWD.multiply(nordsieckHistory);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,290,return nordsieckToMultistep.multiply(nordsieckHistory);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,20,mport java.math.BigInteger;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,28,import org.apache.commons.math.linear.FieldMatrix;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,40,ordsieckTransformer transformer = new NordsieckTransformer(2);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,40,"NordsieckTransformer transformer = new NordsieckTransformer(0, 2, 0, 0);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,41,"double[] nordsieckHistory = new double[] { 1.0,  2.0 };"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,42,"double[] multistepHistory = new double[] { 1.0, -1.0 };"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,43,"checkVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,44,"checkVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,47,public void testDimension2Der() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,48,"NordsieckTransformer transformer = new NordsieckTransformer(0, 1, 0, 1);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,42,"ouble[] mwdHistory       = new double[] { 1.0, -1.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,44,"heckVector(nordsieckHistory, transformer.multistepWithoutDerivativesToNordsieck(mwdHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,45,"heckVector(mwdHistory, transformer.nordsieckToMultistepWithoutDerivatives(nordsieckHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,51,ordsieckTransformer transformer = new NordsieckTransformer(3);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,56,"NordsieckTransformer transformer = new NordsieckTransformer(0, 3, 0, 0);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,57,"double[] nordsieckHistory = new double[] { 1.0,  4.0, 18.0 };"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,58,"double[] multistepHistory = new double[] { 1.0, 15.0, 65.0 };"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,59,"checkVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,60,"checkVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,63,public void testDimension3Der() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,64,"NordsieckTransformer transformer = new NordsieckTransformer(0, 2, 0, 1);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,53,"ouble[] mwdHistory       = new double[] { 1.0, 15.0, 65.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,54,"ouble[] multistepHistory = new double[] { 1.0,  4.0, 15.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,55,"heckVector(nordsieckHistory, transformer.multistepWithoutDerivativesToNordsieck(mwdHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,56,"heckVector(mwdHistory, transformer.nordsieckToMultistepWithoutDerivatives(nordsieckHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,66,"double[] multistepHistory = new double[] { 1.0, 15.0,  4.0 };"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,62,ordsieckTransformer transformer = new NordsieckTransformer(7);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,72,"NordsieckTransformer transformer = new NordsieckTransformer(0, 7, 0, 0);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,73,ealMatrix mwdHistory       =
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,83,RealMatrix multistepHistory =
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,94,RealMatrix m = transformer.multistepToNordsieck(multistepHistory);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,95,"assertEquals(0.0, m.subtract(nordsieckHistory).getNorm(), 1.0e-11);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,96,m = transformer.nordsieckToMultistep(nordsieckHistory);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,97,"assertEquals(0.0, m.subtract(multistepHistory).getNorm(), 1.0e-11);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,101,public void testDimension7Der() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,102,"NordsieckTransformer transformer = new NordsieckTransformer(0, 6, 0, 1);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,103,RealMatrix nordsieckHistory =
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,104,new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,105,"{  1,  2,  3 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,106,"{ -2,  1,  0 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,107,"{  1,  1,  1 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,108,"{  0, -1,  1 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,109,"{  1, -1,  2 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,110,"{  2,  0,  1 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,111,"{  1,  1,  2 }"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,112,"}, false);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,86,"    -2,     1,     0 },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,91," 10036, 15147, 29278 }"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,120,"{ 10036, 15147, 29278 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,121,"{    -2,     1,     0 }"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,94,ealMatrix m = transformer.multistepWithoutDerivativesToNordsieck(mwdHistory);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,95,"ssertEquals(0.0, m.subtract(nordsieckHistory).getNorm(), 1.0e-11);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,96, = transformer.nordsieckToMultistepWithoutDerivatives(nordsieckHistory);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,97,"ssertEquals(0.0, m.subtract(mwdHistory).getNorm(), 1.0e-11);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,98, = transformer.multistepToNordsieck(multistepHistory);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,124,RealMatrix m = transformer.multistepToNordsieck(multistepHistory);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,105,ublic void testInverseWithoutDerivatives() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,106,or (int n = 1; n < 20; ++n) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,107,igInteger[][] nTom =
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,108,ordsieckTransformer.buildNordsieckToMultistepWithoutDerivatives(n);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,109,igFraction[][] mTon =
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,110,ordsieckTransformer.buildMultistepWithoutDerivativesToNordsieck(n);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,111,or (int i = 0; i < n; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,112,or (int j = 0; j < n; ++j) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,113,igFraction s = BigFraction.ZERO;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,114,or (int k = 0; k < n; ++k) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,115, = s.add(mTon[i][k].multiply(nTom[k][j]));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,117,"ssertEquals((i == j) ? BigFraction.ONE : BigFraction.ZERO, s);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,123,ublic void testInverse() {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,124,or (int n = 1; n < 20; ++n) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,125,igInteger[][] nTom =
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,126,ordsieckTransformer.buildNordsieckToMultistep(n);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,127,igFraction[][] mTon =
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,128,ordsieckTransformer.buildMultistepToNordsieck(n);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,129,or (int i = 0; i < n; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,130,or (int j = 0; j < n; ++j) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,131,igFraction s = BigFraction.ZERO;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,132,or (int k = 0; k < n; ++k) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,133, = s.add(mTon[i][k].multiply(nTom[k][j]));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,135,"ssertEquals((i == j) ? BigFraction.ONE : BigFraction.ZERO, s);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,143,ordsieckTransformer.buildMultistepWithoutDerivativesToNordsieck(1));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,144,"heckMatrix(new int[][] { { 1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,145,ordsieckTransformer.buildNordsieckToMultistepWithoutDerivatives(1));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,146,"heckMatrix(1, new int[][] { { 1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,147,ordsieckTransformer.buildMultistepToNordsieck(1));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,148,"heckMatrix(new int[][] { { 1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,149,ordsieckTransformer.buildNordsieckToMultistep(1));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,133,"NordsieckTransformer.buildNordsieckToMultistep(0, 1, 0, 0));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,154,ordsieckTransformer.buildMultistepWithoutDerivativesToNordsieck(2));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,155,"heckMatrix(new int[][] { { 1, 0 }, { 1, -1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,156,ordsieckTransformer.buildNordsieckToMultistepWithoutDerivatives(2));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,157,"heckMatrix(1, new int[][] { { 1, 0 }, { 0, 1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,158,ordsieckTransformer.buildMultistepToNordsieck(2));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,159,"heckMatrix(new int[][] { { 1, 0 }, { 0, 1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,160,ordsieckTransformer.buildNordsieckToMultistep(2));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,138,"NordsieckTransformer.buildNordsieckToMultistep(0, 2, 0, 0));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,164,"heckMatrix(2, new int[][] { { 2, 0, 0 }, { 3, -4, 1 }, { 1, -2, 1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,165,ordsieckTransformer.buildMultistepWithoutDerivativesToNordsieck(3));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,166,"heckMatrix(new int[][] { { 1, 0, 0 }, { 1, -1, 1 }, { 1, -2, 4 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,167,ordsieckTransformer.buildNordsieckToMultistepWithoutDerivatives(3));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,168,"heckMatrix(1, new int[][] { { 1, 0, 0 }, { 0, 1, 0 }, { -1, 1, 1} },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,169,ordsieckTransformer.buildMultistepToNordsieck(3));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,170,"heckMatrix(new int[][] { { 1, 0, 0 }, { 0, 1, 0 }, { 1, -1, 1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,171,ordsieckTransformer.buildNordsieckToMultistep(3));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,142,"checkMatrix(1, new int[][] { { 1, 0, 0 }, { 1, -1, 1 }, { 1, -2, 4 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,143,"NordsieckTransformer.buildNordsieckToMultistep(0, 3, 0, 0));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,175,"heckMatrix(6, new int[][] { { 6, 0, 0, 0 }, { 11, -18, 9, -2 }, { 6, -15, 12, -3 }, { 1, -3, 3, -1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,176,ordsieckTransformer.buildMultistepWithoutDerivativesToNordsieck(4));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,177,"heckMatrix(new int[][] { { 1, 0, 0, 0 }, { 1, -1, 1, -1 }, { 1, -2, 4, -8 }, { 1, -3, 9, -27 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,178,ordsieckTransformer.buildNordsieckToMultistepWithoutDerivatives(4));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,179,"heckMatrix(4, new int[][] { { 4, 0, 0, 0 }, { 0, 4, 0, 0 }, { -7, 6, 8, -1 }, { -3, 2, 4, -1 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,180,ordsieckTransformer.buildMultistepToNordsieck(4));
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,181,"heckMatrix(new int[][] { { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 1, -1, 1, -1 }, { 1, -2, 4, -8 } },"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,182,ordsieckTransformer.buildNordsieckToMultistep(4));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,147,"checkMatrix(1, new int[][] { { 1, 0, 0, 0 }, { 1, -1, 1, -1 }, { 1, -2, 4, -8 }, { 1, -3, 9, -27 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,148,"NordsieckTransformer.buildNordsieckToMultistep(0, 4, 0, 0));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,186,andom r = new Random(1847222905841997856l);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,187,or (int n = 2; n < 9; ++n) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,152,Random random = new Random(1847222905841997856l);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,153,for (int n = 2; n < 10; ++n) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,154,for (int m = 0; m < 10; ++m) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,156,"// choose p, q, r, s"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,157,int qMinusP = 1 + random.nextInt(n);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,158,int sMinusR = n - qMinusP;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,159,"int p       = random.nextInt(5) - 2; // possible values: -2, -1, 0, 1, 2"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,160,int q       = p + qMinusP;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,161,"int r       = random.nextInt(5) - 2; // possible values: -2, -1, 0, 1, 2"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,162,int s       = r + sMinusR;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,164,// build a polynomial and its derivatives
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,165,double[] coeffs = new double[n + 1];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,166,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,167,coeffs[i] = 2.0 * random.nextDouble() - 1.0;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,169,PolynomialFunction[] polynomials = new PolynomialFunction[n];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,170,polynomials[0] = new PolynomialFunction(coeffs);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,171,for (int i = 1; i < polynomials.length; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,172,polynomials[i] = (PolynomialFunction) polynomials[i - 1].derivative();
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,189,/ build a polynomial and its derivatives
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,190,ouble[] coeffs = new double[n + 1];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,191,or (int i = 0; i < n; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,192,oeffs[i] = 2 * r.nextDouble() - 1.0;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,194,olynomialFunction[] polynomials = new PolynomialFunction[n];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,195,olynomials[0] = new PolynomialFunction(coeffs);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,196,or (int k = 1; k < polynomials.length; ++k) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,197,olynomials[k] = (PolynomialFunction) polynomials[k - 1].derivative();
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,199,ouble h = 0.01;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,201,/ build a state history in multistep form
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,202,ouble[] multistepHistory = new double[n];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,203,ultistepHistory[0] = polynomials[0].value(1.0);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,204,ultistepHistory[1] = h * polynomials[1].value(1.0);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,205,or (int i = 2; i < multistepHistory.length; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,206,ultistepHistory[i] = polynomials[0].value(1.0 - (i - 1) * h);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,175,double x = 0.75;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,176,double h = 0.01;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,209,/ build the same state history in multistep without derivatives form
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,210,ouble[] mwdHistory = new double[n];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,211,or (int i = 0; i < multistepHistory.length; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,212,wdHistory[i] = polynomials[0].value(1.0 - i * h);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,178,// build a state history in multistep form
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,179,double[] multistepHistory = new double[n];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,180,for (int k = p; k < q; ++k) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,181,multistepHistory[k-p] = polynomials[0].value(x - k * h);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,183,for (int k = r; k < s; ++k) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,184,multistepHistory[k + qMinusP - r] = h * polynomials[1].value(x - k * h);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,215,/ build the same state history in Nordsieck form
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,216,ouble[] nordsieckHistory = new double[n];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,217,ouble scale = 1.0;
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,218,or (int i = 0; i < nordsieckHistory.length; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,219,ordsieckHistory[i] = scale * polynomials[i].value(1.0);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,220,cale *= h / (i + 1);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,187,// build the same state history in Nordsieck form
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,188,double[] nordsieckHistory = new double[n];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,189,double scale = 1.0;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,190,for (int i = 0; i < nordsieckHistory.length; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,191,nordsieckHistory[i] = scale * polynomials[i].value(x);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,192,scale *= h / (i + 1);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,223,/ check the transform is exact for these polynomials states
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,224,ordsieckTransformer transformer = new NordsieckTransformer(n);
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,225,"heckVector(nordsieckHistory, transformer.multistepWithoutDerivativesToNordsieck(mwdHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,226,"heckVector(mwdHistory,       transformer.nordsieckToMultistepWithoutDerivatives(nordsieckHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,227,"heckVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,228,"heckVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,195,// check the transform is exact for these polynomials states
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,196,"NordsieckTransformer transformer = new NordsieckTransformer(p, q, r, s);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,197,"checkVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,198,"checkVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,236,"ssertEquals(reference[i], candidate[i], 1.0e-14);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,207,"assertEquals(reference[i], candidate[i], 2.0e-12);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,240,"rivate void checkMatrix(int[][] reference, BigInteger[][] candidate) {"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,241,"ssertEquals(reference.length, candidate.length);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,242,or (int i = 0; i < reference.length; ++i) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,243,nt[] rRow = reference[i];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,244,igInteger[] cRow = candidate[i];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,245,"ssertEquals(rRow.length, cRow.length);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,246,or (int j = 0; j < rRow.length; ++j) {
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,247,"ssertEquals(rRow[j], cRow[j].intValue());"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,252,"rivate void checkMatrix(int denominator, int[][] reference, BigFraction[][] candidate) {"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,253,"ssertEquals(reference.length, candidate.length);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,211,"private void checkMatrix(int denominator, int[][] reference, FieldMatrix<BigFraction> candidate) {"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,212,"assertEquals(reference.length, candidate.getRowDimension());"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,256,igFraction[] cRow = candidate[i];
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,257,"ssertEquals(rRow.length, cRow.length);"
False,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,259,"ssertEquals(new BigFraction(rRow[j], denominator), cRow[j]);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,216,"assertEquals(new BigFraction(rRow[j], denominator), candidate.getEntry(i, j));"

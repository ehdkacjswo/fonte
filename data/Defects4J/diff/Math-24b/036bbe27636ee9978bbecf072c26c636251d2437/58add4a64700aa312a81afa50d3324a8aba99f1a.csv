is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,21,mport java.io.IOException;
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,22,mport java.io.ObjectInputStream;
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,23,mport java.io.ObjectOutputStream;
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,24,mport java.lang.reflect.Field;
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,21,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,44,** Transformer. */
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,45,rotected final transient NordsieckTransformer transformer;
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,59,rotected RealMatrix nordsieck;
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,51,protected Array2DRowRealMatrix nordsieck;
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,107,ransformer = NordsieckTransformer.getInstance(nSteps + 1);
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,144,ransformer = NordsieckTransformer.getInstance(nSteps + 1);
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,209,/** Initialize the high order scaled derivatives at step start.
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,210,* @param first first scaled derivative at step start
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,211,"* @param multistep scaled derivatives after step start (hy'1, ..., hy'k-1)"
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,212,* will be modified
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,213,* @return high order derivatives at step start
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,215,"protected abstract Array2DRowRealMatrix initializeHighOrderDerivatives(final double[] first,"
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,216,final double[][] multistep);
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,269,** Serialize the instance.
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,270, @param oos stream where object should be written
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,271, @throws IOException if object cannot be written to stream
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,273,rivate void writeObject(ObjectOutputStream oos)
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,274,hrows IOException {
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,275,os.defaultWriteObject();
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,276,os.writeInt(nSteps);
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,279,** Deserialize the instance.
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,280, @param ois stream from which the object should be read
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,281, @throws ClassNotFoundException if a class in the stream cannot be found
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,282, @throws IOException if object cannot be read from the stream
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,284,rivate void readObject(ObjectInputStream ois)
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,285,"hrows ClassNotFoundException, IOException {"
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,286,ry {
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,288,is.defaultReadObject();
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,289,inal int nSteps = ois.readInt();
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,291,inal Class<MultistepIntegrator> cl = MultistepIntegrator.class;
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,292,"inal Field f = cl.getDeclaredField(""transformer"");"
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,293,.setAccessible(true);
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,294,".set(this, NordsieckTransformer.getInstance(nSteps + 1));"
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,296, catch (NoSuchFieldException nsfe) {
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,297,OException ioe = new IOException();
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,298,oe.initCause(nsfe);
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,299,hrow ioe;
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,300, catch (IllegalAccessException iae) {
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,301,OException ioe = new IOException();
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,302,oe.initCause(iae);
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,303,hrow ioe;
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,268,/** Transformer used to convert the first step to Nordsieck representation. */
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,269,public static interface NordsieckTransformer {
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,270,/** Initialize the high order scaled derivatives at step start.
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,271,* @param first first scaled derivative at step start
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,272,"* @param multistep scaled derivatives after step start (hy'1, ..., hy'k-1)"
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,273,* will be modified
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,274,* @return high order derivatives at step start
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,276,"RealMatrix initializeHighOrderDerivatives(double[] first, double[][] multistep);"
False,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,347,"ordsieck = transformer.initializeHighOrderDerivatives(scaled, multistep);"
True,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/MultistepIntegrator.java,318,"nordsieck = initializeHighOrderDerivatives(scaled, multistep);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,20,mport org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,20,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,24,mport org.apache.commons.math.ode.MultistepIntegrator;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,142,ublic class AdamsBashforthIntegrator extends MultistepIntegrator {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,141,public class AdamsBashforthIntegrator extends AdamsIntegrator {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,145, Build an Adams-Bashforth with the given order and step size.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,144,* Build an Adams-Bashforth integrator with the given order and step control parameters.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,165, Build an Adams-Bashforth with the given order and step size.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,164,* Build an Adams-Bashforth integrator with the given order and step control parameters.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,264,inal RealMatrix nordsieckTmp =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,265,ransformer.updateHighOrderDerivativesPhase1(nordsieck);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,266,"ransformer.updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,263,final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,264,"updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,20,import org.apache.commons.math.linear.Array2DRowRealMatrix;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,21,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,22,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,23,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,24,import org.apache.commons.math.ode.IntegratorException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,25,import org.apache.commons.math.ode.MultistepIntegrator;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,28,/** Base class for {@link AdamsBashforthIntegrator Adams-Bashforth} and
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,29,* {@link AdamsMoultonIntegrator Adams-Moulton} integrators.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,30,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,31,* @since 2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,33,public abstract class AdamsIntegrator extends MultistepIntegrator {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,35,/** Transformer. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,36,private final AdamsNordsieckTransformer transformer;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,39,* Build an Adams integrator with the given order and step control prameters.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,40,* @param name name of the method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,41,* @param nSteps number of steps of the method excluding the one being computed
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,42,* @param order order of the method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,43,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,44,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,45,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,46,* integration)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,47,* @param scalAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,48,* @param scalRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,49,* @exception IllegalArgumentException if order is 1 or less
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,51,"public AdamsIntegrator(final String name, final int nSteps, final int order,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,52,"final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,53,"final double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,54,final double scalRelativeTolerance)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,55,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,56,"super(name, nSteps, order, minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,57,"scalAbsoluteTolerance, scalRelativeTolerance);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,58,transformer = AdamsNordsieckTransformer.getInstance(nSteps);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,62,* Build an Adams integrator with the given order and step control parameters.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,63,* @param name name of the method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,64,* @param nSteps number of steps of the method excluding the one being computed
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,65,* @param order order of the method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,66,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,67,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,68,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,69,* integration)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,70,* @param vecAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,71,* @param vecRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,72,* @exception IllegalArgumentException if order is 1 or less
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,74,"public AdamsIntegrator(final String name, final int nSteps, final int order,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,75,"final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,76,"final double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,77,final double[] vecRelativeTolerance)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,78,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,79,"super(name, nSteps, order, minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,80,"vecAbsoluteTolerance, vecRelativeTolerance);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,81,transformer = AdamsNordsieckTransformer.getInstance(nSteps);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,84,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,85,@Override
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,86,"public abstract double integrate(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,87,"final double t0, final double[] y0,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,88,"final double t, final double[] y)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,89,"throws DerivativeException, IntegratorException;"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,91,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,92,@Override
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,93,"protected Array2DRowRealMatrix initializeHighOrderDerivatives(final double[] first,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,94,final double[][] multistep) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,95,"return transformer.initializeHighOrderDerivatives(first, multistep);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,98,/** Update the high order scaled derivatives for Adams integrators (phase 1).
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,99,* <p>The complete update of high order derivatives has a form similar to:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,100,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,101,* r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,102,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,103,* this method computes the P<sup>-1</sup> A P r<sub>n</sub> part.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,104,* @param highOrder high order scaled derivatives
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,105,"* (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,106,* @return updated high order derivatives
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,107,"* @see #updateHighOrderDerivativesPhase2(double[], double[], RealMatrix)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,109,public Array2DRowRealMatrix updateHighOrderDerivativesPhase1(final Array2DRowRealMatrix highOrder) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,110,return transformer.updateHighOrderDerivativesPhase1(highOrder);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,113,/** Update the high order scaled derivatives Adams integrators (phase 2).
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,114,* <p>The complete update of high order derivatives has a form similar to:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,115,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,116,* r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,117,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,118,* this method computes the (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u part.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,119,* <p>Phase 1 of the update must already have been performed.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,120,* @param start first order scaled derivatives at step start
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,121,* @param end first order scaled derivatives at step end
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,122,"* @param highOrder high order scaled derivatives, will be modified"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,123,"* (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,124,* @see #updateHighOrderDerivativesPhase1(RealMatrix)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,126,"public void updateHighOrderDerivativesPhase2(final double[] start,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,127,"final double[] end,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,128,final Array2DRowRealMatrix highOrder) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,129,"transformer.updateHighOrderDerivativesPhase2(start, end, highOrder);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,22,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,23,mport org.apache.commons.math.linear.RealMatrix;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,28,mport org.apache.commons.math.ode.MultistepIntegrator;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,131,   <li>R<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,130,*   <li>R<sub>n+1</sub> = (s<sub>1</sub>(n) - S<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,159,ublic class AdamsMoultonIntegrator extends MultistepIntegrator {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,158,public class AdamsMoultonIntegrator extends AdamsIntegrator {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,182, Build an Adams-Moulton integrator with the given order and step size.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,181,* Build an Adams-Moulton integrator with the given order and error control parameters.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,267,inal RealMatrix nordsieckTmp =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,268,ransformer.updateHighOrderDerivativesPhase1(nordsieck);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,269,"ransformer.updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,266,final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,267,"updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,284,"ransformer.updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,282,"updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);"

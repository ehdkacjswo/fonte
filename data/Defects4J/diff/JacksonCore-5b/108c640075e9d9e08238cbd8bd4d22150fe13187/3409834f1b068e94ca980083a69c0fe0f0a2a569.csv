is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,458, else {
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,459,"/ No room for all, need to copy part(s):"
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,460,f (max > 0) {
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,461,"ystem.arraycopy(c, start, curr, _currentSize, max);"
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,462,tart += max;
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,463,en -= max;
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,465,/ And then allocate new segment; we are guaranteed to now
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,466,/ have enough room in segment.
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,467,xpand(len); // note: curr != _currentSegment after this
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,468,"ystem.arraycopy(c, start, _currentSegment, 0, len);"
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,469,currentSize = len;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,458,return;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,460,"// No room for all, need to copy part(s):"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,461,if (max > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,462,"System.arraycopy(c, start, curr, _currentSize, max);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,463,start += max;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,464,len -= max;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,466,/* And then allocate new segment; we are guaranteed to now
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,467,* have enough room in segment.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,469,"// Except, as per [Issue-24], not for HUGE appends... so:"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,470,do {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,471,expand(len);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,472,"int amount = Math.min(_currentSegment.length, len);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,473,"System.arraycopy(c, start, _currentSegment, 0, amount);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,474,_currentSize += amount;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,475,start += amount;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,476,len -= amount;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,477,} while (len > 0);
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,488, else {
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,489,"/ No room for all, need to copy part(s):"
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,490,f (max > 0) {
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,491,"tr.getChars(offset, offset+max, curr, _currentSize);"
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,492,en -= max;
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,493,ffset += max;
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,495,* And then allocate new segment; we are guaranteed to now
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,496, have enough room in segment.
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,498,xpand(len);
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,499,"tr.getChars(offset, offset+len, _currentSegment, 0);"
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,500,currentSize = len;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,495,return;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,497,"// No room for all, need to copy part(s):"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,498,if (max > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,499,"str.getChars(offset, offset+max, curr, _currentSize);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,500,len -= max;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,501,offset += max;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,503,/* And then allocate new segment; we are guaranteed to now
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,504,* have enough room in segment.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,506,"// Except, as per [Issue-24], not for HUGE appends... so:"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,507,do {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,508,expand(len);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,509,"int amount = Math.min(_currentSegment.length, len);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,510,"str.getChars(offset, offset+amount, _currentSegment, 0);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,511,_currentSize += amount;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,512,offset += amount;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,513,len -= amount;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,514,} while (len > 0);
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,39,public void testLongAppend()
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,41,final int len = TextBuffer.MAX_SEGMENT_LEN * 3 / 2;
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,42,StringBuilder sb = new StringBuilder(len);
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,43,for (int i = 0; i < len; ++i) {
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,44,sb.append('x');
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,46,final String STR = sb.toString();
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,47,"final String EXP = ""a"" + STR + ""c"";"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,49,// ok: first test with String:
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,50,TextBuffer tb = new TextBuffer(new BufferRecycler());
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,51,tb.append('a');
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,52,"tb.append(STR, 0, len);"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,53,tb.append('c');
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,54,"assertEquals(len+2, tb.size());"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,55,"assertEquals(EXP, tb.contentsAsString());"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,57,// then char[]
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,58,tb = new TextBuffer(new BufferRecycler());
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,59,tb.append('a');
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,60,"tb.append(STR.toCharArray(), 0, len);"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,61,tb.append('c');
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,62,"assertEquals(len+2, tb.size());"
True,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,63,"assertEquals(EXP, tb.contentsAsString());"

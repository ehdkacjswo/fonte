is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1570,eturn parseLongName(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1570,"return parseLongName(i, codes);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1573,rotected Name parseLongName(int q) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1573,"protected Name parseLongName(int q, final int[] codes) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1576,inal int[] codes = _icLatin1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1576,final byte[] buf = _inputBuffer;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1579,hile (true) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1580,* Let's offline if we hit buffer boundary (otherwise would
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1581," need to [try to] align input, which is bit complicated"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1582, and may not always be possible)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1584,f ((_inputEnd - _inputPtr) < 4) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1585,"eturn parseEscapedName(_quadBuffer, qlen, 0, q, 0);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1587,/ Otherwise can skip boundary checks for 4 bytes in loop
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1589,nt i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1579,while ((_inputPtr + 4) <= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1580,int i = buf[_inputPtr++] & 0xFF;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1598, = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1589,i = buf[_inputPtr++] & 0xFF;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1607, = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1598,i = buf[_inputPtr++] & 0xFF;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1616, = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1607,i = buf[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1623,/* Let's offline if we hit buffer boundary (otherwise would
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1624,"* need to [try to] align input, which is bit complicated"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1625,* and may not always be possible)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1627,"return parseEscapedName(_quadBuffer, qlen, 0, q, 0);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1050,"/ Otherwise, need to copy the incoming buffer"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1051,nt[] buf = new int[qlen];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1052,"ystem.arraycopy(quads, 0, buf, 0, qlen);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1053,"eturn new NameN(name, hash, buf, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1050,"return NameN.construct(name, hash, quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,3,import java.util.Arrays;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,11,"private final int q1, q2, q3, q4; // first four quads"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,12,private final int qlen; // total number of quads (4 + q.length)
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,10,rivate final int qlen;
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,12,"ameN(String name, int hash, int[] quads, int quadLen) {"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,15,"NameN(String name, int hash, int q1, int q2, int q3, int q4,"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,16,"int[] quads, int quadLen) {"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,18,this.q1 = q1;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,19,this.q2 = q2;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,20,this.q3 = q3;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,21,this.q4 = q4;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,22,q = quads;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,23,qlen = quadLen;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,26,"public static NameN construct(String name, int hash, int[] q, int qlen)"
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,17,f (quadLen < 3) {
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,18,"hrow new IllegalArgumentException(""Qlen must >= 3"");"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,31,if (qlen < 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,32,throw new IllegalArgumentException();
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,20, = quads;
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,21,len = quadLen;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,34,int q1 = q[0];
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,35,int q2 = q[1];
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,36,int q3 = q[2];
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,37,int q4 = q[3];
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,39,int rem = qlen - 4;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,41,int[] buf;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,43,if (rem > 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,44,"buf = Arrays.copyOfRange(q, 4, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,45,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,46,buf = null;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,48,"return new NameN(name, hash, q1, q2, q3, q4, buf, qlen);"
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,36,"* 26-Nov-2008, tatus: Strange, but it does look like"
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,37,"   unrolling here is counter-productive, reducing"
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,38,   speed. Perhaps it prevents inlining by HotSpot or
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,39,   something...
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,41,"/ Will always have >= 3 quads, can unroll"
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,43,f (quads[0] == mQuads[0]
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,44,& quads[1] == mQuads[1]
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,45,& quads[2] == mQuads[2]) {
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,46,or (int i = 3; i < qlen; ++i) {
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,47,f (quads[i] != mQuads[i]) {
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,48,eturn false;
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,51,eturn true;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,64,"// Will always have >= 4 quads, can unroll"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,65,if (quads[0] != q1) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,66,if (quads[1] != q2) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,67,if (quads[2] != q3) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,68,if (quads[3] != q4) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,70,switch (len) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,71,default:
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,72,return _equals2(quads);
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,73,case 8:
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,74,if (quads[7] != q[3]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,75,case 7:
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,76,if (quads[6] != q[2]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,77,case 6:
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,78,if (quads[5] != q[1]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,79,case 5:
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,80,if (quads[4] != q[0]) return false;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,81,case 4:
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,83,return true;
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,55,/ or simpler way without unrolling:
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,56,or (int i = 0; i < qlen; ++i) {
False,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,57,f (quads[i] != q[i]) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,86,private final boolean _equals2(int[] quads)
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,88,final int end = qlen-4;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,89,for (int i = 0; i < end; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,90,if (quads[i+4] != q[i]) {

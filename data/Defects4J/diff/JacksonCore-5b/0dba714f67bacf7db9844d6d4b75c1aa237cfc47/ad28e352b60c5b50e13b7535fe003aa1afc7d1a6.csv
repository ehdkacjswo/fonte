is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,98,* Feature that determines whether {@link java.math.BigDecimal} entries are
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,99,* serialized using {@link java.math.BigDecimal#toPlainString()} to prevent
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,100,* values to be written using scientific notation.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,101,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,102,"* Feature is disabled by default, so default output mode is used; this generally"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,103,* depends on how {@link BigDecimal} has been created.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,105,* @since 2.3
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,107,"WRITE_BIGDECIMAL_AS_PLAIN(false),"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,8,import com.fasterxml.jackson.core.JsonGenerator.Feature;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,907,} else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,908,writeRaw(value.toPlainString());
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,713,} else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,714,writeRaw(value.toPlainString());
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,21,assertFalse(jg.isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,67,// [Issue#85]
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,68,public void testBigDecimalAsPlain() throws IOException
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,70,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,71,"BigDecimal ENG = new BigDecimal(""1E+2"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,73,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,74,JsonGenerator jg = jf.createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,75,jg.writeNumber(ENG);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,76,jg.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,77,"assertEquals(""1E+2"", sw.toString());"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,79,"jf.configure(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,80,sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,81,jg = jf.createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,82,jg.writeNumber(ENG);
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,83,jg.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,84,"assertEquals(""100"", sw.toString());"

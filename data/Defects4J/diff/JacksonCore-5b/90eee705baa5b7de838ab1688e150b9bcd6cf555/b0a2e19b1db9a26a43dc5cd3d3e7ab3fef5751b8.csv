is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,1,package perf;
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,5,public class ManualReadPerfWithMedia extends ParserTestBase
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,7,protected final JsonFactory _factory;
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,9,protected final String _json;
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,11,"private ManualReadPerfWithMedia(JsonFactory f, String json) throws Exception {"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,12,_factory = f;
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,13,_json = json;
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,16,public static void main(String[] args) throws Exception
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,18,if (args.length != 0) {
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,19,"System.err.println(""Usage: java ..."");"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,20,System.exit(1);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,22,MediaItem.Content content = new MediaItem.Content();
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,23,"content.setTitle(""Performance micro-benchmark, to be run manually"");"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,24,"content.addPerson(""William"");"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,25,"content.addPerson(""Robert"");"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,26,content.setWidth(900);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,27,content.setHeight(120);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,28,content.setBitrate(256000);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,29,content.setDuration(3600 * 1000L);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,30,"content.setCopyright(""none"");"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,31,content.setPlayer(MediaItem.Player.FLASH);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,32,"content.setUri(""http://whatever.biz"");"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,34,MediaItem input = new MediaItem(content);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,35,"input.addPhoto(new MediaItem.Photo(""http://a.com"", ""title1"", 200, 100, MediaItem.Size.LARGE));"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,36,"input.addPhoto(new MediaItem.Photo(""http://b.org"", ""title2"", 640, 480, MediaItem.Size.SMALL));"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,38,final JsonFactory f = new JsonFactory();
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,39,final String jsonStr = input.asJsonString(f);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,40,"final byte[] json = jsonStr.getBytes(""UTF-8"");"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,42,"new ManualReadPerfWithMedia(f, jsonStr).test(""Reader"", ""char[]"", json.length);"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,45,protected void testRead1(int reps) throws Exception
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,47,final String input = _json;
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,48,while (--reps >= 0) {
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,49,JsonParser p = _factory.createParser(input);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,50,_stream(p);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,51,p.close();
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,55,protected void testRead2(int reps) throws Exception
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,57,final String input = _json;
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,58,while (--reps >= 0) {
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,60,final char[] ch = input.toCharArray();
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,61,"JsonParser p = _factory.createParser(ch, 0, ch.length);"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,63,JsonParser p = _factory.createParser(input);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,64,_stream(p);
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,65,p.close();
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,69,private final void _stream(JsonParser p) throws Exception
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,71,JsonToken t;
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,73,while ((t = p.nextToken()) != null) {
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,74,"// force decoding/reading of scalar values too (booleans are fine, nulls too)"
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,75,if (t == JsonToken.VALUE_STRING) {
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,76,p.getText();
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,77,} else if (t == JsonToken.VALUE_NUMBER_INT) {
True,src/test/java/perf/ManualReadPerfWithMedia.java,src/test/java/perf/ManualReadPerfWithMedia.java,78,p.getLongValue();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,1,package perf;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,3,import java.io.IOException;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,4,import java.io.StringWriter;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,5,import java.util.*;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,7,import com.fasterxml.jackson.core.*;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,9,public class MediaItem
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,11,"public enum Player { JAVA, FLASH;  }"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,12,"public enum Size { SMALL, LARGE; }"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,14,private List<Photo> _photos;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,15,private Content _content;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,17,public MediaItem() { }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,19,public MediaItem(Content c)
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,21,_content = c;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,24,public void addPhoto(Photo p) {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,25,if (_photos == null) {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,26,_photos = new ArrayList<Photo>();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,28,_photos.add(p);
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,31,public List<Photo> getImages() { return _photos; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,32,public void setImages(List<Photo> p) { _photos = p; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,34,public Content getContent() { return _content; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,35,public void setContent(Content c) { _content = c; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,37,public String asJsonString(JsonFactory f) throws IOException
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,39,StringWriter w = new StringWriter();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,40,JsonGenerator gen = f.createGenerator(w);
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,41,write(gen);
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,42,gen.close();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,43,w.close();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,44,return w.toString();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,47,public void write(JsonGenerator gen) throws IOException
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,49,gen.writeStartObject();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,51,"gen.writeFieldName(""content"");"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,52,if (_content == null) {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,53,gen.writeNull();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,54,} else {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,55,_content.write(gen);
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,57,"gen.writeFieldName(""photos"");"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,58,if (_photos == null) {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,59,gen.writeNull();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,60,} else {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,61,gen.writeStartArray();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,62,"for (int i = 0, len = _photos.size(); i < len; ++i) {"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,63,_photos.get(i).write(gen);
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,65,gen.writeEndArray();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,67,gen.writeEndObject();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,72,/* Helper types
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,76,public static class Photo
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,78,private String _uri;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,79,private String _title;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,80,private int _width;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,81,private int _height;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,82,private Size _size;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,84,public Photo() {}
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,85,"public Photo(String uri, String title, int w, int h, Size s)"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,87,_uri = uri;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,88,_title = title;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,89,_width = w;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,90,_height = h;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,91,_size = s;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,94,public String getUri() { return _uri; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,95,public String getTitle() { return _title; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,96,public int getWidth() { return _width; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,97,public int getHeight() { return _height; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,98,public Size getSize() { return _size; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,100,public void setUri(String u) { _uri = u; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,101,public void setTitle(String t) { _title = t; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,102,public void setWidth(int w) { _width = w; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,103,public void setHeight(int h) { _height = h; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,104,public void setSize(Size s) { _size = s; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,106,public void write(JsonGenerator gen) throws IOException
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,108,gen.writeStartObject();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,109,"gen.writeStringField(""uri"", _uri);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,110,"gen.writeStringField(""title"", _title);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,111,"gen.writeNumberField(""width"", _width);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,112,"gen.writeNumberField(""height"", _height);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,113,if (_size == null) {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,114,"gen.writeNullField(""size"");"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,115,} else {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,116,"gen.writeStringField(""size"", _size.name());"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,118,gen.writeEndObject();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,122,public static class Content
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,124,private String _uri;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,125,private String _title;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,126,private int _width;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,127,private int _height;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,128,private String _format;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,129,private long _duration;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,130,private long _size;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,131,private int _bitrate;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,132,private String _copyright;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,133,private Player _player;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,135,private List<String> _persons;
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,137,public void write(JsonGenerator gen) throws IOException
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,139,gen.writeStartObject();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,141,"gen.writeStringField(""uri"", _uri);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,142,"gen.writeStringField(""title"", _title);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,144,"gen.writeNumberField(""width"", _width);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,145,"gen.writeNumberField(""height"", _height);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,147,"gen.writeStringField(""format"", _format);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,149,"gen.writeNumberField(""duration"", _duration);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,150,"gen.writeNumberField(""size"", _size);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,151,"gen.writeNumberField(""bitrate"", _bitrate);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,152,"gen.writeStringField(""copyright"", _copyright);"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,154,if (_player == null) {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,155,"gen.writeNullField(""player"");"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,156,} else {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,157,"gen.writeStringField(""player"", _player.name());"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,160,"gen.writeFieldName(""photos"");"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,161,if (_persons == null) {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,162,gen.writeNull();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,163,} else {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,164,gen.writeStartArray();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,165,"for (int i = 0, len = _persons.size(); i < len; ++i) {"
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,166,gen.writeString(_persons.get(i));
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,168,gen.writeEndArray();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,170,gen.writeEndObject();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,173,public Content() { }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,175,public void addPerson(String p) {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,176,if (_persons == null) {
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,177,_persons = new ArrayList<String>();
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,179,_persons.add(p);
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,182,public Player getPlayer() { return _player; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,183,public String getUri() { return _uri; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,184,public String getTitle() { return _title; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,185,public int getWidth() { return _width; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,186,public int getHeight() { return _height; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,187,public String getFormat() { return _format; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,188,public long getDuration() { return _duration; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,189,public long getSize() { return _size; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,190,public int getBitrate() { return _bitrate; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,191,public List<String> getPersons() { return _persons; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,192,public String getCopyright() { return _copyright; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,194,public void setPlayer(Player p) { _player = p; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,195,public void setUri(String u) {  _uri = u; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,196,public void setTitle(String t) {  _title = t; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,197,public void setWidth(int w) {  _width = w; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,198,public void setHeight(int h) {  _height = h; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,199,public void setFormat(String f) {  _format = f;  }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,200,public void setDuration(long d) {  _duration = d; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,201,public void setSize(long s) {  _size = s; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,202,public void setBitrate(int b) {  _bitrate = b; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,203,public void setPersons(List<String> p) {  _persons = p; }
True,src/test/java/perf/MediaItem.java,src/test/java/perf/MediaItem.java,204,public void setCopyright(String c) {  _copyright = c; }
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,1,package perf;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,3,abstract class ParserTestBase
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,5,protected int hash;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,7,"protected <T1, T2> void test(String desc1, String desc2, int expSize)"
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,8,throws Exception
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,10,// guessing we have 500 byte
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,11,final int REPS = (int) ((double) (8 * 1000 * 1000) / (double) expSize);
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,13,"System.out.printf(""Estimating %d bytes to read; will do %d repetitions\n"","
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,14,"expSize, REPS);"
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,16,int i = 0;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,17,int roundsDone = 0;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,18,final int TYPES = 2;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,19,final int WARMUP_ROUNDS = 5;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,21,final long[] times = new long[TYPES];
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,23,while (true) {
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,24,try {  Thread.sleep(100L); } catch (InterruptedException ie) { }
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,25,int round = (i++ % TYPES);
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,27,String msg;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,28,boolean lf = (round == 0);
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,30,long msecs;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,32,switch (round) {
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,33,case 0:
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,34,msg = desc1;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,35,msecs = _testRead1(REPS);
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,36,break;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,37,case 1:
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,38,msg = desc2;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,39,msecs = _testRead2(REPS);
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,40,break;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,41,default:
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,42,throw new Error();
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,45,// skip first 5 rounds to let results stabilize
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,46,if (roundsDone >= WARMUP_ROUNDS) {
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,47,times[round] += msecs;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,50,"System.out.printf(""Test '%s' [hash: 0x%s] -> %d msecs\n"", msg, this.hash, msecs);"
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,51,if (lf) {
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,52,++roundsDone;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,53,if ((roundsDone % 3) == 0 && roundsDone > WARMUP_ROUNDS) {
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,54,double den = (double) (roundsDone - WARMUP_ROUNDS);
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,55,"System.out.printf(""Averages after %d rounds (""+desc1+"" / ""+desc2+""): %.1f / %.1f msecs\n"","
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,56,"(int) den,"
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,57,"times[0] / den, times[1] / den);"
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,60,System.out.println();
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,62,if ((i % 17) == 0) {
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,63,"System.out.println(""[GC]"");"
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,64,Thread.sleep(100L);
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,65,System.gc();
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,66,Thread.sleep(100L);
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,71,protected long _testRead1(int reps) throws Exception {
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,72,final long start = System.currentTimeMillis();
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,73,testRead1(reps);
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,74,return System.currentTimeMillis() - start;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,77,protected long _testRead2(int reps) throws Exception {
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,78,final long start = System.currentTimeMillis();
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,79,testRead2(reps);
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,80,return System.currentTimeMillis() - start;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,83,protected abstract void testRead1(int reps) throws Exception;
True,src/test/java/perf/ParserTestBase.java,src/test/java/perf/ParserTestBase.java,85,protected abstract void testRead2(int reps) throws Exception;

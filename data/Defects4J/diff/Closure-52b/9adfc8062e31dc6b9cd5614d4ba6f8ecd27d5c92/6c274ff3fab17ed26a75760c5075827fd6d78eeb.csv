is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,23,import com.google.javascript.jscomp.Scope.Var;
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,128,/ TODO(user): This is purely a subtree peep hole optimization. We
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,129,/ can rewrite this so it no longer have a sperate gather and merge stage.
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,129,// If a VAR is declared like
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,130,// var x;
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,131,// then we should not create new VAR nodes for it later in the tree.
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,132,// This is a workaround for a bug in Firefox.
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,133,private final Set<Var> blacklistedVars = Sets.newHashSet();
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,136,if (n.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,137,"blacklistStubVars(t, n);"
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,163,"blacklistStubVars(t, n);"
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,171,"rivate boolean canBeRedeclared(Node n, Scope s) {"
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,172,f (!NodeUtil.isExprAssign(n)) {
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,173,eturn false;
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,179,"private void blacklistStubVars(NodeTraversal t, Node varNode) {"
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,180,for (Node child = varNode.getFirstChild();
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,181,child != null; child = child.getNext()) {
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,182,if (child.getFirstChild() == null) {
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,183,blacklistedVars.add(t.getScope().getVar(child.getString()));
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,175,ode assign = n.getFirstChild();
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,176,ode lhs = assign.getFirstChild();
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,178,f (!NodeUtil.isName(lhs)) {
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,179,eturn false;
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,188,"private boolean canBeRedeclared(Node n, Scope s) {"
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,189,if (!NodeUtil.isExprAssign(n)) {
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,190,return false;
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,192,Node assign = n.getFirstChild();
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,193,Node lhs = assign.getFirstChild();
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,182,"eturn s.isDeclared(lhs.getString(), false);"
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,195,if (!NodeUtil.isName(lhs)) {
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,196,return false;
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,199,Var var = s.getVar(lhs.getString());
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,200,return var != null &&
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,201,var.getScope() == s && !blacklistedVars.contains(var);
True,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,69,public void testIssue397() {
True,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,70,"test(""var x; var y = 3; x = 5;"","
True,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,71,"""var x, y = 3; x = 5;"");"
True,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,72,"testSame(""var x; x = 5; var z = 7;"");"
True,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,73,"test(""var x; var y = 3; x = 5; var z = 7;"","
True,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,74,"""var x, y = 3; x = 5; var z = 7;"");"
True,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,75,"test(""var a = 1; var x; var y = 3; x = 5;"","
True,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,76,"""var a = 1, x, y = 3; x = 5;"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,128,* Gets the scope where this variable is declared.
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,130,Scope getScope() {
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,131,return scope;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,32,import com.google.common.collect.HashMultimap;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,33,import com.google.common.collect.ImmutableSet;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,35,import com.google.common.collect.Multimap;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,36,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,53,import java.util.Collection;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,56,import java.util.Set;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,86,"* Local variables that do not belong to this scope, but are assigned"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,87,* in this scope.
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,89,"private final Multimap<Scope, Var> assignedOuterLocalVars ="
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,90,HashMultimap.create();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,93,* Vars that we should not map out type flow for.
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,95,private final Set<String> unflowableVarNames = Sets.newHashSet();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,100,"this(compiler, cfg, reverseInterpreter, functionScope,"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,101,ImmutableSet.<Var>of());
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,105,* @param unflowableVars Do not do infer flow on the types of these vars.
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,107,// TODO(nicksantos): Create a builder for this class.
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,108,"TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg,"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,109,"ReverseAbstractInterpreter reverseInterpreter,"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,110,"Scope functionScope, Collection<Var> unflowableVars) {"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,118,for (Var unflowableVar : unflowableVars) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,119,this.unflowableVarNames.add(unflowableVar.getName());
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,125,if (this.unflowableVarNames.contains(var.getName())) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,126,continue;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,155,"* @return Local variables assigned in this scope, but which are declared in"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,156,*     a scope outside of it. Hashed by the scope they're declared in.
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,158,"Multimap<Scope, Var> getAssignedOuterLocalVars() {"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,159,return assignedOuterLocalVars;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,494,if (var != null && var.isLocal() && var.getScope() != syntacticScope) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,495,"assignedOuterLocalVars.put(var.getScope(), var);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1174,if (unflowableVarNames.contains(varName)) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1175,return;
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,20,import com.google.common.collect.HashMultimap;
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,21,import com.google.common.collect.Multimap;
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,23,import com.google.javascript.jscomp.Scope.Var;
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,43,"* Local variables that are declared in an outer scope, but are assigned in"
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,44,* an inner scope. We cannot do type inference on these vars.
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,46,"private final Multimap<Scope, Var> escapedLocalVars = HashMultimap.create();"
False,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,73,"ew TypeInference(compiler, computeCfg(n), reverseInterpreter, scope);"
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,81,new TypeInference(
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,82,"compiler, computeCfg(n), reverseInterpreter, scope,"
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,83,escapedLocalVars.get(scope));
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,86,escapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());
False,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,89,"nferTypes(t, node, scope);"
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,100,if (scope.isGlobal()) {
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,101,"inferTypes(t, node, scope);"
False,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,92,ublic void exitScope(NodeTraversal t) {}
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,105,public void exitScope(NodeTraversal t) {
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,106,Scope scope = t.getScope();
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,107,Node node = t.getCurrentNode();
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,108,if (scope.isLocal()) {
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,109,"inferTypes(t, node, scope);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1495,public void testInnerFunction1() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1496,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1497,"""function f() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1498,""" /** @type {number} */ var x = 3;\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1499,""" function g() { x = null; }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1500,""" return x;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1502,"""assignment\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1503,"""found   : null\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1504,"""required: number"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1507,public void testInnerFunction2() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1508,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1509,"""/** @return {number} */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1510,"""function f() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1511,""" var x = null;\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1512,""" function g() { x = 3; }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1513,""" g();"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1514,""" return x;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1516,"""inconsistent return type\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1517,"""found   : (null|number)\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1518,"""required: number"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1521,public void testInnerFunction3() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1522,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1523,"""var x = null;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1524,"""/** @return {number} */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1525,"""function f() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1526,""" x = 3;\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1527,""" /** @return {number} */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1528,""" function g() { x = true; return x; }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1529,""" return x;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1531,"""inconsistent return type\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1532,"""found   : boolean\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1533,"""required: number"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1536,public void testInnerFunction4() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1537,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1538,"""var x = null;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1539,"""/** @return {number} */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1540,"""function f() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1541,""" x = '3';\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1542,""" /** @return {number} */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1543,""" function g() { x = 3; return x; }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1544,""" return x;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1546,"""inconsistent return type\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1547,"""found   : string\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1548,"""required: number"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1551,public void testInnerFunction5() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1552,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1553,"""/** @return {number} */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1554,"""function f() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1555,""" var x = 3;\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1556,""" /** @return {number} */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1557,""" function g() { var x = 3;x = true; return x; }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1558,""" return x;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1560,"""inconsistent return type\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1561,"""found   : boolean\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1562,"""required: number"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2283," Sort an array in increasing order, performing the same reordering of"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2284, entries on other arrays.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2286, @param x Array to be sorted.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2287, @param yList Set of arrays whose permutations of entries must follow
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2283,* Sort an array in ascending order in place and perform the same reordering
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2284,"* of entries on other arrays. For example, if"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2285,"* {@code x = [3, 1, 2], y = [1, 2, 3]} and {@code z = [0, 5, 7]}, then"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2286,"* {@code sortInPlace(x, y, z)} will update {@code x} to {@code [1, 2, 3]},"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2287,"* {@code y} to {@code [2, 3, 1]} and {@code z} to {@code [5, 7, 0]}."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2289,* @param x Array to be sorted and used as a pattern for permutation
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2290,* of the other arrays.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2291,* @param yList Set of arrays whose permutations of entries will follow
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2289, @throws DimensionMismatchException if any {@code y} has not the same
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2293,* @throws DimensionMismatchException if any {@code y} is not the same
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2295,* @throws NullArgumentException if {@code x} or any {@code y} is null.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2296,* @since 3.0
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2298," Sort an array, performing the same reordering of entries on other arrays."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2300, @param x Array to be sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2304,* Sort an array in place and perform the same reordering of entries on
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2305,* other arrays.  This method works the same as
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2306,"* {@link #sortInPlace(double[], double[]...)}, but allows the order of the"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2307,* sort to be provided in the {@code dir} parameter.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2309,* @param x Array to be sorted and used as a pattern for permutation
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2310,* of the other arrays.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2302, @param yList Set of arrays whose permutations of entries must follow
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2312,* @param yList Set of arrays whose permutations of entries will follow
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2304, @throws DimensionMismatchException if any {@code y} has not the same
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2314,* @throws DimensionMismatchException if any {@code y} is not the same
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2316,* @throws NullArgumentException if {@code x} or any {@code y} is null
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2317,* @since 3.0
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2310,f (x == null ||
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2311,List == null) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2322,if (x == null) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2335,if (y == null) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2336,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2468,"/ appear redundant. However, they shoud NOT be simplified, as they"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2469,/ do use IEEE754 floating point arithmetic rouding properties.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2482,"// appear redundant. However, they should NOT be simplified, as they"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2483,// use IEEE754 floating point arithmetic rounding properties.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2471,/ The variables naming conventions are that xyzHigh contains the most significant
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2485,// The variable naming conventions are that xyzHigh contains the most significant
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2549,"/ appear redundant. However, they shoud NOT be simplified, as they"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2550,/ do use IEEE754 floating point arithmetic rouding properties.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2563,"// appear redundant. However, they should NOT be simplified, as they"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2564,// do use IEEE754 floating point arithmetic rounding properties.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2652,"/ appear redundant. However, they shoud NOT be simplified, as they"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2653,/ do use IEEE754 floating point arithmetic rouding properties.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2666,"// appear redundant. However, they should NOT be simplified, as they"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2667,// do use IEEE754 floating point arithmetic rounding properties.
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,19,import java.util.Arrays;
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,26,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1778,@Test
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1779,/** Example in javadoc */
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1780,public void testSortInPlaceExample() {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1781,"final double[] x = {3, 1, 2};"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1782,"final double[] y = {1, 2, 3};"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1783,"final double[] z = {0, 5, 7};"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1784,"MathUtils.sortInPlace(x, y, z);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1785,"final double[] sx = {1, 2, 3};"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1786,"final double[] sy = {2, 3, 1};"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1787,"final double[] sz = {5, 7, 0};"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1788,"Assert.assertTrue(Arrays.equals(sx, x));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1789,"Assert.assertTrue(Arrays.equals(sy, y));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1790,"Assert.assertTrue(Arrays.equals(sz, z));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1793,@Test
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1794,public void testSortInPlaceFaliures() {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1795,final double[] nullArray = null;
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1796,final double[] one = {1};
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1797,"final double[] two = {1, 2};"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1798,final double[] onep = {2};
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1799,try {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1800,"MathUtils.sortInPlace(one, two);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1801,"Assert.fail(""Expecting DimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1802,} catch (DimensionMismatchException ex) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1803,// expected
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1805,try {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1806,"MathUtils.sortInPlace(one, nullArray);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1807,"Assert.fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1808,} catch (NullArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1809,// expected
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1811,try {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1812,"MathUtils.sortInPlace(one, onep, nullArray);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1813,"Assert.fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1814,} catch (NullArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1815,// expected

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,142, @throws OptimizationException if the maximal number
True,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,142,* @throws MaxIterationsExceededException if the maximal number
False,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,147,hrows ConvergenceException {
True,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,147,throws MaxIterationsExceededException {
False,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,149,hrow new ConvergenceException(new MaxIterationsExceededException(maximalIterationCount));
True,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,149,throw new MaxIterationsExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,263,rotected abstract double doOptimize();
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,263,protected abstract double doOptimize()
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,264,"throws MaxIterationsExceededException, FunctionEvaluationException;"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,44,"uper(100, 1E-10);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,44,setMaxEvaluations(1000);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,45,setMaximalIterationCount(100);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,46,setAbsoluteAccuracy(1e-11);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,47,setRelativeAccuracy(1e-9);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,47,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,48,"ublic double optimize(final UnivariateRealFunction f, final GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,49,"inal double min, final double max, final double startValue)"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,51,* Perform the optimization.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,53,* @return the optimum.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,55,protected double doOptimize()
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,51,learResult();
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,52,"eturn localMin(f, goalType, min, startValue, max,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,57,"return localMin(getGoalType() == GoalType.MINIMIZE,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,58,"getMin(), getStartValue(), getMax(),"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,56,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,57,"ublic double optimize(final UnivariateRealFunction f, final GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,58,"inal double min, final double max)"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,59,"hrows MaxIterationsExceededException, FunctionEvaluationException {"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,60,"eturn optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,64," Find the minimum of the function {@code f} within the interval {@code (a, b)}."
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,63,"* Find the minimum of the function within the interval {@code (lo, hi)}."
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,66," If the function {@code f} is defined on the interval {@code (a, b)}, then"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,67, this method finds an approximation {@code x} to the point at which {@code f}
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,68, attains its minimum.<br/>
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,69, {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t} and
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,70, {@code f} is never evaluated at two points closer together than {@code tol}.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,71, {@code eps} should be no smaller than <em>2 macheps</em> and preferable not
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,72," much less than <em>sqrt(macheps)</em>, where <em>macheps</em> is the relative"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,73, machine precision. {@code t} should be positive.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,74, @param f the function to solve.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,75, @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,76, or {@link GoalType#MINIMIZE}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,65,"* If the function is defined on the interval {@code (lo, hi)}, then"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,66,* this method finds an approximation {@code x} to the point at which
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,67,* the function attains its minimum.<br/>
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,68,* {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t}
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,69,* and the function is never evaluated at two points closer together than
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,70,* {@code tol}. {@code eps} should be no smaller than <em>2 macheps</em> and
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,71,"* preferable not much less than <em>sqrt(macheps)</em>, where"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,72,* <em>macheps</em> is the relative machine precision. {@code t} should be
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,73,* positive.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,74,* @param isMinim {@code true} when minimizing the function.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,88,"rivate double localMin(UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,89,"oalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,86,"private double localMin(boolean isMinim,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,108,double d = 0;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,112,"ouble fx = computeObjectiveValue(f, x);"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,113,f (goalType == GoalType.MAXIMIZE) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,110,double fx = computeObjectiveValue(x);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,111,if (!isMinim) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,119,nt count = 0;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,120,hile (count < maximalIterationCount) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,117,while (true) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,130,ouble d = 0;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,194,"ouble fu = computeObjectiveValue(f, u);"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,195,f (goalType == GoalType.MAXIMIZE) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,190,double fu = computeObjectiveValue(u);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,191,if (!isMinim) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,232,"etResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,228,setFunctionValue(isMinim ? fx : -fx);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,235,+count;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,231,incrementIterationsCounter();
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,237,hrow new MaxIterationsExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,240,** Temporary workaround. */
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,241,rotected double doOptimize() {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,242,hrow new UnsupportedOperationException();
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,51,ssertTrue(minimizer.getEvaluations() > 1500);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,52,ssertTrue(minimizer.getEvaluations() < 1700);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,51,assertTrue(minimizer.getEvaluations() > 150);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,52,assertTrue(minimizer.getEvaluations() < 250);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,87,"ssertEquals(-0.27195612525275803, result, 1.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,88,"ssertEquals(-0.27195612525275803, minimizer.getResult(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,87,"assertEquals(-0.2719561270319131, result, 1.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,88,"assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,97,ssertTrue(minimizer.getEvaluations()    >= 300);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,98,ssertTrue(minimizer.getEvaluations()    <= 420);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,99,ssertTrue(minimizer.getIterationCount() >= 100);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,100,ssertTrue(minimizer.getIterationCount() <= 140);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,96,assertTrue(minimizer.getEvaluations()    >= 120);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,97,assertTrue(minimizer.getEvaluations()    <= 170);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,98,assertTrue(minimizer.getIterationCount() >= 120);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,99,assertTrue(minimizer.getIterationCount() <= 170);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,32,import org.apache.commons.math.stat.descriptive.DescriptiveStatistics;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,53,"ssertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 70 * minimizer.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,54,"assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,55,"ssertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 70 * minimizer.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,56,"assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,58,ssertTrue(minimizer.getEvaluations()    >=  30);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,59,inimizer.setMaxEvaluations(50);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,59,assertTrue(minimizer.getEvaluations()    >=  15);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,60,minimizer.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,85,ublic void testQuinticMinPythonComparison() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,86,public void testQuinticMinStatistics() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,89,inimizer.setRelativeAccuracy(1e-12);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,90,minimizer.setRelativeAccuracy(1e-10);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,92,ouble result;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,93,"nt nIter, nEval;"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,93,final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,94,for (int i = 0; i < stat.length; i++) {
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,95,stat[i] = new DescriptiveStatistics();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,95,"esult = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2, -0.25);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,96,Iter = minimizer.getIterationCount();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,97,Eval = minimizer.getEvaluations();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,98,/ XXX Python: -0.27195612805911351 (instead of -0.2719561279558559).
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,99,"ssertEquals(-0.2719561279558559, result, 1e-12);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,100,/ XXX Python: 15 (instead of 18).
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,101,"ssertEquals(18, nEval);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,102,/ XXX Python: 11 (instead of 17).
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,103,"ssertEquals(17, nIter);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,98,final double min = -0.75;
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,99,final double max = 0.25;
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,100,final int nSamples = 200;
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,101,final double delta = (max - min) / nSamples;
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,102,for (int i = 0; i < nSamples; i++) {
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,103,final double start = min + i * delta;
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,104,"stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,105,stat[1].addValue(minimizer.getIterationCount());
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,106,stat[2].addValue(minimizer.getEvaluations());
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,105,"esult = minimizer.optimize(f, GoalType.MINIMIZE, 0.7, 0.9, 0.8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,106,Iter = minimizer.getIterationCount();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,107,Eval = minimizer.getEvaluations();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,108,/ XXX Python: 0.82221643488363705 (instead of 0.8222164326561908).
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,109,"ssertEquals(0.8222164326561908, result, 1e-12);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,110,/ XXX Python: 25 (instead of 43).
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,111,"ssertEquals(43, nEval);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,112,/ XXX Python: 21 (instead of 24).
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,113,"ssertEquals(24, nIter);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,109,final double meanOptValue = stat[0].getMean();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,110,final double medianIter = stat[1].getPercentile(50);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,111,final double medianEval = stat[2].getPercentile(50);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,112,assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,113,"assertEquals(medianIter, 17, Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,114,"assertEquals(medianEval, 18, Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,123,inimizer.setMaximalIterationCount(20);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,124,minimizer.setMaximalIterationCount(5);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,140,solver.setRelativeAccuracy(1e-8);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,141,"ssertEquals(3 * Math.PI / 2, result, 70 * solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,144,"assertEquals(3 * Math.PI / 2, result, 10 * solver.getRelativeAccuracy());"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,144,"ssertEquals(3 * Math.PI / 2, result, 80 * solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,147,"assertEquals(3 * Math.PI / 2, result, 10 * solver.getRelativeAccuracy());"

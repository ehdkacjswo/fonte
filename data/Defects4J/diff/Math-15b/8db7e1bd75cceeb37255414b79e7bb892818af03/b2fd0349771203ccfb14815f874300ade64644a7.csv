is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,125,* Returns the minimum value stored in this array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,127,public abstract double getMin();
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,130,* Returns the maximum value stored in this array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,132,public abstract double getMax();
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,362,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,363,* @see org.apache.commons.math.DoubleArray#getMax()
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,365,public double getMax() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,366,double max = internalArray[startIndex];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,368,for( int i = startIndex + 1; i < numElements; i++) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,369,if( internalArray[i] > max ) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,370,max = internalArray[i];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,374,return max;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,377,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,378,* @see org.apache.commons.math.DoubleArray#getMin()
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,380,public double getMin() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,381,double min = internalArray[startIndex];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,383,for( int i = startIndex + 1; i < numElements; i++) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,384,if( internalArray[i] < min ) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,385,min = internalArray[i];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,389,return min;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,64,"// Holds the value of the windowSize, initial windowSize is the constant"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,65,// Univariate.INFINITE_WINDOW
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,66,private int windowSize = Univariate.INIFINTE_WINDOW;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,78,ouble[] copiedArray = new double[list.size()];
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,82,"// If we've got a windowSize, we might not care about the entire list."
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,83,List effectiveList = list;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,85,// If the window size is not INIFINITE_WINDOW AND
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,86,"// the current list is larger that the window size, we need to"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,87,// take into account only the last n elements of the list
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,88,// as definied by windowSize
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,89,if( windowSize != Univariate.INIFINTE_WINDOW &&
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,90,windowSize < list.size() ) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,91,"effectiveList = list.subList( (list.size() - 1) - windowSize, (list.size()-1));"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,94,// Create an array to hold all values
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,95,double[] copiedArray = new double[effectiveList.size()];
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,81,terator it = list.iterator();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,98,Iterator it = effectiveList.iterator();
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,95,umber n = (Number) list.get(index);
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,96,eturn n.doubleValue();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,113,double value = Double.NaN;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,115,if( windowSize != Univariate.INIFINTE_WINDOW &&
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,116,windowSize < list.size() ) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,117,Number n = (Number) list.get( ( (list.size() - 1) - windowSize ) + index ) ;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,118,value = n.doubleValue();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,119,} else {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,120,Number n = (Number) list.get(index);
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,121,value = n.doubleValue();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,124,return value;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,103,eturn list.size();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,131,double N = 0.0;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,133,if( windowSize != Univariate.INIFINTE_WINDOW ) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,134,if( list.size() > windowSize ) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,135,N = windowSize;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,136,} else {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,137,N = list.size();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,139,} else {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,140,N = list.size();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,143,return N;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,160,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,161,* @see org.apache.commons.math.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,163,public int getWindowSize() {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,164,return windowSize;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,167,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,168,* @see org.apache.commons.math.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,170,public void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,171,this.windowSize = windowSize;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,61,xpandableDoubleArray eDA;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,61,// Use an internal double array
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,62,DoubleArray eDA;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,64,// Store the windowSize
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,65,private int windowSize = Univariate.INIFINTE_WINDOW;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,64,DA = new ExpandableDoubleArray();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,68,// A contractable double array is used.  memory is reclaimed when
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,69,// the storage of the array becomes too empty.
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,70,eDA = new ContractableDoubleArray();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,73,"ystem.arraycopy( eDA.getValues(), 0, copiedArray, 0, eDA.getNumElements());"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,79,"System.arraycopy( eDA.getElements(), 0, copiedArray, 0, eDA.getNumElements());"
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,94,ublic void addValue(double v) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,95,DA.addElement( v );
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,100,public synchronized void addValue(double v) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,101,if( windowSize != Univariate.INIFINTE_WINDOW ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,102,if( getN() == windowSize ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,103,eDA.addElementRolling( v );
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,104,} else if( getN() < windowSize ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,105,eDA.addElement(v);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,106,} else {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,107,"throw new RuntimeException( ""A window Univariate had more element than "" +"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,108,"""the windowSize.  This is an inconsistent state."");"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,110,} else {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,111,eDA.addElement(v);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,101,ublic void clear() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,118,public synchronized void clear() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,122,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,123,* @see org.apache.commons.math.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,125,public int getWindowSize() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,126,return windowSize;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,129,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,130,* @see org.apache.commons.math.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,132,public synchronized void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,133,this.windowSize = windowSize;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,135,// We need to check to see if we need to discard elements
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,136,// from the front of the array.  If the windowSize is less than
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,137,// the current number of elements.
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,138,if( windowSize < eDA.getNumElements() ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,139,eDA.discardFrontElements( eDA.getNumElements() - windowSize);
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,64, @version $Revision: 1.2 $ $Date: 2003/05/15 05:39:00 $
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,64,* @version $Revision: 1.3 $ $Date: 2003/05/16 05:23:29 $
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,122,* This constant signals that a Univariate implementation
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,123,* takes into account the contributions of an infinite number of
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,124,"* elements.  In other words, if getWindow returns this"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,125,"* constant, there is, in effect, no ""window""."
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,127,public static final int INIFINTE_WINDOW = -1;
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,130,* Univariate has the ability to return only measures for the
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,131,* last N elements added to the set of values.  This function returns
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,133,public abstract int getWindowSize();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,136,* Sets the window.  windowSize controls the number of value
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,137,* which contribute to the values returned by Univariate.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,138,"* For example, a window value of 10 means that getMean()"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,139,* will return the mean of the last 10 values added.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,141,public abstract void setWindowSize(int windowSize);
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,67, @version $Revision: 1.2 $ $Date: 2003/05/15 06:33:19 $
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,67,* @version $Revision: 1.3 $ $Date: 2003/05/16 05:23:29 $
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,72,/** hold the window size **/
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,73,private int windowSize = Univariate.INIFINTE_WINDOW;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,75,"/** Just in case, the windowSize is not inifinite, we need to"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,76,*   keep an array to remember values 0 to N
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,78,private DoubleArray doubleArray =
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,79,new ContractableDoubleArray();
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,143, += 1.0;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,144,f (v < min) min = v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,145,f (v > max) max = v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,146,um += v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,147,umsq += v*v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,153,if( windowSize != Univariate.INIFINTE_WINDOW ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,154,if( windowSize == n ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,155,double discarded = doubleArray.addElementRolling( v );
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,157,// Remove the influence of the discarded
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,158,sum -= discarded;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,159,sumsq -= discarded * discarded;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,161,// Include the influence of the new
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,162,"// TODO: The next two lines seems rather expensive, but"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,163,// I don't see many alternatives.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,164,min = doubleArray.getMin();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,165,max = doubleArray.getMax();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,166,sum += v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,167,sumsq += v*v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,168,} else {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,169,doubleArray.addElement( v );
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,170,n += 1.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,171,if (v < min) min = v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,172,if (v > max) max = v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,173,sum += v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,174,sumsq += v*v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,176,} else {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,177,// If the windowSize is inifinite please don't take the time to
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,178,// worry about storing any values.  We don't need to discard the
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,179,// influence of any single item.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,180,n += 1.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,181,if (v < min) min = v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,182,if (v > max) max = v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,183,sum += v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,184,sumsq += v*v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,256,/* (non-Javadoc)
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,257,* @see org.apache.commons.math.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,259,public int getWindowSize() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,260,return windowSize;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,263,/* (non-Javadoc)
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,264,* @see org.apache.commons.math.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,266,public void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,267,this.windowSize = windowSize;

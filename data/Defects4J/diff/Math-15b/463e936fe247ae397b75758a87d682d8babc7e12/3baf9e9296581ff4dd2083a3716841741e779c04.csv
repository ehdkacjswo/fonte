is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,17,package org.apache.commons.math3.analysis.integration.gauss;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,19,import java.util.List;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,20,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,21,import java.util.concurrent.ThreadPoolExecutor;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,22,import java.util.concurrent.ArrayBlockingQueue;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,23,import java.util.concurrent.TimeUnit;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,24,import java.util.concurrent.Callable;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,25,import java.util.concurrent.Future;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,26,import java.util.concurrent.atomic.AtomicInteger;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,27,import org.apache.commons.math3.util.Pair;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,28,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,29,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,32,* Test for {@link BaseRuleFactory}.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,34,* @version $Id$
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,36,public class BaseRuleFactoryTest {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,38,* Tests that a given rule rule will be computed and added once to the cache
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,39,* whatever the number of times this rule is called concurrently.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,41,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,42,public void testConcurrentCreation() throws InterruptedException {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,43,// Number of times the same rule will be called.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,44,final int numTasks = 20;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,46,final ThreadPoolExecutor exec
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,47,"= new ThreadPoolExecutor(3, numTasks, 1, TimeUnit.SECONDS,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,48,new ArrayBlockingQueue<Runnable>(2));
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,50,final List<RuleBuilder> tasks = new ArrayList<RuleBuilder>();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,51,for (int i = 0; i < numTasks; i++) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,52,tasks.add(new RuleBuilder());
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,55,"List<Future<Pair<double[], double[]>>> results = exec.invokeAll(tasks);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,57,"// Assertion would fail if ""getRuleInternal"" were not ""synchronized""."
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,58,final int n = RuleBuilder.getNumberOfCalls();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,59,"Assert.assertEquals(""Rule computation was called "" + n + "" times"", 1, n);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,63,"class RuleBuilder implements Callable<Pair<double[], double[]>> {"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,64,private static final DummyRuleFactory factory = new DummyRuleFactory();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,66,"public Pair<double[], double[]> call() {"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,67,final int dummy = 2; // Always request the same rule.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,68,return factory.getRule(dummy);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,71,public static int getNumberOfCalls() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,72,return factory.getNumberOfCalls();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,76,class DummyRuleFactory extends BaseRuleFactory<Double> {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,77,/** Rule computations counter. */
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,78,private static AtomicInteger nCalls = new AtomicInteger();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,80,@Override
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,81,"protected Pair<Double[], Double[]> computeRule(int order) {"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,82,// Tracks whether this computation has been called more than once.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,83,nCalls.getAndIncrement();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,85,try {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,86,// Sleep to simulate computation time.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,87,Thread.sleep(20);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,88,} catch (InterruptedException e) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,89,"Assert.fail(""Unexpected interruption"");"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,92,// Dummy rule (but contents must exist).
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,93,"return new Pair<Double[], Double[]>(new Double[order],"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,94,new Double[order]);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,97,public int getNumberOfCalls() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java,98,return nCalls.get();

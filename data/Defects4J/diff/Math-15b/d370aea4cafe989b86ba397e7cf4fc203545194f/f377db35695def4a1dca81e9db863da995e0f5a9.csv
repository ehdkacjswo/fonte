is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,21,import org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,22,import org.apache.commons.math3.exception.MathInternalError;
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,107,"// Computation will be useless without a checker (see ""for-loop"")."
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,108,if (checker == null) {
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,109,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,112,final double[] targetValues = getTarget();
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,113,final int nR = targetValues.length; // Number of observed data.
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,115,final RealMatrix weightMatrix = getWeight();
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,116,// Diagonal of the weight matrix.
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,117,final double[] residualsWeights = new double[nR];
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,118,for (int i = 0; i < nR; i++) {
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,119,"residualsWeights[i] = weightMatrix.getEntry(i, i);"
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,122,double[] currentPoint = getStartPoint();
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,115,pdateResidualsAndCost();
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,116,pdateJacobian();
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,117,"urrent = new PointVectorValuePair(point, objective);"
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,119,inal double[] targetValues = getTargetRef();
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,120,inal double[] residualsWeights = getWeightRef();
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,132,"// Value of the objective function at ""currentPoint""."
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,133,final double[] currentObjective = computeObjectiveValue(currentPoint);
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,134,final double[] currentResiduals = computeResiduals(currentObjective);
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,135,final RealMatrix weightedJacobian = computeJacobian(currentPoint);
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,136,"current = new PointVectorValuePair(currentPoint, currentObjective);"
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,127,inal double[] grad   = weightedResidualJacobian[i];
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,143,final double[] grad   = weightedJacobian.getRow(i);
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,129,inal double residual = objective[i] - targetValues[i];
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,145,"// XXX Minus sign could be left out if ""weightedJacobian"""
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,146,// would be defined differently.
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,147,final double residual = -currentResiduals[i];
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,156,oint[i] += dX[i];
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,174,currentPoint[i] += dX[i];
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,162,/ check convergence
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,163,f (checker != null) {
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,164,f (previous != null) {
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,165,"onverged = checker.converged(iter, previous, current);"
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,180,// Check convergence.
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,181,if (previous != null) {
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,182,"converged = checker.converged(iter, previous, current);"
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,183,if (converged) {
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,184,cost = computeCost(currentResiduals);
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,185,return current;
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,169,/ we have converged
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,170,eturn current;
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,189,// Must never happen.
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,190,throw new MathInternalError();

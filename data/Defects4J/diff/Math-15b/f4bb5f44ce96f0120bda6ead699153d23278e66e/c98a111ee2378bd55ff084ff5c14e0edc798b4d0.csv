is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,61,"* @author <a href=""mailto:phil@steitz.com"">Phil Steitz</a>"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,297,"* Uses <a href=""http://www.nist.gov/dads/HTML/shellsort.html"">Shell sort"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,298,* </a>
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,299,* @see org.apache.commons.math.StoreUnivariate#getSortedValues()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,302,public double[] getSortedValues() {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,303,double[] values = getValues();
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,304,int n = values.length;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,305,int j = n;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,306,while (j > 1) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,307,j = j / 2;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,308,boolean done = false;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,309,while (!done) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,310,done = true;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,311,for (int i = 0; i < n - j; i++) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,312,int k = i + j;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,313,if (values[i] > values[k]) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,314,double temp = values[i];
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,315,values[i] = values[k];
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,316,values[k] = temp;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,317,done = false;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,322,return values;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,326,* Returns an estimate for the pth percentile of the stored values
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,327,* @see org.apache.commons.math.StoreUnivariate#getPercentile()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,329,public double getPercentile(double p) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,330,if ((p > 100) || (p <= 0)) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,331,"throw new IllegalArgumentException(""invalid percentile value"");"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,333,double n = (double) getN();
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,334,if (n == 0) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,335,return Double.NaN;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,337,if (n == 1) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,338,return getElement(0);  // always return single value for n = 1
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,340,double pos = p * (n + 1) / 100;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,341,double fpos = Math.floor(pos);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,342,int intPos = (int) fpos;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,343,double d = pos - fpos;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,344,double[] sorted = getSortedValues();
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,345,if (pos < 1) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,346,return sorted[0];
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,348,if (pos > n) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,349,return sorted[getN() - 1];
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,351,double lower = sorted[intPos - 1];
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,352,double upper = sorted[intPos];
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,353,return lower + d * (upper - lower);
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,116, The order of addition is preserved
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,116,* The order of addition is preserved.  The returned array is a fresh
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,117,"* copy of the underlying data -- i.e., it is not a reference to the"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,118,* stored data.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,126,"* Returns the current set of values in an array of double primitives,"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,127,* sorted in ascending order.  The returned array is a fresh
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,128,"* copy of the underlying data -- i.e., it is not a reference to the"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,129,* stored data.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,131,* @return returns the current set of numbers sorted in ascending order
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,133,public abstract double[] getSortedValues();
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,143,"* Returns an estimate for the pth percentile of the stored values,"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,144,* following the interpolation-adjusted defintion presented
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,145,"* <a href=""http://www.utdallas.edu/~ammann/stat5311/node8.html"">here</a><p>"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,147,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,148,* <li><code>0 < p < 100</code> (otherwise an <code>IllegalArgumentException
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,149,*     </code> is thrown)</li>
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,150,* <li>at least one value must be stored (returns <code>Double.NaN
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,151,*     </code> otherwise)</li>
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,152,* </ul>
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,154,* @param p the requested percentile (scaled from 0 - 100)
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,155,* @return returns an estimate for the pth percentile of the stored data
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,156,* values
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,158,public abstract double getPercentile(double p);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,59,import org.apache.commons.math.RandomDataImpl;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,60,import org.apache.commons.math.RandomData;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,64, @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,66,* @version $Revision: 1.2 $ $Date: 2003/06/04 02:24:51 $
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,120,"ssertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,121,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,122,"ssertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,122,"assertTrue(""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,123,Double.isNaN( u.getMean() ) );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,124,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,125,Double.isNaN( u.getStandardDeviation() ) );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,126,"assertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,127,Double.isNaN(u.getVariance() ) );
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,124,.addValue(one);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,129,u.addValue(one);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,126,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,127,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,128,"ssertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,131,"assertTrue( ""Mean of n = 1 set should be value of single item n1"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,132,u.getMean() == one);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,133,"assertTrue( ""StdDev of n = 1 set should be zero, instead it is: """
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,134,"+ u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,135,"assertTrue( ""Variance of n = 1 set should be zero"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,136,u.getVariance() == 0);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,134,"ouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,135,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,142,double[] testArray =
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,143,"{ 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,144,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,155,"ssertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,156,"ssertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,164,"assertEquals( ""Product not expected"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,165,"24.0, u.getProduct(), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,166,"assertEquals( ""Geometric mean not expected"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,167,"2.213364, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,165,"ssertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,166,"ssertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,176,"assertEquals( ""Product not expected"", 39916800.0,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,177,"u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,178,"assertEquals( ""Geometric mean not expected"", 5.755931,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,179,"u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,182,public void testGetSortedValues() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,183,"double[] test1 = {5,4,3,2,1};"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,184,"double[] test2 = {5,2,1,3,4,0};"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,185,double[] test3 = {1};
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,186,int[] testi = null;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,187,double[] test4 = null;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,188,RandomData rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,189,tstGetSortedValues(test1);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,190,tstGetSortedValues(test2);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,191,tstGetSortedValues(test3);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,192,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,193,"testi = rd.nextPermutation(10,6);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,194,test4 = new double[6];
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,195,for (int j = 0; j < testi.length; j++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,196,test4[j] = (double) testi[j];
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,198,tstGetSortedValues(test4);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,200,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,201,"testi = rd.nextPermutation(10,5);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,202,test4 = new double[5];
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,203,for (int j = 0; j < testi.length; j++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,204,test4[j] = (double) testi[j];
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,206,tstGetSortedValues(test4);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,211,private void tstGetSortedValues(double[] test) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,212,StoreUnivariateImpl u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,213,for (int i = 0; i < test.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,214,u.addValue(test[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,216,double[] sorted = u.getSortedValues();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,217,if (sorted.length != test.length) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,218,"fail(""wrong length for sorted values array"");"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,220,for (int i = 0; i < sorted.length-1; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,221,if (sorted[i] > sorted[i+1]) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,222,"fail(""sorted values out of sequence"");"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,227,public void testPercentiles() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,228,"double[] test = {5,4,3,2,1};"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,229,StoreUnivariateImpl u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,230,for (int i = 0; i < test.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,231,u.addValue(test[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,233,"assertEquals(""expecting min"",1,u.getPercentile(5),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,234,"assertEquals(""expecting max"",5,u.getPercentile(99),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,235,"assertEquals(""expecting middle"",3,u.getPercentile(50),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,236,try {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,237,double x = u.getPercentile(0);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,238,"fail(""expecting IllegalArgumentException for getPercentile(0)"");"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,239,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,242,try {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,243,double x = u.getPercentile(120);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,244,"fail(""expecting IllegalArgumentException for getPercentile(120)"");"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,245,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,249,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,250,"double[] test2 = {1,2,3,4};"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,251,for (int i = 0; i < test2.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,252,u.addValue(test2[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,254,"assertEquals(""Q1"",1.25,u.getPercentile(25),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,255,"assertEquals(""Q3"",3.75,u.getPercentile(75),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,256,"assertEquals(""Q2"",2.5,u.getPercentile(50),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,258,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,259,double[] test3 = {1};
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,260,for (int i = 0; i < test3.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,261,u.addValue(test3[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,263,"assertEquals(""Q1"",1,u.getPercentile(25),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,264,"assertEquals(""Q3"",1,u.getPercentile(75),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,265,"assertEquals(""Q2"",1,u.getPercentile(50),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,267,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,268,RandomData rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,269,"int[] testi = rd.nextPermutation(100,100); // will contain 0-99"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,270,for (int j = 0; j < testi.length; j++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,271,"u.addValue((double) testi[j]);  //OK, laugh at me for the cast"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,273,for (int i = 1; i < 100; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,274,"assertEquals(""percentile "" + i,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,275,"(double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,278,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,279,"double[] test4 = {1,2,3,4,100};"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,280,for (int i = 0; i < test4.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,281,u.addValue(test4[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,283,"assertEquals(""80th"",80.8,u.getPercentile(80),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,285,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,286,"assertTrue(""empty value set should return NaN"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,287,Double.isNaN(u.getPercentile(50)));

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,18,package org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,21,import java.math.BigInteger;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,22,import java.util.Arrays;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,24,import org.apache.commons.math.fraction.BigFraction;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,25,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,26,import org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,29,* This class transforms state history between multistep (with or without
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,30,* derivatives) and Nordsieck forms.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,31,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,32,* {@link MultistepIntegrator multistep integrators} use state history
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,33,* from several previous steps to compute the current state. They may also use
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,34,* the first derivative of current state. All states are separated by a fixed
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,35,* step size h from each other. Since these methods are based on polynomial
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,36,"* interpolation, the information from the previous state may be represented"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,37,* in another equivalent way: using the state higher order derivatives at
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,38,* current step rather. This class transforms state history between these three
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,39,* equivalent forms.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,40,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,41,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,42,* The supported forms for a dimension n history are:
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,43,* <ul>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,44,*   <li>multistep without derivatives:<br/>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,45,*     <pre>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,46,"*       y<sub>k</sub>, y<sub>k-1</sub> ... y<sub>k-(n-2), y<sub>k-(n-1)</sub>"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,47,*     </pre>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,48,*   </li>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,49,*   <li>multistep with first derivative at current step:<br/>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,50,*     <pre>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,51,"*       y<sub>k</sub>, y'<sub>k</sub>, y<sub>k-1</sub> ... y<sub>k-(n-2)</sub>"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,52,*     </pre>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,53,*   </li>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,54,*   <li>Nordsieck:
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,55,*     <pre>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,56,"*       y<sub>k</sub>, h y'<sub>k</sub>, h<sup>2</sup>/2 y''<sub>k</sub> ... h<sup>n-1</sup>/(n-1)! yn-1<sub>k</sub>"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,57,*     </pre>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,58,*   </li>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,59,* </ul>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,60,"* In these expressions, y<sub>k</sub> is the state at the current step. For each p,"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,61,"* y<sub>k-p</sub> is the state at the p<sup>th</sup> previous step. y'<sub>k</sub>,"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,62,"* y''<sub>k</sub> ... yn-1<sub>k</sub> are respectively the first, second, ..."
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,63,* (n-1)<sup>th</sup> derivatives of the state at current step and h is the fixed
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,64,* step size.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,65,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,66,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,67,* The transforms are exact for polynomials.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,68,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,69,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,70,"* In Nordsieck form, the state history can be converted from step size h to step"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,71,"* size h' by rescaling each component by 1, h'/h, (h'/h)<sup>2</sup> ..."
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,72,* (h'/h)<sup>n-1</sup>.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,73,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,74,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,75,* Instances of this class are guaranteed to be immutable.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,76,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,77,* @see org.apache.commons.math.ode.MultistepIntegrator
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,78,* @see org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,79,* @see org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,80,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,81,* @since 2.0
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,83,public class NordsieckTransformer implements Serializable {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,85,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,86,private static final long serialVersionUID = -2707468304560314664L;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,88,/** Nordsieck to Multistep  without derivatives matrix. */
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,89,private final RealMatrix matNtoMWD;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,91,/** Multistep without derivatives to Nordsieck matrix. */
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,92,private final RealMatrix matMWDtoN;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,94,/** Nordsieck to Multistep matrix. */
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,95,private final RealMatrix matNtoM;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,97,/** Multistep to Nordsieck matrix. */
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,98,private final RealMatrix matMtoN;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,101,* Build a transformer for a specified order.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,102,* @param n dimension of the history
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,104,public NordsieckTransformer(final int n) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,106,// from Nordsieck to multistep without derivatives
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,107,final BigInteger[][] bigNtoMWD = buildNordsieckToMultistepWithoutDerivatives(n);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,108,double[][] dataNtoMWD = new double[n][n];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,109,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,110,double[]     dRow = dataNtoMWD[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,111,BigInteger[] bRow = bigNtoMWD[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,112,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,113,dRow[j] = bRow[j].doubleValue();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,116,"matNtoMWD = new RealMatrixImpl(dataNtoMWD, false);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,118,// from multistep without derivatives to Nordsieck
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,119,final BigFraction[][] bigToN = buildMultistepWithoutDerivativesToNordsieck(n);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,120,double[][] dataMWDtoN = new double[n][n];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,121,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,122,double[]     dRow = dataMWDtoN[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,123,BigFraction[] bRow = bigToN[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,124,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,125,dRow[j] = bRow[j].doubleValue();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,128,"matMWDtoN = new RealMatrixImpl(dataMWDtoN, false);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,130,// from Nordsieck to multistep
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,131,final BigInteger[][] bigNtoM = buildNordsieckToMultistep(n);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,132,double[][] dataNtoM = new double[n][n];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,133,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,134,double[]     dRow = dataNtoM[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,135,BigInteger[] bRow = bigNtoM[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,136,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,137,dRow[j] = bRow[j].doubleValue();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,140,"matNtoM = new RealMatrixImpl(dataNtoM, false);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,142,// from multistep to Nordsieck
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,143,convertMWDtNtoMtN(bigToN);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,144,double[][] dataMtoN = new double[n][n];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,145,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,146,double[]     dRow = dataMtoN[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,147,BigFraction[] bRow = bigToN[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,148,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,149,dRow[j] = bRow[j].doubleValue();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,152,"matMtoN = new RealMatrixImpl(dataMtoN, false);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,157,* Build the transform from Nordsieck to multistep without derivatives.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,158,* @param n dimension of the history
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,159,* @return transform from Nordsieck to multistep without derivatives
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,161,public static BigInteger[][] buildNordsieckToMultistepWithoutDerivatives(final int n) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,163,final BigInteger[][] array = new BigInteger[n][n];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,165,// row 0: [1 0 0 0 ... 0 ]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,166,array[0][0] = BigInteger.ONE;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,167,"Arrays.fill(array[0], 1, n, BigInteger.ZERO);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,169,// the following expressions are direct applications of Taylor series
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,170,// rows 1 to n-1: aij = (-i)^j
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,171,// [ 1  -1   1  -1   1 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,172,// [ 1  -2   4  -8  16 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,173,// [ 1  -3   9 -27  81 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,174,// [ 1  -4  16 -64 256 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,175,for (int i = 1; i < n; ++i) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,176,final BigInteger[] row  = array[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,177,final BigInteger factor = BigInteger.valueOf(-i);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,178,BigInteger aj = BigInteger.ONE;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,179,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,180,row[j] = aj;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,181,aj = aj.multiply(factor);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,185,return array;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,190,* Build the transform from multistep without derivatives to Nordsieck.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,191,* @param n dimension of the history
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,192,* @return transform from multistep without derivatives to Nordsieck
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,194,public static BigFraction[][] buildMultistepWithoutDerivativesToNordsieck(final int n) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,196,final BigInteger[][] iArray = new BigInteger[n][n];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,198,// row 0: [1 0 0 0 ... 0 ]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,199,iArray[0][0] = BigInteger.ONE;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,200,"Arrays.fill(iArray[0], 1, n, BigInteger.ZERO);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,202,// We use recursive definitions of triangular integer series for each column.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,203,// For example column 0 of matrices of increasing dimensions are:
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,204,//  1/0! for dimension 1
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,205,"//  1/1!,  1/1! for dimension 2"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,206,"//  2/2!,  3/2!,  1/2! for dimension 3"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,207,"//  6/3!, 11/3!,  6/3!,  1/3! for dimension 4"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,208,"// 24/4!, 50/4!, 35/4!, 10/4!, 1/4! for dimension 5"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,209,"// The numerators are the Stirling numbers of the first kind, (A008275 in"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,210,// Sloane's encyclopedia http://www.research.att.com/~njas/sequences/A008275)
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,211,"// with a multiplicative factor of +/-1 (which we will write +/-binomial(n-1, 0))."
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,212,"// In the same way, column 1 is A049444 with a multiplicative factor of"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,213,"// +/-binomial(n-1, 1) and column 2 is A123319 with a multiplicative factor of"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,214,"// +/-binomial(n-1, 2). The next columns are defined by similar definitions but"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,215,// are not identified in Sloane's encyclopedia.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,216,"// Another interesting observation is that for each dimension k, the last column"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,217,"// (except the initial 0) is a copy of the first column of the dimension k-1 matrix,"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,218,// possibly with an opposite sign (i.e. these columns are also linked to Stirling
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,219,// numbers of the first kind).
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,220,for (int i = 1; i < n; ++i) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,222,final BigInteger bigI = BigInteger.valueOf(i);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,224,// row i
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,225,BigInteger[] rowK   = iArray[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,226,BigInteger[] rowKm1 = iArray[i - 1];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,227,for (int j = 0; j < i; ++j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,228,rowK[j] = BigInteger.ONE;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,230,rowK[i] = rowKm1[0];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,232,// rows i-1 to 1
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,233,for (int k = i - 1; k > 0; --k) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,235,// select rows
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,236,rowK   = rowKm1;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,237,rowKm1 = iArray[k - 1];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,239,// apply recursive defining formula
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,240,for (int j = 0; j < i; ++j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,241,rowK[j] = rowK[j].multiply(bigI).add(rowKm1[j]);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,244,// initialize new last column
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,245,rowK[i] = rowKm1[0];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,248,rowKm1[0] = rowKm1[0].multiply(bigI);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,252,// apply column specific factors
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,253,final BigInteger factorial = iArray[0][0];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,254,final BigFraction[][] fArray = new BigFraction[n][n];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,255,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,256,final BigFraction[] fRow = fArray[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,257,final BigInteger[]  iRow = iArray[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,258,BigInteger binomial = BigInteger.ONE;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,259,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,260,"fRow[j] = new BigFraction(binomial.multiply(iRow[j]), factorial);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,261,binomial = binomial.negate().multiply(BigInteger.valueOf(n - j - 1)).divide(BigInteger.valueOf(j + 1));
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,265,return fArray;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,270,* Build the transform from Nordsieck to multistep.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,271,* @param n dimension of the history
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,272,* @return transform from Nordsieck to multistep
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,274,public static BigInteger[][] buildNordsieckToMultistep(final int n) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,276,final BigInteger[][] array = new BigInteger[n][n];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,278,// row 0: [1 0 0 0 ... 0 ]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,279,array[0][0] = BigInteger.ONE;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,280,"Arrays.fill(array[0], 1, n, BigInteger.ZERO);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,282,if (n > 1) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,284,// row 1: [0 1 0 0 ... 0 ]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,285,array[1][0] = BigInteger.ZERO;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,286,array[1][1] = BigInteger.ONE;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,287,"Arrays.fill(array[1], 2, n, BigInteger.ZERO);"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,289,// the following expressions are direct applications of Taylor series
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,290,// rows 2 to n-1: aij = (1-i)^j
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,291,// [ 1  -1   1  -1   1 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,292,// [ 1  -2   4  -8  16 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,293,// [ 1  -3   9 -27  81 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,294,// [ 1  -4  16 -64 256 ...]
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,295,for (int i = 2; i < n; ++i) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,296,final BigInteger[] row  = array[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,297,final BigInteger factor = BigInteger.valueOf(1 - i);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,298,BigInteger aj = BigInteger.ONE;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,299,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,300,row[j] = aj;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,301,aj = aj.multiply(factor);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,307,return array;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,312,* Build the transform from multistep to Nordsieck.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,313,* @param n dimension of the history
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,314,* @return transform from multistep to Nordsieck
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,316,public static BigFraction[][] buildMultistepToNordsieck(final int n) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,317,final BigFraction[][] array = buildMultistepWithoutDerivativesToNordsieck(n);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,318,convertMWDtNtoMtN(array);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,319,return array;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,323,* Convert a transform from multistep without derivatives to Nordsieck to
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,324,* multistep to Nordsieck.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,325,"* @param work array, contains tansform from multistep without derivatives"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,326,"* to Nordsieck on input, will be overwritten with tansform from multistep"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,327,* to Nordsieck on output
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,329,private static void convertMWDtNtoMtN(BigFraction[][] array) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,331,final int n = array.length;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,332,if (n == 1) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,333,return;
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,336,// the second row of the matrix without derivatives represents the linear equation:
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,337,// hy' = a0 yk + a1 yk-1 + ... + a(n-1) yk-(n-1)
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,338,// we solve it with respect to the oldest state yk-(n-1) and get
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,339,// yk-(n-1) = -a0/a(n-1) yk + 1/a(n-1) hy' - a1/a(n-1) yk-1 - ...
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,340,final BigFraction[] secondRow = array[1];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,341,final BigFraction[] solved    = new BigFraction[n];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,342,final BigFraction f = secondRow[n - 1].reciprocal().negate();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,343,solved[0] = secondRow[0].multiply(f);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,344,solved[1] = f.negate();
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,345,for (int j = 2; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,346,solved[j] = secondRow[j - 1].multiply(f);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,349,// update the matrix so it expects hy' in second element
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,350,// rather than yk-(n-1) in last elements when post-multiplied
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,351,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,352,final BigFraction[] rowI = array[i];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,353,final BigFraction last = rowI[n - 1];
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,354,for (int j = n - 1; j > 1; --j) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,355,rowI[j] = rowI[j - 1].add(last.multiply(solved[j]));
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,357,rowI[1] = last.multiply(solved[1]);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,358,rowI[0] = rowI[0].add(last.multiply(solved[0]));
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,364,* Transform a scalar state history from multistep form to Nordsieck form.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,365,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,366,* The input state history must be in multistep form with element 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,367,"* current state, element 1 for current state scaled first derivative, element"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,368,* 2 for previous state ... element n-1 for (n-2)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,369,* The output state history will be in Nordsieck form with element 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,370,"* current state, element 1 for current state scaled first derivative, element"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,371,* 2 for current state scaled second derivative ... element n-1 for current state
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,372,* scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,373,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,374,* @param multistepHistory scalar state history in multistep form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,375,* @return scalar state history in Nordsieck form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,377,public double[] multistepToNordsieck(final double[] multistepHistory) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,378,return matMtoN.operate(multistepHistory);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,382,* Transform a vectorial state history from multistep form to Nordsieck form.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,383,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,384,* The input state history must be in multistep form with row 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,385,"* current state, row 1 for current state scaled first derivative, row"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,386,* 2 for previous state ... row n-1 for (n-2)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,387,* The output state history will be in Nordsieck form with row 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,388,"* current state, row 1 for current state scaled first derivative, row"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,389,* 2 for current state scaled second derivative ... row n-1 for current state
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,390,* scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,391,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,392,* @param multistepHistory vectorial state history in multistep form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,393,* @return vectorial state history in Nordsieck form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,395,public RealMatrix multistepToNordsieck(final RealMatrix multistepHistory) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,396,return matMtoN.multiply(multistepHistory);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,400,* Transform a scalar state history from Nordsieck form to multistep form.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,401,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,402,* The input state history must be in Nordsieck form with element 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,403,"* current state, element 1 for current state scaled first derivative, element"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,404,* 2 for current state scaled second derivative ... element n-1 for current state
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,405,* scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,406,* The output state history will be in multistep form with element 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,407,"* current state, element 1 for current state scaled first derivative, element"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,408,* 2 for previous state ... element n-1 for (n-2)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,409,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,410,* @param nordsieckHistory scalar state history in Nordsieck form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,411,* @return scalar state history in multistep form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,413,public double[] nordsieckToMultistep(final double[] nordsieckHistory) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,414,return matNtoM.operate(nordsieckHistory);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,418,* Transform a vectorial state history from Nordsieck form to multistep form.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,419,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,420,* The input state history must be in Nordsieck form with row 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,421,"* current state, row 1 for current state scaled first derivative, row"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,422,* 2 for current state scaled second derivative ... row n-1 for current state
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,423,* scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,424,* The output state history will be in multistep form with row 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,425,"* current state, row 1 for current state scaled first derivative, row"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,426,* 2 for previous state ... row n-1 for (n-2)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,427,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,428,* @param nordsieckHistory vectorial state history in Nordsieck form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,429,* @return vectorial state history in multistep form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,431,public RealMatrix nordsieckToMultistep(final RealMatrix nordsieckHistory) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,432,return matNtoM.multiply(nordsieckHistory);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,436,* Transform a scalar state history from multistep without derivatives form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,437,* to Nordsieck form.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,438,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,439,* The input state history must be in multistep without derivatives form with
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,440,"* element 0 for current state, element 1 for previous state ... element n-1"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,441,* for (n-1)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,442,* The output state history will be in Nordsieck form with element 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,443,"* current state, element 1 for current state scaled first derivative, element"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,444,* 2 for current state scaled second derivative ... element n-1 for current state
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,445,* scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,446,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,447,* @param mwdHistory scalar state history in multistep without derivatives form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,448,* @return scalar state history in Nordsieck form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,450,public double[] multistepWithoutDerivativesToNordsieck(final double[] mwdHistory) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,451,return matMWDtoN.operate(mwdHistory);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,455,* Transform a vectorial state history from multistep without derivatives form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,456,* to Nordsieck form.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,457,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,458,* The input state history must be in multistep without derivatives form with
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,459,"* row 0 for current state, row 1 for previous state ... row n-1"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,460,* for (n-1)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,461,* The output state history will be in Nordsieck form with row 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,462,"* current state, row 1 for current state scaled first derivative, row"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,463,* 2 for current state scaled second derivative ... row n-1 for current state
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,464,* scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,465,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,466,* @param mwdHistory vectorial state history in multistep without derivatives form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,467,* @return vectorial state history in Nordsieck form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,469,public RealMatrix multistepWithoutDerivativesToNordsieck(final RealMatrix mwdHistory) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,470,return matMWDtoN.multiply(mwdHistory);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,474,* Transform a scalar state history from Nordsieck form to multistep without
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,475,* derivatives form.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,476,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,477,* The input state history must be in Nordsieck form with element 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,478,"* current state, element 1 for current state scaled first derivative, element"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,479,* 2 for current state scaled second derivative ... element n-1 for current state
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,480,* scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,481,* The output state history will be in multistep without derivatives form with
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,482,"* element 0 for current state, element 1 for previous state ... element n-1"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,483,* for (n-1)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,484,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,485,* @param nordsieckHistory scalar state history in Nordsieck form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,486,* @return scalar state history in multistep without derivatives form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,488,public double[] nordsieckToMultistepWithoutDerivatives(final double[] nordsieckHistory) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,489,return matNtoMWD.operate(nordsieckHistory);
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,493,* Transform a vectorial state history from Nordsieck form to multistep without
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,494,* derivatives form.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,495,* <p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,496,* The input state history must be in Nordsieck form with row 0 for
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,497,"* current state, row 1 for current state scaled first derivative, row"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,498,* 2 for current state scaled second derivative ... row n-1 for current state
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,499,* scaled (n-1)<sup>th</sup> derivative.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,500,* The output state history will be in multistep without derivatives form with
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,501,"* row 0 for current state, row 1 for previous state ... row n-1"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,502,* for (n-1)<sup>th</sup> previous state.
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,503,* </p>
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,504,* @param nordsieckHistory vectorial state history in Nordsieck form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,505,* @return vectorial state history in multistep without derivatives form
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,507,public RealMatrix nordsieckToMultistepWithoutDerivatives(final RealMatrix nordsieckHistory) {
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,508,return matNtoMWD.multiply(nordsieckHistory);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,18,package org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,20,import java.math.BigInteger;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,21,import java.util.Random;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,23,import junit.framework.Test;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,25,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,27,import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,28,import org.apache.commons.math.fraction.BigFraction;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,29,import org.apache.commons.math.linear.RealMatrix;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,30,import org.apache.commons.math.linear.RealMatrixImpl;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,32,public class NordsieckTransformerTest
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,33,extends TestCase {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,35,public NordsieckTransformerTest(String name) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,36,super(name);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,39,public void testDimension2() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,40,NordsieckTransformer transformer = new NordsieckTransformer(2);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,41,"double[] nordsieckHistory = new double[] { 1.0,  2.0 };"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,42,"double[] mwdHistory       = new double[] { 1.0, -1.0 };"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,43,"double[] multistepHistory = new double[] { 1.0,  2.0 };"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,44,"checkVector(nordsieckHistory, transformer.multistepWithoutDerivativesToNordsieck(mwdHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,45,"checkVector(mwdHistory, transformer.nordsieckToMultistepWithoutDerivatives(nordsieckHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,46,"checkVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,47,"checkVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,50,public void testDimension3() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,51,NordsieckTransformer transformer = new NordsieckTransformer(3);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,52,"double[] nordsieckHistory = new double[] { 1.0,  4.0, 18.0 };"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,53,"double[] mwdHistory       = new double[] { 1.0, 15.0, 65.0 };"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,54,"double[] multistepHistory = new double[] { 1.0,  4.0, 15.0 };"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,55,"checkVector(nordsieckHistory, transformer.multistepWithoutDerivativesToNordsieck(mwdHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,56,"checkVector(mwdHistory, transformer.nordsieckToMultistepWithoutDerivatives(nordsieckHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,57,"checkVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,58,"checkVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,61,public void testDimension7() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,62,NordsieckTransformer transformer = new NordsieckTransformer(7);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,63,RealMatrix nordsieckHistory =
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,64,new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,65,"{  1,  2,  3 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,66,"{ -2,  1,  0 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,67,"{  1,  1,  1 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,68,"{  0, -1,  1 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,69,"{  1, -1,  2 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,70,"{  2,  0,  1 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,71,"{  1,  1,  2 }"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,72,"}, false);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,73,RealMatrix mwdHistory       =
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,74,new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,75,"{     1,     2,     3 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,76,"{     4,     3,     6 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,77,"{    25,    60,   127 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,78,"{   340,   683,  1362 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,79,"{  2329,  3918,  7635 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,80,"{ 10036, 15147, 29278 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,81,"{ 32449, 45608, 87951 }"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,82,"}, false);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,83,RealMatrix multistepHistory =
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,84,new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,85,"{     1,     2,     3 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,86,"{    -2,     1,     0 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,87,"{     4,     3,     6 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,88,"{    25,    60,   127 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,89,"{   340,   683,  1362 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,90,"{  2329,  3918,  7635 },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,91,"{ 10036, 15147, 29278 }"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,92,"}, false);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,94,RealMatrix m = transformer.multistepWithoutDerivativesToNordsieck(mwdHistory);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,95,"assertEquals(0.0, m.subtract(nordsieckHistory).getNorm(), 1.0e-11);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,96,m = transformer.nordsieckToMultistepWithoutDerivatives(nordsieckHistory);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,97,"assertEquals(0.0, m.subtract(mwdHistory).getNorm(), 1.0e-11);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,98,m = transformer.multistepToNordsieck(multistepHistory);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,99,"assertEquals(0.0, m.subtract(nordsieckHistory).getNorm(), 1.0e-11);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,100,m = transformer.nordsieckToMultistep(nordsieckHistory);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,101,"assertEquals(0.0, m.subtract(multistepHistory).getNorm(), 1.0e-11);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,105,public void testInverseWithoutDerivatives() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,106,for (int n = 1; n < 20; ++n) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,107,BigInteger[][] nTom =
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,108,NordsieckTransformer.buildNordsieckToMultistepWithoutDerivatives(n);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,109,BigFraction[][] mTon =
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,110,NordsieckTransformer.buildMultistepWithoutDerivativesToNordsieck(n);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,111,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,112,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,113,BigFraction s = BigFraction.ZERO;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,114,for (int k = 0; k < n; ++k) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,115,s = s.add(mTon[i][k].multiply(nTom[k][j]));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,117,"assertEquals((i == j) ? BigFraction.ONE : BigFraction.ZERO, s);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,123,public void testInverse() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,124,for (int n = 1; n < 20; ++n) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,125,BigInteger[][] nTom =
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,126,NordsieckTransformer.buildNordsieckToMultistep(n);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,127,BigFraction[][] mTon =
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,128,NordsieckTransformer.buildMultistepToNordsieck(n);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,129,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,130,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,131,BigFraction s = BigFraction.ZERO;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,132,for (int k = 0; k < n; ++k) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,133,s = s.add(mTon[i][k].multiply(nTom[k][j]));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,135,"assertEquals((i == j) ? BigFraction.ONE : BigFraction.ZERO, s);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,141,public void testMatrices1() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,142,"checkMatrix(1, new int[][] { { 1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,143,NordsieckTransformer.buildMultistepWithoutDerivativesToNordsieck(1));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,144,"checkMatrix(new int[][] { { 1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,145,NordsieckTransformer.buildNordsieckToMultistepWithoutDerivatives(1));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,146,"checkMatrix(1, new int[][] { { 1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,147,NordsieckTransformer.buildMultistepToNordsieck(1));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,148,"checkMatrix(new int[][] { { 1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,149,NordsieckTransformer.buildNordsieckToMultistep(1));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,152,public void testMatrices2() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,153,"checkMatrix(1, new int[][] { { 1, 0 }, { 1, -1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,154,NordsieckTransformer.buildMultistepWithoutDerivativesToNordsieck(2));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,155,"checkMatrix(new int[][] { { 1, 0 }, { 1, -1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,156,NordsieckTransformer.buildNordsieckToMultistepWithoutDerivatives(2));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,157,"checkMatrix(1, new int[][] { { 1, 0 }, { 0, 1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,158,NordsieckTransformer.buildMultistepToNordsieck(2));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,159,"checkMatrix(new int[][] { { 1, 0 }, { 0, 1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,160,NordsieckTransformer.buildNordsieckToMultistep(2));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,163,public void testMatrices3() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,164,"checkMatrix(2, new int[][] { { 2, 0, 0 }, { 3, -4, 1 }, { 1, -2, 1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,165,NordsieckTransformer.buildMultistepWithoutDerivativesToNordsieck(3));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,166,"checkMatrix(new int[][] { { 1, 0, 0 }, { 1, -1, 1 }, { 1, -2, 4 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,167,NordsieckTransformer.buildNordsieckToMultistepWithoutDerivatives(3));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,168,"checkMatrix(1, new int[][] { { 1, 0, 0 }, { 0, 1, 0 }, { -1, 1, 1} },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,169,NordsieckTransformer.buildMultistepToNordsieck(3));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,170,"checkMatrix(new int[][] { { 1, 0, 0 }, { 0, 1, 0 }, { 1, -1, 1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,171,NordsieckTransformer.buildNordsieckToMultistep(3));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,174,public void testMatrices4() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,175,"checkMatrix(6, new int[][] { { 6, 0, 0, 0 }, { 11, -18, 9, -2 }, { 6, -15, 12, -3 }, { 1, -3, 3, -1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,176,NordsieckTransformer.buildMultistepWithoutDerivativesToNordsieck(4));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,177,"checkMatrix(new int[][] { { 1, 0, 0, 0 }, { 1, -1, 1, -1 }, { 1, -2, 4, -8 }, { 1, -3, 9, -27 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,178,NordsieckTransformer.buildNordsieckToMultistepWithoutDerivatives(4));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,179,"checkMatrix(4, new int[][] { { 4, 0, 0, 0 }, { 0, 4, 0, 0 }, { -7, 6, 8, -1 }, { -3, 2, 4, -1 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,180,NordsieckTransformer.buildMultistepToNordsieck(4));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,181,"checkMatrix(new int[][] { { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 1, -1, 1, -1 }, { 1, -2, 4, -8 } },"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,182,NordsieckTransformer.buildNordsieckToMultistep(4));
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,185,public void testPolynomial() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,186,Random r = new Random(1847222905841997856l);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,187,for (int n = 2; n < 9; ++n) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,189,// build a polynomial and its derivatives
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,190,double[] coeffs = new double[n + 1];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,191,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,192,coeffs[i] = 2 * r.nextDouble() - 1.0;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,194,PolynomialFunction[] polynomials = new PolynomialFunction[n];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,195,polynomials[0] = new PolynomialFunction(coeffs);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,196,for (int k = 1; k < polynomials.length; ++k) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,197,polynomials[k] = (PolynomialFunction) polynomials[k - 1].derivative();
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,199,double h = 0.01;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,201,// build a state history in multistep form
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,202,double[] multistepHistory = new double[n];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,203,multistepHistory[0] = polynomials[0].value(1.0);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,204,multistepHistory[1] = h * polynomials[1].value(1.0);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,205,for (int i = 2; i < multistepHistory.length; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,206,multistepHistory[i] = polynomials[0].value(1.0 - (i - 1) * h);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,209,// build the same state history in multistep without derivatives form
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,210,double[] mwdHistory = new double[n];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,211,for (int i = 0; i < multistepHistory.length; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,212,mwdHistory[i] = polynomials[0].value(1.0 - i * h);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,215,// build the same state history in Nordsieck form
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,216,double[] nordsieckHistory = new double[n];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,217,double scale = 1.0;
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,218,for (int i = 0; i < nordsieckHistory.length; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,219,nordsieckHistory[i] = scale * polynomials[i].value(1.0);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,220,scale *= h / (i + 1);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,223,// check the transform is exact for these polynomials states
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,224,NordsieckTransformer transformer = new NordsieckTransformer(n);
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,225,"checkVector(nordsieckHistory, transformer.multistepWithoutDerivativesToNordsieck(mwdHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,226,"checkVector(mwdHistory,       transformer.nordsieckToMultistepWithoutDerivatives(nordsieckHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,227,"checkVector(nordsieckHistory, transformer.multistepToNordsieck(multistepHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,228,"checkVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,233,"private void checkVector(double[] reference, double[] candidate) {"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,234,"assertEquals(reference.length, candidate.length);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,235,for (int i = 0; i < reference.length; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,236,"assertEquals(reference[i], candidate[i], 1.0e-14);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,240,"private void checkMatrix(int[][] reference, BigInteger[][] candidate) {"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,241,"assertEquals(reference.length, candidate.length);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,242,for (int i = 0; i < reference.length; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,243,int[] rRow = reference[i];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,244,BigInteger[] cRow = candidate[i];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,245,"assertEquals(rRow.length, cRow.length);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,246,for (int j = 0; j < rRow.length; ++j) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,247,"assertEquals(rRow[j], cRow[j].intValue());"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,252,"private void checkMatrix(int denominator, int[][] reference, BigFraction[][] candidate) {"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,253,"assertEquals(reference.length, candidate.length);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,254,for (int i = 0; i < reference.length; ++i) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,255,int[] rRow = reference[i];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,256,BigFraction[] cRow = candidate[i];
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,257,"assertEquals(rRow.length, cRow.length);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,258,for (int j = 0; j < rRow.length; ++j) {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,259,"assertEquals(new BigFraction(rRow[j], denominator), cRow[j]);"
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,264,public static Test suite() {
True,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java,265,return new TestSuite(NordsieckTransformerTest.class);

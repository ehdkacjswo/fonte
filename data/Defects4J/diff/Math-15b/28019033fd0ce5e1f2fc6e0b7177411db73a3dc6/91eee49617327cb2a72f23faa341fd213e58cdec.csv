is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,21,* <br/>
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,22,* When a <em>user-defined</em> function encounters an error during
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,23,"* evaluation, the {@link #value(double) value} method should throw a"
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,24,* <em>user-defined</em> unchecked exception.
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,25,* <br/>
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,26,* The following code excerpt shows the recommended way to do that using
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,27,"* a root solver as an example, but the same construct is applicable to"
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,28,* ODE integrators or optimizers.
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,30,* <pre>
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,31,* private static class LocalException extends RuntimeException {
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,32,*     // The x value that caused the problem.
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,33,*     private final double x;
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,35,*     public LocalException(double x) {
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,36,*         this.x = x;
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,39,*     public double getX() {
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,40,*         return x;
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,44,* private static class MyFunction implements UnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,45,*     public double value(double x) {
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,46,*         double y = hugeFormula(x);
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,47,*         if (somethingBadHappens) {
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,48,*           throw new LocalException(x);
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,50,*         return y;
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,54,* public void compute() {
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,55,*     try {
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,56,"*         solver.solve(maxEval, new MyFunction(a, b, c), min, max);"
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,57,*     } catch (LocalException le) {
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,58,*         // Retrieve the x value.
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,61,* </pre>
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,63,"* As shown, the exception is local to the user's code and it is guaranteed"
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,64,* that Apache Commons Math will not catch it.
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,28, <p>
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,29," For user-defined functions, when the method encounters an error"
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,30," during evaluation, users must use their <em>own</em> unchecked exceptions."
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,31," The following example shows the recommended way to do that, using root"
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,32, solving as the example (the same construct should be used for ODE
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,33, integrators or for optimizations).
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,34, </p>
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,35, <pre>
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,36, private static class LocalException extends RuntimeException {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,38,   // the x value that caused the problem
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,39,   private final double x;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,41,   public LocalException(double x) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,42,     this.x = x;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,45,   public double getX() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,46,     return x;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,51, private static class MyFunction implements UnivariateRealFunction {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,52,   public double value(double x) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,53,     double y = hugeFormula(x);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,54,     if (somethingBadHappens) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,55,       throw new LocalException(x);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,57,     return y;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,61, public void compute() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,62,   try {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,63,"     solver.solve(maxEval, new MyFunction(a, b, c), min, max);"
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,64,   } catch (LocalException le) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,65,     // retrieve the x value
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,68, </pre>
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,70, <p>
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,71, As shown in this example the exception is really something local to user code
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,72, and there is a guarantee Apache Commons Math will not mess with it. The user is safe.
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,73, </p>
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,75, @return the value.
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,73,* @return the value of the function.
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,77," ascertain that preconditions, specified in the API expressed at the"
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,78," level of the activated method, have been violated.  In the vast"
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,79," majority of cases where Commons-Math throws IllegalArgumentException,"
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,80, it is the result of argument checking of actual parameters immediately
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,81, passed to a method.
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,75,"* ascertain that a precondition, specified in the API expressed at the"
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,76,"* level of the activated method, has been violated."
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,77,"* When Commons Math throws an {@code IllegalArgumentException}, it is"
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,78,* usually the consequence of checking the actual parameters passed to
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,79,* the method.

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,55, @param arguments Format arguments. They will be substituted first in
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,56," the {@code specific} format specifier, then the remaining arguments"
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,57, will be substituted in the {@code general} format specifier.
True,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,55,* @param arguments Format arguments. They will be substituted in
True,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,56,* <em>both</em> the {@code general} and {@code specific} format specifiers.
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,66,bject[] generalArgs = arguments;
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,68,f (specific != null) {
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,70,"inal MessageFormat specificFmt = new MessageFormat(specific.getLocalizedString(locale), locale);"
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,72,/ split the arguments: first specific ones then general ones
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,73,"inal int nbSpecific = Math.min(arguments.length, specificFmt.getFormatsByArgumentIndex().length);"
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,74,inal int nbGeneral  = arguments.length - nbSpecific;
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,75,bject[] specificArgs = new Object[nbSpecific];
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,76,"ystem.arraycopy(arguments, 0, specificArgs, 0, nbSpecific);"
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,77,eneralArgs = new Object[nbGeneral];
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,78,"ystem.arraycopy(arguments, nbSpecific, generalArgs, 0, nbGeneral);"
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,80,/ build the message
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,81,b.append(specificFmt.format(specificArgs));
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,86,f (specific != null) {
True,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,65,"final MessageFormat fmt = new MessageFormat(general.getLocalizedString(locale), locale);"
True,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,66,sb.append(fmt.format(arguments));
True,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,68,if (specific != null) {
True,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,69,if (general != null) {
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,89,"inal MessageFormat generalFmt  = new MessageFormat(general.getLocalizedString(locale), locale);"
False,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,90,b.append(generalFmt.format(generalArgs));
True,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,72,"final MessageFormat fmt = new MessageFormat(specific.getLocalizedString(locale), locale);"
True,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,src/main/java/org/apache/commons/math/exception/util/MessageFactory.java,73,sb.append(fmt.format(arguments));
False,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,32,"ssert.assertEquals(""specific 0 - 1 - 2: general  a / b"", message);"
True,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,32,"Assert.assertEquals(""general  0 / 1: specific 0 - 1 - 2"", message);"
False,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,39,"a', 'b');"
False,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,40,"ssert.assertEquals(""general  a / b"", message);"
True,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,39,"0, 1, 2, 'a', 'b');"
True,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,40,"Assert.assertEquals(""general  0 / 1"", message);"
False,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,47,", 1, 2);"
True,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java,47,"0, 1, 2, 'a', 'b');"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,22,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,32,* <br/>
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,33,"* The {@link #converged(int,Pair,Pair) converged} method will also return"
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,34,* {@code true} if the number of iterations has been set (see
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,35,"* {@link #SimplePointChecker(double,double,int) this constructor})."
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,46,"* If {@link #maxIterationCount} is set to this value, the number of"
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,47,"* iterations will never cause {@link #converged(int,Pair,Pair>)}"
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,48,* to return {@code true}.
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,50,private static final int ITERATION_CHECK_DISABLED = -1;
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,52,* Number of iterations after which the
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,53,"* {@link #converged(int,PointVectorValuePair,PointVectorValuePair)} method"
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,54,* will return true (unless the check is disabled).
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,56,private final int maxIterationCount;
False,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,45,ublic SimplePointChecker() {}
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,63,public SimplePointChecker() {
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,64,maxIterationCount = ITERATION_CHECK_DISABLED;
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,79,maxIterationCount = ITERATION_CHECK_DISABLED;
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,83,* Builds an instance with specified thresholds.
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,84,"* In order to perform only relative checks, the absolute tolerance"
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,85,* must be set to a negative value. In order to perform only absolute
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,86,"* checks, the relative tolerance must be set to a negative value."
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,88,* @param relativeThreshold Relative tolerance threshold.
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,89,* @param absoluteThreshold Absolute tolerance threshold.
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,90,* @param maxIter Maximum iteration count. Setting it to a negative
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,91,* value will disable this stopping criterion.
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,92,* @throws NotStrictlyPositiveException if {@code maxIter <= 0}.
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,94,* @since 3.1
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,96,"public SimplePointChecker(final double relativeThreshold,"
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,97,"final double absoluteThreshold,"
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,98,final int maxIter) {
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,99,"super(relativeThreshold, absoluteThreshold);"
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,101,if (maxIter <= 0) {
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,102,throw new NotStrictlyPositiveException(maxIter);
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,104,maxIterationCount = maxIter;
False,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,64, This method may be called several time from the same algorithm
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,110,* This method may be called several times from the same algorithm
False,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,75, @return {@code true} if the algorithm has converged.
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,121,* @return {@code true} if the arguments satify the convergence criterion.
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,127,if (maxIterationCount != ITERATION_CHECK_DISABLED) {
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,128,if (iteration >= maxIterationCount) {
True,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java,129,return true;
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,21,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,31,* <br/>
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,32,"* The {@link #converged(int,PointValuePair,PointValuePair) converged}"
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,33,* method will also return {@code true} if the number of iterations has been set
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,34,"* (see {@link #SimpleValueChecker(double,double,int) this constructor})."
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,42,"* If {@link #maxIterationCount} is set to this value, the number of"
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,43,* iterations will never cause
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,44,"* {@link #converged(int,PointValuePair,PointValuePair)}"
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,45,* to return {@code true}.
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,47,private static final int ITERATION_CHECK_DISABLED = -1;
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,49,* Number of iterations after which the
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,50,"* {@link #converged(int,PointValuePair,PointValuePair)} method"
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,51,* will return true (unless the check is disabled).
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,53,private final int maxIterationCount;
False,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,41,ublic SimpleValueChecker() {}
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,60,public SimpleValueChecker() {
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,61,maxIterationCount = ITERATION_CHECK_DISABLED;
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,76,maxIterationCount = ITERATION_CHECK_DISABLED;
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,80,* Builds an instance with specified thresholds.
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,82,"* In order to perform only relative checks, the absolute tolerance"
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,83,* must be set to a negative value. In order to perform only absolute
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,84,"* checks, the relative tolerance must be set to a negative value."
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,86,* @param relativeThreshold relative tolerance threshold
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,87,* @param absoluteThreshold absolute tolerance threshold
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,88,* @param maxIter Maximum iteration count. Setting it to a negative
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,89,* value will disable this stopping criterion.
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,90,* @throws NotStrictlyPositiveException if {@code maxIter <= 0}.
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,92,* @since 3.1
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,94,"public SimpleValueChecker(final double relativeThreshold,"
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,95,"final double absoluteThreshold,"
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,96,final int maxIter) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,97,"super(relativeThreshold, absoluteThreshold);"
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,99,if (maxIter <= 0) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,100,throw new NotStrictlyPositiveException(maxIter);
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,102,maxIterationCount = maxIter;
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,125,if (maxIterationCount != ITERATION_CHECK_DISABLED) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,126,if (iteration >= maxIterationCount) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java,127,return true;
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,21,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,31,* <br/>
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,32,"* The {@link #converged(int,PointVectorValuePair,PointVectorValuePair) converged}"
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,33,* method will also return {@code true} if the number of iterations has been set
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,34,"* (see {@link #SimpleVectorValueChecker(double,double,int) this constructor})."
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,42,"* If {@link #maxIterationCount} is set to this value, the number of"
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,43,* iterations will never cause
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,44,"* {@link #converged(int,PointVectorValuePair,PointVectorValuePair)}"
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,45,* to return {@code true}.
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,47,private static final int ITERATION_CHECK_DISABLED = -1;
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,49,* Number of iterations after which the
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,50,"* {@link #converged(int,PointVectorValuePair,PointVectorValuePair)} method"
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,51,* will return true (unless the check is disabled).
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,53,private final int maxIterationCount;
False,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,41,ublic SimpleVectorValueChecker() {}
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,60,public SimpleVectorValueChecker() {
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,61,maxIterationCount = ITERATION_CHECK_DISABLED;
False,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,54,inal double absoluteThreshold) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,75,final double absoluteThreshold) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,77,maxIterationCount = ITERATION_CHECK_DISABLED;
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,81,* Builds an instance with specified tolerance thresholds and
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,82,* iteration count.
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,84,"* In order to perform only relative checks, the absolute tolerance"
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,85,* must be set to a negative value. In order to perform only absolute
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,86,"* checks, the relative tolerance must be set to a negative value."
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,88,* @param relativeThreshold Relative tolerance threshold.
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,89,* @param absoluteThreshold Absolute tolerance threshold.
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,90,* @param maxIter Maximum iteration count. Setting it to a negative
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,91,* value will disable this stopping criterion.
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,92,* @throws NotStrictlyPositiveException if {@code maxIter <= 0}.
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,94,* @since 3.1
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,96,"public SimpleVectorValueChecker(final double relativeThreshold,"
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,97,"final double absoluteThreshold,"
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,98,final int maxIter) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,99,"super(relativeThreshold, absoluteThreshold);"
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,101,if (maxIter <= 0) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,102,throw new NotStrictlyPositiveException(maxIter);
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,104,maxIterationCount = maxIter;
False,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,61, This method may be called several time from the same algorithm
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,110,* This method may be called several times from the same algorithm
False,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,72, @return {@code true} if the algorithm has converged.
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,121,* @return {@code true} if the arguments satify the convergence criterion.
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,127,if (maxIterationCount != ITERATION_CHECK_DISABLED) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,128,if (iteration >= maxIterationCount) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java,129,return true;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,150,* This test shows that the user can set the maximum number of iterations
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,151,* to avoid running for too long.
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,152,"* Even if the real problem is that the tolerance is way too stringent, it"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,153,"* is possible to get the best solution so far, i.e. a checker will return"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,154,* the point when the maximum iteration count has been reached.
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,156,@Test
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,157,public void testMath798WithToleranceTooLowButNoException() {
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,158,final double tol = 1e-100;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,159,"final double[] init = new double[] { 0, 0 };"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,160,final int maxEval = 10000; // Trying hard to fit.
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,161,"final SimpleVectorValueChecker checker = new SimpleVectorValueChecker(tol, tol, maxEval);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,163,"final double[] lm = doMath798(new LevenbergMarquardtOptimizer(checker), maxEval, init);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,164,"final double[] gn = doMath798(new GaussNewtonOptimizer(checker), maxEval, init);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,166,for (int i = 0; i <= 1; i++) {
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,167,"Assert.assertEquals(lm[i], gn[i], 1e-15);"

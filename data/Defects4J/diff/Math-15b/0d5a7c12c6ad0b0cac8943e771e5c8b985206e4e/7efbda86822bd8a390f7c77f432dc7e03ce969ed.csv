is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,18,package org.apache.commons.math.optimization.direct;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,20,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,21,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,22,import java.util.List;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,24,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,25,import org.apache.commons.math.exception.MultiDimensionMismatchException;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,26,import org.apache.commons.math.exception.NoDataException;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,27,import org.apache.commons.math.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,28,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,29,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,30,import org.apache.commons.math.linear.Array2DRowRealMatrix;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,31,import org.apache.commons.math.linear.EigenDecomposition;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,32,import org.apache.commons.math.linear.EigenDecompositionImpl;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,33,import org.apache.commons.math.linear.MatrixUtils;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,34,import org.apache.commons.math.linear.RealMatrix;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,35,import org.apache.commons.math.optimization.GoalType;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,36,import org.apache.commons.math.optimization.MultivariateRealOptimizer;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,37,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,38,import org.apache.commons.math.random.MersenneTwister;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,39,import org.apache.commons.math.random.RandomGenerator;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,42,* CMA-ES algorithm. This code is translated and adapted from the Matlab version
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,43,* of this algorithm as implemented in module {@code cmaes.m} version 3.51.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,45,* Implements the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,46,"* for non-linear, non-convex, non-smooth, global function minimization."
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,47,* The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,48,"* which should be applied, if derivative based methods, e.g. quasi-Newton BFGS or"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,49,"* conjugate gradient, fail due to a rugged search landscape (e.g. noise, local"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,50,"* optima, outlier, etc.)  of the objective function. Like a"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,51,* quasi-Newton method the CMA-ES learns and applies a variable metric
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,52,* of the underlying search space. Unlike a quasi-Newton method the
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,53,"* CMA-ES does neither estimate nor use gradients, making it considerably more"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,54,"* reliable in terms of finding a good, or even close to optimal, solution, finally."
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,56,"* <p>In general, on smooth objective functions the CMA-ES is roughly ten times"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,57,"* slower than BFGS (counting objective function evaluations, no gradients provided)."
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,58,* For up to <math>N=10</math> variables also the derivative-free simplex
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,59,"* direct search method (Nelder and Mead) can be faster, but it is"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,60,* far less reliable than CMA-ES.</p>
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,62,* <p>The CMA-ES is particularly well suited for non-separable
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,63,* and/or badly conditioned problems.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,64,* To observe the advantage of CMA compared to a conventional
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,65,"* evolution strategy, it will usually take about <math>30 N</math> function"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,66,* evaluations. On difficult problems the complete
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,67,* optimization (a single run) is expected to take <em>roughly</em> between
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,68,* <math>30 N</math> and <math>300 N<sup>2</sup></math>
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,69,* function evaluations.</p>
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,71,"* For more information, please refer to the following links:"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,72,* <ul>
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,73,"*  <li><a href=""http://www.lri.fr/~hansen/cmaes.m"">Matlab code</a></li>"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,74,"*  <li><a href=""http://www.lri.fr/~hansen/cmaesintro.html"">Introduction to CMA-ES</a></li>"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,75,"*  <li><a href=""http://en.wikipedia.org/wiki/CMA-ES"">Wikipedia</a></li>"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,76,* </ul>
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,78,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,79,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,82,public class CMAESOptimizer extends
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,83,BaseAbstractScalarOptimizer<MultivariateRealFunction> implements
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,84,MultivariateRealOptimizer {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,86,/** Default value for {@link #checkFeasableCount}: {@value}. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,87,public static final int DEFAULT_CHECKFEASABLECOUNT = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,88,/** Default value for {@link #stopfitness}: {@value}. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,89,public static final double DEFAULT_STOPFITNESS = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,90,/** Default value for {@link #isActiveCMA}: {@value}. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,91,public static final boolean DEFAULT_ISACTIVECMA = true;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,92,/** Default value for {@link #maxIterations}: {@value}. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,93,public static final int DEFAULT_MAXITERATIONS = 30000;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,94,/** Default value for {@link #diagonalOnly}: {@value}. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,95,public static final int DEFAULT_DIAGONALONLY = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,96,/** Default value for {@link #random}. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,97,public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,99,// global search parameters
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,101,"* Population size, offspring number. The primary strategy parameter to play"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,102,"* with, which can be increased from its default value. Increasing the"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,103,* population size improves global search properties in exchange to speed.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,104,"* Speed decreases, as a rule, at most linearely with increasing population"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,105,* size. It is advisable to begin with the default small population size.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,107,private int lambda; // population size
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,109,"* Covariance update mechanism, default is active CMA. isActiveCMA = true"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,110,"* turns on ""active CMA"" with a negative update of the covariance matrix and"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,111,* checks for positive definiteness. OPTS.CMA.active = 2 does not check for
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,112,* pos. def. and is numerically faster. Active CMA usually speeds up the
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,113,* adaptation.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,115,private boolean isActiveCMA;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,117,* Determines how often a new random offspring is generated in case it is
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,118,"* not feasible / beyond the defined limits, default is 0. Only relevant if"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,119,* boundaries != null.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,121,private int checkFeasableCount;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,123,* Lower and upper boundaries of the objective variables. boundaries == null
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,124,* means no boundaries.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,126,private double[][] boundaries;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,128,* Individual sigma values - initial search volume. inputSigma determines
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,129,* the initial coordinate wise standard deviations for the search. Setting
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,130,* SIGMA one third of the initial search region is appropriate.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,132,private double[] inputSigma;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,133,/** Number of objective variables/problem dimension */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,134,private int dimension;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,136,"* Defines the number of initial iterations, where the covariance matrix"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,137,* remains diagonal and the algorithm has internally linear time complexity.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,138,* diagonalOnly = 1 means keeping the covariance matrix always diagonal and
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,139,* this setting also exhibits linear space complexity. This can be
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,140,* particularly useful for dimension > 100.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,141,"* @see <a href=""http://hal.archives-ouvertes.fr/inria-00287367/en"">A Simple Modification in CMA-ES</a> ."
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,143,private int diagonalOnly = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,144,/** Number of objective variables/problem dimension */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,145,private boolean isMinimize = true;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,146,/** Indicates whether statistic data is collected. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,147,private boolean generateStatistics = false;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,149,// termination criteria
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,150,/** Maximal number of iterations allowed. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,151,private int maxIterations;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,152,/** Limit for fitness value. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,153,private double stopfitness;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,154,/** Stop if x-changes larger stopTolUpX. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,155,private double stopTolUpX;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,156,/** Stop if x-change smaller stopTolX. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,157,private double stopTolX;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,158,/** Stop if fun-changes smaller stopTolFun. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,159,private double stopTolFun;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,160,/** Stop if back fun-changes smaller stopTolHistFun. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,161,private double stopTolHistFun;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,163,// selection strategy parameters
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,164,/** Number of parents/points for recombination. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,165,private int mu; //
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,166,"/** log(mu + 0.5), stored for efficiency. */"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,167,private double logMu2;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,168,/** Array for weighted recombination. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,169,private RealMatrix weights;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,170,/** Variance-effectiveness of sum w_i x_i. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,171,private double mueff; //
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,173,// dynamic strategy parameters and constants
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,174,/** Overall standard deviation - search volume. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,175,private double sigma;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,176,/** Cumulation constant. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,177,private double cc;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,178,/** Cumulation constant for step-size. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,179,private double cs;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,180,/** Damping for step-size. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,181,private double damps;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,182,/** Learning rate for rank-one update. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,183,private double ccov1;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,184,/** Learning rate for rank-mu update' */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,185,private double ccovmu;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,186,"/** Expectation of ||N(0,I)|| == norm(randn(N,1)). */"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,187,private double chiN;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,188,/** Learning rate for rank-one update - diagonalOnly */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,189,private double ccov1Sep;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,190,/** Learning rate for rank-mu update - diagonalOnly */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,191,private double ccovmuSep;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,193,// CMA internal values - updated each generation
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,194,/** Objective variables. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,195,private RealMatrix xmean;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,196,/** Evolution path. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,197,private RealMatrix pc;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,198,/** Evolution path for sigma. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,199,private RealMatrix ps;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,200,"/** Norm of ps, stored for efficiency. */"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,201,private double normps;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,202,/** Coordinate system. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,203,private RealMatrix B;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,204,/** Scaling. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,205,private RealMatrix D;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,206,"/** B*D, stored for efficiency. */"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,207,private RealMatrix BD;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,208,"/** Diagonal of sqrt(D), stored for efficiency. */"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,209,private RealMatrix diagD;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,210,/** Covariance matrix. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,211,private RealMatrix C;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,212,"/** Diagonal of C, used for diagonalOnly. */"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,213,private RealMatrix diagC;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,214,/** Number of iterations already performed. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,215,private int iterations;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,217,/** History queue of best values. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,218,private double[] fitnessHistory;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,219,/** Size of history queue of best values. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,220,private int historySize;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,222,/** Random generator. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,223,private RandomGenerator random;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,225,/** History of sigma values. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,226,private List<Double> statisticsSigmaHistory = new ArrayList<Double>();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,227,/** History of mean matrix. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,228,private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,229,/** History of fitness values. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,230,private List<Double> statisticsFitnessHistory = new ArrayList<Double>();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,231,/** History of D matrix. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,232,private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,235,"* Default constructor, uses default parameters"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,237,public CMAESOptimizer() {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,238,this(0);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,242,* @param lambda
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,243,*            Population size.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,245,public CMAESOptimizer(int lambda) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,246,"this(lambda, null, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,247,"DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,248,"DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,252,* @param lambda
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,253,*            Population size.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,254,* @param inputSigma
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,255,*            Initial search volume - sigma of offspring objective
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,256,*            variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,257,* @param boundaries
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,258,*            Boundaries for objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,260,"public CMAESOptimizer(int lambda, double[] inputSigma,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,261,double[][] boundaries) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,262,"this(lambda, inputSigma, boundaries, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,263,"DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,264,"DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,268,* @param lambda
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,269,*            Population size.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,270,* @param inputSigma
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,271,*            Initial search volume - sigma of offspring objective
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,272,*            variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,273,* @param boundaries
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,274,*            Boundaries for objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,275,* @param maxIterations
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,276,*            Maximal number of iterations.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,277,* @param stopfitness
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,278,*            stop if objective function value < stopfitness.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,279,* @param isActiveCMA
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,280,*            Chooses the covariance matrix update method.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,281,* @param diagonalOnly
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,282,"*            Number of initial iterations, where the covariance matrix"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,283,*            remains diagonal.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,284,* @param checkFeasableCount
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,285,*            Determines how often new. random objective variables are
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,286,*            generated in case they are out of bounds.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,287,* @param random
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,288,*            Used random generator.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,289,* @param generateStatistics
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,290,*            Indicates whether statistic data is collected.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,292,"public CMAESOptimizer(int lambda, double[] inputSigma,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,293,"double[][] boundaries, int maxIterations, double stopfitness,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,294,"boolean isActiveCMA, int diagonalOnly, int checkFeasableCount,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,295,"RandomGenerator random, boolean generateStatistics) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,296,this.lambda = lambda;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,297,this.inputSigma = inputSigma;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,298,this.boundaries = boundaries;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,299,this.maxIterations = maxIterations;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,300,this.stopfitness = stopfitness;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,301,this.isActiveCMA = isActiveCMA;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,302,this.diagonalOnly = diagonalOnly;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,303,this.checkFeasableCount = checkFeasableCount;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,304,this.random = random;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,305,this.generateStatistics = generateStatistics;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,309,* @return History of sigma values.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,311,public List<Double> getStatisticsSigmaHistory() {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,312,return statisticsSigmaHistory;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,316,* @return History of mean matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,318,public List<RealMatrix> getStatisticsMeanHistory() {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,319,return statisticsMeanHistory;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,323,* @return History of fitness values.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,325,public List<Double> getStatisticsFitnessHistory() {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,326,return statisticsFitnessHistory;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,330,* @return History of D matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,332,public List<RealMatrix> getStatisticsDHistory() {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,333,return statisticsDHistory;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,336,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,337,@Override
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,338,protected RealPointValuePair doOptimize() {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,339,checkParameters();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,340,// -------------------- Initialization --------------------------------
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,341,isMinimize = getGoalType().equals(GoalType.MINIMIZE);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,342,"final FitnessFunction fitfun = new FitnessFunction(boundaries,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,343,isMinimize);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,344,final double[] guess = fitfun.encode(getStartPoint());
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,345,// number of objective variables/problem dimension
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,346,dimension = guess.length;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,347,initializeCMA(guess);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,348,iterations = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,349,double bestValue = fitfun.value(guess);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,350,"push(fitnessHistory, bestValue);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,351,"RealPointValuePair optimum = new RealPointValuePair(getStartPoint(),"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,352,isMinimize ? bestValue : -bestValue);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,353,RealPointValuePair lastResult = null;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,355,// -------------------- Generation Loop --------------------------------
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,357,generationLoop:
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,358,for (iterations = 1; iterations <= maxIterations; iterations++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,359,// Generate and evaluate lambda offspring
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,360,"RealMatrix arz = randn1(dimension, lambda);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,361,"RealMatrix arx = zeros(dimension, lambda);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,362,double[] fitness = new double[lambda];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,363,// generate random offspring
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,364,for (int k = 0; k < lambda; k++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,365,RealMatrix arxk = null;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,366,for (int i = 0; i < checkFeasableCount+1; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,367,if (diagonalOnly <= 0)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,368,arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,369,".scalarMultiply(sigma)); // m + sig * Normal(0,C)"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,370,else
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,371,"arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,372,.scalarMultiply(sigma));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,373,if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0)))
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,374,break;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,375,// regenerate random arguments for row
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,376,"arz.setColumn(k, randn(dimension));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,378,"copyColumn(arxk, 0, arx, k);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,379,try {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,380,fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,381,} catch (TooManyEvaluationsException e) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,382,break generationLoop;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,385,// Sort by fitness and compute weighted mean into xmean
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,386,int[] arindex = sortedIndices(fitness);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,387,"// Calculate new xmean, this is selection and recombination"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,388,RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,389,"RealMatrix bestArx = selectColumns(arx,Arrays.copyOf(arindex, mu));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,390,xmean = bestArx.multiply(weights);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,391,"RealMatrix bestArz = selectColumns(arz,Arrays.copyOf(arindex, mu));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,392,RealMatrix zmean = bestArz.multiply(weights);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,393,"boolean hsig = updateEvolutionPaths(zmean, xold);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,394,if (diagonalOnly <= 0)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,395,"updateCovariance(hsig, bestArx, arz, arindex, xold);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,396,else
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,397,"updateCovarianceDiagonalOnly(hsig, bestArz, xold);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,398,// Adapt step size sigma - Eq. (5)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,399,"sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,400,double bestFitness = fitness[arindex[0]];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,401,double worstFitness = fitness[arindex[arindex.length-1]];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,402,if (bestValue > bestFitness) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,403,bestValue = bestFitness;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,404,lastResult = optimum;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,405,optimum = new RealPointValuePair(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,406,"fitfun.decode(bestArx.getColumn(0)),"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,407,isMinimize ? bestFitness : -bestFitness);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,408,if (getConvergenceChecker() != null && lastResult != null) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,409,if (getConvergenceChecker().converged(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,410,"iterations, optimum, lastResult))"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,411,break generationLoop;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,414,// handle termination criteria
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,415,"// Break, if fitness is good enough"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,416,if (stopfitness != 0) { // only if stopfitness is defined
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,417,if (bestFitness < (isMinimize ? stopfitness : -stopfitness))
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,418,break generationLoop;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,420,double[] sqrtDiagC = sqrt(diagC).getColumn(0);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,421,double[] pcCol = pc.getColumn(0);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,422,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,423,"if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX)"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,424,break;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,425,if (i >= dimension-1)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,426,break generationLoop;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,428,for (int i = 0; i < dimension; i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,429,if (sigma*sqrtDiagC[i] > stopTolUpX)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,430,break generationLoop;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,431,double historyBest = min(fitnessHistory);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,432,double historyWorst = max(fitnessHistory);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,433,"if (iterations > 2 && Math.max(historyWorst, worstFitness) -"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,434,"Math.min(historyBest, bestFitness) < stopTolFun)"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,435,break generationLoop;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,436,if (iterations > fitnessHistory.length &&
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,437,historyWorst-historyBest < stopTolHistFun)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,438,break generationLoop;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,439,// condition number of the covariance matrix exceeds 1e14
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,440,if (max(diagD)/min(diagD) > 1e7)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,441,break generationLoop;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,442,// user defined termination
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,443,if (getConvergenceChecker() != null) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,444,RealPointValuePair current =
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,445,"new RealPointValuePair(bestArx.getColumn(0),"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,446,isMinimize ? bestFitness : -bestFitness);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,447,if (lastResult != null &&
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,448,getConvergenceChecker().converged(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,449,"iterations, current, lastResult))"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,450,break generationLoop;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,451,lastResult = current;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,453,// Adjust step size in case of equal function values (flat fitness)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,454,if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]])
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,455,sigma = sigma * Math.exp(0.2+cs/damps);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,456,"if (iterations > 2 && Math.max(historyWorst, bestFitness) -"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,457,"Math.min(historyBest, bestFitness) == 0)"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,458,sigma = sigma * Math.exp(0.2+cs/damps);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,459,// store best in history
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,460,"push(fitnessHistory,bestFitness);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,461,fitfun.setValueRange(worstFitness-bestFitness);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,462,if (generateStatistics) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,463,statisticsSigmaHistory.add(sigma);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,464,statisticsFitnessHistory.add(bestFitness);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,465,statisticsMeanHistory.add(xmean.transpose());
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,466,statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,469,return optimum;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,473,* Checks dimensions and values of boundaries and inputSigma if defined.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,475,private void checkParameters() {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,476,double[] init = getStartPoint();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,477,if (boundaries != null) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,478,if (boundaries.length != 2)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,479,throw new MultiDimensionMismatchException(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,480,"new Integer[] { boundaries.length },"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,481,new Integer[] { 2 });
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,482,if (boundaries[0] == null || boundaries[1] == null)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,483,throw new NoDataException();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,484,if (boundaries[0].length != init.length)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,485,throw new MultiDimensionMismatchException(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,486,"new Integer[] { boundaries[0].length },"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,487,new Integer[] { init.length });
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,488,if (boundaries[1].length != init.length)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,489,throw new MultiDimensionMismatchException(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,490,"new Integer[] { boundaries[1].length },"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,491,new Integer[] { init.length });
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,492,for (int i = 0; i < init.length; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,493,if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,494,"throw new OutOfRangeException(init[i], boundaries[0][i],"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,495,boundaries[1][i]);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,498,if (inputSigma != null) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,499,if (inputSigma.length != init.length)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,500,throw new MultiDimensionMismatchException(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,501,"new Integer[] { inputSigma.length },"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,502,new Integer[] { init.length });
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,503,for (int i = 0; i < init.length; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,504,if (inputSigma[i] < 0)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,505,throw new NotPositiveException(inputSigma[i]);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,506,if (boundaries != null) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,507,if (inputSigma[i] > 1.0)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,508,"throw new OutOfRangeException(inputSigma[i], 0, 1.0);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,515,* Initialization of the dynamic search parameters
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,517,* @param guess
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,518,*            initial guess for the arguments of the fitness function
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,521,private void initializeCMA(double[] guess) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,522,if (lambda <= 0)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,523,lambda = 4 + (int) (3. * Math.log(dimension));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,524,// initialize sigma
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,525,double[][] sigmaArray = new double[guess.length][1];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,526,for (int i = 0; i < guess.length; i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,527,sigmaArray[i][0] = inputSigma != null ? inputSigma[i] : 0.3;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,528,"RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,529,sigma = max(insigma); // overall standard deviation
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,531,// initialize termination criteria
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,532,stopTolUpX = 1e3 * max(insigma);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,533,stopTolX = 1e-11 * max(insigma);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,534,stopTolFun = 1e-12;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,535,stopTolHistFun = 1e-13;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,537,// initialize selection strategy parameters
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,538,mu = lambda / 2; // number of parents/points for recombination
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,539,logMu2 = Math.log(mu + 0.5);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,540,"weights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,541,double sumw = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,542,double sumwq = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,543,for (int i = 0; i < mu; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,544,"double w = weights.getEntry(i, 0);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,545,sumw += w;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,546,sumwq += w * w;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,548,weights = weights.scalarMultiply(1. / sumw);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,549,mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,551,// initialize dynamic strategy parameters and constants
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,552,cc = (4. + mueff / dimension) /
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,553,(dimension + 4. + 2. * mueff / dimension);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,554,cs = (mueff + 2.) / (dimension + mueff + 3.);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,555,"damps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,556,(dimension + 1.)) - 1.)) *
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,557,"Math.max(0.3, 1. - dimension /"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,558,"(1e-6 + Math.min(maxIterations, getMaxEvaluations() /"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,559,lambda))) + cs; // minor increment
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,560,ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,561,"ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,562,((dimension + 2.) * (dimension + 2.) + mueff));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,563,"ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,564,"ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,565,chiN = Math.sqrt(dimension) *
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,566,(1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,567,// intialize CMA internal values - updated each generation
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,568,xmean = MatrixUtils.createColumnRealMatrix(guess); // objective
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,569,// variables
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,570,diagD = insigma.scalarMultiply(1. / sigma);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,571,diagC = square(diagD);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,572,"pc = zeros(dimension, 1); // evolution paths for C and sigma"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,573,"ps = zeros(dimension, 1); // B defines the coordinate system"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,574,normps = norm(ps);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,576,"B = eye(dimension, dimension);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,577,"D = ones(dimension, 1); // diagonal D defines the scaling"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,578,"BD = times(B, repmat(diagD.transpose(), dimension, 1));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,579,C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,580,historySize = 10 + (int) (3. * 10. * dimension / lambda);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,581,fitnessHistory = new double[historySize]; // history of fitness values
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,582,for (int i = 0; i < historySize; i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,583,fitnessHistory[i] = Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,587,* Update of the evolution paths ps and pc
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,589,* @param zmean
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,590,*            weighted row matrix of the gaussian random numbers generating
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,591,*            the current offspring
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,592,* @param xold
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,593,*            xmean matrix of the previous generation
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,594,* @return hsig flag indicating a small correction
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,596,"private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,597,ps = ps.scalarMultiply(1. - cs).add(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,598,B.multiply(zmean).scalarMultiply(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,599,Math.sqrt(cs * (2. - cs) * mueff)));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,600,normps = norm(ps);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,601,boolean hsig = normps /
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,602,"Math.sqrt(1. - Math.pow(1. - cs, 2. * iterations)) /"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,603,chiN < 1.4 + 2. / (dimension + 1.);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,604,pc = pc.scalarMultiply(1. - cc);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,605,if (hsig)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,606,pc = pc.add(xmean.subtract(xold).scalarMultiply(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,607,Math.sqrt(cc * (2. - cc) * mueff) / sigma));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,608,return hsig;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,612,* Update of the covariance matrix C for diagonalOnly > 0
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,614,* @param hsig
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,615,*            flag indicating a small correction
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,616,* @param bestArz
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,617,*            fitness-sorted matrix of the gaussian random values of the
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,618,*            current offspring
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,619,* @param xold
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,620,*            xmean matrix of the previous generation
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,622,"private void updateCovarianceDiagonalOnly(boolean hsig, final RealMatrix bestArz,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,623,final RealMatrix xold) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,624,// minor correction if hsig==false
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,625,double oldFac = hsig ? 0 : ccov1Sep * cc * (2. - cc);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,626,oldFac += 1. - ccov1Sep - ccovmuSep;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,627,diagC = diagC.scalarMultiply(oldFac) // regard old matrix
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,628,// plus rank one update
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,629,.add(square(pc).scalarMultiply(ccov1Sep))
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,630,// plus rank mu update
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,631,".add((times(diagC, square(bestArz).multiply(weights)))"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,632,.scalarMultiply(ccovmuSep));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,633,diagD = sqrt(diagC); // replaces eig(C)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,634,if (diagonalOnly > 1 && iterations > diagonalOnly) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,635,// full covariance matrix from now on
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,636,diagonalOnly = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,637,"B = eye(dimension, dimension);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,638,BD = diag(diagD);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,639,C = diag(diagC);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,644,* Update of the covariance matrix C
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,646,* @param hsig
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,647,*            flag indicating a small correction
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,648,* @param bestArx
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,649,*            fitness-sorted matrix of the argument vectors producing the
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,650,*            current offspring
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,651,* @param arz
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,652,*            unsorted matrix containing the gaussian random values of the
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,653,*            current offspring
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,654,* @param arindex
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,655,*            indices indicating the fitness-order of the current offspring
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,656,* @param xold
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,657,*            xmean matrix of the previous generation
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,659,"private void updateCovariance(boolean hsig, final RealMatrix bestArx,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,660,"final RealMatrix arz, final int[] arindex, final RealMatrix xold) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,661,double negccov = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,662,if (ccov1 + ccovmu > 0) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,663,"RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,664,.scalarMultiply(1. / sigma); // mu difference vectors
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,665,RealMatrix roneu = pc.multiply(pc.transpose())
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,666,.scalarMultiply(ccov1); // rank one update
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,667,// minor correction if hsig==false
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,668,double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,669,oldFac += 1. - ccov1 - ccovmu;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,670,if (isActiveCMA) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,671,// Adapt covariance matrix C active CMA
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,672,negccov = (1. - ccovmu) * 0.25 * mueff /
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,673,"(Math.pow(dimension + 2., 1.5) + 2. * mueff);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,674,double negminresidualvariance = 0.66;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,675,"// keep at least 0.66 in all directions, small popsize are most"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,676,// critical
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,677,double negalphaold = 0.5; // where to make up for the variance
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,678,"// loss,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,679,"// prepare vectors, compute negative updating matrix Cneg"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,680,int[] arReverseIndex = reverse(arindex);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,681,"RealMatrix arzneg = selectColumns(arz,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,682,"Arrays.copyOf(arReverseIndex, mu));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,683,RealMatrix arnorms = sqrt(sumRows(square(arzneg)));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,684,int[] idxnorms = sortedIndices(arnorms.getRow(0));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,685,"RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,686,int[] idxReverse = reverse(idxnorms);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,687,"RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,688,"arnorms = divide(arnormsReverse, arnormsSorted);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,689,int[] idxInv = inverse(idxnorms);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,690,"RealMatrix arnormsInv = selectColumns(arnorms, idxInv);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,691,// check and set learning rate negccov
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,692,double negcovMax = (1. - negminresidualvariance) /
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,693,"square(arnormsInv).multiply(weights).getEntry(0, 0);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,694,if (negccov > negcovMax)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,695,negccov = negcovMax;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,696,"arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,697,RealMatrix artmp = BD.multiply(arzneg);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,698,RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,699,artmp.transpose());
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,700,oldFac += negalphaold * negccov;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,701,C = C.scalarMultiply(oldFac)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,702,// regard old matrix
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,703,.add(roneu)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,704,// plus rank one update
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,705,.add(arpos.scalarMultiply(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,706,// plus rank mu update
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,707,ccovmu + (1. - negalphaold) * negccov)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,708,.multiply(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,709,"times(repmat(weights, 1, dimension),"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,710,arpos.transpose())))
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,711,.subtract(Cneg.scalarMultiply(negccov));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,712,} else {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,713,// Adapt covariance matrix C - nonactive
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,714,C = C.scalarMultiply(oldFac) // regard old matrix
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,715,.add(roneu)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,716,// plus rank one update
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,717,.add(arpos.scalarMultiply(ccovmu) // plus rank mu update
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,718,.multiply(
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,719,"times(repmat(weights, 1, dimension),"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,720,arpos.transpose())));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,723,updateBD(negccov);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,727,* Update B and D from C
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,729,* @param negccov
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,730,*            Negative covariance factor.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,732,private void updateBD(double negccov) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,733,if (ccov1 + ccovmu + negccov > 0 &&
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,734,(iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,735,// to achieve O(N^2)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,736,"C = triu(C, 0).add(triu(C, 1).transpose());"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,737,// enforce symmetry to prevent complex numbers
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,738,"EigenDecomposition eig = new EigenDecompositionImpl(C, 1.0);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,739,"B = eig.getV(); // eigen decomposition, B==normalized eigenvectors"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,740,D = eig.getD();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,741,diagD = diag(D);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,742,if (min(diagD) <= 0) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,743,for (int i = 0; i < dimension; i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,744,"if (diagD.getEntry(i, 0) < 0)"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,745,"diagD.setEntry(i, 0, 0.);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,746,double tfac = max(diagD) / 1e14;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,747,"C = C.add(eye(dimension, dimension).scalarMultiply(tfac));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,748,"diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,750,if (max(diagD) > 1e14 * min(diagD)) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,751,double tfac = max(diagD) / 1e14 - min(diagD);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,752,"C = C.add(eye(dimension, dimension).scalarMultiply(tfac));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,753,"diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,755,diagC = diag(C);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,756,diagD = sqrt(diagD); // D contains standard deviations now
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,757,"BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,762,* Pushes the current best fitness value in a history queue.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,764,* @param vals
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,765,*            the history queue
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,766,* @param val
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,767,*            current best fitness value
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,769,"private static void push(double[] vals, double val) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,770,for (int i = vals.length-1; i > 0; i--)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,771,vals[i] = vals[i-1];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,772,vals[0] = val;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,776,* Sorts fitness values.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,778,* @param doubles
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,779,*            array of values to be sorted
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,780,* @return sorted array of indices pointing into doubles
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,782,private int[] sortedIndices(final double[] doubles) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,783,DoubleIndex[] dis = new DoubleIndex[doubles.length];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,784,for (int i = 0; i < doubles.length; i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,785,"dis[i] = new DoubleIndex(doubles[i], i);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,786,Arrays.sort(dis);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,787,int[] indices = new int[doubles.length];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,788,for (int i = 0; i < doubles.length; i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,789,indices[i] = dis[i].index;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,790,return indices;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,794,* Used to sort fitness values. Sorting is always in lower value first
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,795,* order.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,797,private static class DoubleIndex implements Comparable<DoubleIndex> {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,799,/** Value to compare. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,800,private double value;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,801,/** Index into sorted array. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,802,private int index;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,805,* @param value
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,806,*            Value to compare.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,807,* @param index
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,808,*            Index into sorted array.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,810,"DoubleIndex(double value, int index) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,811,this.value = value;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,812,this.index = index;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,815,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,816,public int compareTo(DoubleIndex o) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,817,"return Double.compare(value, o.value);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,822,"* Normalizes fitness values to the range [0,1]. Adds a penalty to the"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,823,* fitness value if out of range. The penalty is adjusted by calling
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,824,* setValueRange().
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,826,private class FitnessFunction {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,828,/** Optional bounds for the objective variables */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,829,private double[][] boundaries;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,830,/** Determines the penalty for boundary violations */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,831,private double valueRange = 1.0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,833,* Flag indicating whether the objective variables are forced into their
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,834,* bounds if defined
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,836,private boolean isRepairMode = true;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,837,/** Flag indicating the optimization goal. */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,838,private boolean isMinimize = true;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,841,* @param boundaries
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,842,*            Bounds for the objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,843,* @param isMinimize
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,844,*            Flag indicating the optimization goal.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,846,"private FitnessFunction(final double[][] boundaries,"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,847,final boolean isMinimize) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,848,this.boundaries = boundaries;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,849,this.isMinimize = isMinimize;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,853,* @param x
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,854,*            Original objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,855,* @return Normalized objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,857,private double[] encode(final double[] x) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,858,if (boundaries == null)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,859,return x;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,860,double[] res = new double[x.length];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,861,for (int i = 0; i < x.length; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,862,double diff = boundaries[1][i] - boundaries[0][i];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,863,res[i] = (x[i] - boundaries[0][i]) / diff;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,865,return res;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,869,* @param x
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,870,*            Normalized objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,871,* @return Original objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,873,private double[] decode(final double[] x) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,874,if (boundaries == null)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,875,return x;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,876,double[] res = new double[x.length];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,877,for (int i = 0; i < x.length; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,878,double diff = boundaries[1][i] - boundaries[0][i];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,879,res[i] = diff * x[i] + boundaries[0][i];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,881,return res;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,885,* @param point
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,886,*            Normalized objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,887,* @return Objective value + penalty for violated bounds.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,889,private double value(final double[] point) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,890,double value;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,891,if (boundaries != null && isRepairMode) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,892,double[] repaired = repair(point);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,893,value = CMAESOptimizer.this
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,894,.computeObjectiveValue(decode(repaired)) +
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,895,"penalty(point, repaired);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,896,} else
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,897,value = CMAESOptimizer.this
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,898,.computeObjectiveValue(decode(point));
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,899,return isMinimize ? value : -value;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,903,* @param x
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,904,*            Normalized objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,905,* @return True if in bounds
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,907,private boolean isFeasible(final double[] x) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,908,if (boundaries == null)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,909,return true;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,910,for (int i = 0; i < x.length; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,911,if (x[i] < 0)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,912,return false;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,913,if (x[i] > 1.0)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,914,return false;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,916,return true;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,920,* @param valueRange
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,921,*            Adjusts the penalty computation.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,923,private void setValueRange(double valueRange) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,924,this.valueRange = valueRange;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,928,* @param x
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,929,*            Normalized objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,930,* @return Repaired objective variables - all in bounds.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,932,private double[] repair(final double[] x) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,933,double[] repaired = new double[x.length];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,934,for (int i = 0; i < x.length; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,935,if (x[i] < 0)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,936,repaired[i] = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,937,else if (x[i] > 1.0)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,938,repaired[i] = 1.0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,939,else
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,940,repaired[i] = x[i];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,942,return repaired;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,946,* @param x
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,947,*            Normalized objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,948,* @param repaired
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,949,*            Repaired objective variables.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,950,* @return Penalty value according to the violation of the bounds.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,952,"private double penalty(final double[] x, final double[] repaired) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,953,double penalty = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,954,for (int i = 0; i < x.length; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,955,double diff = Math.abs(x[i] - repaired[i]);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,956,penalty += diff * valueRange;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,958,return isMinimize ? penalty : -penalty;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,962,// -----Matrix utility functions similar to the Matlab build in functions------
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,965,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,966,*            Input matrix
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,967,* @return Matrix representing the element wise logarithm of m.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,969,private static RealMatrix log(final RealMatrix m) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,970,double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,971,for (int r = 0; r < m.getRowDimension(); r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,972,for (int c = 0; c < m.getColumnDimension(); c++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,973,"d[r][c] = Math.log(m.getEntry(r, c));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,974,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,978,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,979,*            Input matrix
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,980,* @return Matrix representing the element wise square root of m.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,982,private static RealMatrix sqrt(final RealMatrix m) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,983,double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,984,for (int r = 0; r < m.getRowDimension(); r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,985,for (int c = 0; c < m.getColumnDimension(); c++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,986,"d[r][c] = Math.sqrt(m.getEntry(r, c));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,987,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,991,* @param m Input matrix
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,992,* @return Matrix representing the element wise square (^2) of m.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,994,private static RealMatrix square(final RealMatrix m) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,995,double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,996,for (int r = 0; r < m.getRowDimension(); r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,997,for (int c = 0; c < m.getColumnDimension(); c++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,998,"double e = m.getEntry(r, c);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,999,d[r][c] = e * e;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1001,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1005,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1006,*            Input matrix 1.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1007,* @param n
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1008,*            Input matrix 2.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1009,* @return Matrix where the elements of m and m are element wise multiplied.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1011,"private static RealMatrix times(final RealMatrix m, final RealMatrix n) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1012,double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1013,for (int r = 0; r < m.getRowDimension(); r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1014,for (int c = 0; c < m.getColumnDimension(); c++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1015,"d[r][c] = m.getEntry(r, c)*n.getEntry(r, c);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1016,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1020,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1021,*            Input matrix 1.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1022,* @param n
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1023,*            Input matrix 2.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1024,* @return Matrix where the elements of m and m are element wise divided.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1026,"private static RealMatrix divide(final RealMatrix m, final RealMatrix n) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1027,double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1028,for (int r = 0; r < m.getRowDimension(); r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1029,for (int c = 0; c < m.getColumnDimension(); c++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1030,"d[r][c] = m.getEntry(r, c)/n.getEntry(r, c);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1031,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1035,* @param m Input matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1036,* @param cols Columns to select.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1037,* @return Matrix representing the selected columns.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1039,"private static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1040,double[][] d = new double[m.getRowDimension()][cols.length];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1041,for (int r = 0; r < m.getRowDimension(); r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1042,for (int c = 0; c < cols.length; c++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1043,"d[r][c] = m.getEntry(r, cols[c]);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1044,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1048,* @param m Input matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1049,* @param k diagonal position.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1050,* @return Upper triangular part of matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1052,"private static RealMatrix triu(final RealMatrix m, int k) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1053,double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1054,for (int r = 0; r < m.getRowDimension(); r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1055,for (int c = 0; c < m.getColumnDimension(); c++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1056,"d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1057,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1061,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1062,*            Input matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1063,* @return Norm of the matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1065,private static double norm(final RealMatrix m) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1066,double sum = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1067,for (int r = 0; r < m.getRowDimension(); r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1068,for (int c = 0; c < m.getColumnDimension(); c++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1069,"double e = m.getEntry(r, c);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1070,sum += e*e;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1072,return Math.sqrt(sum);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1076,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1077,*            Input matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1078,* @return Row matrix representing the sums of the rows.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1080,private static RealMatrix sumRows(final RealMatrix m) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1081,double[][] d = new double[1][m.getColumnDimension()];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1082,for (int c = 0; c < m.getColumnDimension(); c++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1083,double sum = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1084,for (int r = 0; r < m.getRowDimension(); r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1085,"sum += m.getEntry(r, c);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1086,d[0][c] = sum;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1088,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1092,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1093,*            Input matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1094,"* @return Diagonal n X n matrix if m is a column matrix, Rolumn matrix"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1095,*         representing the diagonal if m is a nXn matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1097,private static RealMatrix diag(final RealMatrix m) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1098,if (m.getColumnDimension() == 1) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1099,double[][] d = new double[m.getRowDimension()][m.getRowDimension()];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1100,for (int i = 0; i < m.getRowDimension(); i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1101,"d[i][i] = m.getEntry(i, 0);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1102,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1103,} else {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1104,double[][] d = new double[m.getRowDimension()][1];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1105,for (int i = 0; i < m.getColumnDimension(); i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1106,"d[i][0] = m.getEntry(i, i);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1107,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1112,* Copies a row from m1 to m2.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1114,* @param m1
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1115,*            Source matrix 1.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1116,* @param col1
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1117,*            Source column.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1118,* @param m2
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1119,*            Target matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1120,* @param col2
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1121,*            Target column.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1123,"private static void copyColumn(final RealMatrix m1, int col1, RealMatrix m2, int col2) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1124,for (int i = 0; i < m1.getRowDimension(); i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1125,"m2.setEntry(i, col2, m1.getEntry(i, col1));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1129,* @param n
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1130,*            Number of rows.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1131,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1132,*            Number of columns.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1133,* @return n X m matrix of 1.0-values.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1135,"private static RealMatrix ones(int n, int m) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1136,double[][] d = new double[n][m];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1137,for (int r = 0; r < n; r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1138,"Arrays.fill(d[r], 1.0);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1139,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1143,* @param n
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1144,*            Number of rows.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1145,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1146,*            Number of columns.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1147,"* @return n X m matrix of 0.0-values, diagonal has values 1.0."
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1149,"private static RealMatrix eye(int n, int m) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1150,double[][] d = new double[n][m];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1151,for (int r = 0; r < n; r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1152,if (r < m)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1153,d[r][r] = 1;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1154,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1158,* @param n
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1159,*            Number of rows.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1160,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1161,*            Number of columns.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1162,* @return n X m matrix of 0.0-values.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1164,"private static RealMatrix zeros(int n, int m) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1165,"return new Array2DRowRealMatrix(n, m);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1169,* @param mat
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1170,*            Input matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1171,* @param n
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1172,*            Number of row replicates.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1173,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1174,*            Number of column replicates.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1175,* @return Matrix which replicates the input matrix in both directions.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1177,"private static RealMatrix repmat(final RealMatrix mat, int n, int m) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1178,int rd = mat.getRowDimension();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1179,int cd = mat.getColumnDimension();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1180,double[][] d = new double[n * rd][m * cd];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1181,for (int r = 0; r < n * rd; r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1182,for (int c = 0; c < m * cd; c++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1183,"d[r][c] = mat.getEntry(r % rd, c % cd);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1184,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1188,* @param start
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1189,*            Start value.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1190,* @param end
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1191,*            End value.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1192,* @param step
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1193,*            Step size.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1194,* @return Sequence as column matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1196,"private static RealMatrix sequence(double start, double end, double step) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1197,int size = (int) ((end - start) / step + 1);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1198,double[][] d = new double[size][1];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1199,double value = start;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1200,for (int r = 0; r < size; r++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1201,d[r][0] = value;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1202,value += step;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1204,"return new Array2DRowRealMatrix(d, false);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1208,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1209,*            Input matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1210,* @return Maximum of matrix element values.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1212,private static double max(final RealMatrix m) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1213,double max = -Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1214,for (int r = 0; r < m.getRowDimension(); r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1215,for (int c = 0; c < m.getColumnDimension(); c++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1216,"double e = m.getEntry(r, c);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1217,if (max < e)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1218,max = e;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1220,return max;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1224,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1225,*            Input matrix.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1226,* @return Minimum of matrix element values.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1228,private static double min(final RealMatrix m) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1229,double min = Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1230,for (int r = 0; r < m.getRowDimension(); r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1231,for (int c = 0; c < m.getColumnDimension(); c++) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1232,"double e = m.getEntry(r, c);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1233,if (min > e)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1234,min = e;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1236,return min;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1240,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1241,*            Input array.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1242,* @return Maximum of array values.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1244,private static double max(final double[] m) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1245,double max = -Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1246,for (int r = 0; r < m.length; r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1247,if (max < m[r])
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1248,max = m[r];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1249,return max;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1253,* @param m
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1254,*            Input array.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1255,* @return Minimum of array values.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1257,private static double min(final double[] m) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1258,double min = Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1259,for (int r = 0; r < m.length; r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1260,if (min > m[r])
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1261,min = m[r];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1262,return min;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1266,* @param indices
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1267,*            Input index array.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1268,* @return Inverse of the mapping defined by indices
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1270,private static int[] inverse(final int[] indices) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1271,int[] inverse = new int[indices.length];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1272,for (int i = 0; i < indices.length; i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1273,inverse[indices[i]] = i;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1274,return inverse;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1278,* @param indices
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1279,*            Input index array.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1280,* @return Indices in inverse order (last is first)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1282,private static int[] reverse(final int[] indices) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1283,int[] reverse = new int[indices.length];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1284,for (int i = 0; i < indices.length; i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1285,reverse[i] = indices[indices.length - i - 1];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1286,return reverse;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1290,* @param size
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1291,*            Length of random array.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1292,* @return Array of gaussian random numbers.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1294,private double[] randn(int size) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1295,double[] randn = new double[size];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1296,for (int i = 0; i < size; i++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1297,randn[i] = random.nextGaussian();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1298,return randn;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1302,* @param size
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1303,*            Number of rows.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1304,* @param popSize
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1305,*            Population size.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1306,* @return 2-dimensional matrix of gaussian random numbers.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1308,"private RealMatrix randn1(int size, int popSize) {"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1309,double[][] d = new double[size][popSize];
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1310,for (int r = 0; r < size; r++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1311,for (int c = 0; c < popSize; c++)
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1312,d[r][c] = random.nextGaussian();
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1313,"return new Array2DRowRealMatrix(d, false);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,17,package org.apache.commons.math.optimization.direct;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,19,import java.util.Arrays;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,20,import java.util.Random;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,22,import org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,23,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,24,import org.apache.commons.math.exception.MathUserException;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,25,import org.apache.commons.math.exception.MultiDimensionMismatchException;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,26,import org.apache.commons.math.exception.NoDataException;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,27,import org.apache.commons.math.exception.NotPositiveException;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,28,import org.apache.commons.math.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,29,import org.apache.commons.math.optimization.GoalType;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,30,import org.apache.commons.math.optimization.MultivariateRealOptimizer;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,31,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,32,import org.apache.commons.math.random.MersenneTwister;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,33,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,34,import org.junit.Test;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,37,* Test for {@link CMAESOptimizer}.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,39,public class CMAESOptimizerTest {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,41,static final int DIM = 13;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,42,static final int LAMBDA = 4 + (int)(3.*Math.log(DIM));
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,44,@Test(expected = OutOfRangeException.class)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,45,"public void testInitOutofbounds() throws MathUserException, MathException {"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,46,"double[] startPoint = point(DIM,3);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,47,double[] insigma = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,48,"double[][] boundaries = boundaries(DIM,-1,2);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,49,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,50,"new RealPointValuePair(point(DIM,1.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,51,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,52,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,53,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,56,@Test(expected = MultiDimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,57,"public void testBoundariesDimensionMismatch() throws MathUserException, MathException {"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,58,"double[] startPoint = point(DIM,0.5);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,59,double[] insigma = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,60,"double[][] boundaries = boundaries(DIM+1,-1,2);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,61,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,62,"new RealPointValuePair(point(DIM,1.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,63,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,64,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,65,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,68,@Test(expected = NoDataException.class)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,69,"public void testBoundariesNoData() throws MathUserException, MathException {"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,70,"double[] startPoint = point(DIM,0.5);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,71,double[] insigma = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,72,"double[][] boundaries = boundaries(DIM,-1,2);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,73,boundaries[1] = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,74,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,75,"new RealPointValuePair(point(DIM,1.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,76,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,77,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,78,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,81,@Test(expected = NotPositiveException.class)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,82,"public void testInputSigmaNegative() throws MathUserException, MathException {"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,83,"double[] startPoint = point(DIM,0.5);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,84,"double[] insigma = point(DIM,-0.5);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,85,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,86,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,87,"new RealPointValuePair(point(DIM,1.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,88,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,89,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,90,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,93,@Test(expected = OutOfRangeException.class)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,94,"public void testInputSigmaOutOfRange() throws MathUserException, MathException {"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,95,"double[] startPoint = point(DIM,0.5);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,96,"double[] insigma = point(DIM, 1.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,97,"double[][] boundaries = boundaries(DIM,-1,2);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,98,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,99,"new RealPointValuePair(point(DIM,1.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,100,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,101,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,102,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,105,@Test(expected = MultiDimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,106,"public void testInputSigmaDimensionMismatch() throws MathUserException, MathException {"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,107,"double[] startPoint = point(DIM,0.5);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,108,"double[] insigma = point(DIM+1,-0.5);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,109,double[][] boundaries = null;;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,110,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,111,"new RealPointValuePair(point(DIM,1.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,112,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,113,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,114,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,117,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,118,public void testRosen() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,119,"double[] startPoint = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,120,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,121,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,122,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,123,"new RealPointValuePair(point(DIM,1.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,124,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,125,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,126,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,127,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,128,"GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,129,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,132,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,133,public void testMaximize() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,134,"double[] startPoint = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,135,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,136,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,137,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,138,"new RealPointValuePair(point(DIM,0.0),1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,139,"doTest(new MinusElli(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,140,"GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,141,"2e-10, 5e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,142,"doTest(new MinusElli(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,143,"GoalType.MAXIMIZE, LAMBDA, false, 0, 1.0-1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,144,"2e-10, 5e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,145,"boundaries = boundaries(DIM,-0.3,0.3);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,146,"startPoint = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,147,"doTest(new MinusElli(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,148,"GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,149,"2e-10, 5e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,152,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,153,public void testEllipse() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,154,"double[] startPoint = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,155,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,156,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,157,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,158,"new RealPointValuePair(point(DIM,0.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,159,"doTest(new Elli(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,160,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,161,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,162,"doTest(new Elli(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,163,"GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,164,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,167,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,168,public void testElliRotated() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,169,"double[] startPoint = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,170,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,171,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,172,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,173,"new RealPointValuePair(point(DIM,0.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,174,"doTest(new ElliRotated(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,175,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,176,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,177,"doTest(new ElliRotated(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,178,"GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,179,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,182,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,183,public void testCigar() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,184,"double[] startPoint = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,185,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,186,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,187,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,188,"new RealPointValuePair(point(DIM,0.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,189,"doTest(new Cigar(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,190,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,191,"1e-13, 1e-6, 200000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,192,"doTest(new Cigar(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,193,"GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,194,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,197,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,198,public void testTwoAxes() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,199,"double[] startPoint = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,200,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,201,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,202,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,203,"new RealPointValuePair(point(DIM,0.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,204,"doTest(new TwoAxes(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,205,"GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,206,"1e-13, 1e-6, 200000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,207,"doTest(new TwoAxes(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,208,"GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,209,"1e-8, 1e-3, 200000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,212,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,213,public void testCigTab() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,214,"double[] startPoint = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,215,"double[] insigma = point(DIM,0.3);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,216,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,217,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,218,"new RealPointValuePair(point(DIM,0.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,219,"doTest(new CigTab(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,220,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,221,"1e-13, 5e-5, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,222,"doTest(new CigTab(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,223,"GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,224,"1e-13, 5e-5, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,227,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,228,public void testSphere() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,229,"double[] startPoint = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,230,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,231,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,232,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,233,"new RealPointValuePair(point(DIM,0.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,234,"doTest(new Sphere(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,235,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,236,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,237,"doTest(new Sphere(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,238,"GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,239,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,242,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,243,public void testTablet() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,244,"double[] startPoint = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,245,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,246,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,247,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,248,"new RealPointValuePair(point(DIM,0.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,249,"doTest(new Tablet(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,250,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,251,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,252,"doTest(new Tablet(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,253,"GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,254,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,257,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,258,public void testDiffPow() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,259,"double[] startPoint = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,260,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,261,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,262,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,263,"new RealPointValuePair(point(DIM,0.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,264,"doTest(new DiffPow(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,265,"GoalType.MINIMIZE, 10, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,266,"1e-8, 1e-1, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,267,"doTest(new DiffPow(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,268,"GoalType.MINIMIZE, 10, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,269,"1e-8, 2e-1, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,272,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,273,public void testSsDiffPow() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,274,"double[] startPoint = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,275,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,276,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,277,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,278,"new RealPointValuePair(point(DIM,0.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,279,"doTest(new SsDiffPow(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,280,"GoalType.MINIMIZE, 10, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,281,"1e-4, 1e-1, 200000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,282,"doTest(new SsDiffPow(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,283,"GoalType.MINIMIZE, 10, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,284,"1e-4, 1e-1, 200000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,287,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,288,public void testAckley() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,289,"double[] startPoint = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,290,"double[] insigma = point(DIM,1.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,291,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,292,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,293,"new RealPointValuePair(point(DIM,0.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,294,"doTest(new Ackley(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,295,"GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,296,"1e-9, 1e-5, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,297,"doTest(new Ackley(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,298,"GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,299,"1e-9, 1e-5, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,302,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,303,public void testRastrigin() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,304,"double[] startPoint = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,305,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,306,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,307,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,308,"new RealPointValuePair(point(DIM,0.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,309,"doTest(new Rastrigin(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,310,"GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,311,"1e-13, 1e-6, 200000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,312,"doTest(new Rastrigin(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,313,"GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,314,"1e-13, 1e-6, 200000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,317,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,318,public void testConstrainedRosen() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,319,"double[] startPoint = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,320,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,321,"double[][] boundaries = boundaries(DIM,-1,2);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,322,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,323,"new RealPointValuePair(point(DIM,1.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,324,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,325,"GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,326,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,327,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,328,"GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,329,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,332,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,333,public void testDiagonalRosen() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,334,"double[] startPoint = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,335,"double[] insigma = point(DIM,0.1);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,336,double[][] boundaries = null;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,337,RealPointValuePair expected =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,338,"new RealPointValuePair(point(DIM,1.0),0.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,339,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,340,"GoalType.MINIMIZE, LAMBDA, false, 1, 1e-13,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,341,"1e-10, 1e-4, 1000000, expected);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,345,* @param func Function to optimize.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,346,* @param startPoint Starting point.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,347,* @param inSigma Individual input sigma.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,348,* @param boundaries Upper / lower point limit.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,349,* @param goal Minimization or maximization.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,350,* @param lambda Population size used for offspring.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,351,* @param isActive Covariance update mechanism.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,352,* @param diagonalOnly Simplified covariance update.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,353,* @param stopValue Termination criteria for optimization.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,354,* @param fTol Tolerance relative error on the objective function.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,355,* @param pointTol Tolerance for checking that the optimum is correct.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,356,* @param maxEvaluations Maximum number of evaluations.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,357,* @param expected Expected point / value.
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,359,"private void doTest(MultivariateRealFunction func,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,360,"double[] startPoint,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,361,"double[] inSigma,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,362,"double[][] boundaries,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,363,"GoalType goal,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,364,"int lambda,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,365,"boolean isActive,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,366,"int diagonalOnly,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,367,"double stopValue,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,368,"double fTol,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,369,"double pointTol,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,370,"int maxEvaluations,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,371,RealPointValuePair expected)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,372,throws MathException {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,373,int dim = startPoint.length;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,374,// test diagonalOnly = 0 - slow but normally fewer feval#
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,375,MultivariateRealOptimizer optim =
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,376,new CMAESOptimizer(
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,377,"lambda, inSigma, boundaries, 30000,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,378,"stopValue, isActive, diagonalOnly, 0, new MersenneTwister(),false);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,379,"RealPointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,380,"Assert.assertEquals(expected.getValue(),"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,381,"result.getValue(), fTol);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,382,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,383,"Assert.assertEquals(expected.getPoint()[i],"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,384,"result.getPoint()[i], pointTol);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,388,"private static double[] point(int n, double value) {"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,389,double[] ds = new double[n];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,390,"Arrays.fill(ds, value);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,391,return ds;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,394,"private static double[][] boundaries(int dim,"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,395,"double lower, double upper) {"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,396,double[][] boundaries = new double[2][dim];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,397,for (int i = 0; i < dim; i++)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,398,boundaries[0][i] = lower;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,399,for (int i = 0; i < dim; i++)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,400,boundaries[1][i] = upper;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,401,return boundaries;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,404,private static class Sphere implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,406,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,407,double f = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,408,for (int i = 0; i < x.length; ++i)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,409,f += x[i] * x[i];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,410,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,414,private static class Cigar implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,415,private double factor;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,417,Cigar() {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,418,this(1e3);
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,421,Cigar(double axisratio) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,422,factor = axisratio * axisratio;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,425,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,426,double f = x[0] * x[0];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,427,for (int i = 1; i < x.length; ++i)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,428,f += factor * x[i] * x[i];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,429,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,433,private static class Tablet implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,434,private double factor;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,436,Tablet() {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,437,this(1e3);
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,440,Tablet(double axisratio) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,441,factor = axisratio * axisratio;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,444,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,445,double f = factor * x[0] * x[0];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,446,for (int i = 1; i < x.length; ++i)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,447,f += x[i] * x[i];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,448,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,452,private static class CigTab implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,453,private double factor;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,455,CigTab() {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,456,this(1e4);
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,459,CigTab(double axisratio) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,460,factor = axisratio;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,463,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,464,int end = x.length - 1;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,465,double f = x[0] * x[0] / factor + factor * x[end] * x[end];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,466,for (int i = 1; i < end; ++i)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,467,f += x[i] * x[i];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,468,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,472,private static class TwoAxes implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,474,private double factor;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,476,TwoAxes() {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,477,this(1e6);
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,480,TwoAxes(double axisratio) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,481,factor = axisratio * axisratio;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,484,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,485,double f = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,486,for (int i = 0; i < x.length; ++i)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,487,f += (i < x.length / 2 ? factor : 1) * x[i] * x[i];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,488,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,492,private static class ElliRotated implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,493,private Basis B = new Basis();
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,494,private double factor;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,496,ElliRotated() {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,497,this(1e3);
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,500,ElliRotated(double axisratio) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,501,factor = axisratio * axisratio;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,504,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,505,double f = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,506,x = B.Rotate(x);
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,507,for (int i = 0; i < x.length; ++i)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,508,"f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,509,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,513,private static class Elli implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,515,private double factor;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,517,Elli() {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,518,this(1e3);
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,521,Elli(double axisratio) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,522,factor = axisratio * axisratio;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,525,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,526,double f = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,527,for (int i = 0; i < x.length; ++i)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,528,"f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,529,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,533,private static class MinusElli implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,535,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,536,return 1.0-(new Elli().value(x));
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,540,private static class DiffPow implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,542,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,543,double f = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,544,for (int i = 0; i < x.length; ++i)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,545,"f += Math.pow(Math.abs(x[i]), 2. + 10 * (double) i"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,546,/ (x.length - 1.));
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,547,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,551,private static class SsDiffPow implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,553,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,554,"double f = Math.pow(new DiffPow().value(x), 0.25);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,555,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,559,private static class Rosen implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,561,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,562,double f = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,563,for (int i = 0; i < x.length - 1; ++i)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,564,f += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1])
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,565,+ (x[i] - 1.) * (x[i] - 1.);
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,566,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,570,private static class Ackley implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,571,private double axisratio;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,573,Ackley(double axra) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,574,axisratio = axra;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,577,public Ackley() {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,578,this(1);
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,581,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,582,double f = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,583,double res2 = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,584,double fac = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,585,for (int i = 0; i < x.length; ++i) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,586,"fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,587,f += fac * fac * x[i] * x[i];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,588,res2 += Math.cos(2. * Math.PI * fac * x[i]);
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,590,f = (20. - 20. * Math.exp(-0.2 * Math.sqrt(f / x.length))
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,591,+ Math.exp(1.) - Math.exp(res2 / x.length));
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,592,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,596,private static class Rastrigin implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,598,private double axisratio;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,599,private double amplitude;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,601,Rastrigin() {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,602,"this(1, 10);"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,605,"Rastrigin(double axisratio, double amplitude) {"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,606,this.axisratio = axisratio;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,607,this.amplitude = amplitude;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,610,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,611,double f = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,612,double fac;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,613,for (int i = 0; i < x.length; ++i) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,614,"fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,615,if (i == 0 && x[i] < 0)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,616,fac *= 1.;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,617,f += fac * fac * x[i] * x[i] + amplitude
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,618,* (1. - Math.cos(2. * Math.PI * fac * x[i]));
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,620,return f;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,624,private static class Basis {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,625,double[][] basis;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,626,Random rand = new Random(2); // use not always the same basis
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,628,double[] Rotate(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,629,GenBasis(x.length);
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,630,double[] y = new double[x.length];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,631,for (int i = 0; i < x.length; ++i) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,632,y[i] = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,633,for (int j = 0; j < x.length; ++j)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,634,y[i] += basis[i][j] * x[j];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,636,return y;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,639,void GenBasis(int DIM) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,640,if (basis != null ? basis.length == DIM : false)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,641,return;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,643,double sp;
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,644,"int i, j, k;"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,646,/* generate orthogonal basis */
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,647,basis = new double[DIM][DIM];
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,648,for (i = 0; i < DIM; ++i) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,649,/* sample components gaussian */
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,650,for (j = 0; j < DIM; ++j)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,651,basis[i][j] = rand.nextGaussian();
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,652,/* substract projection of previous vectors */
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,653,for (j = i - 1; j >= 0; --j) {
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,654,"for (sp = 0., k = 0; k < DIM; ++k)"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,655,sp += basis[i][k] * basis[j][k]; /* scalar product */
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,656,for (k = 0; k < DIM; ++k)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,657,basis[i][k] -= sp * basis[j][k]; /* substract */
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,659,/* normalize */
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,660,"for (sp = 0., k = 0; k < DIM; ++k)"
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,661,sp += basis[i][k] * basis[i][k]; /* squared norm */
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,662,for (k = 0; k < DIM; ++k)
True,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,663,basis[i][k] /= Math.sqrt(sp);

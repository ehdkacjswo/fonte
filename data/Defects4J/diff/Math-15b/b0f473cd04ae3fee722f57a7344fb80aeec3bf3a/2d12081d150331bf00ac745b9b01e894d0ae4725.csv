is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,31,* <p>The main use for correlated random vector generation is for Monte-Carlo
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,32,"* simulation of physical problems with several variables, for example to"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,33,* generate error vectors to be added to a nominal vector. A particularly
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,34,* interesting case is when the generated vector should be drawn from a <a
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,35,"* href=""http://en.wikipedia.org/wiki/Multivariate_normal_distribution"">"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,36,* Multivariate Normal Distribution</a>. The approach using a Cholesky
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,37,"* decomposition is quite usual in this case. However, it cas be extended"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,38,* to other cases as long as the underlying random generator provides
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,39,* {@link NormalizedRandomGenerator normalized values} like {@link
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,40,* GaussianRandomGenerator} or {@link UniformRandomGenerator}.</p>
False,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,36, should be null. This implies that rather than computing <code>C =
False,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,37, U<sup>T</sup>.U</code> where <code>C</code> is the covariance matrix and
False,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,38," <code>U</code> is an uppertriangular matrix, we compute <code>C ="
False,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,39, B.B<sup>T</sup></code> where <code>B</code> is a rectangular matrix having
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,46,* should be null. Another non-conventional extension handling this case
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,47,* is used here. Rather than computing <code>C = U<sup>T</sup>.U</code>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,48,* where <code>C</code> is the covariance matrix and <code>U</code>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,49,"* is an uppertriangular matrix, we compute <code>C = B.B<sup>T</sup></code>"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,50,* where <code>B</code> is a rectangular matrix having

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,20,import java.util.Arrays;
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,22,mport org.apache.commons.math3.analysis.DifferentiableUnivariateVectorFunction;
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,23,mport org.apache.commons.math3.analysis.UnivariateVectorFunction;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction;
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,25,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,26,mport org.apache.commons.math3.exception.MathIllegalStateException;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,26,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,27,import org.apache.commons.math3.exception.NoDataException;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,28,import org.apache.commons.math3.exception.ZeroException;
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,34, the values vector. All polynomial have the same degree. The degree of the
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,36,* the values vector. All polynomials have the same degree. The degree of the
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,52,ublic class HermiteInterpolator implements DifferentiableUnivariateVectorFunction {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,54,public class HermiteInterpolator implements UnivariateDifferentiableVectorFunction {
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,85, @exception MathIllegalArgumentException if the abscissa is equals to a previously
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,86, added sample point
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,87,* @exception ZeroException if the abscissa difference between added point
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,88,* and a previous point is zero (i.e. the two points are at same abscissa)
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,89,* @exception MathArithmeticException if the number of derivatives is larger
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,90,"* than 20, which prevents computation of a factorial"
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,89,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,93,"throws ZeroException, MathArithmeticException {"
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,109,"hrow new MathIllegalArgumentException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO,"
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,110,);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,113,"throw new ZeroException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);"
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,130, @exception MathIllegalStateException if sample is empty
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,133,* @exception NoDataException if sample is empty
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,133,hrows MathIllegalStateException {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,136,throws NoDataException {
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,168, @exception MathIllegalStateException if sample is empty
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,171,* @exception NoDataException if sample is empty
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,171,hrows MathIllegalStateException {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,174,throws NoDataException {
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,191,** Interpolate first derivative at a specified abscissa.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,194,/** Interpolate value at a specified abscissa.
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,193, Calling this method is equivalent to call the {@link PolynomialFunction#value(double)
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,194, value} methods of the derivatives of all polynomials returned by {@link
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,195," #getPolynomials() getPolynomials}, except it builds neither the intermediate"
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,196," polynomials nor their derivatives, so this method is faster and numerically more stable."
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,196,* Calling this method is equivalent to call the {@link
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,197,* PolynomialFunction#value(DerivativeStructure) value} methods of all polynomials
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,198,"* returned by {@link #getPolynomials() getPolynomials}, except it does not build the"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,199,"* intermediate polynomials, so this method is faster and numerically more stable."
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,199, @return interpolated derivative
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,200, @exception MathIllegalStateException if sample is empty
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,202,* @return interpolated value
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,203,* @exception NoDataException if sample is empty
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,202,ublic double[] derivative(double x)
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,203,hrows MathIllegalStateException {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,205,public DerivativeStructure[] value(final DerivativeStructure x)
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,206,throws NoDataException {
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,208,inal double[] derivative = new double[topDiagonal.get(0).length];
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,209,ouble valueCoeff      = 1;
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,210,ouble derivativeCoeff = 0;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,211,final DerivativeStructure[] value = new DerivativeStructure[topDiagonal.get(0).length];
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,212,"Arrays.fill(value, x.getField().getZero());"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,213,DerivativeStructure valueCoeff = x.getField().getOne();
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,213,or (int k = 0; k < derivative.length; ++k) {
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,214,erivative[k] += dividedDifference[k] * derivativeCoeff;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,216,for (int k = 0; k < value.length; ++k) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,217,value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,216,inal double deltaX = x - abscissae.get(i);
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,217,erivativeCoeff = valueCoeff + derivativeCoeff * deltaX;
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,218,alueCoeff *= deltaX;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,219,final DerivativeStructure deltaX = x.subtract(abscissae.get(i));
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,220,valueCoeff = valueCoeff.multiply(deltaX);
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,221,eturn derivative;
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,225,** {@inheritDoc}} */
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,226,ublic UnivariateVectorFunction derivative() {
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,227,eturn new UnivariateVectorFunction() {
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,229,** {@inheritDoc}} */
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,230,ublic double[] value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,231,eturn derivative(x);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,223,return value;
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,238, @exception MathIllegalStateException if interpolation cannot be performed
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,228,* @exception NoDataException if interpolation cannot be performed
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,241,rivate void checkInterpolation() throws MathIllegalStateException {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,231,private void checkInterpolation() throws NoDataException {
False,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,243,hrow new MathIllegalStateException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,233,throw new NoDataException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,21,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,23,import org.apache.commons.math3.exception.NoDataException;
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,33,"ssert.assertEquals(0.0, interpolator.value(x)[0], 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,34,"ssert.assertEquals(0.0, interpolator.derivative(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,35,"DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,36,"Assert.assertEquals(0.0, y.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,37,"Assert.assertEquals(0.0, y.getPartialDerivative(1), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,47,"ssert.assertEquals((x - 1.0) * (x - 2.0), interpolator.value(x)[0], 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,48,"ssert.assertEquals(2 * x - 3.0, interpolator.derivative(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,50,"DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,51,"Assert.assertEquals((x - 1.0) * (x - 2.0), y.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,52,"Assert.assertEquals(2 * x - 3.0, y.getPartialDerivative(1), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,61,"ssert.assertEquals(1.0, interpolator.value(0.0)[0], 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,62,"ssert.assertEquals(2.0, interpolator.derivative(0.0)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,65,"DerivativeStructure y0 = interpolator.value(new DerivativeStructure(1, 1, 0, 0.0))[0];"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,66,"Assert.assertEquals(1.0, y0.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,67,"Assert.assertEquals(2.0, y0.getPartialDerivative(1), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,64,"ssert.assertEquals(5.0, interpolator.value(2.0)[0], 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,65,"ssert.assertEquals(2.0, interpolator.derivative(2.0)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,69,"DerivativeStructure y2 = interpolator.value(new DerivativeStructure(1, 1, 0, 2.0))[0];"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,70,"Assert.assertEquals(5.0, y2.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,71,"Assert.assertEquals(2.0, y2.getPartialDerivative(1), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,141,ouble[] values      = interpolator.value(x);
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,142,ouble[] derivatives = interpolator.derivative(x);
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,143,"ssert.assertEquals(p.length, values.length);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,147,"DerivativeStructure[] y = interpolator.value(new DerivativeStructure(1, 1, 0, x));"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,148,"Assert.assertEquals(p.length, y.length);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,145,"ssert.assertEquals(p[k].value(x), values[k], 1.0e-8 * FastMath.abs(p[k].value(x)));"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,146,"ssert.assertEquals(pPrime[k].value(x), derivatives[k], 4.0e-8 * FastMath.abs(p[k].value(x)));"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,150,"Assert.assertEquals(p[k].value(x), y[k].getValue(), 1.0e-8 * FastMath.abs(p[k].value(x)));"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,151,"Assert.assertEquals(pPrime[k].value(x), y[k].getPartialDerivative(1), 4.0e-8 * FastMath.abs(p[k].value(x)));"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,165,"ssert.assertEquals(FastMath.sin(x), interpolator.value(x)[0], 3.5e-5);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,166,"ssert.assertEquals(FastMath.cos(x), interpolator.derivative(x)[0], 1.3e-4);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,170,"DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 2, 0, x))[0];"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,171,"Assert.assertEquals( FastMath.sin(x), y.getValue(), 3.5e-5);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,172,"Assert.assertEquals( FastMath.cos(x), y.getPartialDerivative(1), 1.3e-4);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,173,"Assert.assertEquals(-FastMath.sin(x), y.getPartialDerivative(2), 2.9e-3);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,177,"ssert.assertEquals(FastMath.sqrt(x), interpolator.value(x)[0], 1.5e-4);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,178,"ssert.assertEquals(0.5 / FastMath.sqrt(x), interpolator.derivative(x)[0], 8.5e-4);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,184,"DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,185,"Assert.assertEquals(FastMath.sqrt(x), y.getValue(), 1.5e-4);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,186,"Assert.assertEquals(0.5 / FastMath.sqrt(x), y.getPartialDerivative(1), 8.5e-4);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,199,"DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,194,"ssert.assertEquals(x8 + 1, interpolator.value(x)[0], 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,195,"ssert.assertEquals(8 * x4 * x2 * x, interpolator.derivative(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,203,"Assert.assertEquals(x8 + 1, y.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,204,"Assert.assertEquals(8 * x4 * x2 * x, y.getPartialDerivative(1), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,206,"ssert.assertEquals(1 + x * (1 + x), interpolator.value(x)[0], 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,207,"ssert.assertEquals(1 + 2 * x, interpolator.derivative(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,215,"DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,216,"Assert.assertEquals(1 + x * (1 + x), y.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,217,"Assert.assertEquals(1 + 2 * x, y.getPartialDerivative(1), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,221,Test(expected=IllegalStateException.class)
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,231,@Test(expected=NoDataException.class)

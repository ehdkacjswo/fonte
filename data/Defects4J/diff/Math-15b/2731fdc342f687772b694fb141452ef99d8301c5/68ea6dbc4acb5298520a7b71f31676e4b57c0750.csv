is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,15, limitations under the License.
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,7,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,12,* governing permissions and limitations under the License.
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,20,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,23,mport org.apache.commons.math.random.RandomData;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,24,mport org.apache.commons.math.random.RandomDataImpl;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,29, @version $Revision$ $Date$
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,21,"* @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,22,*          2007) $
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,32,ublic final class DescriptiveStatisticsImplTest extends TestCase {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,33,rivate double one = 1;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,34,rivate float two = 2;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,35,rivate int three = 3;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,36,rivate double mean = 2;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,37,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,38,rivate double sum = 8;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,39,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,40,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,41,rivate double n = 4;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,42,rivate double min = 1;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,43,rivate double max = 3;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,44,rivate double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,24,public final class DescriptiveStatisticsImplTest extends DescriptiveStatisticsTest {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,50,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,55,"uite.setName(""DescriptiveStatistics Tests"");"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,32,"suite.setName(""DescriptiveStatisticsImpl Tests"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,59,** test stats */
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,60,ublic void testStats() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,61,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,62,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,63,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,64,.addValue(two);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,65,.addValue(two);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,66,.addValue(three);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,67,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,68,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,69,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,70,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,71,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,72,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,73,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,74,"ssertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,75,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,76,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,79,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,80,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,82,"ssertTrue(""Mean of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,83,ouble.isNaN( u.getMean() ) );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,84,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,85,ouble.isNaN( u.getStandardDeviation() ) );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,86,"ssertTrue(""Variance of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,87,ouble.isNaN(u.getVariance() ) );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,89,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,91,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,92,.getMean() == one);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,93,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: """
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,94," u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,95,"ssertTrue( ""Variance of n = 1 set should be zero"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,96,.getVariance() == 0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,99,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,100,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,102,ouble[] testArray =
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,103," 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,104,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,105,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,106,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,109,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,110,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,111,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,112,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,115,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,116,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,117,.setWindowSize(10);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,119,.addValue( 1.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,120,.addValue( 2.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,121,.addValue( 3.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,122,.addValue( 4.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,124,"/assertEquals( ""Product not expected"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,125,"/    24.0, u.getProduct(), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,126,"ssertEquals( ""Geometric mean not expected"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,127,".213364, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,129,/ Now test rolling - StorelessDescriptiveStatistics should discount the contribution
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,130,/ of a discarded element
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,131,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,132,.addValue( i + 2 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,134,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,136,"/assertEquals( ""Product not expected"", 39916800.0,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,137,"/    u.getProduct(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,138,"ssertEquals( ""Geometric mean not expected"", 5.755931,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,139,".getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,142,ublic void testGetSortedValues() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,143,"ouble[] test1 = {5,4,3,2,1};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,144,"ouble[] test2 = {5,2,1,3,4,0};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,145,ouble[] test3 = {1};
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,146,nt[] testi = null;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,147,ouble[] test4 = null;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,148,andomData rd = new RandomDataImpl();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,149,stGetSortedValues(test1);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,150,stGetSortedValues(test2);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,151,stGetSortedValues(test3);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,152,or (int i = 0; i < 10; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,153,"esti = rd.nextPermutation(10,6);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,154,est4 = new double[6];
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,155,or (int j = 0; j < testi.length; j++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,156,est4[j] = (double) testi[j];
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,158,stGetSortedValues(test4);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,160,or (int i = 0; i < 10; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,161,"esti = rd.nextPermutation(10,5);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,162,est4 = new double[5];
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,163,or (int j = 0; j < testi.length; j++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,164,est4[j] = (double) testi[j];
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,166,stGetSortedValues(test4);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,36,protected DescriptiveStatistics createDescriptiveStatistics() {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,37,return new DescriptiveStatisticsImpl();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,171,rivate void tstGetSortedValues(double[] test) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,172,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,173,or (int i = 0; i < test.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,174,.addValue(test[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,176,ouble[] sorted = u.getSortedValues();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,177,f (sorted.length != test.length) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,178,"ail(""wrong length for sorted values array"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,180,or (int i = 0; i < sorted.length-1; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,181,f (sorted[i] > sorted[i+1]) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,182,"ail(""sorted values out of sequence"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,187,ublic void testPercentiles() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,188,"ouble[] test = {5,4,3,2,1};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,189,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,190,or (int i = 0; i < test.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,191,.addValue(test[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,193,"ssertEquals(""expecting min"",1,u.getPercentile(5),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,194,"ssertEquals(""expecting max"",5,u.getPercentile(99),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,195,"ssertEquals(""expecting middle"",3,u.getPercentile(50),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,196,ry {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,197,.getPercentile(0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,198,"ail(""expecting IllegalArgumentException for getPercentile(0)"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,199, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,202,ry {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,203,.getPercentile(120);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,204,"ail(""expecting IllegalArgumentException for getPercentile(120)"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,205, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,209,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,210,"ouble[] test2 = {1,2,3,4};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,211,or (int i = 0; i < test2.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,212,.addValue(test2[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,214,"ssertEquals(""Q1"",1.25,u.getPercentile(25),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,215,"ssertEquals(""Q3"",3.75,u.getPercentile(75),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,216,"ssertEquals(""Q2"",2.5,u.getPercentile(50),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,218,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,219,ouble[] test3 = {1};
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,220,or (int i = 0; i < test3.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,221,.addValue(test3[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,223,"ssertEquals(""Q1"",1,u.getPercentile(25),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,224,"ssertEquals(""Q3"",1,u.getPercentile(75),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,225,"ssertEquals(""Q2"",1,u.getPercentile(50),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,227,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,228,andomData rd = new RandomDataImpl();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,229,"nt[] testi = rd.nextPermutation(100,100); // will contain 0-99"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,230,or (int j = 0; j < testi.length; j++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,231,".addValue((double) testi[j]);  //OK, laugh at me for the cast"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,233,or (int i = 1; i < 100; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,234,"ssertEquals(""percentile "" + i,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,235,"double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,238,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,239,"ouble[] test4 = {1,2,3,4,100};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,240,or (int i = 0; i < test4.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,241,.addValue(test4[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,243,"ssertEquals(""80th"",80.8,u.getPercentile(80),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,245,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,246,"ssertTrue(""empty value set should return NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,247,ouble.isNaN(u.getPercentile(50)));
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,33,ublic final class DescriptiveStatisticsTest extends TestCase {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,34,rivate double one = 1;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,35,rivate float two = 2;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,36,rivate int three = 3;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,37,rivate double mean = 2;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,38,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,39,rivate double sum = 8;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,32,public abstract class DescriptiveStatisticsTest extends TestCase {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,41,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,42,rivate double n = 4;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,43,rivate double min = 1;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,35,private double mean = 2;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,36,private double min = 1;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,37,private double n = 4;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,38,private double one = 1;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,39,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,40,private double sum = 8;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,41,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,42,private int three = 3;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,44,private float two = 2;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,51,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,60,** test stats */
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,61,ublic void testStats() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,62,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,63,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,64,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,65,.addValue(two);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,66,.addValue(two);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,67,.addValue(three);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,68,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,69,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,70,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,71,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,72,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,73,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,74,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,75,"ssertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,76,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,77,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,80,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,81,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,83,"ssertTrue(""Mean of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,84,ouble.isNaN( u.getMean() ) );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,85,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,86,ouble.isNaN( u.getStandardDeviation() ) );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,87,"ssertTrue(""Variance of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,88,ouble.isNaN(u.getVariance() ) );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,90,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,92,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,93,.getMean() == one);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,94,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: """
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,95," u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,96,"ssertTrue( ""Variance of n = 1 set should be zero"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,97,.getVariance() == 0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,56,protected abstract DescriptiveStatistics createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,100,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,101,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,103,ouble[] testArray =
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,104," 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,105,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,106,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,107,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,110,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,111,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,112,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,113,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,58,public void setUp() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,116,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,117,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,118,.setWindowSize(10);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,120,.addValue( 1.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,121,.addValue( 2.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,122,.addValue( 3.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,123,.addValue( 4.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,125,"/assertEquals( ""Product not expected"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,126,"/    24.0, u.getProduct(), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,127,"ssertEquals( ""Geometric mean not expected"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,128,".213364, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,130,/ Now test rolling - StorelessDescriptiveStatistics should discount the contribution
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,131,/ of a discarded element
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,132,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,133,.addValue( i + 2 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,135,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,137,"/assertEquals( ""Product not expected"", 39916800.0,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,138,"/    u.getProduct(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,139,"ssertEquals( ""Geometric mean not expected"", 5.755931,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,140,".getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,147,escriptiveStatistics stats = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,65,DescriptiveStatistics stats = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,224,rivate void tstGetSortedValues(double[] test) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,225,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,226,.setWindowSize(test.length);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,227,or (int i = 0; i < test.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,228,.addValue(test[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,230,ouble[] sorted = u.getSortedValues();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,231,f (sorted.length != test.length) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,232,"ail(""wrong length for sorted values array"");"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,140,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,141,DescriptiveStatistics u = createDescriptiveStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,143,"assertTrue(""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,144,Double.isNaN( u.getMean() ) );
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,145,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,146,Double.isNaN( u.getStandardDeviation() ) );
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,147,"assertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,148,Double.isNaN(u.getVariance() ) );
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,150,u.addValue(one);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,152,"assertTrue( ""Mean of n = 1 set should be value of single item n1"","
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,153,u.getMean() == one);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,154,"assertTrue( ""StdDev of n = 1 set should be zero, instead it is: """
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,155,"+ u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,156,"assertTrue( ""Variance of n = 1 set should be zero"","
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,157,u.getVariance() == 0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,160,public void testNewInstanceClassNull() {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,161,try {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,162,DescriptiveStatistics.newInstance((Class)null);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,163,"fail(""null is not a valid descriptive statistics class"");"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,164,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,165,// success
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,166,} catch (Exception ex) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,167,fail();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,234,or (int i = 0; i < sorted.length-1; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,235,f (sorted[i] > sorted[i+1]) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,236,"ail(""sorted values out of sequence"");"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,172,public void testNewInstanceClassValid() {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,173,try {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,174,DescriptiveStatistics u = DescriptiveStatistics.newInstance(
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,175,DescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,176,assertNotNull(u);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,177,assertTrue(u instanceof DescriptiveStatisticsImpl);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,178,} catch (InstantiationException ex) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,179,fail();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,180,} catch (IllegalAccessException ex) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,181,fail();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,243,escriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,187,DescriptiveStatistics u = createDescriptiveStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,251,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,252,DescriptiveStatistics u = createDescriptiveStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,253,u.setWindowSize(10);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,255,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,256,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,257,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,258,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,260,"//assertEquals( ""Product not expected"","
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,261,"//    24.0, u.getProduct(), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,262,"assertEquals( ""Geometric mean not expected"","
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,263,"2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,265,// Now test rolling - StorelessDescriptiveStatistics should discount the contribution
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,266,// of a discarded element
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,267,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,268,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,270,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,272,"//assertEquals( ""Product not expected"", 39916800.0,"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,273,"//    u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,274,"assertEquals( ""Geometric mean not expected"", 5.755931,"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,275,"u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,307,escriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,280,DescriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,330,ublic void testNewInstanceClassNull() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,331,ry {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,332,escriptiveStatistics.newInstance((Class)null);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,333,"ail(""null is not a valid descriptive statistics class"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,334, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,335,/ success
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,336, catch (Exception ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,337,ail();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,342,ublic void testNewInstanceClassValid() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,343,ry {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,344,escriptiveStatistics u = DescriptiveStatistics.newInstance(
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,345,escriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,346,ssertNotNull(u);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,347,ssertTrue(u instanceof DescriptiveStatisticsImpl);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,348, catch (InstantiationException ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,349,ail();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,350, catch (IllegalAccessException ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,351,ail();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,303,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,304,DescriptiveStatistics u = createDescriptiveStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,306,double[] testArray =
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,307,"{ 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,308,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,309,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,310,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,313,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,314,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,315,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,316,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,319,/** test stats */
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,320,public void testStats() {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,321,DescriptiveStatistics u = createDescriptiveStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,322,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,323,u.addValue(one);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,324,u.addValue(two);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,325,u.addValue(two);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,326,u.addValue(three);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,327,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,328,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,329,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,330,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,331,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,332,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,333,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,334,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,335,u.clear();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,336,"assertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,355,ublic void testWindowSize() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,356,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,357,.setWindowSize(1234);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,358,"ssertEquals(1234, u.getWindowSize());"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,360,.addValue(1.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,361,.addValue(2.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,362,.addValue(3.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,363,.addValue(4.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,364,.addValue(5.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,365,"ssertEquals(5, u.getN());"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,367,.setWindowSize(DescriptiveStatistics.INFINITE_WINDOW);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,368,"ssertEquals(5, u.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,339,public void testToString() {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,340,DescriptiveStatistics u = createDescriptiveStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,341,"assertTrue(u.toString().indexOf(""NaN"") > 0);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,342,"assertTrue(u.toString().startsWith(""DescriptiveStatistics""));"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,343,double[] testArray =
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,344,"{ 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,345,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,346,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,347,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,349,"assertTrue(u.toString().indexOf(""NaN"") == -1);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,350,"assertTrue(u.toString().startsWith(""DescriptiveStatistics""));"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,372,escriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,354,DescriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,388,ublic void testToString() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,389,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,390,"ssertTrue(u.toString().indexOf(""NaN"") > 0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,391,"ssertTrue(u.toString().startsWith(""DescriptiveStatistics""));"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,392,ouble[] testArray =
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,393," 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,394,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,395,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,396,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,398,"ssertTrue(u.toString().indexOf(""NaN"") == -1);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,399,"ssertTrue(u.toString().startsWith(""DescriptiveStatistics""));"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,370,public void testWindowSize() {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,371,DescriptiveStatistics u = createDescriptiveStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,372,u.setWindowSize(1234);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,373,"assertEquals(1234, u.getWindowSize());"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,375,u.addValue(1.0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,376,u.addValue(2.0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,377,u.addValue(3.0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,378,u.addValue(4.0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,379,u.addValue(5.0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,380,"assertEquals(5, u.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,382,u.setWindowSize(DescriptiveStatistics.INFINITE_WINDOW);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,383,"assertEquals(5, u.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,386,private void tstGetSortedValues(double[] test) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,387,DescriptiveStatistics u = createDescriptiveStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,388,u.setWindowSize(test.length);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,389,for (int i = 0; i < test.length; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,390,u.addValue(test[i]);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,392,double[] sorted = u.getSortedValues();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,393,if (sorted.length != test.length) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,394,"fail(""wrong length for sorted values array"");"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,396,for (int i = 0; i < sorted.length-1; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,397,if (sorted[i] > sorted[i+1]) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,398,"fail(""sorted values out of sequence"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1599,ouble result = 1;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1600,ouble d2p    = d;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1600,// split d as two 26 bits numbers
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1601,"// beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties"
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1602,final int splitFactor = 0x8000001;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1603,final double cd       = splitFactor * d;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1604,final double d1High   = cd - (cd - d);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1605,final double d1Low    = d - d1High;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1607,// prepare result
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1608,double resultHigh = 1;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1609,double resultLow  = 0;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1611,// d^(2p)
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1612,double d2p     = d;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1613,double d2pHigh = d1High;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1614,double d2pLow  = d1Low;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1603,esult *= d2p;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1619,// accurate multiplication result = result * d^(2p) using Veltkamp TwoProduct algorithm
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1620,"// beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties"
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1621,final double tmpHigh = resultHigh * d2p;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1622,final double cRH     = splitFactor * resultHigh;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1623,final double rHH     = cRH - (cRH - resultHigh);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1624,final double rHL     = resultHigh - rHH;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1625,final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1626,resultHigh = tmpHigh;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1627,resultLow  = resultLow * d2p + tmpLow;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1605,2p *= d2p;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1630,// accurate squaring d^(2(p+1)) = d^(2p) * d^(2p) using Veltkamp TwoProduct algorithm
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1631,"// beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties"
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1632,final double tmpHigh = d2pHigh * d2p;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1633,final double cD2pH   = splitFactor * d2pHigh;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1634,final double d2pHH   = cD2pH - (cD2pH - d2pHigh);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1635,final double d2pHL   = d2pHigh - d2pHH;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1636,final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1637,final double cTmpH   = splitFactor * tmpHigh;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1638,d2pHigh = cTmpH - (cTmpH - tmpHigh);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1639,d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1640,d2p     = d2pHigh + d2pLow;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1609,eturn result;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1646,return resultHigh + resultLow;
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,23,import org.apache.commons.math3.TestUtils;
False,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,28,mport org.apache.commons.math3.TestUtils;
False,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1111,inal double base = 1.23456789;
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1112,DfpField field = new DfpField(40);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1113,final double base = 1.23456789;
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1114,Dfp baseDfp = field.newDfp(base);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1115,Dfp dfpPower = field.getOne();
False,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1115,"inal double expected = FastMath.pow(base, (double) i);"
False,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1116,"ssert.assertEquals(""exp="" + i,"
False,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1117,"xpected,"
False,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1118,"astMath.pow(base, i),"
False,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1119,0 * Math.ulp(expected));
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1117,"Assert.assertEquals(""exp="" + i, dfpPower.toDouble(), FastMath.pow(base, i),"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1118,0.6 * FastMath.ulp(dfpPower.toDouble()));
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1119,dfpPower = dfpPower.multiply(baseDfp);

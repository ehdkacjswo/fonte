is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,19,import java.lang.reflect.Array;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,281,ecurseBuildBoundary(tree);
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,282,tree.visit(new BoundaryBuilder<S>());
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,286,** Recursively build the boundary shell tree.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,287, @param node current node in the inout tree
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,287,/** Visitor building boundary shell tree.
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,288,* <p>
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,289,* The boundary shell is represented as {@link BoundaryAttribute boundary attributes}
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,290,* at each internal node.
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,291,* </p>
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,289,rivate void recurseBuildBoundary(final BSPTree<S> node) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,290,f (node.getCut() != null) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,293,private static class BoundaryBuilder<S extends Space> implements BSPTreeVisitor<S> {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,295,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,296,public Order visitOrder(BSPTree<S> node) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,297,return Order.PLUS_MINUS_SUB;
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,300,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,301,public void visitInternalNode(BSPTree<S> node) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,297,inal Characterization<S> plusChar = new Characterization<S>();
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,308,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,309,"final SubHyperplane<S>[] plusChar = (SubHyperplane<S>[]) Array.newInstance(SubHyperplane.class, 2);"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,300,f (plusChar.hasOut()) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,301,/ plusChar.getOut() corresponds to a subset of the cut
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,302,/ sub-hyperplane known to have outside cells on its plus
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,303,"/ side, we want to check if parts of this subset do have"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,304,/ inside cells on their minus side
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,305,inal Characterization<S> minusChar = new Characterization<S>();
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,306,"haracterize(node.getMinus(), plusChar.getOut(), minusChar);"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,307,f (minusChar.hasIn()) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,308,lusOutside = minusChar.getIn();
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,312,if (plusChar[0] != null && !plusChar[0].isEmpty()) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,313,// plusChar[0] corresponds to a subset of the cut sub-hyperplane known to have
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,314,"// outside cells on its plus side, we want to check if parts of this subset"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,315,// do have inside cells on their minus side
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,316,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,317,"final SubHyperplane<S>[] minusChar = (SubHyperplane<S>[]) Array.newInstance(SubHyperplane.class, 2);"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,318,"characterize(node.getMinus(), plusChar[0], minusChar);"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,319,if (minusChar[1] != null && !minusChar[1].isEmpty()) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,320,"// this part belongs to the boundary,"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,321,// it has the outside on its plus side and the inside on its minus side
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,322,plusOutside = minusChar[1];
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,312,f (plusChar.hasIn()) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,313,/ plusChar.getIn() corresponds to a subset of the cut
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,314,/ sub-hyperplane known to have inside cells on its plus
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,315,"/ side, we want to check if parts of this subset do have"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,316,/ outside cells on their minus side
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,317,inal Characterization<S> minusChar = new Characterization<S>();
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,318,"haracterize(node.getMinus(), plusChar.getIn(), minusChar);"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,319,f (minusChar.hasOut()) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,320,lusInside = minusChar.getOut();
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,326,if (plusChar[1] != null && !plusChar[1].isEmpty()) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,327,// plusChar[1] corresponds to a subset of the cut sub-hyperplane known to have
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,328,"// inside cells on its plus side, we want to check if parts of this subset"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,329,// do have outside cells on their minus side
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,330,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,331,"final SubHyperplane<S>[] minusChar = (SubHyperplane<S>[]) Array.newInstance(SubHyperplane.class, 2);"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,332,"characterize(node.getMinus(), plusChar[1], minusChar);"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,333,if (minusChar[0] != null && !minusChar[0].isEmpty()) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,334,"// this part belongs to the boundary,"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,335,// it has the inside on its plus side and the outside on its minus side
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,336,plusInside = minusChar[0];
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,340,// set the boundary attribute at non-leaf nodes
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,325,ecurseBuildBoundary(node.getPlus());
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,326,ecurseBuildBoundary(node.getMinus());
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,331,** Filter the parts of an hyperplane belonging to the boundary.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,332, <p>The filtering consist in splitting the specified
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,333, sub-hyperplane into several parts lying in inside and outside
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,334, cells of the tree. The principle is to call this method twice for
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,335," each cut sub-hyperplane in the tree, once one the plus node and"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,336, once on the minus node. The parts that have the same flag
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,337, (inside/inside or outside/outside) do not belong to the boundary
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,338, while parts that have different flags (inside/outside or
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,339, outside/inside) do belong to the boundary.</p>
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,340, @param node current BSP tree node
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,341, @param sub sub-hyperplane to characterize
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,342, @param characterization placeholder where to put the characterized parts
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,344,"rivate void characterize(final BSPTree<S> node, final SubHyperplane<S> sub,"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,345,inal Characterization<S> characterization) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,346,f (node.getCut() == null) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,347,/ we have reached a leaf node
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,348,inal boolean inside = (Boolean) node.getAttribute();
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,349,"haracterization.add(sub, inside);"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,350, else {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,351,inal Hyperplane<S> hyperplane = node.getCut().getHyperplane();
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,352,witch (sub.side(hyperplane)) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,353,ase PLUS:
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,354,"haracterize(node.getPlus(), sub, characterization);"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,355,reak;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,356,ase MINUS:
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,357,"haracterize(node.getMinus(), sub, characterization);"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,358,reak;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,359,ase BOTH:
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,360,inal SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,361,"haracterize(node.getPlus(),  split.getPlus(),  characterization);"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,362,"haracterize(node.getMinus(), split.getMinus(), characterization);"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,363,reak;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,364,efault:
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,365,/ this should not happen
False,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,366,hrow new MathInternalError();
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,345,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,346,public void visitLeafNode(BSPTree<S> node) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,349,/** Filter the parts of an hyperplane belonging to the boundary.
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,350,* <p>The filtering consist in splitting the specified
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,351,* sub-hyperplane into several parts lying in inside and outside
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,352,* cells of the tree. The principle is to call this method twice for
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,353,"* each cut sub-hyperplane in the tree, once one the plus node and"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,354,* once on the minus node. The parts that have the same flag
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,355,* (inside/inside or outside/outside) do not belong to the boundary
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,356,* while parts that have different flags (inside/outside or
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,357,* outside/inside) do belong to the boundary.</p>
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,358,* @param node current BSP tree node
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,359,* @param sub sub-hyperplane to characterize
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,360,* @param characterization placeholder where to put the characterized parts
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,362,"private void characterize(final BSPTree<S> node, final SubHyperplane<S> sub,"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,363,final SubHyperplane<S>[] characterization) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,364,if (node.getCut() == null) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,365,// we have reached a leaf node
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,366,final boolean inside = (Boolean) node.getAttribute();
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,367,if (inside) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,368,if (characterization[1] == null) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,369,characterization[1] = sub;
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,370,} else {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,371,characterization[1] = characterization[1].reunite(sub);
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,373,} else {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,374,if (characterization[0] == null) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,375,characterization[0] = sub;
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,376,} else {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,377,characterization[0] = characterization[0].reunite(sub);
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,380,} else {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,381,final Hyperplane<S> hyperplane = node.getCut().getHyperplane();
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,382,switch (sub.side(hyperplane)) {
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,383,case PLUS:
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,384,"characterize(node.getPlus(), sub, characterization);"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,385,break;
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,386,case MINUS:
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,387,"characterize(node.getMinus(), sub, characterization);"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,388,break;
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,389,case BOTH:
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,390,final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,391,"characterize(node.getPlus(),  split.getPlus(),  characterization);"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,392,"characterize(node.getMinus(), split.getMinus(), characterization);"
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,393,break;
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,394,default:
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,395,// this should not happen
True,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java,396,throw new MathInternalError();
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,17,ackage org.apache.commons.math3.geometry.partitioning;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,19,mport org.apache.commons.math3.geometry.Space;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,21,** Characterization of a sub-hyperplane.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,22, @param <S> Type of the space.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,23, @version $Id$
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,24, @since 3.0
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,26,lass Characterization<S extends Space> {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,28,** Parts of the sub-hyperplane that have inside cells on the tested side. */
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,29,rivate SubHyperplane<S> in;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,31,** Parts of the sub-hyperplane that have outside cells on the tested side. */
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,32,rivate SubHyperplane<S> out;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,34,** Create an empty characterization of a sub-hyperplane.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,36,ublic Characterization() {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,37,n  = null;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,38,ut = null;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,41,** Check if the sub-hyperplane that have inside cells on the tested side.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,42, @return true if the sub-hyperplane that have inside cells on the tested side
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,44,ublic boolean hasIn() {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,45,eturn (in != null) && (!in.isEmpty());
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,48,** Get the parts of the sub-hyperplane that have inside cells on the tested side.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,49, @return parts of the sub-hyperplane that have inside cells on the tested side
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,51,ublic SubHyperplane<S> getIn() {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,52,eturn in;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,55,** Check if the sub-hyperplane that have outside cells on the tested side.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,56, @return true if the sub-hyperplane that have outside cells on the tested side
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,58,ublic boolean hasOut() {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,59,eturn (out != null) && (!out.isEmpty());
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,62,** Get the parts of the sub-hyperplane that have outside cells on the tested side.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,63, @return parts of the sub-hyperplane that have outside cells on the tested side
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,65,ublic SubHyperplane<S> getOut() {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,66,eturn out;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,69,** Add a part of the sub-hyperplane known to have inside or outside cell on the tested side.
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,70, @param sub part of the sub-hyperplane to add
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,71," @param inside if true, the part added as an inside cell on the tested side, otherwise"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,72, it has an outside cell on the tested side
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,74,"ublic void add(final SubHyperplane<S> sub, final boolean inside) {"
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,75,f (inside) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,76,f (in == null) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,77,n = sub;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,78, else {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,79,n = in.reunite(sub);
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,81, else {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,82,f (out == null) {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,83,ut = sub;
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,84, else {
False,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,src/main/java/org/apache/commons/math3/geometry/partitioning/Characterization.java,85,ut = out.reunite(sub);

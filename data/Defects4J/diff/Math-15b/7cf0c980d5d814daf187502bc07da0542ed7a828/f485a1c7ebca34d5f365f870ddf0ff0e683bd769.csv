is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,22,import org.apache.commons.math.ode.events.EventHandler;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,23,import org.apache.commons.math.ode.events.CombinedEventsManager;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,24,import org.apache.commons.math.ode.sampling.DummyStepHandler;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,25,import org.apache.commons.math.ode.sampling.StepHandler;
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,63,"ublic AdaptiveStepsizeIntegrator(double minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,64,"ouble scalAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,65,ouble scalRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,68,"public AdaptiveStepsizeIntegrator(final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,69,"final double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,70,final double scalRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,79,witchesHandler = new SwitchingFunctionsHandler();
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,84,eventsHandlersManager = new CombinedEventsManager();
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,94,"ublic AdaptiveStepsizeIntegrator(double minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,95,"ouble[] vecAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,96,ouble[] vecRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,99,"public AdaptiveStepsizeIntegrator(final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,100,"final double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,101,final double[] vecRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,110,witchesHandler = new SwitchingFunctionsHandler();
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,115,eventsHandlersManager = new CombinedEventsManager();
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,127,ublic void setInitialStepSize(double initialStepSize) {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,132,public void setInitialStepSize(final double initialStepSize) {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,135,** Set the step handler for this integrator.
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,136, The handler will be called by the integrator for each accepted
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,137, step.
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,138, @param handler handler for the accepted steps
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,140,ublic void setStepHandler (StepHandler handler) {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,140,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,141,public void setStepHandler (final StepHandler handler) {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,144,** Get the step handler for this integrator.
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,145, @return the step handler for this integrator
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,145,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,151,** Add a switching function to the integrator.
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,152, @param function switching function
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,153, @param maxCheckInterval maximal time interval between switching
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,154, function checks (this interval prevents missing sign changes in
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,155, case the integration steps becomes very large)
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,156, @param convergence convergence threshold in the event time search
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,157, @param maxIterationCount upper limit of the iteration count in
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,158, the event time search
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,159, @see #getSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,160, @see #clearSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,162,"ublic void addSwitchingFunction(SwitchingFunction function,"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,163,"ouble maxCheckInterval,"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,164,"ouble convergence,"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,165,nt maxIterationCount) {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,166,"witchesHandler.addSwitchingFunction(function, maxCheckInterval, convergence, maxIterationCount);"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,150,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,151,"public void addEventHandler(final EventHandler function,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,152,"final double maxCheckInterval,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,153,"final double convergence,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,154,final int maxIterationCount) {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,155,"eventsHandlersManager.addEventHandler(function, maxCheckInterval, convergence, maxIterationCount);"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,169,** Get all the switching functions that have been added to the integrator.
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,170, @return an unmodifiable collection of the added switching functions
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,171," @see #addSwitchingFunction(SwitchingFunction, double, double, int)"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,172, @see #clearSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,174,ublic Collection<SwitchingFunction> getSwitchingFunctions() {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,175,eturn switchesHandler.getSwitchingFunctions();
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,158,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,159,public Collection<EventHandler> getEventsHandlers() {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,160,return eventsHandlersManager.getEventsHandlers();
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,178,** Remove all the switching functions that have been added to the integrator.
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,179," @see #addSwitchingFunction(SwitchingFunction, double, double, int)"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,180, @see #getSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,182,ublic void clearSwitchingFunctions() {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,183,witchesHandler.clearSwitchingFunctions();
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,163,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,164,public void clearEventsHandlers() {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,165,eventsHandlersManager.clearEventsHandlers();
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,194,"rotected void sanityChecks(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,195,"ouble t0, double[] y0, double t, double[] y)"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,196,hrows IntegratorException {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,176,"protected void sanityChecks(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,177,"final double t0, final double[] y0, final double t, final double[] y)"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,178,throws IntegratorException {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,250,"ublic double initializeStep(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,251,"oolean forward, int order, double[] scale,"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,252,"ouble t0, double[] y0, double[] yDot0,"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,253,"ouble[] y1, double[] yDot1)"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,254,hrows DerivativeException {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,232,"public double initializeStep(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,233,"final boolean forward, final int order, final double[] scale,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,234,"final double t0, final double[] y0, final double[] yDot0,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,235,"final double[] y1, final double[] yDot1)"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,236,throws DerivativeException {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,295,"ouble maxInv2 = Math.max(Math.sqrt(yDotOnScale2), yDDotOnScale);"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,296,ouble h1 = (maxInv2 < 1.0e-15) ?
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,297,"ath.max(1.0e-6, 0.001 * Math.abs(h)) :"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,298,"ath.pow(0.01 / maxInv2, 1.0 / order);"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,277,"final double maxInv2 = Math.max(Math.sqrt(yDotOnScale2), yDDotOnScale);"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,278,final double h1 = (maxInv2 < 1.0e-15) ?
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,279,"Math.max(1.0e-6, 0.001 * Math.abs(h)) :"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,280,"Math.pow(0.01 / maxInv2, 1.0 / order);"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,323,"rotected double filterStep(double h, boolean acceptSmall)"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,305,"protected double filterStep(final double h, final boolean acceptSmall)"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,326,f (Math.abs(h) < minStep) {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,327,f (acceptSmall) {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,328, = (h < 0) ? -minStep : minStep;
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,329, else {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,330,"hrow new IntegratorException(""minimal step size ({0}) reached,"" +"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,331," integration needs {1}"","
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,332,ew Object[] {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,333,"ouble.valueOf(minStep),"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,334,ouble.valueOf(Math.abs(h))
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,308,double filteredH = h;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,309,if (Math.abs(h) < minStep) {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,310,if (acceptSmall) {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,311,filteredH = (filteredH < 0) ? -minStep : minStep;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,312,} else {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,313,"throw new IntegratorException(""minimal step size ({0}) reached,"" +"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,314,""" integration needs {1}"","
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,315,new Object[] {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,316,"Double.valueOf(minStep),"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,317,Double.valueOf(Math.abs(h))
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,339,f (h > maxStep) {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,340, = maxStep;
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,341, else if (h < -maxStep) {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,342, = -maxStep;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,322,if (filteredH > maxStep) {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,323,filteredH = maxStep;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,324,} else if (h < -maxStep) {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,325,filteredH = -maxStep;
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,345,eturn h;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,328,return filteredH;
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,349,** Integrate the differential equations up to the given time.
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,350, <p>This method solves an Initial Value Problem (IVP).</p>
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,351, <p>Since this method stores some internal state variables made
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,352, available in its public interface during integration ({@link
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,353," #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,354, @param equations differential equations to integrate
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,355, @param t0 initial time
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,356, @param y0 initial value of the state vector at t0
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,357, @param t target time for the integration
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,358, (can be set to a value smaller than <code>t0</code> for backward integration)
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,359, @param y placeholder where to put the state vector at each successful
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,360,"  step (and hence at the end of integration), can be the same object as y0"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,361, @throws IntegratorException if the integrator cannot perform integration
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,362, @throws DerivativeException this exception is propagated to the caller if
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,363, the underlying user function triggers one
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,332,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,370,** Get the current value of the step start time t<sub>i</sub>.
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,371, <p>This method can be called during integration (typically by
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,372, the object implementing the {@link FirstOrderDifferentialEquations
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,373, differential equations} problem) if the value of the current step that
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,374, is attempted is needed.</p>
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,375, <p>The result is undefined if the method is called outside of
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,376, calls to {@link #integrate}</p>
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,377, @return current value of the step start time t<sub>i</sub>
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,338,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,383,** Get the current signed value of the integration stepsize.
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,384, <p>This method can be called during integration (typically by
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,385, the object implementing the {@link FirstOrderDifferentialEquations
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,386, differential equations} problem) if the signed value of the current stepsize
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,387, that is tried is needed.</p>
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,388, <p>The result is undefined if the method is called outside of
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,389, calls to {@link #integrate}</p>
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,390, @return current signed value of the stepsize
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,343,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,440,** Switching functions handler. */
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,441,rotected SwitchingFunctionsHandler switchesHandler;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,392,/** Events handlers manager. */
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,393,protected CombinedEventsManager eventsHandlersManager;
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,15, limitations under the License.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,18,ackage org.apache.commons.math.ode;
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,21, This class implements a step interpolator for the classical fourth
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,22, order Runge-Kutta integrator.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,24, <p>This interpolator allows to compute dense output inside the last
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,25, step computed. The interpolation equation is consistent with the
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,26, integration scheme :
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,28, <pre>
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,29,   y(t_n + theta h) = y (t_n + h)
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,30,                    + (1 - theta) (h/6) [ (-4 theta^2 + 5 theta - 1) y'_1
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,31,                                          +(4 theta^2 - 2 theta - 2) (y'_2 + y'_3)
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,32,                                          -(4 theta^2 +   theta + 1) y'_4
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,34, </pre>
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,36, where theta belongs to [0 ; 1] and where y'_1 to y'_4 are the four
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,37, evaluations of the derivatives already computed during the
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,38, step.</p>
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,40, @see ClassicalRungeKuttaIntegrator
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,41, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,42, @since 1.2
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,45,lass ClassicalRungeKuttaStepInterpolator
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,46,xtends RungeKuttaStepInterpolator {
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,48,** Simple constructor.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,49," This constructor builds an instance that is not usable yet, the"
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,50, {@link RungeKuttaStepInterpolator#reinitialize} method should be
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,51, called before using the instance in order to initialize the
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,52, internal arrays. This constructor is used only in order to delay
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,53, the initialization in some cases. The {@link RungeKuttaIntegrator}
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,54, class uses the prototyping design pattern to create the step
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,55, interpolators by cloning an uninitialized model and latter initializing
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,56, the copy.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,58,ublic ClassicalRungeKuttaStepInterpolator() {
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,61,** Copy constructor.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,62, @param interpolator interpolator to copy from. The copy is a deep
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,63, copy: its arrays are separated from the original arrays of the
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,64, instance
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,66,ublic ClassicalRungeKuttaStepInterpolator(ClassicalRungeKuttaStepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,67,uper(interpolator);
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,70,** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,71, @return a copy of the finalized instance
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,73,rotected StepInterpolator doCopy() {
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,74,eturn new ClassicalRungeKuttaStepInterpolator(this);
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,77,** Compute the state at the interpolated time.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,78, This is the main processing method that should be implemented by
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,79, the derived classes to perform the interpolation.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,80, @param theta normalized interpolation abscissa within the step
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,81, (theta is zero at the previous time step and one at the current time step)
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,82, @param oneMinusThetaH time gap between the interpolated time and
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,83, the current time
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,84, @throws DerivativeException this exception is propagated to the caller if the
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,85, underlying user function triggers one
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,87,"rotected void computeInterpolatedState(double theta,"
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,88,ouble oneMinusThetaH)
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,89,hrows DerivativeException {
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,91,ouble fourTheta = 4 * theta;
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,92,ouble s         = oneMinusThetaH / 6.0;
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,93,ouble coeff1    = s * ((-fourTheta + 5) * theta - 1);
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,94,ouble coeff23   = s * (( fourTheta - 2) * theta - 2);
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,95,ouble coeff4    = s * ((-fourTheta - 1) * theta - 1);
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,97,or (int i = 0; i < interpolatedState.length; ++i) {
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,98,nterpolatedState[i] = currentState[i] +
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,99,oeff1  * yDotK[0][i] +
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,100,oeff23 * (yDotK[1][i] + yDotK[2][i]) +
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,101,oeff4  * yDotK[3][i];
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,106,** Serializable version identifier */
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,107,rivate static final long serialVersionUID = -6576285612589783992L;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,24,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,25,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,100,ublic void append(ContinuousOutputModel model)
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,103,public void append(final ContinuousOutputModel model)
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,120,tepInterpolator lastInterpolator = (StepInterpolator) steps.get(index);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,121,ouble current  = lastInterpolator.getCurrentTime();
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,122,ouble previous = lastInterpolator.getPreviousTime();
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,123,ouble step = current - previous;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,124,ouble gap = model.getInitialTime() - current;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,123,final StepInterpolator lastInterpolator = (StepInterpolator) steps.get(index);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,124,final double current  = lastInterpolator.getCurrentTime();
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,125,final double previous = lastInterpolator.getPreviousTime();
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,126,final double step = current - previous;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,127,final double gap = model.getInitialTime() - current;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,170,"ublic void handleStep(StepInterpolator interpolator, boolean isLast)"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,173,"public void handleStep(final StepInterpolator interpolator, final boolean isLast)"
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,225,ublic void setInterpolatedTime(double time) {
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,228,public void setInterpolatedTime(final double time) {
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,230,tepInterpolator sMin = steps.get(iMin);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,233,final StepInterpolator sMin = steps.get(iMin);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,234,tepInterpolator sMax = steps.get(iMax);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,237,final StepInterpolator sMax = steps.get(iMax);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,254,tepInterpolator si = steps.get(index);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,255,"nt location = locatePoint(time, si);"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,257,final StepInterpolator si = steps.get(index);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,258,"final int location = locatePoint(time, si);"
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,269,nt iMed = (iMin + iMax) / 2;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,270,tepInterpolator sMed = steps.get(iMed);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,271,ouble tMed = 0.5 * (sMed.getPreviousTime() + sMed.getCurrentTime());
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,272,final int iMed = (iMin + iMax) / 2;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,273,final StepInterpolator sMed = steps.get(iMed);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,274,final double tMed = 0.5 * (sMed.getPreviousTime() + sMed.getCurrentTime());
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,280,ouble d12 = tMax - tMed;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,281,ouble d23 = tMed - tMin;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,282,ouble d13 = tMax - tMin;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,283,ouble dt1 = time - tMax;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,284,ouble dt2 = time - tMed;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,285,ouble dt3 = time - tMin;
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,286,ouble iLagrange = ((dt2 * dt3 * d23) * iMax -
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,287,dt1 * dt3 * d13) * iMed +
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,288,dt1 * dt2 * d12) * iMin) /
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,289,d12 * d23 * d13);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,283,final double d12 = tMax - tMed;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,284,final double d23 = tMed - tMin;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,285,final double d13 = tMax - tMin;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,286,final double dt1 = time - tMax;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,287,final double dt2 = time - tMed;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,288,final double dt3 = time - tMin;
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,289,final double iLagrange = ((dt2 * dt3 * d23) * iMax -
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,290,(dt1 * dt3 * d13) * iMed +
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,291,(dt1 * dt2 * d12) * iMin) /
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,292,(d12 * d23 * d13);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,294,"nt low  = Math.max(iMin + 1, (9 * iMin + iMax) / 10);"
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,295,"nt high = Math.min(iMax - 1, (iMin + 9 * iMax) / 10);"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,297,"final int low  = Math.max(iMin + 1, (9 * iMin + iMax) / 10);"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,298,"final int high = Math.min(iMax - 1, (iMin + 9 * iMax) / 10);"
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,334,"rivate int locatePoint(double time, StepInterpolator interval) {"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,337,"private int locatePoint(final double time, final StepInterpolator interval) {"
False,src/java/org/apache/commons/math/ode/DerivativeException.java,src/java/org/apache/commons/math/ode/DerivativeException.java,37,"ublic DerivativeException(String specifier, Object[] parts) {"
True,src/java/org/apache/commons/math/ode/DerivativeException.java,src/java/org/apache/commons/math/ode/DerivativeException.java,37,"public DerivativeException(final String specifier, final Object[] parts) {"
False,src/java/org/apache/commons/math/ode/DerivativeException.java,src/java/org/apache/commons/math/ode/DerivativeException.java,44,ublic DerivativeException(Throwable cause) {
True,src/java/org/apache/commons/math/ode/DerivativeException.java,src/java/org/apache/commons/math/ode/DerivativeException.java,44,public DerivativeException(final Throwable cause) {
False,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,66,ublic FirstOrderConverter (SecondOrderDifferentialEquations equations) {
True,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,66,public FirstOrderConverter (final SecondOrderDifferentialEquations equations) {
False,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,90,"ublic void computeDerivatives(double t, double[] y, double[] yDot)"
False,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,91,hrows DerivativeException {
True,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,90,"public void computeDerivatives(final double t, final double[] y, final double[] yDot)"
True,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,src/java/org/apache/commons/math/ode/FirstOrderConverter.java,91,throws DerivativeException {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,23,import org.apache.commons.math.ode.events.EventHandler;
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,24,import org.apache.commons.math.ode.sampling.StepHandler;
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,33, @see SwitchingFunction
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,36,* @see EventHandler
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,57,** Add a switching function to the integrator.
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,58, @param function switching function
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,60,/** Add an event handler to the integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,61,* @param handler event handler
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,65, @see #getSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,66, @see #clearSwitchingFunctions()
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,68,* @see #getEventsHandlers()
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,69,* @see #clearEventsHandlers()
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,68,"ublic void addSwitchingFunction(SwitchingFunction function,"
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,69,"ouble maxCheckInterval,"
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,70,"ouble convergence,"
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,71,nt maxIterationCount);
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,73,** Get all the switching functions that have been added to the integrator.
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,74, @return an unmodifiable collection of the added switching functions
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,75," @see #addSwitchingFunction(SwitchingFunction, double, double, int)"
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,76, @see #clearSwitchingFunctions()
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,71,"public void addEventHandler(EventHandler handler, double maxCheckInterval,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,72,"double convergence, int maxIterationCount);"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,74,/** Get all the events handlers that have been added to the integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,75,* @return an unmodifiable collection of the added events handlers
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,76,"* @see #addEventHandler(EventHandler, double, double, int)"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,77,* @see #clearEventsHandlers()
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,78,ublic Collection<SwitchingFunction> getSwitchingFunctions();
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,79,public Collection<EventHandler> getEventsHandlers();
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,80,** Remove all the switching functions that have been added to the integrator.
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,81," @see #addSwitchingFunction(SwitchingFunction, double, double, int)"
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,82, @see #getSwitchingFunctions()
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,81,/** Remove all the events handlers that have been added to the integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,82,"* @see #addEventHandler(EventHandler, double, double, int)"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,83,* @see #getEventsHandlers()
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,84,ublic void clearSwitchingFunctions();
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,85,public void clearEventsHandlers();
False,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,36,"ublic IntegratorException(String specifier, Object[] parts) {"
True,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,36,"public IntegratorException(final String specifier, final Object[] parts) {"
False,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,44,ublic IntegratorException(Throwable cause) {
True,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,44,public IntegratorException(final Throwable cause) {
True,src/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,src/java/org/apache/commons/math/ode/SecondOrderIntegrator.java,20,import org.apache.commons.math.ode.sampling.StepHandler;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,15, limitations under the License.
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,18,ackage org.apache.commons.math.ode;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,21, This class wraps an object implementing {@link FixedStepHandler}
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,22, into a {@link StepHandler}.
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,24, <p>This wrapper allows to use fixed step handlers with general
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,25, integrators which cannot guaranty their integration steps will
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,26, remain constant and therefore only accept general step
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,27, handlers.</p>
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,29, <p>The stepsize used is selected at construction time. The {@link
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,30, FixedStepHandler#handleStep handleStep} method of the underlying
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,31, {@link FixedStepHandler} object is called at the beginning time of
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,32," the integration t0 and also at times t0+h, t0+2h, ... If the"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,33," integration range is an integer multiple of the stepsize, then the"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,34," last point handled will be the endpoint of the integration tend, if"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,35," not, the last point will belong to the interval [tend - h ;"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,36, tend].</p>
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,38," <p>There is no constraint on the integrator, it can use any"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,39, timestep it needs (time steps longer or shorter than the fixed time
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,40, step and non-integer ratios are all allowed).</p>
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,42, @see StepHandler
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,43, @see FixedStepHandler
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,44, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,45, @since 1.2
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,48,ublic class StepNormalizer
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,49,mplements StepHandler {
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,51,** Simple constructor.
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,52, @param h fixed time step (sign is not used)
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,53, @param handler fixed time step handler to wrap
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,55,"ublic StepNormalizer(double h, FixedStepHandler handler) {"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,56,his.h       = Math.abs(h);
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,57,his.handler = handler;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,58,eset();
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,61,** Determines whether this handler needs dense output.
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,62, This handler needs dense output in order to provide data at
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,63, regularly spaced steps regardless of the steps the integrator
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,64," uses, so this method always returns true."
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,65, @return always true
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,67,ublic boolean requiresDenseOutput() {
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,68,eturn true;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,71,** Reset the step handler.
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,72, Initialize the internal data as required before the first step is
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,73, handled.
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,75,ublic void reset() {
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,76,astTime  = Double.NaN;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,77,astState = null;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,78,orward   = true;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,82, Handle the last accepted step
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,83, @param interpolator interpolator for the last accepted step. For
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,84," efficiency purposes, the various integrators reuse the same"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,85," object on each call, so if the instance wants to keep it across"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,86, all calls (for example to provide at the end of the integration a
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,87," continuous model valid throughout the integration range), it"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,88, should build a local copy using the clone method and store this
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,89, copy.
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,90, @param isLast true if the step is the last one
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,91, @throws DerivativeException this exception is propagated to the
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,92, caller if the underlying user function triggers one
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,94,"ublic void handleStep(StepInterpolator interpolator, boolean isLast)"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,95,hrows DerivativeException {
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,97,ouble nextTime;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,99,f (lastState == null) {
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,101,astTime = interpolator.getPreviousTime();
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,102,nterpolator.setInterpolatedTime(lastTime);
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,104,ouble[] state = interpolator.getInterpolatedState();
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,105,astState = (double[]) state.clone();
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,107,/ take the integration direction into account
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,108,orward = (interpolator.getCurrentTime() >= lastTime);
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,109,f (! forward) {
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,110, = -h;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,115,extTime = lastTime + h;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,116,oolean nextInStep = forward ^ (nextTime > interpolator.getCurrentTime());
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,117,hile (nextInStep) {
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,119,/ output the stored previous step
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,120,"andler.handleStep(lastTime, lastState, false);"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,122,/ store the next step
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,123,astTime = nextTime;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,124,nterpolator.setInterpolatedTime(lastTime);
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,125,"ystem.arraycopy(interpolator.getInterpolatedState(), 0,"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,126,"astState, 0, lastState.length);"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,128,extTime  += h;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,129,extInStep = forward ^ (nextTime > interpolator.getCurrentTime());
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,133,f (isLast) {
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,134,"/ there will be no more steps,"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,135,/ the stored one should be flagged as being the last
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,136,"andler.handleStep(lastTime, lastState, true);"
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,141,** Fixed time step. */
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,142,rivate double h;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,144,** Underlying step handler. */
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,145,rivate FixedStepHandler handler;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,147,** Last step time. */
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,148,rivate double lastTime;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,150,** Last State vector. */
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,151,rivate double[] lastState;
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,153,** Integration direction indicator. */
False,src/java/org/apache/commons/math/ode/StepNormalizer.java,src/java/org/apache/commons/math/ode/StepNormalizer.java,154,rivate boolean forward;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,15, limitations under the License.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,18,ackage org.apache.commons.math.ode;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,22,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,23,mport org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,24,mport org.apache.commons.math.analysis.BrentSolver;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,25,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,26,mport org.apache.commons.math.analysis.UnivariateRealSolver;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,28,** This class handles the state for one {@link SwitchingFunction
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,29, switching function} during integration steps.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,31," <p>Each time the integrator proposes a step, the switching function"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,32, should be checked. This class handles the state of one function
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,33," during one integration step, with references to the state at the"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,34, end of the preceding step. This information is used to determine if
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,35, the function should trigger an event or not during the proposed
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,36, step (and hence the step should be reduced to ensure the event
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,37, occurs at a bound rather than inside the step).</p>
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,39, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,40, @since 1.2
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,42,lass SwitchState implements Serializable {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,44,** Serializable version identifier. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,45,rivate static final long serialVersionUID = -7307007422156119622L;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,47,** Switching function. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,48,rivate SwitchingFunction function;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,50,** Maximal time interval between switching function checks. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,51,rivate double maxCheckInterval;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,53,** Convergence threshold for event localization. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,54,rivate double convergence;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,56,** Upper limit in the iteration count for event localization. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,57,rivate int maxIterationCount;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,59,** Time at the beginning of the step. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,60,rivate double t0;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,62,** Value of the switching function at the beginning of the step. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,63,rivate double g0;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,65,** Simulated sign of g0 (we cheat when crossing events). */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,66,rivate boolean g0Positive;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,68,** Indicator of event expected during the step. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,69,rivate boolean pendingEvent;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,71,** Occurrence time of the pending event. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,72,rivate double pendingEventTime;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,74,** Occurrence time of the previous event. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,75,rivate double previousEventTime;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,77,** Variation direction around pending event.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,78,  (this is considered with respect to the integration direction)
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,80,rivate boolean increasing;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,82,** Next action indicator. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,83,rivate int nextAction;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,85,** Simple constructor.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,86, @param function switching function
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,87, @param maxCheckInterval maximal time interval between switching
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,88, function checks (this interval prevents missing sign changes in
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,89, case the integration steps becomes very large)
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,90, @param convergence convergence threshold in the event time search
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,91, @param maxIterationCount upper limit of the iteration count in
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,92, the event time search
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,94,"ublic SwitchState(SwitchingFunction function, double maxCheckInterval,"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,95,"ouble convergence, int maxIterationCount) {"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,96,his.function          = function;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,97,his.maxCheckInterval  = maxCheckInterval;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,98,his.convergence       = Math.abs(convergence);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,99,his.maxIterationCount = maxIterationCount;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,101,/ some dummy values ...
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,102,0                = Double.NaN;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,103,0                = Double.NaN;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,104,0Positive        = true;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,105,endingEvent      = false;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,106,endingEventTime  = Double.NaN;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,107,reviousEventTime = Double.NaN;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,108,ncreasing        = true;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,109,extAction        = SwitchingFunction.CONTINUE;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,113,** Get the underlying switching function.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,114, @return underlying switching function
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,116,ublic SwitchingFunction getSwitchingFunction() {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,117,eturn function;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,120,** Reinitialize the beginning of the step.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,121, @param t0 value of the independent <i>time</i> variable at the
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,122, beginning of the step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,123, @param y0 array containing the current value of the state vector
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,124, at the beginning of the step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,125, @exception SwitchException if the switching function
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,126, value cannot be evaluated at the beginning of the step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,128,"ublic void reinitializeBegin(double t0, double[] y0)"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,129,hrows SwitchException {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,130,his.t0 = t0;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,131,"0 = function.g(t0, y0);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,132,0Positive = (g0 >= 0);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,135,** Evaluate the impact of the proposed step on the switching function.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,136, @param interpolator step interpolator for the proposed step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,137, @return true if the switching function triggers an event before
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,138, the end of the proposed step (this implies the step should be
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,139, rejected)
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,140, @exception DerivativeException if the interpolator fails to
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,141, compute the function somewhere within the step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,142, @exception SwitchException if the switching function
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,143, cannot be evaluated
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,144, @exception ConvergenceException if an event cannot be located
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,146,ublic boolean evaluateStep(final StepInterpolator interpolator)
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,147,"hrows DerivativeException, SwitchException, ConvergenceException {"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,149,ry {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,151,ouble t1 = interpolator.getCurrentTime();
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,152,"nt    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,153,ouble h  = (t1 - t0) / n;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,155,ouble ta = t0;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,156,ouble ga = g0;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,157,ouble tb = t0 + ((t1 > t0) ? convergence : -convergence);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,158,or (int i = 0; i < n; ++i) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,160,/ evaluate function value at the end of the substep
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,161,b += h;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,162,nterpolator.setInterpolatedTime(tb);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,163,"ouble gb = function.g(tb, interpolator.getInterpolatedState());"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,165,/ check events occurrence
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,166,f (g0Positive ^ (gb >= 0)) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,167,/ there is a sign change: an event is expected during this step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,169,"/ variation direction, with respect to the integration direction"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,170,ncreasing = (gb >= ga);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,172,nivariateRealSolver solver = new BrentSolver(new UnivariateRealFunction() {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,173,ublic double value(double t) throws FunctionEvaluationException {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,174,ry {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,175,nterpolator.setInterpolatedTime(t);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,176,"eturn function.g(t, interpolator.getInterpolatedState());"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,177, catch (DerivativeException e) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,178,"hrow new FunctionEvaluationException(t, e);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,179, catch (SwitchException e) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,180,"hrow new FunctionEvaluationException(t, e);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,184,olver.setAbsoluteAccuracy(convergence);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,185,olver.setMaximalIterationCount(maxIterationCount);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,186,"ouble root = solver.solve(ta, tb);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,187,f (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,188,endingEventTime = root;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,189,f (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,190,/ we were already waiting for this event which was
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,191,/ found during a previous call for a step that was
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,192,"/ rejected, this step must now be accepted since it"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,193,/ properly ends exactly at the event occurrence
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,194,eturn false;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,196,/ either we were not waiting for the event or it has
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,197,/ moved in such a way the step cannot be accepted
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,198,endingEvent = true;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,199,eturn true;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,202, else {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,203,/ no sign change: there is no event for now
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,204,a = tb;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,205,a = gb;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,210,/ no event during the whole step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,211,endingEvent     = false;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,212,endingEventTime = Double.NaN;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,213,eturn false;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,215, catch (FunctionEvaluationException e) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,216,hrowable cause = e.getCause();
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,217,f ((cause != null) && (cause instanceof DerivativeException)) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,218,hrow (DerivativeException) cause;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,219, else if ((cause != null) && (cause instanceof SwitchException)) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,220,hrow (SwitchException) cause;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,222,hrow new SwitchException(e);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,227,** Get the occurrence time of the event triggered in the current
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,228, step.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,229, @return occurrence time of the event triggered in the current
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,230, step.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,232,ublic double getEventTime() {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,233,eturn pendingEventTime;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,236,** Acknowledge the fact the step has been accepted by the integrator.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,237, @param t value of the independent <i>time</i> variable at the
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,238, end of the step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,239, @param y array containing the current value of the state vector
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,240, at the end of the step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,241, @exception SwitchException if the value of the switching
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,242, function cannot be evaluated
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,244,"ublic void stepAccepted(double t, double[] y) throws SwitchException {"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,246,0 = t;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,247,"0 = function.g(t, y);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,249,f (pendingEvent) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,250,"/ force the sign to its value ""just after the event"""
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,251,reviousEventTime = t;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,252,0Positive        = increasing;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,253,"extAction        = function.eventOccurred(t, y);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,254, else {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,255,0Positive = (g0 >= 0);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,256,extAction = SwitchingFunction.CONTINUE;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,260,** Check if the integration should be stopped at the end of the
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,261, current step.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,262, @return true if the integration should be stopped
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,264,ublic boolean stop() {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,265,eturn nextAction == SwitchingFunction.STOP;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,268,** Let the switching function reset the state if it wants.
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,269, @param t value of the independent <i>time</i> variable at the
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,270, beginning of the next step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,271, @param y array were to put the desired state vector at the beginning
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,272, of the next step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,273, @return true if the integrator should reset the derivatives too
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,274, @exception SwitchException if the state cannot be reseted by the switching
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,275, function
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,277,"ublic boolean reset(double t, double[] y) throws SwitchException {"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,279,f (! pendingEvent) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,280,eturn false;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,283,f (nextAction == SwitchingFunction.RESET_STATE) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,284,"unction.resetState(t, y);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,286,endingEvent      = false;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,287,endingEventTime  = Double.NaN;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,289,eturn (nextAction == SwitchingFunction.RESET_STATE) ||
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,290,nextAction == SwitchingFunction.RESET_DERIVATIVES);
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,15, limitations under the License.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,18,ackage org.apache.commons.math.ode;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,20,mport java.util.ArrayList;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,21,mport java.util.Collection;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,22,mport java.util.Collections;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,23,mport java.util.List;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,25,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,27,** This class handles several {@link SwitchingFunction switching
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,28, functions} during integration.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,30, @see SwitchingFunction
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,31, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,32, @since 1.2
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,35,ublic class SwitchingFunctionsHandler {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,37,** Simple constructor.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,38, Create an empty handler
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,40,ublic SwitchingFunctionsHandler() {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,41,unctions   = new ArrayList<SwitchState>();
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,42,irst       = null;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,43,nitialized = false;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,46,** Add a switching function.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,47, @param function switching function
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,48, @param maxCheckInterval maximal time interval between switching
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,49, function checks (this interval prevents missing sign changes in
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,50, case the integration steps becomes very large)
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,51, @param convergence convergence threshold in the event time search
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,52, @param maxIterationCount upper limit of the iteration count in
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,53, the event time search
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,54, @see #getSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,55, @see #clearSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,57,"ublic void addSwitchingFunction(SwitchingFunction function, double maxCheckInterval,"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,58,"ouble convergence, int maxIterationCount) {"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,59,"unctions.add(new SwitchState(function, maxCheckInterval,"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,60,"onvergence, maxIterationCount));"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,63,** Get all the switching functions that have been added to the handler.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,64, @return an unmodifiable collection of the added switching functions
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,65," @see #addSwitchingFunction(SwitchingFunction, double, double, int)"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,66, @see #clearSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,68,ublic Collection<SwitchingFunction> getSwitchingFunctions() {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,69,ist<SwitchingFunction> list = new ArrayList<SwitchingFunction>();
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,70,or (SwitchState state : functions) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,71,ist.add(state.getSwitchingFunction());
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,73,eturn Collections.unmodifiableCollection(list);
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,76,** Remove all the switching functions that have been added to the handler.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,77," @see #addSwitchingFunction(SwitchingFunction, double, double, int)"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,78, @see #getSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,80,ublic void clearSwitchingFunctions() {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,81,unctions.clear();
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,84,** Check if the handler does not have any condition.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,85, @return true if handler is empty
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,87,ublic boolean isEmpty() {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,88,eturn functions.isEmpty();
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,91,** Evaluate the impact of the proposed step on all handled
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,92, switching functions.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,93, @param interpolator step interpolator for the proposed step
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,94, @return true if at least one switching function triggers an event
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,95, before the end of the proposed step (this implies the step should
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,96, be rejected)
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,97, @exception DerivativeException if the interpolator fails to
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,98, compute the function somewhere within the step
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,99, @exception IntegratorException if an event cannot be located
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,101,ublic boolean evaluateStep(StepInterpolator interpolator)
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,102,"hrows DerivativeException, IntegratorException {"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,104,ry {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,106,irst = null;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,107,f (functions.isEmpty()) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,108,"/ there is nothing to do, return now to avoid setting the"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,109,/ interpolator time (and hence avoid unneeded calls to the
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,110,/ user function due to interpolator finalization)
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,111,eturn false;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,114,f (! initialized) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,116,/ initialize the switching functions
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,117,ouble t0 = interpolator.getPreviousTime();
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,118,nterpolator.setInterpolatedTime(t0);
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,119,ouble [] y = interpolator.getInterpolatedState();
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,120,or (SwitchState state : functions) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,121,"tate.reinitializeBegin(t0, y);"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,124,nitialized = true;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,128,/ check events occurrence
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,129,or (SwitchState state : functions) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,131,f (state.evaluateStep(interpolator)) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,132,f (first == null) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,133,irst = state;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,134, else {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,135,f (interpolator.isForward()) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,136,f (state.getEventTime() < first.getEventTime()) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,137,irst = state;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,139, else {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,140,f (state.getEventTime() > first.getEventTime()) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,141,irst = state;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,149,eturn first != null;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,151, catch (SwitchException se) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,152,hrow new IntegratorException(se);
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,153, catch (ConvergenceException ce) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,154,hrow new IntegratorException(ce);
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,159,** Get the occurrence time of the first event triggered in the
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,160, last evaluated step.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,161, @return occurrence time of the first event triggered in the last
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,162," evaluated step, or </code>Double.NaN</code> if no event is"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,163, triggered
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,165,ublic double getEventTime() {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,166,eturn (first == null) ? Double.NaN : first.getEventTime();
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,169,** Inform the switching functions that the step has been accepted
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,170, by the integrator.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,171, @param t value of the independent <i>time</i> variable at the
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,172, end of the step
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,173, @param y array containing the current value of the state vector
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,174, at the end of the step
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,175, @exception IntegratorException if the value of one of the
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,176, switching functions cannot be evaluated
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,178,"ublic void stepAccepted(double t, double[] y)"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,179,hrows IntegratorException {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,180,ry {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,181,or (SwitchState state : functions) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,182,"tate.stepAccepted(t, y);"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,184, catch (SwitchException se) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,185,hrow new IntegratorException(se);
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,189,** Check if the integration should be stopped at the end of the
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,190, current step.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,191, @return true if the integration should be stopped
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,193,ublic boolean stop() {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,194,or (SwitchState state : functions) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,195,f (state.stop()) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,196,eturn true;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,199,eturn false;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,202,** Let the switching functions reset the state if they want.
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,203, @param t value of the independent <i>time</i> variable at the
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,204, beginning of the next step
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,205, @param y array were to put the desired state vector at the beginning
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,206, of the next step
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,207, @return true if the integrator should reset the derivatives too
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,208, @exception IntegratorException if one of the switching functions
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,209, that should reset the state fails to do it
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,211,"ublic boolean reset(double t, double[] y) throws IntegratorException {"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,212,ry {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,213,oolean resetDerivatives = false;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,214,or (SwitchState state : functions) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,215,"f (state.reset(t, y)) {"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,216,esetDerivatives = true;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,219,eturn resetDerivatives;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,220, catch (SwitchException se) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,221,hrow new IntegratorException(se);
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,225,** Switching functions. */
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,226,rivate List<SwitchState> functions;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,228,** First active switching function. */
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,229,rivate SwitchState first;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,231,** Initialization indicator. */
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,232,rivate boolean initialized;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,18,package org.apache.commons.math.ode.events;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,21,import java.util.ArrayList;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,22,import java.util.Collection;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,23,import java.util.Collections;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,24,import java.util.List;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,26,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,27,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,28,import org.apache.commons.math.ode.IntegratorException;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,29,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,31,/** This class manages several {@link EventHandler event handlers} during integration.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,33,* @see EventHandler
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,34,* @see EventState
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,35,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,36,* @since 1.2
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,39,public class CombinedEventsManager implements Serializable {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,41,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,42,private static final long serialVersionUID = -4151965151236441261L;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,44,/** Events states. */
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,45,private final List<EventState> states;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,47,/** First active event. */
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,48,private EventState first;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,50,/** Initialization indicator. */
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,51,private boolean initialized;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,53,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,54,* Create an empty manager
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,56,public CombinedEventsManager() {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,57,states      = new ArrayList<EventState>();
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,58,first       = null;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,59,initialized = false;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,62,/** Add an events handler.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,63,* @param handler event handler
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,64,* @param maxCheckInterval maximal time interval between events
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,65,* checks (this interval prevents missing sign changes in
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,66,* case the integration steps becomes very large)
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,67,* @param convergence convergence threshold in the event time search
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,68,* @param maxIterationCount upper limit of the iteration count in
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,69,* the event time search
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,70,* @see #getEventsHandlers()
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,71,* @see #clearEventsHandlers()
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,73,"public void addEventHandler(final EventHandler handler, final double maxCheckInterval,"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,74,"final double convergence, final int maxIterationCount) {"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,75,"states.add(new EventState(handler, maxCheckInterval,"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,76,"convergence, maxIterationCount));"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,79,/** Get all the events handlers that have been added to the manager.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,80,* @return an unmodifiable collection of the added event handlers
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,81,"* @see #addEventHandler(EventHandler, double, double, int)"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,82,* @see #clearEventsHandlers()
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,84,public Collection<EventHandler> getEventsHandlers() {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,85,final List<EventHandler> list = new ArrayList<EventHandler>();
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,86,for (EventState state : states) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,87,list.add(state.getEventHandler());
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,89,return Collections.unmodifiableCollection(list);
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,92,/** Remove all the events handlers that have been added to the manager.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,93,"* @see #addEventHandler(EventHandler, double, double, int)"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,94,* @see #getEventsHandlers()
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,96,public void clearEventsHandlers() {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,97,states.clear();
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,100,/** Check if the manager does not manage any event handlers.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,101,* @return true if manager is empty
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,103,public boolean isEmpty() {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,104,return states.isEmpty();
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,107,/** Evaluate the impact of the proposed step on all managed
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,108,* event handlers.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,109,* @param interpolator step interpolator for the proposed step
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,110,* @return true if at least one event handler triggers an event
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,111,* before the end of the proposed step (this implies the step should
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,112,* be rejected)
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,113,* @exception DerivativeException if the interpolator fails to
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,114,* compute the function somewhere within the step
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,115,* @exception IntegratorException if an event cannot be located
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,117,public boolean evaluateStep(final StepInterpolator interpolator)
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,118,"throws DerivativeException, IntegratorException {"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,120,try {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,122,first = null;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,123,if (states.isEmpty()) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,124,"// there is nothing to do, return now to avoid setting the"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,125,// interpolator time (and hence avoid unneeded calls to the
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,126,// user function due to interpolator finalization)
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,127,return false;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,130,if (! initialized) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,132,// initialize the events states
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,133,final double t0 = interpolator.getPreviousTime();
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,134,interpolator.setInterpolatedTime(t0);
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,135,final double [] y = interpolator.getInterpolatedState();
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,136,for (EventState state : states) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,137,"state.reinitializeBegin(t0, y);"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,140,initialized = true;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,144,// check events occurrence
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,145,for (EventState state : states) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,147,if (state.evaluateStep(interpolator)) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,148,if (first == null) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,149,first = state;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,150,} else {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,151,if (interpolator.isForward()) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,152,if (state.getEventTime() < first.getEventTime()) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,153,first = state;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,155,} else {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,156,if (state.getEventTime() > first.getEventTime()) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,157,first = state;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,165,return first != null;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,167,} catch (EventException se) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,168,throw new IntegratorException(se);
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,169,} catch (ConvergenceException ce) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,170,throw new IntegratorException(ce);
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,175,/** Get the occurrence time of the first event triggered in the
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,176,* last evaluated step.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,177,* @return occurrence time of the first event triggered in the last
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,178,"* evaluated step, or </code>Double.NaN</code> if no event is"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,179,* triggered
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,181,public double getEventTime() {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,182,return (first == null) ? Double.NaN : first.getEventTime();
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,185,/** Inform the event handlers that the step has been accepted
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,186,* by the integrator.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,187,* @param t value of the independent <i>time</i> variable at the
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,188,* end of the step
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,189,* @param y array containing the current value of the state vector
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,190,* at the end of the step
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,191,* @exception IntegratorException if the value of one of the
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,192,* events states cannot be evaluated
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,194,"public void stepAccepted(final double t, final double[] y)"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,195,throws IntegratorException {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,196,try {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,197,for (EventState state : states) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,198,"state.stepAccepted(t, y);"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,200,} catch (EventException se) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,201,throw new IntegratorException(se);
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,205,/** Check if the integration should be stopped at the end of the
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,206,* current step.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,207,* @return true if the integration should be stopped
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,209,public boolean stop() {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,210,for (EventState state : states) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,211,if (state.stop()) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,212,return true;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,215,return false;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,218,/** Let the event handlers reset the state if they want.
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,219,* @param t value of the independent <i>time</i> variable at the
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,220,* beginning of the next step
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,221,* @param y array were to put the desired state vector at the beginning
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,222,* of the next step
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,223,* @return true if the integrator should reset the derivatives too
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,224,* @exception IntegratorException if one of the events states
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,225,* that should reset the state fails to do it
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,227,"public boolean reset(final double t, final double[] y)"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,228,throws IntegratorException {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,229,try {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,230,boolean resetDerivatives = false;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,231,for (EventState state : states) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,232,"if (state.reset(t, y)) {"
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,233,resetDerivatives = true;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,236,return resetDerivatives;
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,237,} catch (EventException se) {
True,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,238,throw new IntegratorException(se);
False,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,18,package org.apache.commons.math.ode.events;
False,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,24, the error conditions that are triggered by {@link SwitchingFunction}
False,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,25," @version $Revision: 620312 $ $Date: 2008-02-10 20:28:59 +0100 (dim., 10 févr. 2008) $"
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,24,* the error conditions that are triggered by {@link EventHandler}
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,25,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,28,ublic class SwitchException extends MathException {
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,28,public class EventException extends MathException {
False,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,31,rivate static final long serialVersionUID = -3662133702316614545L;
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,31,private static final long serialVersionUID = -898215297400035290L;
False,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,38,"ublic SwitchException(String specifier, Object[] parts) {"
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,38,"public EventException(final String specifier, final Object[] parts) {"
False,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,46,ublic SwitchException(Throwable cause) {
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/events/EventException.java,46,public EventException(final Throwable cause) {
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,18,package org.apache.commons.math.ode.events;
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,22,** This interface represents a switching function.
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,22,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,23,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,25,/** This interface represents a handler for discrete events triggered
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,26,* during ODE integration.
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,24, <p>A switching function allows to handle discrete events in
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,25, integration problems. These events occur for example when the
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,26, integration process should be stopped as some value is reached
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,27," (G-stop facility), or when the derivatives have"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,28,* <p>Some events can be triggered at discrete times as an ODE problem
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,29,* is solved. These occurs for example when the integration process
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,30,* should be stopped as some state is reached (G-stop facility) when the
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,31,"* precise date is unknown a priori, or when the derivatives have"
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,29, states boundaries crossings. These events are traditionally defined
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,30," as occurring when a <code>g</code> function sign changes, hence"
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,31, the name <em>switching functions</em>.</p>
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,33,* states boundaries crossings.
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,34,* </p>
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,36,* <p>These events are defined as occurring when a <code>g</code>
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,37,* switching function sign changes.</p>
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,42," error (this feature is available on all integrators, including"
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,43, fixed step ones).</p>
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,48,"* error (this event handling feature is available for all integrators,"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,49,* including fixed step ones).</p>
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,49,ublic interface SwitchingFunction extends Serializable {
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,55,public interface EventHandler extends Serializable {
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,85, <p>Discrete events are generated when the sign of this function
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,86," changes, the integrator will take care to change the stepsize in"
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,87, such a way these events occur exactly at step boundaries. This
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,88," function must be continuous (at least in its roots neighborhood),"
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,89, as the integrator will need to find its roots to locate the events.</p>
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,91,* <p>The discrete events are generated when the sign of this
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,92,* switching function changes. The integrator will take care to change
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,93,* the stepsize in such a way these events occur exactly at step boundaries.
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,94,* The switching function must be continuous in its roots neighborhood
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,95,"* (but not necessarily smooth), as the integrator will need to find its"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,96,* roots to locate precisely the events.</p>
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,93, @return value of the g function
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,94, @exception SwitchException if the switching function cannot be evaluated
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,100,* @return value of the g switching function
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,101,* @exception EventException if the switching function cannot be evaluated
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,96,"ublic double g(double t, double[] y) throws SwitchException;"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,103,"public double g(double t, double[] y) throws EventException;"
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,131, @exception SwitchException if the event occurrence triggers an error
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,138,* @exception EventException if the event occurrence triggers an error
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,133,"ublic int eventOccurred(double t, double[] y) throws SwitchException;"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,140,"public int eventOccurred(double t, double[] y) throws EventException;"
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,149, @exception SwitchException if the state cannot be reseted
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,156,* @exception EventException if the state cannot be reseted
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,151,"ublic void resetState(double t, double[] y) throws SwitchException;"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/events/EventHandler.java,158,"public void resetState(double t, double[] y) throws EventException;"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,18,package org.apache.commons.math.ode.events;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,22,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,23,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,24,import org.apache.commons.math.analysis.BrentSolver;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,25,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,26,import org.apache.commons.math.analysis.UnivariateRealSolver;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,27,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,28,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,30,/** This class handles the state for one {@link EventHandler
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,31,* event handler} during integration steps.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,33,"* <p>Each time the integrator proposes a step, the event handler"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,34,* switching function should be checked. This class handles the state
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,35,"* of one handler during one integration step, with references to the"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,36,* state at the end of the preceding step. This information is used to
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,37,* decide if the handler should trigger an event or not during the
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,38,* proposed step (and hence the step should be reduced to ensure the
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,39,* event occurs at a bound rather than inside the step).</p>
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,41,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,42,* @since 1.2
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,44,class EventState implements Serializable {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,46,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,47,private static final long serialVersionUID = -7307007422156119622L;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,49,/** Event handler. */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,50,private final EventHandler handler;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,52,/** Maximal time interval between events handler checks. */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,53,private final double maxCheckInterval;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,55,/** Convergence threshold for event localization. */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,56,private final double convergence;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,58,/** Upper limit in the iteration count for event localization. */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,59,private final int maxIterationCount;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,61,/** Time at the beginning of the step. */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,62,private double t0;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,64,/** Value of the events handler at the beginning of the step. */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,65,private double g0;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,67,/** Simulated sign of g0 (we cheat when crossing events). */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,68,private boolean g0Positive;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,70,/** Indicator of event expected during the step. */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,71,private boolean pendingEvent;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,73,/** Occurrence time of the pending event. */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,74,private double pendingEventTime;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,76,/** Occurrence time of the previous event. */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,77,private double previousEventTime;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,79,/** Variation direction around pending event.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,80,*  (this is considered with respect to the integration direction)
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,82,private boolean increasing;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,84,/** Next action indicator. */
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,85,private int nextAction;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,87,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,88,* @param handler event handler
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,89,* @param maxCheckInterval maximal time interval between switching
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,90,* function checks (this interval prevents missing sign changes in
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,91,* case the integration steps becomes very large)
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,92,* @param convergence convergence threshold in the event time search
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,93,* @param maxIterationCount upper limit of the iteration count in
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,94,* the event time search
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,96,"public EventState(final EventHandler handler, final double maxCheckInterval,"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,97,"final double convergence, final int maxIterationCount) {"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,98,this.handler           = handler;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,99,this.maxCheckInterval  = maxCheckInterval;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,100,this.convergence       = Math.abs(convergence);
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,101,this.maxIterationCount = maxIterationCount;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,103,// some dummy values ...
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,104,t0                = Double.NaN;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,105,g0                = Double.NaN;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,106,g0Positive        = true;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,107,pendingEvent      = false;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,108,pendingEventTime  = Double.NaN;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,109,previousEventTime = Double.NaN;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,110,increasing        = true;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,111,nextAction        = EventHandler.CONTINUE;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,115,/** Get the underlying event handler.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,116,* @return underlying event handler
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,118,public EventHandler getEventHandler() {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,119,return handler;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,122,/** Reinitialize the beginning of the step.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,123,* @param t0 value of the independent <i>time</i> variable at the
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,124,* beginning of the step
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,125,* @param y0 array containing the current value of the state vector
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,126,* at the beginning of the step
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,127,* @exception EventException if the event handler
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,128,* value cannot be evaluated at the beginning of the step
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,130,"public void reinitializeBegin(final double t0, final double[] y0)"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,131,throws EventException {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,132,this.t0 = t0;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,133,"g0 = handler.g(t0, y0);"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,134,g0Positive = (g0 >= 0);
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,137,/** Evaluate the impact of the proposed step on the event handler.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,138,* @param interpolator step interpolator for the proposed step
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,139,* @return true if the event handler triggers an event before
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,140,* the end of the proposed step (this implies the step should be
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,141,* rejected)
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,142,* @exception DerivativeException if the interpolator fails to
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,143,* compute the switching function somewhere within the step
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,144,* @exception EventException if the switching function
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,145,* cannot be evaluated
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,146,* @exception ConvergenceException if an event cannot be located
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,148,public boolean evaluateStep(final StepInterpolator interpolator)
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,149,"throws DerivativeException, EventException, ConvergenceException {"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,151,try {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,153,final double t1 = interpolator.getCurrentTime();
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,154,"final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,155,final double h  = (t1 - t0) / n;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,157,double ta = t0;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,158,double ga = g0;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,159,double tb = t0 + ((t1 > t0) ? convergence : -convergence);
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,160,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,162,// evaluate handler value at the end of the substep
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,163,tb += h;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,164,interpolator.setInterpolatedTime(tb);
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,165,"final double gb = handler.g(tb, interpolator.getInterpolatedState());"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,167,// check events occurrence
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,168,if (g0Positive ^ (gb >= 0)) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,169,// there is a sign change: an event is expected during this step
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,171,"// variation direction, with respect to the integration direction"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,172,increasing = (gb >= ga);
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,174,final UnivariateRealSolver solver = new BrentSolver(new UnivariateRealFunction() {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,175,public double value(final double t) throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,176,try {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,177,interpolator.setInterpolatedTime(t);
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,178,"return handler.g(t, interpolator.getInterpolatedState());"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,179,} catch (DerivativeException e) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,180,"throw new FunctionEvaluationException(t, e);"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,181,} catch (EventException e) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,182,"throw new FunctionEvaluationException(t, e);"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,186,solver.setAbsoluteAccuracy(convergence);
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,187,solver.setMaximalIterationCount(maxIterationCount);
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,188,"final double root = solver.solve(ta, tb);"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,189,if (Double.isNaN(previousEventTime) ||
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,190,(Math.abs(previousEventTime - root) > convergence)) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,191,pendingEventTime = root;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,192,if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,193,// we were already waiting for this event which was
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,194,// found during a previous call for a step that was
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,195,"// rejected, this step must now be accepted since it"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,196,// properly ends exactly at the event occurrence
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,197,return false;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,199,// either we were not waiting for the event or it has
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,200,// moved in such a way the step cannot be accepted
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,201,pendingEvent = true;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,202,return true;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,205,} else {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,206,// no sign change: there is no event for now
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,207,ta = tb;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,208,ga = gb;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,213,// no event during the whole step
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,214,pendingEvent     = false;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,215,pendingEventTime = Double.NaN;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,216,return false;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,218,} catch (FunctionEvaluationException e) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,219,final Throwable cause = e.getCause();
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,220,if ((cause != null) && (cause instanceof DerivativeException)) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,221,throw (DerivativeException) cause;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,222,} else if ((cause != null) && (cause instanceof EventException)) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,223,throw (EventException) cause;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,225,throw new EventException(e);
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,230,/** Get the occurrence time of the event triggered in the current
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,231,* step.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,232,* @return occurrence time of the event triggered in the current
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,233,* step.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,235,public double getEventTime() {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,236,return pendingEventTime;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,239,/** Acknowledge the fact the step has been accepted by the integrator.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,240,* @param t value of the independent <i>time</i> variable at the
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,241,* end of the step
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,242,* @param y array containing the current value of the state vector
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,243,* at the end of the step
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,244,* @exception EventException if the value of the event
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,245,* handler cannot be evaluated
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,247,"public void stepAccepted(final double t, final double[] y)"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,248,throws EventException {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,250,t0 = t;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,251,"g0 = handler.g(t, y);"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,253,if (pendingEvent) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,254,"// force the sign to its value ""just after the event"""
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,255,previousEventTime = t;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,256,g0Positive        = increasing;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,257,"nextAction        = handler.eventOccurred(t, y);"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,258,} else {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,259,g0Positive = (g0 >= 0);
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,260,nextAction = EventHandler.CONTINUE;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,264,/** Check if the integration should be stopped at the end of the
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,265,* current step.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,266,* @return true if the integration should be stopped
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,268,public boolean stop() {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,269,return nextAction == EventHandler.STOP;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,272,/** Let the event handler reset the state if it wants.
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,273,* @param t value of the independent <i>time</i> variable at the
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,274,* beginning of the next step
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,275,* @param y array were to put the desired state vector at the beginning
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,276,* of the next step
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,277,* @return true if the integrator should reset the derivatives too
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,278,* @exception EventException if the state cannot be reseted by the event
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,279,* handler
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,281,"public boolean reset(final double t, final double[] y)"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,282,throws EventException {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,284,if (! pendingEvent) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,285,return false;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,288,if (nextAction == EventHandler.RESET_STATE) {
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,289,"handler.resetState(t, y);"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,291,pendingEvent      = false;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,292,pendingEventTime  = Double.NaN;
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,294,return (nextAction == EventHandler.RESET_STATE) ||
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,295,(nextAction == EventHandler.RESET_DERIVATIVES);
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java,76,ublic ClassicalRungeKuttaIntegrator(double step) {
True,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java,76,public ClassicalRungeKuttaIntegrator(final double step) {
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java,80,** Get the name of the method.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java,81, @return name of the method
True,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java,80,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,20,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,21,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,24,* This class implements a step interpolator for the classical fourth
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,25,* order Runge-Kutta integrator.
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,27,* <p>This interpolator allows to compute dense output inside the last
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,28,* step computed. The interpolation equation is consistent with the
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,29,* integration scheme :
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,31,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,32,*   y(t_n + theta h) = y (t_n + h)
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,33,*                    + (1 - theta) (h/6) [ (-4 theta^2 + 5 theta - 1) y'_1
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,34,*                                          +(4 theta^2 - 2 theta - 2) (y'_2 + y'_3)
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,35,*                                          -(4 theta^2 +   theta + 1) y'_4
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,37,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,39,* where theta belongs to [0 ; 1] and where y'_1 to y'_4 are the four
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,40,* evaluations of the derivatives already computed during the
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,41,* step.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,43,* @see ClassicalRungeKuttaIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,44,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,45,* @since 1.2
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,48,class ClassicalRungeKuttaStepInterpolator
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,49,extends RungeKuttaStepInterpolator {
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,51,/** Serializable version identifier */
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,52,private static final long serialVersionUID = -6576285612589783992L;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,54,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,55,"* This constructor builds an instance that is not usable yet, the"
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,56,* {@link RungeKuttaStepInterpolator#reinitialize} method should be
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,57,* called before using the instance in order to initialize the
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,58,* internal arrays. This constructor is used only in order to delay
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,59,* the initialization in some cases. The {@link RungeKuttaIntegrator}
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,60,* class uses the prototyping design pattern to create the step
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,61,* interpolators by cloning an uninitialized model and latter initializing
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,62,* the copy.
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,64,public ClassicalRungeKuttaStepInterpolator() {
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,67,/** Copy constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,68,* @param interpolator interpolator to copy from. The copy is a deep
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,69,* copy: its arrays are separated from the original arrays of the
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,70,* instance
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,72,public ClassicalRungeKuttaStepInterpolator(final ClassicalRungeKuttaStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,73,super(interpolator);
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,76,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,77,protected StepInterpolator doCopy() {
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,78,return new ClassicalRungeKuttaStepInterpolator(this);
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,81,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,82,"protected void computeInterpolatedState(final double theta,"
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,83,final double oneMinusThetaH)
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,84,throws DerivativeException {
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,86,final double fourTheta = 4 * theta;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,87,final double s         = oneMinusThetaH / 6.0;
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,88,final double coeff1    = s * ((-fourTheta + 5) * theta - 1);
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,89,final double coeff23   = s * (( fourTheta - 2) * theta - 2);
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,90,final double coeff4    = s * ((-fourTheta - 1) * theta - 1);
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,92,for (int i = 0; i < interpolatedState.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,93,interpolatedState[i] = currentState[i] +
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,94,coeff1  * yDotK[0][i] +
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,95,coeff23 * (yDotK[1][i] + yDotK[2][i]) +
True,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,96,coeff4  * yDotK[3][i];
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,104,"ublic DormandPrince54Integrator(double minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,105,"ouble scalAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,106,ouble scalRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,104,"public DormandPrince54Integrator(final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,105,"final double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,106,final double scalRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,120,"ublic DormandPrince54Integrator(double minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,121,"ouble[] vecAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,122,ouble[] vecRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,120,"public DormandPrince54Integrator(final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,121,"final double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,122,final double[] vecRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,127,** Get the name of the method.
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,128, @return name of the method
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,127,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,134,** Get the order of the method.
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,135, @return order of the method
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,132,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,141,** Compute the error ratio.
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,142, @param yDotK derivatives computed during the first stages
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,143, @param y0 estimate of the step at the start of the step
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,144, @param y1 estimate of the step at the end of the step
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,145, @param h  current step
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,146," @return error ratio, greater than 1 if step should be rejected"
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,148,"rotected double estimateError(double[][] yDotK,"
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,149,"ouble[] y0, double[] y1,"
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,150,ouble h) {
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,137,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,138,"protected double estimateError(final double[][] yDotK,"
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,139,"final double[] y0, final double[] y1,"
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,140,final double h) {
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,155,ouble errSum = e1 * yDotK[0][j] +  e3 * yDotK[2][j] +
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,156,4 * yDotK[3][j] +  e5 * yDotK[4][j] +
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,157,6 * yDotK[5][j] +  e7 * yDotK[6][j];
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,159,"ouble yScale = Math.max(Math.abs(y0[j]), Math.abs(y1[j]));"
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,160,ouble tol = (vecAbsoluteTolerance == null) ?
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,161,scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,162,vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,163,ouble ratio  = h * errSum / tol;
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,164,rror += ratio * ratio;
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,145,final double errSum = e1 * yDotK[0][j] +  e3 * yDotK[2][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,146,e4 * yDotK[3][j] +  e5 * yDotK[4][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,147,e6 * yDotK[5][j] +  e7 * yDotK[6][j];
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,149,"final double yScale = Math.max(Math.abs(y0[j]), Math.abs(y1[j]));"
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,150,final double tol = (vecAbsoluteTolerance == null) ?
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,151,(scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,152,(vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,153,final double ratio  = h * errSum / tol;
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,154,error += ratio * ratio;
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,20,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,21,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,22,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,56,ublic DormandPrince54StepInterpolator(DormandPrince54StepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,60,public DormandPrince54StepInterpolator(final DormandPrince54StepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,80,** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,81, @return a copy of the finalized instance
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,84,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,88,** Reinitialize the instance
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,89, @param equations set of differential equations being integrated
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,90, @param y reference to the integrator array holding the state at
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,91, the end of the step
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,92, @param yDotK reference to the integrator array holding all the
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,93, intermediate slopes
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,94, @param forward integration direction indicator
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,96,"ublic void reinitialize(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,97,"ouble[] y, double[][] yDotK, boolean forward) {"
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,90,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,91,"public void reinitialize(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,92,"final double[] y, final double[][] yDotK, final boolean forward) {"
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,106,** Store the current step time.
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,107, @param t current time
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,109,ublic void storeTime(double t) {
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,101,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,102,public void storeTime(final double t) {
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,114,** Compute the state at the interpolated time.
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,115, @param theta normalized interpolation abscissa within the step
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,116, (theta is zero at the previous time step and one at the current time step)
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,117, @param oneMinusThetaH time gap between the interpolated time and
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,118, the current time
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,119, @throws DerivativeException this exception is propagated to the caller if the
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,120, underlying user function triggers one
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,122,"rotected void computeInterpolatedState(double theta,"
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,123,ouble oneMinusThetaH)
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,107,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,108,"protected void computeInterpolatedState(final double theta,"
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,109,final double oneMinusThetaH)
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,152,ouble eta = oneMinusThetaH / h;
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,138,final double eta = oneMinusThetaH / h;
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,216,"ublic DormandPrince853Integrator(double minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,217,"ouble scalAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,218,ouble scalRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,216,"public DormandPrince853Integrator(final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,217,"final double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,218,final double scalRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,233,"ublic DormandPrince853Integrator(double minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,234,"ouble[] vecAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,235,ouble[] vecRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,233,"public DormandPrince853Integrator(final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,234,"final double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,235,final double[] vecRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,241,** Get the name of the method.
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,242, @return name of the method
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,241,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,248,** Get the order of the method.
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,249, @return order of the method
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,246,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,255,** Compute the error ratio.
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,256, @param yDotK derivatives computed during the first stages
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,257, @param y0 estimate of the step at the start of the step
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,258, @param y1 estimate of the step at the end of the step
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,259, @param h  current step
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,260," @return error ratio, greater than 1 if step should be rejected"
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,262,"rotected double estimateError(double[][] yDotK,"
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,263,"ouble[] y0, double[] y1,"
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,264,ouble h) {
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,251,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,252,"protected double estimateError(final double[][] yDotK,"
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,253,"final double[] y0, final double[] y1,"
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,254,final double h) {
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,269,ouble errSum1 = e1_01 * yDotK[0][j]  + e1_06 * yDotK[5][j] +
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,270,1_07 * yDotK[6][j]  + e1_08 * yDotK[7][j] +
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,271,1_09 * yDotK[8][j]  + e1_10 * yDotK[9][j] +
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,272,1_11 * yDotK[10][j] + e1_12 * yDotK[11][j];
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,273,ouble errSum2 = e2_01 * yDotK[0][j]  + e2_06 * yDotK[5][j] +
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,274,2_07 * yDotK[6][j]  + e2_08 * yDotK[7][j] +
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,275,2_09 * yDotK[8][j]  + e2_10 * yDotK[9][j] +
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,276,2_11 * yDotK[10][j] + e2_12 * yDotK[11][j];
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,278,"ouble yScale = Math.max(Math.abs(y0[j]), Math.abs(y1[j]));"
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,279,ouble tol = (vecAbsoluteTolerance == null) ?
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,280,scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,281,vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,282,ouble ratio1  = errSum1 / tol;
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,259,final double errSum1 = e1_01 * yDotK[0][j]  + e1_06 * yDotK[5][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,260,e1_07 * yDotK[6][j]  + e1_08 * yDotK[7][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,261,e1_09 * yDotK[8][j]  + e1_10 * yDotK[9][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,262,e1_11 * yDotK[10][j] + e1_12 * yDotK[11][j];
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,263,final double errSum2 = e2_01 * yDotK[0][j]  + e2_06 * yDotK[5][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,264,e2_07 * yDotK[6][j]  + e2_08 * yDotK[7][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,265,e2_09 * yDotK[8][j]  + e2_10 * yDotK[9][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,266,e2_11 * yDotK[10][j] + e2_12 * yDotK[11][j];
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,268,"final double yScale = Math.max(Math.abs(y0[j]), Math.abs(y1[j]));"
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,269,final double tol = (vecAbsoluteTolerance == null) ?
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,270,(scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,271,(vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,272,final double ratio1  = errSum1 / tol;
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,284,ouble ratio2  = errSum2 / tol;
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,274,final double ratio2  = errSum2 / tol;
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,20,mport java.io.ObjectOutput;
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,21,mport java.io.ObjectInput;
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,21,import java.io.ObjectInput;
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,22,import java.io.ObjectOutput;
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,24,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,25,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,26,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,58,ublic DormandPrince853StepInterpolator(DormandPrince853StepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,62,public DormandPrince853StepInterpolator(final DormandPrince853StepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,70,nt dimension = interpolator.currentState.length;
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,74,final int dimension = interpolator.currentState.length;
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,91,** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,92, @return a copy of the finalized instance
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,95,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,98,** Reinitialize the instance
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,99, Some embedded Runge-Kutta integrators need fewer functions
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,100, evaluations than their counterpart step interpolators. So the
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,101, interpolator should perform the last evaluations they need by
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,102, themselves. The {@link EmbeddedRungeKuttaIntegrator
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,103, EmbeddedRungeKuttaIntegrator} abstract class calls this method in
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,104, order to let the step interpolator perform the evaluations it
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,105, needs. These evaluations will be performed during the call to
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,106," <code>doFinalize</code> if any, i.e. only if the step handler"
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,107, either calls the {@link AbstractStepInterpolator#finalizeStep
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,108, finalizeStep} method or the {@link
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,109, AbstractStepInterpolator#getInterpolatedState getInterpolatedState}
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,110, method (for an interpolator which needs a finalization) or if it clones
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,111, the step interpolator.
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,112, @param equations set of differential equations being integrated
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,113, @param y reference to the integrator array holding the state at
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,114, the end of the step
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,115, @param yDotK reference to the integrator array holding all the
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,116, intermediate slopes
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,117, @param forward integration direction indicator
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,119,"ublic void reinitialize(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,120,"ouble[] y, double[][] yDotK, boolean forward) {"
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,100,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,101,"public void reinitialize(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,102,"final double[] y, final double[][] yDotK, final boolean forward) {"
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,124,nt dimension = currentState.length;
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,106,final int dimension = currentState.length;
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,140,** Store the current step time.
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,141, @param t current time
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,143,ublic void storeTime(double t) {
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,122,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,123,public void storeTime(final double t) {
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,148,** Compute the state at the interpolated time.
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,149, This is the main processing method that should be implemented by
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,150, the derived classes to perform the interpolation.
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,151, @param theta normalized interpolation abscissa within the step
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,152, (theta is zero at the previous time step and one at the current time step)
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,153, @param oneMinusThetaH time gap between the interpolated time and
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,154, the current time
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,155, @throws DerivativeException this exception is propagated to the caller if the
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,156, underlying user function triggers one
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,158,"rotected void computeInterpolatedState(double theta,"
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,159,ouble oneMinusThetaH)
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,128,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,129,"protected void computeInterpolatedState(final double theta,"
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,130,final double oneMinusThetaH)
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,195,ouble eta = oneMinusThetaH / h;
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,166,final double eta = oneMinusThetaH / h;
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,207, Really finalize the step.
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,208," Perform the last 3 functions evaluations (k14, k15, k16)"
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,209, @throws DerivativeException this exception is propagated to the caller if the
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,210, underlying user function triggers one
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,177,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,221,ouble[] yTmp = new double[currentState.length];
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,187,final double[] yTmp = new double[currentState.length];
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,254,** Save the state of the instance.
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,255, @param out stream where to save the state
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,256, @exception IOException in case of write error
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,258,ublic void writeExternal(ObjectOutput out)
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,220,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,221,public void writeExternal(final ObjectOutput out)
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,279,** Read the state of the instance.
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,280, @param in stream where to read the state from
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,281, @exception IOException in case of read error
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,283,ublic void readExternal(ObjectInput in)
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,242,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,243,public void readExternal(final ObjectInput in)
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,288,nt dimension = in.readInt();
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,248,final int dimension = in.readInt();
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,20,import org.apache.commons.math.ode.AdaptiveStepsizeIntegrator;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,21,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,22,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,23,import org.apache.commons.math.ode.IntegratorException;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,24,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,25,import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,73,"rotected EmbeddedRungeKuttaIntegrator(boolean fsal,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,74,"ouble[] c, double[][] a, double[] b,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,75,"ungeKuttaStepInterpolator prototype,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,76,"ouble minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,77,"ouble scalAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,78,ouble scalRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,80,"protected EmbeddedRungeKuttaIntegrator(final boolean fsal,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,81,"final double[] c, final double[][] a, final double[] b,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,82,"final RungeKuttaStepInterpolator prototype,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,83,"final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,84,"final double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,85,final double scalRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,110,"rotected EmbeddedRungeKuttaIntegrator(boolean fsal,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,111,"ouble[] c, double[][] a, double[] b,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,112,"ungeKuttaStepInterpolator prototype,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,113,"ouble   minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,114,"ouble[] vecAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,115,ouble[] vecRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,117,"protected EmbeddedRungeKuttaIntegrator(final boolean fsal,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,118,"final double[] c, final double[][] a, final double[] b,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,119,"final RungeKuttaStepInterpolator prototype,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,120,"final double   minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,121,"final double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,122,final double[] vecRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,134,** Get the name of the method.
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,135, @return name of the method
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,141,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,154,ublic void setSafety(double safety) {
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,159,public void setSafety(final double safety) {
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,158,** Integrate the differential equations up to the given time.
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,159, <p>This method solves an Initial Value Problem (IVP).</p>
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,160, <p>Since this method stores some internal state variables made
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,161, available in its public interface during integration ({@link
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,162," #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,163, @param equations differential equations to integrate
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,164, @param t0 initial time
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,165, @param y0 initial value of the state vector at t0
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,166, @param t target time for the integration
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,167, (can be set to a value smaller than <code>t0</code> for backward integration)
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,168, @param y placeholder where to put the state vector at each successful
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,169,"  step (and hence at the end of integration), can be the same object as y0"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,170, @throws IntegratorException if the integrator cannot perform integration
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,171, @throws DerivativeException this exception is propagated to the caller if
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,172, the underlying user function triggers one
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,174,"ublic void integrate(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,175,"ouble t0, double[] y0,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,176,"ouble t, double[] y)"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,163,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,164,"public void integrate(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,165,"final double t0, final double[] y0,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,166,"final double t, final double[] y)"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,180,oolean forward = (t > t0);
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,170,final boolean forward = (t > t0);
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,183,nt stages = c.length + 1;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,173,final int stages = c.length + 1;
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,187,ouble[][] yDotK = new double[stages][];
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,177,final double[][] yDotK = new double[stages][];
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,191,ouble[] yTmp = new double[y0.length];
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,181,final double[] yTmp = new double[y0.length];
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,195,f (handler.requiresDenseOutput() || (! switchesHandler.isEmpty())) {
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,196,ungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,185,if (handler.requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,186,final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,222,ouble[] scale;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,212,final double[] scale;
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,272,/ Switching functions handling
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,262,// Discrete events handling
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,274,f (switchesHandler.evaluateStep(interpolator)) {
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,264,if (eventsHandlersManager.evaluateStep(interpolator)) {
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,276,New = switchesHandler.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,266,hNew = eventsHandlersManager.getEventTime() - stepStart;
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,284,"ouble factor = Math.min(maxGrowth,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,285,"ath.max(minReduction,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,286,"afety * Math.pow(error, exp)));"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,274,final double factor =
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,275,"Math.min(maxGrowth,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,276,"Math.max(minReduction, safety * Math.pow(error, exp)));"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,293,ouble nextStep = stepStart + stepSize;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,283,final double nextStep = stepStart + stepSize;
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,295,"witchesHandler.stepAccepted(nextStep, y);"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,296,f (switchesHandler.stop()) {
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,285,"eventsHandlersManager.stepAccepted(nextStep, y);"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,286,if (eventsHandlersManager.stop()) {
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,312,"f (switchesHandler.reset(stepStart, y) && ! lastStep) {"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,313,/ some switching function has triggered changes that
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,302,"if (eventsHandlersManager.reset(stepStart, y) && ! lastStep) {"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,303,// some event handler has triggered changes that
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,320,"ouble  factor     = Math.min(maxGrowth,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,321,"ath.max(minReduction,"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,322,"afety * Math.pow(error, exp)));"
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,323,ouble  scaledH    = stepSize * factor;
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,324,ouble  nextT      = stepStart + scaledH;
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,325,oolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,310,"final double factor = Math.min(maxGrowth,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,311,"Math.max(minReduction,"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,312,"safety * Math.pow(error, exp)));"
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,313,final double  scaledH    = stepSize * factor;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,314,final double  nextT      = stepStart + scaledH;
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,315,final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,345,ublic void setMinReduction(double minReduction) {
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,335,public void setMinReduction(final double minReduction) {
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,359,ublic void setMaxGrowth(double maxGrowth) {
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,349,public void setMaxGrowth(final double maxGrowth) {
False,src/java/org/apache/commons/math/ode/EulerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/EulerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/EulerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java,74,ublic EulerIntegrator(double step) {
True,src/java/org/apache/commons/math/ode/EulerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java,74,public EulerIntegrator(final double step) {
False,src/java/org/apache/commons/math/ode/EulerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java,78,** Get the name of the method.
False,src/java/org/apache/commons/math/ode/EulerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java,79, @return name of the method
True,src/java/org/apache/commons/math/ode/EulerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java,78,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,20,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,21,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,22,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,59,ublic EulerStepInterpolator(EulerStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,63,public EulerStepInterpolator(final EulerStepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,63,** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,64, @return a copy of the finalized instance
True,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,67,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,71,** Compute the state at the interpolated time.
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,72, This is the main processing method that should be implemented by
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,73, the derived classes to perform the interpolation.
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,74, @param theta normalized interpolation abscissa within the step
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,75, (theta is zero at the previous time step and one at the current time step)
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,76, @param oneMinusThetaH time gap between the interpolated time and
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,77, the current time
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,78, @throws DerivativeException this exception is propagated to the caller if the
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,79, underlying user function triggers one
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,81,"rotected void computeInterpolatedState(double theta,"
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,82,ouble oneMinusThetaH)
True,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,73,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,74,"protected void computeInterpolatedState(final double theta,"
True,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,75,final double oneMinusThetaH)
False,src/java/org/apache/commons/math/ode/GillIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/GillIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/GillIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,74,ublic GillIntegrator(double step) {
True,src/java/org/apache/commons/math/ode/GillIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,74,public GillIntegrator(final double step) {
False,src/java/org/apache/commons/math/ode/GillIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,78,** Get the name of the method.
False,src/java/org/apache/commons/math/ode/GillIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,79, @return name of the method
True,src/java/org/apache/commons/math/ode/GillIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,78,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,20,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,21,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,22,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,64,ublic GillStepInterpolator(GillStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,68,public GillStepInterpolator(final GillStepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,68,** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,69, @return a copy of the finalized instance
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,72,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,76,** Compute the state at the interpolated time.
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,77, This is the main processing method that should be implemented by
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,78, the derived classes to perform the interpolation.
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,79, @param theta normalized interpolation abscissa within the step
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,80, (theta is zero at the previous time step and one at the current time step)
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,81, @param oneMinusThetaH time gap between the interpolated time and
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,82, the current time
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,83, @throws DerivativeException this exception is propagated to the caller if the
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,84, underlying user function triggers one
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,86,"rotected void computeInterpolatedState(double theta,"
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,87,ouble oneMinusThetaH)
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,78,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,79,"protected void computeInterpolatedState(final double theta,"
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,80,final double oneMinusThetaH)
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,90,ouble fourTheta = 4 * theta;
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,91,ouble s         = oneMinusThetaH / 6.0;
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,92,ouble soMt      = s * (1 - theta);
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,93,ouble c23       = soMt * (1 + 2 * theta);
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,94,ouble coeff1    = soMt * (1 - fourTheta);
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,95,ouble coeff2    = c23  * tMq;
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,96,ouble coeff3    = c23  * tPq;
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,97,ouble coeff4    = s * (1 + theta * (1 + fourTheta));
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,83,final double fourTheta = 4 * theta;
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,84,final double s         = oneMinusThetaH / 6.0;
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,85,final double soMt      = s * (1 - theta);
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,86,final double c23       = soMt * (1 + 2 * theta);
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,87,final double coeff1    = soMt * (1 - fourTheta);
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,88,final double coeff2    = c23  * tMq;
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,89,final double coeff3    = c23  * tPq;
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,90,final double coeff4    = s * (1 + theta * (1 + fourTheta));
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,20,import org.apache.commons.math.ode.AdaptiveStepsizeIntegrator;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,21,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,22,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,23,import org.apache.commons.math.ode.IntegratorException;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,24,import org.apache.commons.math.ode.events.EventHandler;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,25,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,26,import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,27,import org.apache.commons.math.ode.sampling.StepHandler;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,107,"ublic GraggBulirschStoerIntegrator(double minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,108,"ouble scalAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,109,ouble scalRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,116,"public GraggBulirschStoerIntegrator(final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,117,"final double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,118,final double scalRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,111,enseOutput = (handler.requiresDenseOutput() || (! switchesHandler.isEmpty()));
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,120,denseOutput = (handler.requiresDenseOutput() || (! eventsHandlersManager.isEmpty()));
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,129,"ublic GraggBulirschStoerIntegrator(double minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,130,"ouble[] vecAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,131,ouble[] vecRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,138,"public GraggBulirschStoerIntegrator(final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,139,"final double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,140,final double[] vecRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,133,enseOutput = (handler.requiresDenseOutput() || (! switchesHandler.isEmpty()));
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,142,denseOutput = (handler.requiresDenseOutput() || (! eventsHandlersManager.isEmpty()));
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,158,"ublic void setStabilityCheck(boolean performTest,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,159,"nt maxIter, int maxChecks,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,160,ouble stabilityReduction) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,167,"public void setStabilityCheck(final boolean performTest,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,168,"final int maxIter, final int maxChecks,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,169,final double stabilityReduction) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,198,"ublic void setStepsizeControl(double stepControl1, double stepControl2,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,199,"ouble stepControl3, double stepControl4) {"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,207,"public void setStepsizeControl(final double stepControl1, final double stepControl2,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,208,"final double stepControl3, final double stepControl4) {"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,250,"ublic void setOrderControl(int maxOrder,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,251,"ouble orderControl1, double orderControl2) {"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,259,"public void setOrderControl(final int maxOrder,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,260,"final double orderControl1, final double orderControl2) {"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,279,ublic void setStepHandler (StepHandler handler) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,288,public void setStepHandler (final StepHandler handler) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,282,enseOutput = (handler.requiresDenseOutput() || (! switchesHandler.isEmpty()));
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,291,denseOutput = (handler.requiresDenseOutput() || (! eventsHandlersManager.isEmpty()));
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,289,** Add a switching function to the integrator.
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,290, @param function switching function
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,291, @param maxCheckInterval maximal time interval between switching
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,292, function checks (this interval prevents missing sign changes in
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,293, case the integration steps becomes very large)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,294, @param convergence convergence threshold in the event time search
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,295, @param maxIterationCount upper limit of the iteration count in
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,296, the event time search
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,298,"ublic void addSwitchingFunction(SwitchingFunction function,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,299,"ouble maxCheckInterval,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,300,"ouble convergence,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,301,nt maxIterationCount) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,302,"uper.addSwitchingFunction(function, maxCheckInterval, convergence, maxIterationCount);"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,303,enseOutput = (handler.requiresDenseOutput() || (! switchesHandler.isEmpty()));
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,298,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,299,"public void addEventHandler(final EventHandler function,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,300,"final double maxCheckInterval,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,301,"final double convergence,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,302,final int maxIterationCount) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,303,"super.addEventHandler(function, maxCheckInterval, convergence, maxIterationCount);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,304,denseOutput = (handler.requiresDenseOutput() || (! eventsHandlersManager.isEmpty()));
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,313,nt size = maxOrder / 2;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,314,final int size = maxOrder / 2;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,347,ouble ratio = ((double) sequence[k]) / sequence[k-l-1];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,348,final double ratio = ((double) sequence[k]) / sequence[k-l-1];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,364,"ublic void setInterpolationControl(boolean useInterpolationError,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,365,nt mudif) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,365,"public void setInterpolationControl(final boolean useInterpolationError,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,366,final int mudif) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,377,** Get the name of the method.
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,378, @return name of the method
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,378,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,389,"rivate void rescale(double[] y1, double[] y2, double[] scale) {"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,388,"private void rescale(final double[] y1, final double[] y2, final double[] scale) {"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,392,"ouble yi = Math.max(Math.abs(y1[i]), Math.abs(y2[i]));"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,391,"final double yi = Math.max(Math.abs(y1[i]), Math.abs(y2[i]));"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,397,"ouble yi = Math.max(Math.abs(y1[i]), Math.abs(y2[i]));"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,396,"final double yi = Math.max(Math.abs(y1[i]), Math.abs(y2[i]));"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,421,"rivate boolean tryStep(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,422,"ouble t0, double[] y0, double step, int k,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,423,"ouble[] scale, double[][] f,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,424,"ouble[] yMiddle, double[] yEnd,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,425,ouble[] yTmp)
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,420,"private boolean tryStep(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,421,"final double t0, final double[] y0, final double step, final int k,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,422,"final double[] scale, final double[][] f,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,423,"final double[] yMiddle, final double[] yEnd,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,424,final double[] yTmp)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,428,nt    n        = sequence[k];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,429,ouble subStep  = step / n;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,430,ouble subStep2 = 2 * subStep;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,427,final int    n        = sequence[k];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,428,final double subStep  = step / n;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,429,final double subStep2 = 2 * subStep;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,450,ouble middle = yEnd[i];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,449,final double middle = yEnd[i];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,461,ouble ratio = f[0][l] / scale[l];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,460,final double ratio = f[0][l] / scale[l];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,466,ouble ratio = (f[j+1][l] - f[0][l]) / scale[l];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,465,final double ratio = (f[j+1][l] - f[0][l]) / scale[l];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,492,"rivate void extrapolate(int offset, int k, double[][] diag, double[] last) {"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,491,"private void extrapolate(final int offset, final int k,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,492,"final double[][] diag, final double[] last) {"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,510,** Integrate the differential equations up to the given time.
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,511, <p>This method solves an Initial Value Problem (IVP).</p>
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,512, <p>Since this method stores some internal state variables made
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,513, available in its public interface during integration ({@link
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,514," #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,515, @param equations differential equations to integrate
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,516, @param t0 initial time
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,517, @param y0 initial value of the state vector at t0
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,518, @param t target time for the integration
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,519, (can be set to a value smaller than <code>t0</code> for backward integration)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,520, @param y placeholder where to put the state vector at each successful
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,521,"  step (and hence at the end of integration), can be the same object as y0"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,522, @throws IntegratorException if the integrator cannot perform integration
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,523, @throws DerivativeException this exception is propagated to the caller if
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,524, the underlying user function triggers one
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,526,"ublic void integrate(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,527,"ouble t0, double[] y0, double t, double[] y)"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,510,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,511,"public void integrate(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,512,"final double t0, final double[] y0, final double t, final double[] y)"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,531,oolean forward = (t > t0);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,516,final boolean forward = (t > t0);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,534,ouble[] yDot0   = new double[y0.length];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,535,ouble[] y1      = new double[y0.length];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,536,ouble[] yTmp    = new double[y0.length];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,537,ouble[] yTmpDot = new double[y0.length];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,519,final double[] yDot0   = new double[y0.length];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,520,final double[] y1      = new double[y0.length];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,521,final double[] yTmp    = new double[y0.length];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,522,final double[] yTmpDot = new double[y0.length];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,539,ouble[][] diagonal = new double[sequence.length-1][];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,540,ouble[][] y1Diag = new double[sequence.length-1][];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,524,final double[][] diagonal = new double[sequence.length-1][];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,525,final double[][] y1Diag = new double[sequence.length-1][];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,546,ouble[][][] fk  = new double[sequence.length][][];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,531,final double[][][] fk  = new double[sequence.length][][];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,578,ouble[] scale = new double[y0.length];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,563,final double[] scale = new double[y0.length];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,582,ouble tol =
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,567,final double tol =
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,584,"ouble log10R = Math.log(Math.max(1.0e-10, tol)) / Math.log(10.0);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,569,"final double log10R = Math.log(Math.max(1.0e-10, tol)) / Math.log(10.0);"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,590,f (denseOutput || (! switchesHandler.isEmpty())) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,575,if (denseOutput || (! eventsHandlersManager.isEmpty())) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,646,ouble nextT = stepStart + stepSize;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,631,final double nextT = stepStart + stepSize;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,679,ouble e = Math.abs(y1[j] - y1Diag[0][j]) / scale[j];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,664,final double e = Math.abs(y1[j] - y1Diag[0][j]) / scale[j];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,694,ouble exp = 1.0 / (2 * k + 1);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,679,final double exp = 1.0 / (2 * k + 1);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,696,"ouble pow = Math.pow(stepControl3, exp);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,681,"final double pow = Math.pow(stepControl3, exp);"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,715,ouble ratio = ((double) sequence [k] * sequence[k+1]) /
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,716,sequence[0] * sequence[0]);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,700,final double ratio = ((double) sequence [k] * sequence[k+1]) /
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,701,(sequence[0] * sequence[0]);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,742,ouble ratio = ((double) sequence[k+1]) / sequence[0];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,727,final double ratio = ((double) sequence[k+1]) / sequence[0];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,796,nt mu = 2 * k - mudif + 3;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,781,final int mu = 2 * k - mudif + 3;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,801,nt l2 = l / 2;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,786,final int l2 = l / 2;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,833,raggBulirschStoerStepInterpolator gbsInterpolator
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,818,final GraggBulirschStoerStepInterpolator gbsInterpolator
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,839,ouble interpError = gbsInterpolator.estimateError(scale);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,824,final double interpError = gbsInterpolator.estimateError(scale);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,848,/ Switching functions handling
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,833,// Discrete events handling
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,851,f (switchesHandler.evaluateStep(interpolator)) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,836,if (eventsHandlersManager.evaluateStep(interpolator)) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,853,New = Math.abs(switchesHandler.getEventTime() - stepStart);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,838,hNew = Math.abs(eventsHandlersManager.getEventTime() - stepStart);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,870,ouble nextStep = stepStart + stepSize;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,855,final double nextStep = stepStart + stepSize;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,873,"witchesHandler.stepAccepted(nextStep, y);"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,874,f (switchesHandler.stop()) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,858,"eventsHandlersManager.stepAccepted(nextStep, y);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,859,if (eventsHandlersManager.stop()) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,883,"f (switchesHandler.reset(stepStart, y) && ! lastStep) {"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,868,"if (eventsHandlersManager.reset(stepStart, y) && ! lastStep) {"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,24,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,25,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,26,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,105,rivate void resetTables(int maxDegree) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,109,private void resetTables(final int maxDegree) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,113,ouble[][] newPols = new double[maxDegree + 1][];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,117,final double[][] newPols = new double[maxDegree + 1][];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,132,nt ip5 = i + 5;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,136,final int ip5 = i + 5;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,134,ouble e = 0.5 * Math.sqrt (((double) (i + 1)) / ip5);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,138,final double e = 0.5 * Math.sqrt (((double) (i + 1)) / ip5);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,171,"ublic GraggBulirschStoerStepInterpolator(double[] y, double[] y0Dot,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,172,"ouble[] y1, double[] y1Dot,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,173,"ouble[][] yMidDots,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,174,oolean forward) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,175,"public GraggBulirschStoerStepInterpolator(final double[] y, final double[] y0Dot,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,176,"final double[] y1, final double[] y1Dot,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,177,"final double[][] yMidDots,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,178,final boolean forward) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,192,GraggBulirschStoerStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,196,(final GraggBulirschStoerStepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,196,nt dimension = currentState.length;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,200,final int dimension = currentState.length;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,221,** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,222, @return a copy of the finalized instance
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,225,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,233,"ublic void computeCoefficients(int mu, double h) {"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,235,"public void computeCoefficients(final int mu, final double h) {"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,243,ouble yp0   = h * y0Dot[i];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,244,ouble yp1   = h * y1Dot[i];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,245,ouble ydiff = y1[i] - currentState[i];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,246,ouble aspl  = ydiff - yp1;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,247,ouble bspl  = yp0 - ydiff;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,245,final double yp0   = h * y0Dot[i];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,246,final double yp1   = h * y1Dot[i];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,247,final double ydiff = y1[i] - currentState[i];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,248,final double aspl  = ydiff - yp1;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,249,final double bspl  = yp0 - ydiff;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,259,ouble ph0 = 0.5 * (currentState[i] + y1[i]) + 0.125 * (aspl + bspl);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,261,final double ph0 = 0.5 * (currentState[i] + y1[i]) + 0.125 * (aspl + bspl);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,263,ouble ph1 = ydiff + 0.25 * (aspl - bspl);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,265,final double ph1 = ydiff + 0.25 * (aspl - bspl);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,267,ouble ph2 = yp1 - yp0;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,269,final double ph2 = yp1 - yp0;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,271,ouble ph3 = 6 * (bspl - aspl);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,273,final double ph3 = 6 * (bspl - aspl);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,275,ouble fac1 = 0.5 * j * (j - 1);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,276,ouble fac2 = 2 * fac1 * (j - 2) * (j - 3);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,277,final double fac1 = 0.5 * j * (j - 1);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,278,final double fac2 = 2 * fac1 * (j - 2) * (j - 3);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,292,ublic double estimateError(double[] scale) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,294,public double estimateError(final double[] scale) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,296,ouble e = polynoms[currentDegree][i] / scale[i];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,298,final double e = polynoms[currentDegree][i] / scale[i];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,304,** Compute the state at the interpolated time.
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,305, This is the main processing method that should be implemented by
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,306, the derived classes to perform the interpolation.
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,307, @param theta normalized interpolation abscissa within the step
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,308, (theta is zero at the previous time step and one at the current time step)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,309, @param oneMinusThetaH time gap between the interpolated time and
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,310, the current time
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,311, @throws DerivativeException this exception is propagated to the caller if the
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,312, underlying user function triggers one
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,314,"rotected void computeInterpolatedState(double theta,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,315,ouble oneMinusThetaH)
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,306,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,307,"protected void computeInterpolatedState(final double theta,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,308,final double oneMinusThetaH)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,318,nt dimension = currentState.length;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,311,final int dimension = currentState.length;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,320,ouble oneMinusTheta = 1.0 - theta;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,321,ouble theta05       = theta - 0.5;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,322,ouble t4            = theta * oneMinusTheta;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,313,final double oneMinusTheta = 1.0 - theta;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,314,final double theta05       = theta - 0.5;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,315,double t4                  = theta * oneMinusTheta;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,342,** Save the state of the instance.
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,343, @param out stream where to save the state
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,344, @exception IOException in case of write error
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,346,ublic void writeExternal(ObjectOutput out)
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,335,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,336,public void writeExternal(final ObjectOutput out)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,349,nt dimension = currentState.length;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,339,final int dimension = currentState.length;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,364,** Read the state of the instance.
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,365, @param in stream where to read the state from
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,366, @exception IOException in case of read error
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,368,ublic void readExternal(ObjectInput in)
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,354,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,355,public void readExternal(final ObjectInput in)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,372,ouble t = readBaseExternal(in);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,373,nt dimension = currentState.length;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,359,final double t = readBaseExternal(in);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,360,final int dimension = currentState.length;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,376,nt degree = in.readInt();
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,363,final int degree = in.readInt();
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,77,"ublic HighamHall54Integrator(double minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,78,"ouble scalAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,79,ouble scalRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,77,"public HighamHall54Integrator(final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,78,"final double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,79,final double scalRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,93,"ublic HighamHall54Integrator(double minStep, double maxStep,"
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,94,"ouble[] vecAbsoluteTolerance,"
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,95,ouble[] vecRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,93,"public HighamHall54Integrator(final double minStep, final double maxStep,"
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,94,"final double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,95,final double[] vecRelativeTolerance) {
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,100,** Get the name of the method.
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,101, @return name of the method
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,100,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,107,** Get the order of the method.
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,108, @return order of the method
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,105,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,114,** Compute the error ratio.
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,115, @param yDotK derivatives computed during the first stages
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,116, @param y0 estimate of the step at the start of the step
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,117, @param y1 estimate of the step at the end of the step
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,118, @param h  current step
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,119," @return error ratio, greater than 1 if step should be rejected"
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,121,"rotected double estimateError(double[][] yDotK,"
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,122,"ouble[] y0, double[] y1,"
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,123,ouble h) {
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,110,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,111,"protected double estimateError(final double[][] yDotK,"
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,112,"final double[] y0, final double[] y1,"
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,113,final double h) {
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,133,"ouble yScale = Math.max(Math.abs(y0[j]), Math.abs(y1[j]));"
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,134,ouble tol = (vecAbsoluteTolerance == null) ?
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,135,scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,136,vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,137,ouble ratio  = h * errSum / tol;
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,123,"final double yScale = Math.max(Math.abs(y0[j]), Math.abs(y1[j]));"
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,124,final double tol = (vecAbsoluteTolerance == null) ?
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,125,(scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,126,(vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,127,final double ratio  = h * errSum / tol;
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,20,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,21,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,22,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,51,ublic HighamHall54StepInterpolator(HighamHall54StepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,55,public HighamHall54StepInterpolator(final HighamHall54StepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,55,** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,56, @return a copy of the finalized instance
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,59,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,63,** Compute the state at the interpolated time.
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,64, @param theta normalized interpolation abscissa within the step
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,65, (theta is zero at the previous time step and one at the current time step)
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,66, @param oneMinusThetaH time gap between the interpolated time and
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,67, the current time
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,68, @throws DerivativeException this exception is propagated to the caller if the
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,69, underlying user function triggers one
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,71,"rotected void computeInterpolatedState(double theta,"
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,72,ouble oneMinusThetaH)
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,65,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,66,"protected void computeInterpolatedState(final double theta,"
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,67,final double oneMinusThetaH)
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,75,ouble theta2 = theta * theta;
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,70,final double theta2 = theta * theta;
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,77,ouble b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,78,ouble b2 = h * (-27.0/32.0 + theta2 * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,79,ouble b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,80,ouble b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,81,ouble b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,72,final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,73,final double b2 = h * (-27.0/32.0 + theta2 * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,74,final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,75,final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,76,final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));
False,src/java/org/apache/commons/math/ode/MidpointIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/MidpointIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/MidpointIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java,70,ublic MidpointIntegrator(double step) {
True,src/java/org/apache/commons/math/ode/MidpointIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java,70,public MidpointIntegrator(final double step) {
False,src/java/org/apache/commons/math/ode/MidpointIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java,74,** Get the name of the method.
False,src/java/org/apache/commons/math/ode/MidpointIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java,75, @return name of the method
True,src/java/org/apache/commons/math/ode/MidpointIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java,74,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,20,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,21,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,22,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,61,ublic MidpointStepInterpolator(MidpointStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,65,public MidpointStepInterpolator(final MidpointStepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,65,** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,66, @return a copy of the finalized instance
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,69,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,73,** Compute the state at the interpolated time.
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,74, This is the main processing method that should be implemented by
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,75, the derived classes to perform the interpolation.
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,76, @param theta normalized interpolation abscissa within the step
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,77, (theta is zero at the previous time step and one at the current time step)
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,78, @param oneMinusThetaH time gap between the interpolated time and
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,79, the current time
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,80, @throws DerivativeException this exception is propagated to the caller if the
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,81, underlying user function triggers one
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,83,"rotected void computeInterpolatedState(double theta,"
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,84,ouble oneMinusThetaH)
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,75,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,76,"protected void computeInterpolatedState(final double theta,"
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,77,final double oneMinusThetaH)
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,87,ouble coeff1 = oneMinusThetaH * theta;
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,88,ouble coeff2 = oneMinusThetaH * (1.0 + theta);
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,80,final double coeff1 = oneMinusThetaH * theta;
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,81,final double coeff2 = oneMinusThetaH * (1.0 + theta);
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,22,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,23,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,24,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,25,import org.apache.commons.math.ode.IntegratorException;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,26,import org.apache.commons.math.ode.events.EventHandler;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,27,import org.apache.commons.math.ode.events.CombinedEventsManager;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,28,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,29,import org.apache.commons.math.ode.sampling.DummyStepHandler;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,30,import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,31,import org.apache.commons.math.ode.sampling.StepHandler;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,59,"rotected RungeKuttaIntegrator(double[] c, double[][] a, double[] b,"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,60,"ungeKuttaStepInterpolator prototype,"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,61,ouble step) {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,70,"protected RungeKuttaIntegrator(final double[] c, final double[][] a, final double[] b,"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,71,"final RungeKuttaStepInterpolator prototype,"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,72,final double step) {
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,68,witchesHandler = new SwitchingFunctionsHandler();
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,79,eventsHandlersManager = new CombinedEventsManager();
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,72,** Get the name of the method.
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,73, @return name of the method
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,83,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,77,** Set the step handler for this integrator.
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,78, The handler will be called by the integrator for each accepted
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,79, step.
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,80, @param handler handler for the accepted steps
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,82,ublic void setStepHandler (StepHandler handler) {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,86,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,87,public void setStepHandler (final StepHandler handler) {
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,86,** Get the step handler for this integrator.
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,87, @return the step handler for this integrator
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,91,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,93,** Add a switching function to the integrator.
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,94, @param function switching function
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,95, @param maxCheckInterval maximal time interval between switching
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,96, function checks (this interval prevents missing sign changes in
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,97, case the integration steps becomes very large)
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,98, @param convergence convergence threshold in the event time search
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,99, @param maxIterationCount upper limit of the iteration count in
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,100, the event time search
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,101, @see #getSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,102, @see #clearSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,104,"ublic void addSwitchingFunction(SwitchingFunction function,"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,105,"ouble maxCheckInterval,"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,106,"ouble convergence,"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,107,nt maxIterationCount) {
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,108,"witchesHandler.addSwitchingFunction(function, maxCheckInterval, convergence, maxIterationCount);"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,96,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,97,"public void addEventHandler(final EventHandler function,"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,98,"final double maxCheckInterval,"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,99,"final double convergence,"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,100,final int maxIterationCount) {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,101,"eventsHandlersManager.addEventHandler(function, maxCheckInterval, convergence, maxIterationCount);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,111,** Get all the switching functions that have been added to the integrator.
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,112, @return an unmodifiable collection of the added switching functions
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,113," @see #addSwitchingFunction(SwitchingFunction, double, double, int)"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,114, @see #clearSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,116,ublic Collection<SwitchingFunction> getSwitchingFunctions() {
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,117,eturn switchesHandler.getSwitchingFunctions();
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,104,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,105,public Collection<EventHandler> getEventsHandlers() {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,106,return eventsHandlersManager.getEventsHandlers();
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,120,** Remove all the switching functions that have been added to the integrator.
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,121," @see #addSwitchingFunction(SwitchingFunction, double, double, int)"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,122, @see #getSwitchingFunctions()
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,124,ublic void clearSwitchingFunctions() {
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,125,witchesHandler.clearSwitchingFunctions();
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,109,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,110,public void clearEventsHandlers() {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,111,eventsHandlersManager.clearEventsHandlers();
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,136,"rivate void sanityChecks(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,137,"ouble t0, double[] y0, double t, double[] y)"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,122,"private void sanityChecks(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,123,"final double t0, final double[] y0, final double t, final double[] y)"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,161,** Integrate the differential equations up to the given time.
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,162, <p>This method solves an Initial Value Problem (IVP).</p>
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,163, <p>Since this method stores some internal state variables made
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,164, available in its public interface during integration ({@link
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,165," #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,166, @param equations differential equations to integrate
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,167, @param t0 initial time
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,168, @param y0 initial value of the state vector at t0
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,169, @param t target time for the integration
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,170, (can be set to a value smaller than <code>t0</code> for backward integration)
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,171, @param y placeholder where to put the state vector at each successful
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,172,"  step (and hence at the end of integration), can be the same object as y0"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,173, @throws IntegratorException if the integrator cannot perform integration
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,174, @throws DerivativeException this exception is propagated to the caller if
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,175, the underlying user function triggers one
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,177,"ublic void integrate(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,178,"ouble t0, double[] y0,"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,179,"ouble t, double[] y)"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,147,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,148,"public void integrate(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,149,"final double t0, final double[] y0,"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,150,"final double t, final double[] y)"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,183,oolean forward = (t > t0);
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,154,final boolean forward = (t > t0);
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,186,nt stages = c.length + 1;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,157,final int stages = c.length + 1;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,190,ouble[][] yDotK = new double[stages][];
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,161,final double[][] yDotK = new double[stages][];
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,194,ouble[] yTmp = new double[y0.length];
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,165,final double[] yTmp = new double[y0.length];
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,198,f (handler.requiresDenseOutput() || (! switchesHandler.isEmpty())) {
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,199,ungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,169,if (handler.requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,170,final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,247,/ Switching functions handling
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,218,// Discrete events handling
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,249,f (switchesHandler.evaluateStep(interpolator)) {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,220,if (eventsHandlersManager.evaluateStep(interpolator)) {
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,251,tepSize = switchesHandler.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,222,stepSize = eventsHandlersManager.getEventTime() - stepStart;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,259,ouble nextStep = stepStart + stepSize;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,230,final double nextStep = stepStart + stepSize;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,261,"witchesHandler.stepAccepted(nextStep, y);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,262,f (switchesHandler.stop()) {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,232,"eventsHandlersManager.stepAccepted(nextStep, y);"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,233,if (eventsHandlersManager.stop()) {
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,273,"f (switchesHandler.reset(stepStart, y) && ! lastStep) {"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,274,/ some switching function has triggered changes that
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,244,"if (eventsHandlersManager.reset(stepStart, y) && ! lastStep) {"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,245,// some events handler has triggered changes that
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,280,/ a switching function has changed the step
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,251,// an event handler has changed the step
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,293,** Get the current value of the step start time t<sub>i</sub>.
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,294, <p>This method can be called during integration (typically by
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,295, the object implementing the {@link FirstOrderDifferentialEquations
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,296, differential equations} problem) if the value of the current step that
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,297, is attempted is needed.</p>
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,298, <p>The result is undefined if the method is called outside of
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,299, calls to {@link #integrate}</p>
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,300, @return current value of the step start time t<sub>i</sub>
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,264,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,306,** Get the current signed value of the integration stepsize.
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,307, <p>This method can be called during integration (typically by
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,308, the object implementing the {@link FirstOrderDifferentialEquations
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,309, differential equations} problem) if the signed value of the current stepsize
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,310, that is tried is needed.</p>
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,311, <p>The result is undefined if the method is called outside of
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,312, calls to {@link #integrate}</p>
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,313, @return current signed value of the stepsize
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,269,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,343,** Switching functions handler. */
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,344,rotected SwitchingFunctionsHandler switchesHandler;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,298,/** Events handlers manager. */
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,299,protected CombinedEventsManager eventsHandlersManager;
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,24,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,25,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,26,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,70,ublic RungeKuttaStepInterpolator(RungeKuttaStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,74,public RungeKuttaStepInterpolator(final RungeKuttaStepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,75,nt dimension = currentState.length;
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,79,final int dimension = currentState.length;
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,115,"ublic void reinitialize(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,116,"ouble[] y, double[][] yDotK, boolean forward) {"
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,119,"public void reinitialize(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,120,"final double[] y, final double[][] yDotK, final boolean forward) {"
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,122,** Save the state of the instance.
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,123, @param out stream where to save the state
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,124, @exception IOException in case of write error
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,126,ublic void writeExternal(ObjectOutput out)
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,126,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,127,public void writeExternal(final ObjectOutput out)
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,144,** Read the state of the instance.
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,145, @param in stream where to read the state from
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,146, @exception IOException in case of read error
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,148,ublic void readExternal(ObjectInput in)
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,145,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,146,public void readExternal(final ObjectInput in)
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,152,ouble t = readBaseExternal(in);
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,150,final double t = readBaseExternal(in);
False,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,155,nt kMax = in.readInt();
True,src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,153,final int kMax = in.readInt();
False,src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java,74,ublic ThreeEighthesIntegrator(double step) {
True,src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java,74,public ThreeEighthesIntegrator(final double step) {
False,src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java,78,** Get the name of the method.
False,src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java,79, @return name of the method
True,src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java,78,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,20,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,21,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,22,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,66,ublic ThreeEighthesStepInterpolator(ThreeEighthesStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,70,public ThreeEighthesStepInterpolator(final ThreeEighthesStepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,70,** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,71, @return a copy of the finalized instance
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,74,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,78,** Compute the state at the interpolated time.
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,79, This is the main processing method that should be implemented by
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,80, the derived classes to perform the interpolation.
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,81, @param theta normalized interpolation abscissa within the step
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,82, (theta is zero at the previous time step and one at the current time step)
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,83, @param oneMinusThetaH time gap between the interpolated time and
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,84, the current time
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,85, @throws DerivativeException this exception is propagated to the caller if the
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,86, underlying user function triggers one
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,88,"rotected void computeInterpolatedState(double theta,"
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,89,ouble oneMinusThetaH)
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,90,hrows DerivativeException {
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,80,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,81,"protected void computeInterpolatedState(final double theta,"
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,82,final double oneMinusThetaH)
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,83,throws DerivativeException {
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,92,ouble fourTheta2 = 4 * theta * theta;
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,93,ouble s          = oneMinusThetaH / 8.0;
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,94,ouble coeff1     = s * (1 - 7 * theta + 2 * fourTheta2);
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,95,ouble coeff2     = 3 * s * (1 + theta - fourTheta2);
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,96,ouble coeff3     = 3 * s * (1 + theta);
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,97,ouble coeff4     = s * (1 + theta + fourTheta2);
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,85,final double fourTheta2 = 4 * theta * theta;
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,86,final double s          = oneMinusThetaH / 8.0;
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,87,final double coeff1     = s * (1 - 7 * theta + 2 * fourTheta2);
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,88,final double coeff2     = 3 * s * (1 + theta - fourTheta2);
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,89,final double coeff3     = 3 * s * (1 + theta);
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,90,final double coeff4     = s * (1 + theta + fourTheta2);
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,99,or (int i = 0; i < interpolatedState.length; ++i) {
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,100,nterpolatedState[i] = currentState[i] -
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,101,oeff1 * yDotK[0][i] - coeff2 * yDotK[1][i] -
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,102,oeff3 * yDotK[2][i] - coeff4 * yDotK[3][i];
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,92,for (int i = 0; i < interpolatedState.length; ++i) {
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,93,interpolatedState[i] = currentState[i] -
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,94,coeff1 * yDotK[0][i] - coeff2 * yDotK[1][i] -
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,95,coeff3 * yDotK[2][i] - coeff4 * yDotK[3][i];
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,18,package org.apache.commons.math.ode.sampling;
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,24,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,25,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,26,import org.apache.commons.math.ode.SecondOrderIntegrator;
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,27,import org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,94,"rotected AbstractStepInterpolator(double[] y, boolean forward) {"
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,99,"protected AbstractStepInterpolator(final double[] y, final boolean forward) {"
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,126,rotected AbstractStepInterpolator(AbstractStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,131,protected AbstractStepInterpolator(final AbstractStepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,151,"rotected void reinitialize(double[] y, boolean forward) {"
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,156,"protected void reinitialize(final double[] y, final boolean forward) {"
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,205,ublic void storeTime(double t) {
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,210,public void storeTime(final double t) {
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,256,ublic void setInterpolatedTime(double time)
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,257,hrows DerivativeException {
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,258,nterpolatedTime = time;
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,259,ouble oneMinusThetaH = currentTime - interpolatedTime;
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,260,"omputeInterpolatedState((h - oneMinusThetaH) / h, oneMinusThetaH);"
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,261,public void setInterpolatedTime(final double time)
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,262,throws DerivativeException {
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,263,interpolatedTime = time;
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,264,final double oneMinusThetaH = currentTime - interpolatedTime;
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,265,"computeInterpolatedState((h - oneMinusThetaH) / h, oneMinusThetaH);"
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,267, step control or switching function triggering.</p>
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,272,* step control or discrete events triggering.</p>
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,378,rotected void writeBaseExternal(ObjectOutput out)
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,383,protected void writeBaseExternal(final ObjectOutput out)
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,414,rotected double readBaseExternal(ObjectInput in)
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,419,protected double readBaseExternal(final ObjectInput in)
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,417,nt dimension = in.readInt();
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,422,final int dimension = in.readInt();
False,src/java/org/apache/commons/math/ode/DummyStepHandler.java,src/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/DummyStepHandler.java,src/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,18,package org.apache.commons.math.ode.sampling;
False,src/java/org/apache/commons/math/ode/DummyStepHandler.java,src/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,83,"ublic void handleStep(StepInterpolator interpolator, boolean isLast) {"
True,src/java/org/apache/commons/math/ode/DummyStepHandler.java,src/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,83,"public void handleStep(final StepInterpolator interpolator, final boolean isLast) {"
False,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,18,package org.apache.commons.math.ode.sampling;
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,24,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,25,import org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;
False,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,60,"rotected DummyStepInterpolator(double[] y, boolean forward) {"
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,63,"public DummyStepInterpolator(final double[] y, final boolean forward) {"
False,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,69,ublic DummyStepInterpolator(DummyStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,72,public DummyStepInterpolator(final DummyStepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,90,"rotected void computeInterpolatedState(double theta, double oneMinusThetaH)"
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,93,"protected void computeInterpolatedState(final double theta, final double oneMinusThetaH)"
False,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,99,ublic void writeExternal(ObjectOutput out)
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,102,public void writeExternal(final ObjectOutput out)
False,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,109,ublic void readExternal(ObjectInput in)
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,112,public void readExternal(final ObjectInput in)
False,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,113,ouble t = readBaseExternal(in);
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,116,final double t = readBaseExternal(in);
False,src/java/org/apache/commons/math/ode/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/FixedStepHandler.java,src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java,18,package org.apache.commons.math.ode.sampling;
False,src/java/org/apache/commons/math/ode/StepHandler.java,src/java/org/apache/commons/math/ode/sampling/StepHandler.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/StepHandler.java,src/java/org/apache/commons/math/ode/sampling/StepHandler.java,18,package org.apache.commons.math.ode.sampling;
True,src/java/org/apache/commons/math/ode/StepHandler.java,src/java/org/apache/commons/math/ode/sampling/StepHandler.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/ode/StepHandler.java,src/java/org/apache/commons/math/ode/sampling/StepHandler.java,22,import org.apache.commons.math.ode.ContinuousOutputModel;
True,src/java/org/apache/commons/math/ode/StepHandler.java,src/java/org/apache/commons/math/ode/sampling/StepHandler.java,23,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/StepHandler.java,src/java/org/apache/commons/math/ode/sampling/StepHandler.java,24,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/java/org/apache/commons/math/ode/StepHandler.java,src/java/org/apache/commons/math/ode/sampling/StepHandler.java,25,import org.apache.commons.math.ode.SecondOrderIntegrator;
False,src/java/org/apache/commons/math/ode/StepHandler.java,src/java/org/apache/commons/math/ode/sampling/StepHandler.java,40,ublic interface StepHandler {
True,src/java/org/apache/commons/math/ode/StepHandler.java,src/java/org/apache/commons/math/ode/sampling/StepHandler.java,47,public interface StepHandler extends Serializable {
False,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,18,ackage org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,18,package org.apache.commons.math.ode.sampling;
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,22,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,23,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,24,import org.apache.commons.math.ode.SecondOrderIntegrator;
False,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,89," initialization, step control or switching function"
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,93,"* initialization, step control or discrete events"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,18,package org.apache.commons.math.ode.sampling;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,20,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,23,* This class wraps an object implementing {@link FixedStepHandler}
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,24,* into a {@link StepHandler}.
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,26,* <p>This wrapper allows to use fixed step handlers with general
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,27,* integrators which cannot guaranty their integration steps will
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,28,* remain constant and therefore only accept general step
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,29,* handlers.</p>
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,31,* <p>The stepsize used is selected at construction time. The {@link
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,32,* FixedStepHandler#handleStep handleStep} method of the underlying
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,33,* {@link FixedStepHandler} object is called at the beginning time of
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,34,"* the integration t0 and also at times t0+h, t0+2h, ... If the"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,35,"* integration range is an integer multiple of the stepsize, then the"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,36,"* last point handled will be the endpoint of the integration tend, if"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,37,"* not, the last point will belong to the interval [tend - h ;"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,38,* tend].</p>
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,40,"* <p>There is no constraint on the integrator, it can use any"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,41,* timestep it needs (time steps longer or shorter than the fixed time
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,42,* step and non-integer ratios are all allowed).</p>
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,44,* @see StepHandler
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,45,* @see FixedStepHandler
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,46,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,47,* @since 1.2
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,50,public class StepNormalizer implements StepHandler {
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,52,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,53,private static final long serialVersionUID = -973517244031912577L;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,55,/** Fixed time step. */
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,56,private double h;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,58,/** Underlying step handler. */
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,59,private final FixedStepHandler handler;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,61,/** Last step time. */
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,62,private double lastTime;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,64,/** Last State vector. */
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,65,private double[] lastState;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,67,/** Integration direction indicator. */
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,68,private boolean forward;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,70,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,71,* @param h fixed time step (sign is not used)
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,72,* @param handler fixed time step handler to wrap
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,74,"public StepNormalizer(final double h, final FixedStepHandler handler) {"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,75,this.h       = Math.abs(h);
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,76,this.handler = handler;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,77,reset();
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,80,/** Determines whether this handler needs dense output.
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,81,* This handler needs dense output in order to provide data at
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,82,* regularly spaced steps regardless of the steps the integrator
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,83,"* uses, so this method always returns true."
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,84,* @return always true
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,86,public boolean requiresDenseOutput() {
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,87,return true;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,90,/** Reset the step handler.
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,91,* Initialize the internal data as required before the first step is
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,92,* handled.
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,94,public void reset() {
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,95,lastTime  = Double.NaN;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,96,lastState = null;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,97,forward   = true;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,101,* Handle the last accepted step
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,102,* @param interpolator interpolator for the last accepted step. For
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,103,"* efficiency purposes, the various integrators reuse the same"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,104,"* object on each call, so if the instance wants to keep it across"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,105,* all calls (for example to provide at the end of the integration a
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,106,"* continuous model valid throughout the integration range), it"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,107,* should build a local copy using the clone method and store this
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,108,* copy.
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,109,* @param isLast true if the step is the last one
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,110,* @throws DerivativeException this exception is propagated to the
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,111,* caller if the underlying user function triggers one
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,113,"public void handleStep(final StepInterpolator interpolator, final boolean isLast)"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,114,throws DerivativeException {
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,116,if (lastState == null) {
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,118,lastTime = interpolator.getPreviousTime();
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,119,interpolator.setInterpolatedTime(lastTime);
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,121,final double[] state = interpolator.getInterpolatedState();
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,122,lastState = (double[]) state.clone();
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,124,// take the integration direction into account
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,125,forward = (interpolator.getCurrentTime() >= lastTime);
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,126,if (! forward) {
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,127,h = -h;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,132,double nextTime = lastTime + h;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,133,boolean nextInStep = forward ^ (nextTime > interpolator.getCurrentTime());
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,134,while (nextInStep) {
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,136,// output the stored previous step
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,137,"handler.handleStep(lastTime, lastState, false);"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,139,// store the next step
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,140,lastTime = nextTime;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,141,interpolator.setInterpolatedTime(lastTime);
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,142,"System.arraycopy(interpolator.getInterpolatedState(), 0,"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,143,"lastState, 0, lastState.length);"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,145,nextTime  += h;
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,146,nextInStep = forward ^ (nextTime > interpolator.getCurrentTime());
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,150,if (isLast) {
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,151,"// there will be no more steps,"
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,152,// the stored one should be flagged as being the last
True,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,153,"handler.handleStep(lastTime, lastState, true);"
False,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,26, @version $Revision:$ $Date$
True,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/java/org/apache/commons/math/random/JDKRandomGenerator.java,26,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,26, @version $Revision:$ $Date$
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,26,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,26, @version $Revision:$ $Date$
True,src/java/org/apache/commons/math/random/RandomGenerator.java,src/java/org/apache/commons/math/random/RandomGenerator.java,26,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,65," @version $Revision: 618097 $ $Date: 2008-02-03 22:39:08 +0100 (dim., 03 févr. 2008) $"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,65,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,25," @version $Revision: 480440 $ $Date: 2006-11-29 08:14:12 +0100 (mer., 29 nov. 2006) $"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,25,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,32," @version $Revision: 618097 $ $Date: 2008-02-03 22:39:08 +0100 (dim., 03 févr. 2008) $"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,32,* @version $Revision$ $Date$
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,35, @version $Id: MantissaException.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,35,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,23, @version $Id: MessagesResources.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,23,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,23, @version $Id: MessagesResources_fr.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,23,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,31, @version $Id: Chebyshev.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,31,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,31, @version $Id: Hermite.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,31,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,31, @version $Id: Laguerre.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,31,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,31, @version $Id: Legendre.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,31,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,33, @version $Id: OrthogonalPolynomial.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,33,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,39, @version $Id: Polynomial.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,39,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,28, @version $Id: PolynomialFraction.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,28,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,27, @version $Id: RationalNumber.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,27,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,34, @version $Id: AbstractCurveFitter.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,34,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,36, @version $Id: F2FP2Iterator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,36,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,36, @version $Id: FFPIterator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,36,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,130, @version $Id: HarmonicCoefficientsGuesser.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,130,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,38, @version $Id: HarmonicFitter.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,38,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,28, @version $Id: PolynomialCoefficient.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,28,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,35, @version $Id: PolynomialFitter.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,35,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,24, @version $Id: ExhaustedSampleException.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,24,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,24, @version $Id: FunctionException.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,24,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,34, @version $Id: BasicSampledFunctionIterator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,34,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,43, @version $Id: ComputableFunction.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,43,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,46, @version $Id: ComputableFunctionSampler.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,46,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,46, @version $Id: SampledFunction.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,46,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,28, @version $Id: SampledFunctionIterator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,28,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,32, @version $Id: ScalarValuedPair.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,32,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,34, @version $Id: BasicSampledFunctionIterator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,34,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,43, @version $Id: ComputableFunction.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,43,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,46, @version $Id: ComputableFunctionSampler.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,46,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,46, @version $Id: SampledFunction.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,46,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,28, @version $Id: SampledFunctionIterator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,28,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,32, @version $Id: VectorialValuedPair.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,32,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,22, @version $Id: DiagonalMatrix.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,22,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,25, @version $Id: GeneralMatrix.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,25,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,22, @version $Id: GeneralSquareMatrix.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,22,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,22, @version $Id: LowerTriangularMatrix.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,22,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,38, @version $Id: Matrix.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,38,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,28, @version $Id: MatrixFactory.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,28,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,50, @version $Id: NonNullRange.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,50,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,24, @version $Id: SingularMatrixException.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,24,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,26, @version $Id: SquareMatrix.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,26,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,22, @version $Id: SymetricalMatrix.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,22,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,22, @version $Id: UpperTriangularMatrix.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,22,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,33, @version $Id: ComputableFunctionIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,33,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,32, @version $Id: EnhancedSimpsonIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,32,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,34, @version $Id: EnhancedSimpsonIntegratorSampler.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,34,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,36, @version $Id: GaussLegendreIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,36,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,38, @version $Id: RiemannIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,38,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,38, @version $Id: RiemannIntegratorSampler.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,38,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,32, @version $Id: SampledFunctionIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,32,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,29, @version $Id: TrapezoidIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,29,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,38, @version $Id: TrapezoidIntegratorSampler.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,38,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,33, @version $Id: ComputableFunctionIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,33,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,32, @version $Id: EnhancedSimpsonIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,32,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,34, @version $Id: EnhancedSimpsonIntegratorSampler.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,34,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,36, @version $Id: GaussLegendreIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,36,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,38, @version $Id: RiemannIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,38,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,38, @version $Id: RiemannIntegratorSampler.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,38,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,32, @version $Id: SampledFunctionIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,32,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,29, @version $Id: TrapezoidIntegrator.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,29,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,38, @version $Id: TrapezoidIntegratorSampler.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,38,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,21, @version $Id: ScalarSampleStatistics.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,21,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,23, @version $Id: VectorialSampleStatistics.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,23,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,30, @version $Id: BrentSolver.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,30,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,28, @version $Id: ConvergenceChecker.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,28,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,26, @version $Id: RootsFinder.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,26,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,31, @version $Id: ArrayMapper.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,31,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,24, @version $Id: ArrayMapperEntry.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,24,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,57, @version $Id: ArraySliceMappable.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,57,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,30, @version $Id: Interval.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,30,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,32, @version $Id: IntervalsList.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,32,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,24, @version $Id: MappableArray.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,24,* @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,24, @version $Id: MappableScalar.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,24,* @version $Id$
False,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,25," @version $Revision: 480442 $ $Date: 2006-11-29 08:21:22 +0100 (mer., 29 nov. 2006) $"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,25,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,24," @version $Revision: 480442 $ $Date: 2006-11-29 08:21:22 +0100 (mer., 29 nov. 2006) $"
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,25," @version $Revision: 1.8 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,25,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,25,mport org.apache.commons.math.ode.DormandPrince54Integrator;
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,27,import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,28,import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,29,import org.apache.commons.math.ode.nonstiff.TestProblem3;
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,30,import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
True,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java,31,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,20,mport org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator;
True,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,24,import org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator;
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,22,mport org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator;
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,26,mport org.apache.commons.math.ode.StepHandler;
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,27,mport org.apache.commons.math.ode.StepInterpolator;
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,28,mport org.apache.commons.math.ode.SwitchingFunction;
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,25,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,26,import org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator;
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,27,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,28,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,86,witchingFunction[] functions = pb.getSwitchingFunctions();
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,86,EventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,88,"nteg.addSwitchingFunction(functions[l],"
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,88,"integ.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,91,"ssertEquals(functions.length, integ.getSwitchingFunctions().size());"
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,91,"assertEquals(functions.length, integ.getEventsHandlers().size());"
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,101,nteg.clearSwitchingFunctions();
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,102,"ssertEquals(0, integ.getSwitchingFunctions().size());"
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,101,integ.clearEventsHandlers();
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,102,"assertEquals(0, integ.getEventsHandlers().size());"
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,159,private static final long serialVersionUID = 7510061424396717277L;
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,28,mport org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator;
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,31,import org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator;
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,22,mport org.apache.commons.math.ode.DormandPrince54Integrator;
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,25,mport org.apache.commons.math.ode.StepHandler;
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,26,mport org.apache.commons.math.ode.StepInterpolator;
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,27,mport org.apache.commons.math.ode.SwitchingFunction;
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,24,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,25,import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,26,import org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,27,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,28,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,107,private static final long serialVersionUID = -8168590945325629799L;
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,175,ublic void testSwitchingFunctions()
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,178,public void testEvents()
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,189,witchingFunction[] functions = pb.getSwitchingFunctions();
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,192,EventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,191,"nteg.addSwitchingFunction(functions[l],"
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,194,"integ.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,194,"ssertEquals(functions.length, integ.getSwitchingFunctions().size());"
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,197,"assertEquals(functions.length, integ.getEventsHandlers().size());"
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,202,nteg.clearSwitchingFunctions();
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,203,"ssertEquals(0, integ.getSwitchingFunctions().size());"
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,205,integ.clearEventsHandlers();
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,206,"assertEquals(0, integ.getEventsHandlers().size());"
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,250,private static final long serialVersionUID = -1645853847806655456L;
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,295,private static final long serialVersionUID = -5196650833828379228L;
False,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,30,mport org.apache.commons.math.ode.DormandPrince54Integrator;
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,31,import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,32,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,33,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,99,"ublic void handleStep(StepInterpolator interpolator, boolean isLast)"
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,101,private static final long serialVersionUID = -6768136169276197L;
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,102,"public void handleStep(StepInterpolator interpolator, boolean isLast)"
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,21,mport org.apache.commons.math.ode.DormandPrince853Integrator;
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,22,mport org.apache.commons.math.ode.DummyStepHandler;
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,25,mport org.apache.commons.math.ode.StepHandler;
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,26,mport org.apache.commons.math.ode.StepInterpolator;
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,27,mport org.apache.commons.math.ode.SwitchingFunction;
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,23,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,24,import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,25,import org.apache.commons.math.ode.sampling.DummyStepHandler;
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,26,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,27,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,128,ublic void testSwitchingFunctions()
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,128,public void testEvents()
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,142,witchingFunction[] functions = pb.getSwitchingFunctions();
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,142,EventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,144,"nteg.addSwitchingFunction(functions[l],"
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,144,"integ.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,147,"ssertEquals(functions.length, integ.getSwitchingFunctions().size());"
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,147,"assertEquals(functions.length, integ.getEventsHandlers().size());"
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,155,nteg.clearSwitchingFunctions();
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,156,"ssertEquals(0, integ.getSwitchingFunctions().size());"
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,155,integ.clearEventsHandlers();
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,156,"assertEquals(0, integ.getEventsHandlers().size());"
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,233,"nteg.addSwitchingFunction(stepProblem, 1.0, 1.0e-12, 1000);"
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,233,"integ.addEventHandler(stepProblem, 1.0, 1.0e-12, 1000);"
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,240,private static final long serialVersionUID = -1752092987112788459L;
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,284,private static final long serialVersionUID = 5542665697103383623L;
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,325,private static final long serialVersionUID = -5272695044664350727L;
False,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,30,mport org.apache.commons.math.ode.DormandPrince853Integrator;
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,31,import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,32,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,33,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,101,private static final long serialVersionUID = 2209212559670665268L;
False,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,23,mport org.apache.commons.math.ode.EulerIntegrator;
False,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,26,mport org.apache.commons.math.ode.SwitchingFunction;
True,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,25,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,26,import org.apache.commons.math.ode.nonstiff.EulerIntegrator;
False,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,64,witchingFunction[] functions = pb.getSwitchingFunctions();
True,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,64,EventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,66,"nteg.addSwitchingFunction(functions[l],"
True,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,66,"integ.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,30,mport org.apache.commons.math.ode.EulerIntegrator;
False,src/test/org/apache/commons/math/ode/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,31,mport org.apache.commons.math.ode.EulerStepInterpolator;
True,src/test/org/apache/commons/math/ode/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,32,import org.apache.commons.math.ode.nonstiff.EulerIntegrator;
True,src/test/org/apache/commons/math/ode/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,33,import org.apache.commons.math.ode.nonstiff.EulerStepInterpolator;
False,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,24,mport org.apache.commons.math.ode.GillIntegrator;
False,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,26,mport org.apache.commons.math.ode.StepHandler;
False,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,27,mport org.apache.commons.math.ode.StepInterpolator;
False,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,28,mport org.apache.commons.math.ode.SwitchingFunction;
True,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,25,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,26,import org.apache.commons.math.ode.nonstiff.GillIntegrator;
True,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,27,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,28,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,66,witchingFunction[] functions = pb.getSwitchingFunctions();
True,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,66,EventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,68,"nteg.addSwitchingFunction(functions[l],"
True,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,68,"integ.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,141,"nteg.addSwitchingFunction(stepProblem, 1.0, 1.0e-12, 1000);"
True,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,141,"integ.addEventHandler(stepProblem, 1.0, 1.0e-12, 1000);"
True,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,148,private static final long serialVersionUID = 1250933165809631538L;
False,src/test/org/apache/commons/math/ode/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,30,mport org.apache.commons.math.ode.GillIntegrator;
True,src/test/org/apache/commons/math/ode/GillStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,31,import org.apache.commons.math.ode.nonstiff.GillIntegrator;
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,20,import org.apache.commons.math.ode.AdaptiveStepsizeIntegrator;
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,22,mport org.apache.commons.math.ode.GraggBulirschStoerIntegrator;
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,24,mport org.apache.commons.math.ode.StepHandler;
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,25,mport org.apache.commons.math.ode.StepInterpolator;
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,26,mport org.apache.commons.math.ode.SwitchingFunction;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,24,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,25,import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,26,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,27,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,168,ublic void testSwitchingFunctions()
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,169,public void testEvents()
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,182,witchingFunction[] functions = pb.getSwitchingFunctions();
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,183,EventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,184,"nteg.addSwitchingFunction(functions[l],"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,185,"integ.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,187,"ssertEquals(functions.length, integ.getSwitchingFunctions().size());"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,188,"assertEquals(functions.length, integ.getEventsHandlers().size());"
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,195,nteg.clearSwitchingFunctions();
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,196,"ssertEquals(0, integ.getSwitchingFunctions().size());"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,196,integ.clearEventsHandlers();
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,197,"assertEquals(0, integ.getEventsHandlers().size());"
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,244,"nteg.addSwitchingFunction(stepProblem, 1.0, 1.0e-12, 1000);"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,245,"integ.addEventHandler(stepProblem, 1.0, 1.0e-12, 1000);"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,252,private static final long serialVersionUID = -8231434585284002546L;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,296,private static final long serialVersionUID = -5955452449048688985L;
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,30,mport org.apache.commons.math.ode.GraggBulirschStoerIntegrator;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,31,import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,32,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,33,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,102,private static final long serialVersionUID = -5947183291381232297L;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,25,import org.apache.commons.math.ode.DerivativeException;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,26,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,27,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,28,import org.apache.commons.math.ode.IntegratorException;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,29,import org.apache.commons.math.ode.events.EventException;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,30,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,31,import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,32,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,33,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,132,ublic void testSwitchingFunctions()
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,141,public void testEvents()
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,146,witchingFunction[] functions = pb.getSwitchingFunctions();
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,155,EventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,148,"nteg.addSwitchingFunction(functions[l],"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,157,"integ.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,151,"ssertEquals(functions.length, integ.getSwitchingFunctions().size());"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,160,"assertEquals(functions.length, integ.getEventsHandlers().size());"
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,159,nteg.clearSwitchingFunctions();
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,160,"ssertEquals(0, integ.getSwitchingFunctions().size());"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,168,integ.clearEventsHandlers();
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,169,"assertEquals(0, integ.getEventsHandlers().size());"
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,164,ublic void testSwitchingFunctionsError()
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,173,public void testEventsErrors()
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,179,nteg.addSwitchingFunction(new SwitchingFunction() {
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,188,integ.addEventHandler(new EventHandler() {
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,181,eturn SwitchingFunction.CONTINUE;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,190,return EventHandler.CONTINUE;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,183,"ublic double g(double t, double[] y) throws SwitchException {"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,192,"public double g(double t, double[] y) throws EventException {"
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,187,"hrow new SwitchException(""Evaluation failed for argument = {0}"","
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,196,"throw new EventException(""Evaluation failed for argument = {0}"","
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,210,ublic void testSwitchingFunctionsNoConvergence()
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,219,public void testEventsNoConvergence()
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,225,nteg.addSwitchingFunction(new SwitchingFunction() {
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,234,integ.addEventHandler(new EventHandler() {
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,227,eturn SwitchingFunction.CONTINUE;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,236,return EventHandler.CONTINUE;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,343,private static final long serialVersionUID = 3200246026175251943L;
False,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,30,mport org.apache.commons.math.ode.HighamHall54Integrator;
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,31,import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,32,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,33,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,101,private static final long serialVersionUID = 9111679755950880352L;
False,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,25,mport org.apache.commons.math.ode.MidpointIntegrator;
False,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,26,mport org.apache.commons.math.ode.SwitchingFunction;
True,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,25,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,26,import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;
False,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,63,witchingFunction[] functions = pb.getSwitchingFunctions();
True,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,63,EventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,65,"nteg.addSwitchingFunction(functions[l],"
True,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,65,"integ.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,31,mport org.apache.commons.math.ode.MidpointIntegrator;
True,src/test/org/apache/commons/math/ode/MidpointStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,31,import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;
False,src/test/org/apache/commons/math/ode/StepProblem.java,src/test/org/apache/commons/math/ode/nonstiff/StepProblem.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/StepProblem.java,src/test/org/apache/commons/math/ode/nonstiff/StepProblem.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/StepProblem.java,src/test/org/apache/commons/math/ode/nonstiff/StepProblem.java,21,mport org.apache.commons.math.ode.SwitchingFunction;
True,src/test/org/apache/commons/math/ode/StepProblem.java,src/test/org/apache/commons/math/ode/nonstiff/StepProblem.java,21,import org.apache.commons.math.ode.events.EventHandler;
False,src/test/org/apache/commons/math/ode/StepProblem.java,src/test/org/apache/commons/math/ode/nonstiff/StepProblem.java,25,"mplements FirstOrderDifferentialEquations, SwitchingFunction {"
True,src/test/org/apache/commons/math/ode/StepProblem.java,src/test/org/apache/commons/math/ode/nonstiff/StepProblem.java,25,"implements FirstOrderDifferentialEquations, EventHandler {"
False,src/test/org/apache/commons/math/ode/TestProblem1.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem1.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/TestProblem1.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem1.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/TestProblem1.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem1.java,34,lass TestProblem1
True,src/test/org/apache/commons/math/ode/TestProblem1.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem1.java,34,public class TestProblem1
False,src/test/org/apache/commons/math/ode/TestProblem2.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem2.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/TestProblem2.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem2.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/TestProblem2.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem2.java,35,lass TestProblem2
True,src/test/org/apache/commons/math/ode/TestProblem2.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem2.java,35,public class TestProblem2
False,src/test/org/apache/commons/math/ode/TestProblem3.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem3.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/TestProblem3.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem3.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/TestProblem3.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem3.java,37,lass TestProblem3
True,src/test/org/apache/commons/math/ode/TestProblem3.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem3.java,37,public class TestProblem3
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,20,mport org.apache.commons.math.ode.SwitchingFunction;
True,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,20,import org.apache.commons.math.ode.events.EventHandler;
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,37,lass TestProblem4
True,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,37,public class TestProblem4
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,79,ublic SwitchingFunction[] getSwitchingFunctions() {
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,80,"eturn new SwitchingFunction[] { new Bounce(), new Stop() };"
True,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,79,public EventHandler[] getEventsHandlers() {
True,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,80,"return new EventHandler[] { new Bounce(), new Stop() };"
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,96,rivate static class Bounce implements SwitchingFunction {
True,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,96,private static class Bounce implements EventHandler {
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,112,eturn SwitchingFunction.RESET_STATE;
True,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,112,return EventHandler.RESET_STATE;
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,121,rivate static class Stop implements SwitchingFunction {
True,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,121,private static class Stop implements EventHandler {
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,133,eturn SwitchingFunction.STOP;
True,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,133,return EventHandler.STOP;
False,src/test/org/apache/commons/math/ode/TestProblem5.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem5.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/TestProblem5.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem5.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/TestProblem5.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem5.java,25,lass TestProblem5
True,src/test/org/apache/commons/math/ode/TestProblem5.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem5.java,25,public class TestProblem5
False,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,21,mport org.apache.commons.math.ode.SwitchingFunction;
True,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,21,import org.apache.commons.math.ode.events.EventHandler;
False,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,27,bstract class TestProblemAbstract
True,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,27,public abstract class TestProblemAbstract
False,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,152, Get the switching functions.
False,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,153, @return switching functions
False,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,155,ublic SwitchingFunction[] getSwitchingFunctions() {
False,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,156,eturn new SwitchingFunction[0];
True,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,152,* Get the events handlers.
True,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,153,* @return events handlers   */
True,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,154,public EventHandler[] getEventsHandlers() {
True,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,155,return new EventHandler[0];
False,src/test/org/apache/commons/math/ode/TestProblemFactory.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemFactory.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/TestProblemFactory.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemFactory.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/TestProblemHandler.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/TestProblemHandler.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/TestProblemHandler.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java,21,mport org.apache.commons.math.ode.StepHandler;
False,src/test/org/apache/commons/math/ode/TestProblemHandler.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java,22,mport org.apache.commons.math.ode.StepInterpolator;
True,src/test/org/apache/commons/math/ode/TestProblemHandler.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java,21,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/test/org/apache/commons/math/ode/TestProblemHandler.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java,22,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/TestProblemHandler.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java,23,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/test/org/apache/commons/math/ode/TestProblemHandler.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java,31,** Associated problem. */
True,src/test/org/apache/commons/math/ode/TestProblemHandler.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java,32,/** Serializable version identifier. */
True,src/test/org/apache/commons/math/ode/TestProblemHandler.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java,33,private static final long serialVersionUID = 3589490480549900461L;
True,src/test/org/apache/commons/math/ode/TestProblemHandler.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java,35,/** Associated problem. */
False,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,25,mport org.apache.commons.math.ode.StepHandler;
False,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,26,mport org.apache.commons.math.ode.StepInterpolator;
False,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,27,mport org.apache.commons.math.ode.SwitchingFunction;
False,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,28,mport org.apache.commons.math.ode.ThreeEighthesIntegrator;
True,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,25,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,26,import org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator;
True,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,27,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,28,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,66,witchingFunction[] functions = pb.getSwitchingFunctions();
True,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,66,EventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,68,"nteg.addSwitchingFunction(functions[l],"
True,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,68,"integ.addEventHandler(functions[l],"
True,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,139,private static final long serialVersionUID = 4400497468419540899L;
False,src/test/org/apache/commons/math/ode/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,18,package org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,31,mport org.apache.commons.math.ode.ThreeEighthesIntegrator;
True,src/test/org/apache/commons/math/ode/ThreeEighthesStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,31,import org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator;
False,src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,18,package org.apache.commons.math.ode.sampling;
True,src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,27,import org.apache.commons.math.ode.DerivativeException;
True,src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,28,import org.apache.commons.math.ode.IntegratorException;
True,src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,29,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,30,import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
False,src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,154,ssertTrue(bos.size () > 250);
False,src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,155,ssertTrue(bos.size () < 300);
True,src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,159,assertTrue(bos.size () > 300);
True,src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,160,assertTrue(bos.size () < 350);
False,src/test/org/apache/commons/math/ode/StepNormalizerTest.java,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,18,ackage org.apache.commons.math.ode;
True,src/test/org/apache/commons/math/ode/StepNormalizerTest.java,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,18,package org.apache.commons.math.ode.sampling;
False,src/test/org/apache/commons/math/ode/StepNormalizerTest.java,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,21,mport org.apache.commons.math.ode.DormandPrince54Integrator;
False,src/test/org/apache/commons/math/ode/StepNormalizerTest.java,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,23,mport org.apache.commons.math.ode.FixedStepHandler;
False,src/test/org/apache/commons/math/ode/StepNormalizerTest.java,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,25,mport org.apache.commons.math.ode.StepNormalizer;
True,src/test/org/apache/commons/math/ode/StepNormalizerTest.java,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,23,import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
True,src/test/org/apache/commons/math/ode/StepNormalizerTest.java,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,24,import org.apache.commons.math.ode.nonstiff.TestProblem3;
True,src/test/org/apache/commons/math/ode/StepNormalizerTest.java,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,25,import org.apache.commons.math.ode.sampling.FixedStepHandler;
True,src/test/org/apache/commons/math/ode/StepNormalizerTest.java,src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,26,import org.apache.commons.math.ode.sampling.StepNormalizer;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,25," @version $Revision: 592121 $ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,25,"* @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug"
False,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,31," @version $Revision: 566833 $ $Date: 2007-08-16 13:36:33 -0700 (Thu, 16 Aug 2007) $"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,31,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,30," @version $Revision: 566833 $ $Date: 2007-08-16 13:36:33 -0700 (Thu, 16 Aug 2007) $"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,30,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,21," @version $Revision: 592121 $ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug"
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,21,"* @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug"

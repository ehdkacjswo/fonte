is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,5,* reserved.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,9,* are met:
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,17,*    distribution.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,56,import java.util.NoSuchElementException;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,59,* An array of double primitives which can expand as needed.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,61,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,63,public class ExpandableDoubleArray {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,65,// This is the internal storage array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,66,private double[] internalArray;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,68,// Number of elements in the array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,69,private int numElements = 0;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,71,// The initial capacity of the array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,72,// Initial capacity is not exposed as a property as it is only meaningful
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,73,// when passed to a constructor.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,74,private int initialCapacity = 16;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,76,"// The expand factor of the array.  When the array need to be expanded, the new array size"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,77,// will be internalArray.length * expandFactor
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,78,private float expansionFactor = 2.0f;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,81,* Create an expandable double array with the
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,82,* default initial capactiy of 16 and an expansion factor of 2.00
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,84,public ExpandableDoubleArray() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,85,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,89,* Create an expandable double array with the
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,90,* specified initial capacity and the defult expansion factor of 2.00
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,92,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,94,public ExpandableDoubleArray(int initialCapacity) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,95,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,96,internalArray = new double[this.initialCapacity];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,100,* Create an expandable double array with the
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,101,* specificed initial capacity and expand factor.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,103,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,104,* @param expansionFactor the array will be expanded based on this parameter
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,106,"public ExpandableDoubleArray(int initialCapacity, float expansionFactor) {"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,107,setInitialCapacity( initialCapacity );
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,108,setExpansionFactor(expansionFactor);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,109,this.initialCapacity = initialCapacity;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,110,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,114,* The expansion factor controls the size of a new aray when an array needs to be expanded.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,115,"* When a value is inserted into a full array, the new array size is calculated as the"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,116,* current array size times this expansion factor.  The default expansion factor is 2.0
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,118,* @return the expansion factor of this expandable double array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,120,public float getExpansionFactor() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,121,return expansionFactor;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,125,* Sets the expansion factor for this expandable double array.  The expansion factor will
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,126,* affect the next expansion of this array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,128,* @param expansionFactor the expansion factor of this array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,130,public void setExpansionFactor(float expansionFactor) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,132,"// The expansion factor *must* be larger than 1.0, otherwise we'll have an inconsistency"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,133,// upon expansion we'll start shrinking which will lead to ArrayOutOfBound exceptions.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,134,if (expansionFactor > 1.0) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,135,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,136,} else {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,137,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,138,"""The expansion factor must be a number greater than"" + ""1.0"");"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,143,* Sets the initial capacity
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,145,* @param initialCapacity
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,147,public void setInitialCapacity(int initialCapacity) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,148,if (initialCapacity > 0) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,149,this.initialCapacity = initialCapacity;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,150,} else {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,151,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,152,"""The initial capacity supplied: """
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,153,+ initialCapacity
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,154,"+ ""must be a positive integer"");"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,159,* Returns the internal storage array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,161,* @return the internal storage array used by this object
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,163,public double[] getValues() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,164,return (internalArray);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,168,* Returns the number of elements currently in the array.  Please note
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,169,* that this is different from the length of the internal storage array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,170,* @return number of elements
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,172,public int getNumElements() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,173,return (numElements);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,177,* Returns the element at the specified index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,179,* @param index index to fetch a value from
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,180,* @return value stored at the specified index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,182,public double getElement(int index) throws NoSuchElementException {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,183,double value = Double.NaN;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,184,if (index >= numElements) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,185,throw new NoSuchElementException(
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,186,"""The index specified: """
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,187,+ index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,188,"+ "" is larger than the """
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,189,"+ ""current number of elements"");"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,190,} else if (index >= 0) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,191,value = internalArray[index];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,192,} else {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,193,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,194,"""Elements cannot be retrieved from negative array "" + ""index"");"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,196,return value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,200,* Sets the element at the specified index.  This method will expand the internal storage array to
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,201,* accomodate the insertion of a value at an index beyond the current capacity.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,202,* @param index index to store a value in
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,203,* @param value value to store at the specified index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,205,"public synchronized void setElement(int index, double value) {"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,207,if( index < 0 ) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,208,"throw new IllegalArgumentException( ""Cannot set an element at a negative index"");"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,211,if (index >= internalArray.length) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,212,expandTo(index + 1);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,213,numElements = index + 1;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,215,internalArray[index] = value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,219,* Expands the internal storage array to the specified size.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,221,* @param size Size of the new internal storage array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,223,private synchronized void expandTo(int size) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,224,double[] tempArray = new double[size];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,225,// Copy and swap
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,226,"System.arraycopy(internalArray,0,tempArray,0,internalArray.length);"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,227,internalArray = tempArray;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,231,* Expands the internal storage array using the expansion factor
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,233,private synchronized void expand() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,235,"// notice the use of Math.ceil(), this gaurantees that we will always have an array of at least"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,236,// currentSize + 1.   Assume that the current initial capacity is 1 and the expansion factor
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,237,// is 1.000000000000000001.  The newly calculated size will be rounded up to 2 after
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,238,// the multiplication is performed.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,239,int newSize = (int) Math.ceil(internalArray.length * expansionFactor);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,240,double[] tempArray =
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,241,new double[newSize];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,243,// Copy and swap
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,244,"System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,245,internalArray = tempArray;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,249,* Adds an element to the end of this expandable array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,251,* @return value to be added to end of array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,253,public synchronized void addElement(double value) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,254,numElements++;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,255,if (numElements > internalArray.length) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,256,expand();
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,258,internalArray[numElements - 1] = value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,262,* Notice the package scope on this method.   This method is simply here for the JUnit
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,263,"* test, it allows us check if the expansion is working properly after a number of expansions.  This"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,264,* is not meant to be a part of the public interface of this class.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,266,* @return the length of the internal storage array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,268,int getInternalLength() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,269,return (internalArray.length);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,273,"* Clear the array, reset the size to the initialCapacity and the number of elements to zero"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,275,public synchronized void clear() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,276,numElements = 0;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,277,internalArray = new double[initialCapacity];
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,5,* reserved.
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,9,* are met:
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,54,package org.apache.commons.math;
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,56,import java.util.NoSuchElementException;
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,58,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,61,* This class contains test cases for the ExpandableDoubleArray.
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,63,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,65,public class ExpandableDoubleArrayTest extends TestCase {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,67,public ExpandableDoubleArrayTest(String name) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,68,super( name );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,71,/** TEST NORMAL OPERATIONS **/
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,73,public void testAdd1000() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,75,ExpandableDoubleArray exDoubleArr = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,77,for( int i = 0; i < 1000; i++) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,78,exDoubleArr.addElement( i );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,81,"assertTrue(""Number of elements should be equal to 1000 after adding 1000 values"","
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,82,exDoubleArr.getNumElements() == 1000);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,84,"assertTrue(""Internal Storage length should be 1024 if we started out with initial capacity of "" +"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,86,exDoubleArr.getInternalLength() == 1024);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,88,"assertTrue(""The element at the 56th index should be 56"","
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,89,exDoubleArr.getElement(56) == 56 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,93,public void testWithInitialCapacity() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,94,ExpandableDoubleArray exDoubleArr = new ExpandableDoubleArray(2);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,96,"assertTrue(""Initial internal length should be 2"", exDoubleArr.getInternalLength() == 2);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,97,"assertTrue(""Initial number of elements should be 0"", exDoubleArr.getNumElements() == 0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,99,"int iterations = (int) Math.pow(2.0, 15.0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,101,for( int i = 0; i < iterations; i++) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,102,exDoubleArr.addElement( i );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,105,"assertTrue(""Number of elements should be equal to 2^15"", exDoubleArr.getNumElements() == (int) Math.pow(2.0, 15.0));"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,106,"assertTrue(""Internal length should be 2^15"", exDoubleArr.getInternalLength() == (int) Math.pow(2.0, 15.0));"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,108,exDoubleArr.addElement( 2.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,110,"assertTrue(""Number of elements should be equals to 2^15 + 1"","
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,111,"exDoubleArr.getNumElements() == ( (int) Math.pow(2.0, 15.0) + 1 ) );"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,112,"assertTrue(""Internal length should be 2^16"", exDoubleArr.getInternalLength() == (int) Math.pow(2.0, 16.0));"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,117,public void testWithInitialCapacitAndExpansionFactor() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,118,"ExpandableDoubleArray exDoubleArr = new ExpandableDoubleArray(3, 3.0f);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,120,"assertTrue(""Initial internal length should be 3"", exDoubleArr.getInternalLength() == 3);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,121,"assertTrue(""Initial number of elements should be 0"", exDoubleArr.getNumElements() == 0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,123,"int iterations = (int) Math.pow(3.0, 7.0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,125,for( int i = 0; i < iterations; i++) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,126,exDoubleArr.addElement( i );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,129,"assertTrue(""Number of elements should be equal to 3^7"", exDoubleArr.getNumElements() == (int) Math.pow(3.0, 7.0));"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,130,"assertTrue(""Internal length should be 3^7"", exDoubleArr.getInternalLength() == (int) Math.pow(3.0, 7.0));"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,132,exDoubleArr.addElement( 2.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,134,"assertTrue(""Number of elements should be equals to 3^7 + 1"","
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,135,"exDoubleArr.getNumElements() == ( (int) Math.pow(3.0, 7.0) + 1 ) );"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,136,"assertTrue(""Internal length should be 3^8"", exDoubleArr.getInternalLength() == (int) Math.pow(3.0, 8.0));"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,138,"assertTrue(""Expansion factor should equal 3.0"", exDoubleArr.getExpansionFactor() == 3.0f);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,141,public void testGetValues() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,143,ExpandableDoubleArray eDA = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,145,"double[] controlArray = {2.0, 4.0, 6.0};"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,147,eDA.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,148,eDA.addElement(4.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,149,eDA.addElement(6.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,150,double[] testArray = eDA.getValues();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,152,for( int i = 0; i < eDA.getNumElements(); i++) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,153,"assertTrue( ""The testArray values should equal the controlArray values, index i: "" + i +"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,154,""" does not match"", testArray[i] == controlArray[i]);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,159,public void testSetElementArbitraryExpansion() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,161,ExpandableDoubleArray eDA = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,163,"double[] controlArray = {2.0, 4.0, 6.0};"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,165,eDA.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,166,eDA.addElement(4.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,167,eDA.addElement(6.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,168,"eDA.setElement(1, 3.0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,170,// Expand the array arbitrarily to 1000 items
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,171,"eDA.setElement(1000, 3.4);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,173,"assertTrue( ""The length of the internal array should now be 1001, it isn't"", eDA.getInternalLength() == 1001);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,174,"assertTrue( ""The number of elements should now be 1001, it isn't"", eDA.getNumElements() == 1001);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,176,"assertTrue( ""Uninitialized Elements are default value of 0.0, index 766 wasn't"","
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,177,eDA.getElement( 760 ) == 0.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,179,"assertTrue( ""The 1000th index should be 3.4, it isn't"", eDA.getElement(1000) == 3.4);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,180,"assertTrue( ""The 0th index should be 2.0, it isn't"", eDA.getElement(0) == 2.0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,184,/** TEST ERROR CONDITIONS **/
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,186,public void testIllegalInitialCapacity() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,187,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,188,"ExpandableDoubleArray eDA = new ExpandableDoubleArray(-3, 2.0f);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,189,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,192,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,194,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,195,"ExpandableDoubleArray eDA = new ExpandableDoubleArray(0, 2.0f);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,196,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,197,"""the initialCapacity was ZERO if it didn't then"" +"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,198,""" the range checking of initialCapacity is not working properly"" );"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,199,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,203,public void testIllegalExpansionFactor() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,204,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,205,"ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.66f);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,206,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,208,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,210,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,211,"ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.0f);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,212,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,213,"""the expansionFactor for 0.0"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,214,} catch( IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,217,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,218,"ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, -4.35f);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,219,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,220,"""the expansionFactor for -4.35"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,221,} catch( IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,225,public void testGetOutOfBounds() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,227,ExpandableDoubleArray eDA = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,228,eDA.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,229,eDA.addElement(3.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,231,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,232,eDA.getElement(0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,233,eDA.getElement(1);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,234,} catch( NoSuchElementException nsee ) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,235,"fail( ""There are values for index 0 and 1, this should not have thrown an exception"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,238,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,239,eDA.getElement(2);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,240,"fail( ""There are 2 elements in the array, you asked for index 2 implying that there are 3.  "" +"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,242,} catch( NoSuchElementException nsee ) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,245,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,246,eDA.getElement(-234);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,247,"fail( ""You tried to retrieve a negative index, this should have thrown an exception. "" );"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,248,} catch( IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,252,public void testSetOutOfBounds() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,254,ExpandableDoubleArray eDA = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,256,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,257,"eDA.setElement( -3, 3.4 );"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,258,"fail( ""You tried to set an element with a negative index, thisshould have thrown an error"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,259,} catch( IllegalArgumentException iae ) {

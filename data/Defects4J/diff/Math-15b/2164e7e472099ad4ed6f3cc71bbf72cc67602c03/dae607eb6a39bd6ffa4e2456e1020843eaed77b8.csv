is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,23,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,24,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,21, Cauchy Distribution.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,28,* Implementation of the Cauchy distribution.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,23, <p>
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,24, References:
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,25, <ul>
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,26,"  <li><a href=""http://mathworld.wolfram.com/CauchyDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,27,   Cauchy Distribution</a>
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,28,  </li>
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,29, </ul>
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,30, </p>
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,32, @since 1.1
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,30,"* @see <a href=""http://en.wikipedia.org/wiki/Cauchy_distribution"">Cauchy distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,31,"* @see <a href=""http://mathworld.wolfram.com/CauchyDistribution.html"">Cauchy Distribution (MathWorld)</a>"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,32,* @since 1.1 (changed to concrete class in 3.0)
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,35,ublic interface CauchyDistribution extends ContinuousDistribution {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,35,public class CauchyDistribution extends AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,36,implements Serializable {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,38,* Default inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,39,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,41,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,42,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,43,private static final long serialVersionUID = 8589540077390120676L;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,44,/** The median of this distribution. */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,45,private final double median;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,46,/** The scale of this distribution. */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,47,private final double scale;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,48,/** Inverse cumulative probability accuracy */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,49,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,52,* Creates a Cauchy distribution with the median equal to zero and scale
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,53,* equal to one.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,55,public CauchyDistribution() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,56,"this(0, 1);"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,60,* Creates a Cauchy distribution using the given median and scale.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,62,* @param median Median for this distribution.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,63,* @param scale Scale parameter for this distribution.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,65,"public CauchyDistribution(double median, double scale) {"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,66,"this(median, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,70,* Creates a Cauchy distribution using the given median and scale.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,72,* @param median Median for this distribution.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,73,* @param scale Scale parameter for this distribution.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,74,* @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,75,* cumulative probability estimates
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,76,* (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,77,* @throws NotStrictlyPositiveException if {@code scale <= 0}.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,78,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,80,"public CauchyDistribution(double median, double scale,"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,81,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,82,if (scale <= 0) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,83,"throw new NotStrictlyPositiveException(LocalizedFormats.SCALE, scale);"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,85,this.scale = scale;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,86,this.median = median;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,87,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,90,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,91,public double cumulativeProbability(double x) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,92,return 0.5 + (FastMath.atan((x - median) / scale) / FastMath.PI);
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,41,ouble getMedian();
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,100,public double getMedian() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,101,return median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,48,ouble getScale();
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,109,public double getScale() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,110,return scale;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,113,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,114,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,115,final double dev = x - median;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,116,return (1 / FastMath.PI) * (scale / (dev * dev + scale * scale));
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,120,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,122,* Returns {@code Double.NEGATIVE_INFINITY} when {@code p == 0}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,123,* and {@code Double.POSITIVE_INFINITY} when {@code p == 1}.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,125,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,126,public double inverseCumulativeProbability(double p) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,127,double ret;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,128,if (p < 0 || p > 1) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,129,"throw new OutOfRangeException(p, 0, 1);"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,130,} else if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,131,ret = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,132,} else  if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,133,ret = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,134,} else {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,135,ret = median + scale * FastMath.tan(FastMath.PI * (p - .5));
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,137,return ret;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,140,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,141,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,142,protected double getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,143,double ret;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,145,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,146,ret = -Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,147,} else {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,148,ret = median;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,151,return ret;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,154,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,155,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,156,protected double getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,157,double ret;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,159,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,160,ret = median;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,161,} else {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,162,ret = Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,165,return ret;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,168,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,169,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,170,protected double getInitialDomain(double p) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,171,double ret;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,173,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,174,ret = median - scale;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,175,} else if (p > 0.5) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,176,ret = median + scale;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,177,} else {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,178,ret = median;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,181,return ret;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,184,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,185,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,186,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,187,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,191,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,193,* The lower bound of the support is always negative infinity no matter
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,194,* the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,196,* @return lower bound of the support (always Double.NEGATIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,198,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,199,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,200,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,204,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,206,* The upper bound of the support is always positive infinity no matter
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,207,* the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,209,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,211,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,212,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,213,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,217,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,219,* The mean is always undefined no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,221,* @return mean (always Double.NaN)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,223,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,224,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,225,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,229,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,231,* The variance is always undefined no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,233,* @return variance (always Double.NaN)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,235,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,236,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,237,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,240,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,241,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,242,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,243,return false;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,246,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,247,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,248,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,249,return false;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,18,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,22,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,23,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,24,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,25,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,28, Default implementation of
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,29, {@link org.apache.commons.math.distribution.CauchyDistribution}.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,31, @since 1.1
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,32, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,34,ublic class CauchyDistributionImpl extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,35,"mplements CauchyDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,37, Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,38, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,40,ublic static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,41,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,42,rivate static final long serialVersionUID = 8589540077390120676L;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,43,** The median of this distribution. */
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,44,rivate final double median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,45,** The scale of this distribution. */
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,46,rivate final double scale;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,47,** Inverse cumulative probability accuracy */
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,48,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,51, Creates cauchy distribution with the medain equal to zero and scale
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,52, equal to one.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,54,ublic CauchyDistributionImpl() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,55,"his(0, 1);"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,59, Create a cauchy distribution using the given median and scale.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,61, @param median Median for this distribution.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,62, @param scale Scale parameter for this distribution.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,64,"ublic CauchyDistributionImpl(double median, double scale) {"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,65,"his(median, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,69, Create a cauchy distribution using the given median and scale.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,71, @param median Median for this distribution.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,72, @param scale Scale parameter for this distribution.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,73, @param inverseCumAccuracy Maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,74, cumulative probability estimates
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,75, (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,76, @throws NotStrictlyPositiveException if {@code s <= 0}.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,77, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,79,"ublic CauchyDistributionImpl(double median, double scale,"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,80,ouble inverseCumAccuracy) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,81,f (scale <= 0) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,82,"hrow new NotStrictlyPositiveException(LocalizedFormats.SCALE, scale);"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,84,his.scale = scale;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,85,his.median = median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,86,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,90, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,92,ublic double cumulativeProbability(double x) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,93,eturn 0.5 + (FastMath.atan((x - median) / scale) / FastMath.PI);
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,97, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,99,ublic double getMedian() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,100,eturn median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,104, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,106,ublic double getScale() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,107,eturn scale;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,111, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,113,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,114,inal double dev = x - median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,115,eturn (1 / FastMath.PI) * (scale / (dev * dev + scale * scale));
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,119, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,121, It will return {@code Double.NEGATIVE_INFINITY} when {@code p = 0}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,122, and {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,124,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,125,ublic double inverseCumulativeProbability(double p) throws OutOfRangeException {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,126,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,127,f (p < 0 || p > 1) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,128,"hrow new OutOfRangeException(p, 0, 1);"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,129, else if (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,130,et = Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,131, else  if (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,132,et = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,133, else {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,134,et = median + scale * FastMath.tan(FastMath.PI * (p - .5));
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,136,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,140," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,141, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,142, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,144, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,145," @return domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,147,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,148,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,149,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,151,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,152,et = -Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,153, else {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,154,et = median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,157,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,161," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,162, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,163, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,165, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,166," @return domain value lower bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,168,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,169,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,170,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,172,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,173,et = median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,174, else {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,175,et = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,178,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,182," Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,183, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,184, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,186, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,187, @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,189,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,190,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,191,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,193,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,194,et = median - scale;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,195, else if (p > 0.5) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,196,et = median + scale;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,197, else {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,198,et = median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,201,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,205, Return the absolute accuracy setting of the solver used to estimate
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,206, inverse cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,208, @return the solver absolute accuracy
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,209, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,211,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,212,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,213,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,217, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,219, The lower bound of the support is always negative infinity no matter
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,220, the parameters.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,222, @return lower bound of the support (always Double.NEGATIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,224,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,225,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,226,eturn Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,230, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,232, The upper bound of the support is always positive infinity no matter
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,233, the parameters.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,235, @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,237,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,238,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,239,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,243, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,245, The mean is always undefined no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,247, @return mean (always Double.NaN)
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,249,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,250,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,251,eturn Double.NaN;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,255, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,257, The variance is always undefined no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,259, @return variance (always Double.NaN)
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,261,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,262,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,263,eturn Double.NaN;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,267, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,269,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,270,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,271,eturn false;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,275, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,277,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,278,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,279,eturn false;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,29,mport org.apache.commons.math.distribution.CauchyDistributionImpl;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,29,import org.apache.commons.math.distribution.CauchyDistribution;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,630, Generates a random value from the {@link CauchyDistributionImpl Cauchy Distribution}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,630,* Generates a random value from the {@link CauchyDistribution Cauchy Distribution}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,640,"eturn nextInversionDeviate(new CauchyDistributionImpl(median, scale));"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,640,"return nextInversionDeviate(new CauchyDistribution(median, scale));"
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,46,"eturn new CauchyDistributionImpl(1.2, 2.1);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,46,"return new CauchyDistribution(1.2, 2.1);"
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,96,"ew CauchyDistributionImpl(0, 0);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,96,"new CauchyDistribution(0, 0);"
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,102,"ew CauchyDistributionImpl(0, -1);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,102,"new CauchyDistribution(0, -1);"
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,113,"ist = new CauchyDistributionImpl(10.2, 0.15);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,113,"dist = new CauchyDistribution(10.2, 0.15);"
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,117,"ist = new CauchyDistributionImpl(23.12, 2.12);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,117,"dist = new CauchyDistribution(23.12, 2.12);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,31,mport org.apache.commons.math.distribution.CauchyDistributionImpl;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,31,import org.apache.commons.math.distribution.CauchyDistribution;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,875,"ouble[] quartiles = TestUtils.getDistributionQuartiles(new CauchyDistributionImpl(1.2, 2.1));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,875,"double[] quartiles = TestUtils.getDistributionQuartiles(new CauchyDistribution(1.2, 2.1));"

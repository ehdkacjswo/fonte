is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,237,inal double xk = xval[k];
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,238,inal double yk = yval[k];
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,239,ouble dist;
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,240,f (k < i) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,241,ist = (x - xk);
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,242, else {
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,243,ist = (xk - x);
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,245,inal double w = tricube(dist * denom) * robustnessWeights[k];
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,246,inal double xkw = xk * w;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,237,final double xk   = xval[k];
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,238,final double yk   = yval[k];
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,239,final double dist = (k < i) ? x - xk : xk - x;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,240,final double w    = tricube(dist * denom) * robustnessWeights[k];
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,241,final double xkw  = xk * w;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,237,[0] *= (-x[i]);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,237,c[0] *= -x[i];
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,247, *= (x[i] - x[j]);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,247,d *= x[i] - x[j];
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,242,ouble dx = (x2 - x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,242,double dx = x2 - x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,120,f (f.value(min) == 0.0) { return min; }
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,121,f (f.value(max) == 0.0) { return max; }
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,122,f (f.value(initial) == 0.0) { return initial; }
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,120,if (f.value(min) == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,121,return min;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,123,if (f.value(max) == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,124,return max;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,126,if (f.value(initial) == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,127,return initial;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,302,"omplex N = new Complex(n, 0.0);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,303,"omplex N1 = new Complex((n-1), 0.0);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,308,"Complex N  = new Complex(n,     0.0);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,309,"Complex N1 = new Complex(n - 1, 0.0);"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,184,eturn ((f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0));
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,184,return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,120,eturn (Math.abs(imaginary) * Math.sqrt(1 + q*q));
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,120,return Math.abs(imaginary) * Math.sqrt(1 + q * q);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,126,eturn (Math.abs(real) * Math.sqrt(1 + q*q));
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,126,return Math.abs(real) * Math.sqrt(1 + q * q);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,647,eturn (getColumnDimension() == getRowDimension());
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,647,return getColumnDimension() == getRowDimension();
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,639,eturn (getColumnDimension() == getRowDimension());
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,639,return getColumnDimension() == getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,951,or (int i = 0; i < this.getRowDimension(); i++) {
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,951,for (int i = 0; i < getRowDimension(); i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,963,eturn (this.getColumnDimension() == this.getRowDimension());
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,963,return getColumnDimension() == getRowDimension();
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,152,0Positive = (g0 >= 0);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,152,g0Positive = g0 >= 0;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,191,ncreasing = (gb >= ga);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,191,increasing = gb >= ga;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,291,0Positive = (g0 >= 0);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,291,g0Positive = g0 >= 0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,194,inal boolean forward = (t > t0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,194,final boolean forward = t > t0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,212,inal boolean forward = (t > t0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,212,final boolean forward = t > t0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,202,inal boolean forward = (t > t0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,202,final boolean forward = t > t0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,563,inal boolean forward = (t > t0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,563,final boolean forward = t > t0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,103,inal boolean forward = (t > t0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,103,final boolean forward = t > t0;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,125,orward = (interpolator.getCurrentTime() >= lastTime);
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,125,forward = interpolator.getCurrentTime() >= lastTime;
False,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,244, ^= (y >>> 11);
True,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,244,y ^=  y >>> 11;
False,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,247, ^= (y >>> 18);
True,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,247,y ^=  y >>> 18;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,433,ccept = (w <= x * Math.log(mu) -
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,434,athUtils.factorialLog((int) (mu + x)) /
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,435,uFactorialLog);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,433,accept = w <= x * Math.log(mu) -
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,434,MathUtils.factorialLog((int) (mu + x)) / muFactorialLog;
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,560,eturn (o1.compareTo((T) o2));
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,560,return o1.compareTo((T) o2);
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,168,"eturn (MathUtils.equals(stat.getResult(), this.getResult()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,169,"athUtils.equals(stat.getN(), this.getN()));"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,168,"return MathUtils.equals(stat.getResult(), this.getResult()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,169,"MathUtils.equals(stat.getN(), this.getN());"
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,96,"his(prototypeStatistics, (prototypeStatistics == null ? null :"
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,97,ew SummaryStatistics(prototypeStatistics)));
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,96,"this(prototypeStatistics,"
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,97,prototypeStatistics == null ? null : new SummaryStatistics(prototypeStatistics));
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,121,ummaryStatistics initialStatistics) {
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,122,his.statisticsPrototype = ((prototypeStatistics == null) ?
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,123,ew SummaryStatistics() : prototypeStatistics);
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,124,his.statistics = ((initialStatistics == null) ?
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,125,ew SummaryStatistics() : initialStatistics);
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,121,SummaryStatistics initialStatistics) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,122,this.statisticsPrototype =
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,123,(prototypeStatistics == null) ? new SummaryStatistics() : prototypeStatistics;
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,124,this.statistics =
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,125,(initialStatistics == null) ? new SummaryStatistics() : initialStatistics;
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,403,eturn (super.equals(stat) &&
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,404,ggregateStatistics.equals(stat.aggregateStatistics));
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,403,return super.equals(stat) &&
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,404,aggregateStatistics.equals(stat.aggregateStatistics);
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,211,eturn (stdDev);
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,211,return stdDev;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,372,"eturn (MathUtils.equals(stat.getGeometricMean(),"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,373,his.getGeometricMean()) &&
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,374,"athUtils.equals(stat.getMax(), this.getMax()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,375,"athUtils.equals(stat.getMean(),this.getMean()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,376,"athUtils.equals(stat.getMin(),this.getMin()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,377,"athUtils.equals(stat.getN(), this.getN()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,378,"athUtils.equals(stat.getSum(), this.getSum()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,379,"athUtils.equals(stat.getSumSq(),this.getSumSq()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,380,"athUtils.equals(stat.getSumLog(),this.getSumLog()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,381,tat.getCovariance().equals(this.getCovariance()));
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,372,"return MathUtils.equals(stat.getGeometricMean(), getGeometricMean()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,373,"MathUtils.equals(stat.getMax(),           getMax())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,374,"MathUtils.equals(stat.getMean(),          getMean())          &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,375,"MathUtils.equals(stat.getMin(),           getMin())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,376,"MathUtils.equals(stat.getN(),             getN())             &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,377,"MathUtils.equals(stat.getSum(),           getSum())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,378,"MathUtils.equals(stat.getSumSq(),         getSumSq())         &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,379,"MathUtils.equals(stat.getSumLog(),        getSumLog())        &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,380,stat.getCovariance().equals( getCovariance());
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,138,"eturn (MathUtils.equals(stat.getMax(), this.getMax()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,139,"athUtils.equals(stat.getMean(),this.getMean()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,140,"athUtils.equals(stat.getMin(),this.getMin()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,141,"athUtils.equals(stat.getN(), this.getN()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,142,"athUtils.equals(stat.getSum(), this.getSum()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,143,"athUtils.equals(stat.getVariance(),this.getVariance()));"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,138,"return MathUtils.equals(stat.getMax(),      getMax())  &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,139,"MathUtils.equals(stat.getMean(),     getMean()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,140,"MathUtils.equals(stat.getMin(),      getMin())  &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,141,"MathUtils.equals(stat.getN(),        getN())    &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,142,"MathUtils.equals(stat.getSum(),      getSum())  &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,143,"MathUtils.equals(stat.getVariance(), getVariance());"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,224,eturn (stdDev);
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,224,return stdDev;
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,363,"eturn (MathUtils.equals(stat.getGeometricMean(), this.getGeometricMean()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,364,"athUtils.equals(stat.getMax(), this.getMax()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,365,"athUtils.equals(stat.getMean(), this.getMean()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,366,"athUtils.equals(stat.getMin(), this.getMin()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,367,"athUtils.equals(stat.getN(), this.getN()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,368,"athUtils.equals(stat.getSum(), this.getSum()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,369,"athUtils.equals(stat.getSumsq(), this.getSumsq()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,370,"athUtils.equals(stat.getVariance(),"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,371,his.getVariance()));
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,363,"return MathUtils.equals(stat.getGeometricMean(), getGeometricMean()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,364,"MathUtils.equals(stat.getMax(),           getMax())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,365,"MathUtils.equals(stat.getMean(),          getMean())          &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,366,"MathUtils.equals(stat.getMin(),           getMin())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,367,"MathUtils.equals(stat.getN(),             getN())             &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,368,"MathUtils.equals(stat.getSum(),           getSum())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,369,"MathUtils.equals(stat.getSumsq(),         getSumsq())         &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,370,"MathUtils.equals(stat.getVariance(),      getVariance());"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,178,"ccum3 += Math.pow((values[i] - mean), 4.0);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,178,"accum3 += Math.pow(values[i] - mean, 4.0);"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,188,"(3 * Math.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3)));"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,188,"(3 * Math.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3));"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,164,orrection += (values[i] - xbar);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,164,correction += values[i] - xbar;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,167,"ccum += Math.pow((values[i] - m), 2.0);"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,168,ccum2 += (values[i] - m);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,167,final double d = values[i] - m;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,168,accum  += d * d;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,169,accum2 += d;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,170,"ouble stdDev = Math.sqrt((accum - (Math.pow(accum2, 2) / length)) /"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,171,length - 1));
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,171,final double variance = (accum - (accum2 * accum2 / length)) / (length - 1);
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,175,"ccum3 += Math.pow(values[i] - m, 3.0d);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,175,final double d = values[i] - m;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,176,accum3 += d * d * d;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,177,"ccum3 /= Math.pow(stdDev, 3.0d);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,178,accum3 /= variance * Math.sqrt(variance);
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,162,um += (values[i] * weights[i]);
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,162,sum += values[i] * weights[i];
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,90,ouble dev = 0.0d;
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,93,ev = (observed[i] - ratio * expected[i]);
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,92,final double dev = observed[i] - ratio * expected[i];
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,96,ev = (observed[i] - expected[i]);
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,95,final double dev = observed[i] - expected[i];
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,143,"eturn (chiSquareTest(expected, observed) < alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,142,"return chiSquareTest(expected, observed) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,211,eturn (chiSquareTest(counts) < alpha);
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,210,return chiSquareTest(counts) < alpha;
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,259,nequalCounts = (countSum1 != countSum2);
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,258,unequalCounts = countSum1 != countSum2;
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,318,"eturn (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,317,"return chiSquareTestDataSetsComparison(observed1, observed2) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,108,eturn (anovaPValue(categoryData) < alpha);
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,108,return anovaPValue(categoryData) < alpha;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,163,"eturn (pairedTTest(sample1, sample2) < alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,163,"return pairedTTest(sample1, sample2) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,447,"eturn (tTest(mu, sample) < alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,447,"return tTest(mu, sample) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,525,"eturn (tTest(mu, sampleStats) < alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,525,"return tTest(mu, sampleStats) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,672,"eturn (tTest(sample1, sample2) < alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,672,"return tTest(sample1, sample2) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,730,"eturn (homoscedasticTTest(sample1, sample2) < alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,730,"return homoscedasticTTest(sample1, sample2) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,877,"eturn (tTest(sampleStats1, sampleStats2) < alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,877,"return tTest(sampleStats1, sampleStats2) < alpha;"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,843,sForward = (n > 0);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,843,isForward = n > 0;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,917,eturn (isForward) ?
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,918,megaImaginaryForward[k] : omegaImaginaryInverse[k];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,917,return isForward ? omegaImaginaryForward[k] : omegaImaginaryInverse[k];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,230,"esult = mulAndCheck((result / (j / d)), (i / d));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,230,"result = mulAndCheck(result / (j / d), i / d);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,405,eturn ((Double.isNaN(x) && Double.isNaN(y)) || x == y);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,405,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,617,eturn (Math.abs(u) + Math.abs(v));
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,617,return Math.abs(u) + Math.abs(v);
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,597,eturn (internalArray.length);
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,597,return internalArray.length;
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,607,eturn (numElements);
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,607,return numElements;
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,624,eturn (internalArray);
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,624,return internalArray;
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,640,eturn (internalArray);
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,640,return internalArray;

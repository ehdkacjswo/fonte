is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,22,mport org.apache.commons.math.linear.CholeskyDecompositionImpl;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,22,import org.apache.commons.math.linear.CholeskyDecomposition;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,358,ecompositionSolver solver = new CholeskyDecompositionImpl(s).getSolver();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,358,DecompositionSolver solver = new CholeskyDecomposition(s).getSolver();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,21,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,22, An interface to classes that implement an algorithm to calculate the
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,23, Cholesky decomposition of a real symmetric positive-definite matrix.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,25,* Calculates the Cholesky decomposition of a matrix.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,27, <p>This interface is based on the class with similar name from the
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,29,* <p>This class is based on the class with similar name from the
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,32,"   <li>the <code>isspd</code> method has been removed, the constructors of"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,33,   implementation classes being expected to throw {@link NonPositiveDefiniteMatrixException}
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,34,"   when a matrix cannot be decomposed,</li>"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,34,"*   <li>the {@code isspd} method has been removed, since the constructor of"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,35,*   this class throws a {@link NonPositiveDefiniteMatrixException} when a
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,36,"*   matrix cannot be decomposed,</li>"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,36,   <li>the <code>solve</code> method has been replaced by a {@link
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,37,   #getSolver() getSolver} method and the equivalent method provided by
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,38,   the returned {@link DecompositionSolver}.</li>
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,38,*   <li>the {@code solve} method has been replaced by a {@link #getSolver()
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,39,*   getSolver} method and the equivalent method provided by the returned
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,40,*   {@link DecompositionSolver}.</li>
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,46,ublic interface CholeskyDecomposition {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,48,public class CholeskyDecomposition {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,50,* Default threshold above which off-diagonal elements are considered too different
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,51,* and matrix not symmetric.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,53,public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,55,* Default threshold below which diagonal elements are considered null
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,56,* and matrix not positive definite.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,58,public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,59,/** Row-oriented storage for L<sup>T</sup> matrix data. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,60,private double[][] lTData;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,61,/** Cached value of L. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,62,private RealMatrix cachedL;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,63,/** Cached value of LT. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,64,private RealMatrix cachedLT;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,67,* Calculates the Cholesky decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,68,* <p>
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,69,* Calling this constructor is equivalent to call {@link
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,70,"* #CholeskyDecompositionImpl(RealMatrix, double, double)} with the"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,71,* thresholds set to the default values {@link
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,72,* #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD} and {@link
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,73,* #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD}
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,74,* </p>
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,75,* @param matrix the matrix to decompose
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,76,* @throws NonSquareMatrixException if the matrix is not square.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,77,* @throws NonSymmetricMatrixException if the matrix is not symmetric.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,78,* @throws NonPositiveDefiniteMatrixException if the matrix is not
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,79,* strictly positive definite.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,80,"* @see #CholeskyDecompositionImpl(RealMatrix, double, double)"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,81,* @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,82,* @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,84,public CholeskyDecomposition(final RealMatrix matrix) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,85,"this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,86,DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,90,* Calculates the Cholesky decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,91,* @param matrix the matrix to decompose
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,92,* @param relativeSymmetryThreshold threshold above which off-diagonal
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,93,* elements are considered too different and matrix not symmetric
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,94,* @param absolutePositivityThreshold threshold below which diagonal
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,95,* elements are considered null and matrix not positive definite
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,96,* @throws NonSquareMatrixException if the matrix is not square.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,97,* @throws NonSymmetricMatrixException if the matrix is not symmetric.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,98,* @throws NonPositiveDefiniteMatrixException if the matrix is not
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,99,* strictly positive definite.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,100,* @see #CholeskyDecompositionImpl(RealMatrix)
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,101,* @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,102,* @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,104,"public CholeskyDecomposition(final RealMatrix matrix,"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,105,"final double relativeSymmetryThreshold,"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,106,final double absolutePositivityThreshold) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,107,if (!matrix.isSquare()) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,108,"throw new NonSquareMatrixException(matrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,109,matrix.getColumnDimension());
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,112,final int order = matrix.getRowDimension();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,113,lTData   = matrix.getData();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,114,cachedL  = null;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,115,cachedLT = null;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,117,// check the matrix before transformation
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,118,for (int i = 0; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,119,final double[] lI = lTData[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,121,// check off-diagonal elements (and reset them to 0)
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,122,for (int j = i + 1; j < order; ++j) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,123,final double[] lJ = lTData[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,124,final double lIJ = lI[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,125,final double lJI = lJ[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,126,final double maxDelta =
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,127,"relativeSymmetryThreshold * FastMath.max(FastMath.abs(lIJ), FastMath.abs(lJI));"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,128,if (FastMath.abs(lIJ - lJI) > maxDelta) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,129,"throw new NonSymmetricMatrixException(i, j, relativeSymmetryThreshold);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,131,lJ[i] = 0;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,135,// transform the matrix
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,136,for (int i = 0; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,138,final double[] ltI = lTData[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,140,// check diagonal element
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,141,if (ltI[i] <= absolutePositivityThreshold) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,142,"throw new NonPositiveDefiniteMatrixException(ltI[i], i, absolutePositivityThreshold);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,145,ltI[i] = FastMath.sqrt(ltI[i]);
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,146,final double inverse = 1.0 / ltI[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,148,for (int q = order - 1; q > i; --q) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,149,ltI[q] *= inverse;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,150,final double[] ltQ = lTData[q];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,151,for (int p = q; p < order; ++p) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,152,ltQ[p] -= ltI[q] * ltI[p];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,52,ealMatrix getL();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,163,public RealMatrix getL() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,164,if (cachedL == null) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,165,cachedL = getLT().transpose();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,167,return cachedL;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,59,ealMatrix getLT();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,175,public RealMatrix getLT() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,177,if (cachedLT == null) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,178,cachedLT = MatrixUtils.createRealMatrix(lTData);
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,181,// return the cached matrix
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,182,return cachedLT;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,65,ouble getDeterminant();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,189,public double getDeterminant() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,190,double determinant = 1.0;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,191,for (int i = 0; i < lTData.length; ++i) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,192,double lTii = lTData[i][i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,193,determinant *= lTii * lTii;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,195,return determinant;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,71,ecompositionSolver getSolver();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,202,public DecompositionSolver getSolver() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,203,return new Solver(lTData);
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,206,/** Specialized solver. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,207,private static class Solver implements DecompositionSolver {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,208,/** Row-oriented storage for L<sup>T</sup> matrix data. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,209,private final double[][] lTData;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,212,* Build a solver from decomposed matrix.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,213,* @param lTData row-oriented storage for L<sup>T</sup> matrix data
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,215,private Solver(final double[][] lTData) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,216,this.lTData = lTData;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,219,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,220,public boolean isNonSingular() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,221,"// if we get this far, the matrix was positive definite, hence non-singular"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,222,return true;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,225,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,226,public RealVector solve(final RealVector b) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,227,final int m = lTData.length;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,228,if (b.getDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,229,"throw new DimensionMismatchException(b.getDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,232,final double[] x = b.toArray();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,234,// Solve LY = b
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,235,for (int j = 0; j < m; j++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,236,final double[] lJ = lTData[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,237,x[j] /= lJ[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,238,final double xJ = x[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,239,for (int i = j + 1; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,240,x[i] -= xJ * lJ[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,244,// Solve LTX = Y
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,245,for (int j = m - 1; j >= 0; j--) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,246,x[j] /= lTData[j][j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,247,final double xJ = x[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,248,for (int i = 0; i < j; i++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,249,x[i] -= xJ * lTData[i][j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,253,"return new ArrayRealVector(x, false);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,256,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,257,public RealMatrix solve(RealMatrix b) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,258,final int m = lTData.length;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,259,if (b.getRowDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,260,"throw new DimensionMismatchException(b.getRowDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,263,final int nColB = b.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,264,final double[][] x = b.getData();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,266,// Solve LY = b
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,267,for (int j = 0; j < m; j++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,268,final double[] lJ = lTData[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,269,final double lJJ = lJ[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,270,final double[] xJ = x[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,271,for (int k = 0; k < nColB; ++k) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,272,xJ[k] /= lJJ;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,274,for (int i = j + 1; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,275,final double[] xI = x[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,276,final double lJI = lJ[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,277,for (int k = 0; k < nColB; ++k) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,278,xI[k] -= xJ[k] * lJI;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,283,// Solve LTX = Y
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,284,for (int j = m - 1; j >= 0; j--) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,285,final double lJJ = lTData[j][j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,286,final double[] xJ = x[j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,287,for (int k = 0; k < nColB; ++k) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,288,xJ[k] /= lJJ;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,290,for (int i = 0; i < j; i++) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,291,final double[] xI = x[i];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,292,final double lIJ = lTData[i][j];
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,293,for (int k = 0; k < nColB; ++k) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,294,xI[k] -= xJ[k] * lIJ;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,299,return new Array2DRowRealMatrix(x);
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,302,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,303,public RealMatrix getInverse() {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,304,return solve(MatrixUtils.createRealIdentityMatrix(lTData.length));
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,18,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,20,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,21,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,25, Calculates the Cholesky decomposition of a matrix.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,26, <p>The Cholesky decomposition of a real symmetric positive-definite
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,27, matrix A consists of a lower triangular matrix L with same size such
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,28," that: A = LL<sup>T</sup>. In a sense, this is the square root of A.</p>"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,30," @see <a href=""http://mathworld.wolfram.com/CholeskyDecomposition.html"">MathWorld</a>"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,31," @see <a href=""http://en.wikipedia.org/wiki/Cholesky_decomposition"">Wikipedia</a>"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,32, @version $Id$
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,33, @since 2.0
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,35,ublic class CholeskyDecompositionImpl implements CholeskyDecomposition {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,37, Default threshold above which off-diagonal elements are considered too different
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,38, and matrix not symmetric.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,40,ublic static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,42, Default threshold below which diagonal elements are considered null
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,43, and matrix not positive definite.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,45,ublic static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,46,** Row-oriented storage for L<sup>T</sup> matrix data. */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,47,rivate double[][] lTData;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,48,** Cached value of L. */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,49,rivate RealMatrix cachedL;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,50,** Cached value of LT. */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,51,rivate RealMatrix cachedLT;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,54, Calculates the Cholesky decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,55, <p>
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,56, Calling this constructor is equivalent to call {@link
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,57," #CholeskyDecompositionImpl(RealMatrix, double, double)} with the"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,58, thresholds set to the default values {@link
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,59, #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD} and {@link
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,60, #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD}
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,61, </p>
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,62, @param matrix the matrix to decompose
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,63, @throws NonSquareMatrixException if the matrix is not square.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,64, @throws NonSymmetricMatrixException if the matrix is not symmetric.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,65, @throws NonPositiveDefiniteMatrixException if the matrix is not
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,66, strictly positive definite.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,67," @see #CholeskyDecompositionImpl(RealMatrix, double, double)"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,68, @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,69, @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,71,ublic CholeskyDecompositionImpl(final RealMatrix matrix) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,72,"his(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,73,EFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,77, Calculates the Cholesky decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,78, @param matrix the matrix to decompose
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,79, @param relativeSymmetryThreshold threshold above which off-diagonal
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,80, elements are considered too different and matrix not symmetric
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,81, @param absolutePositivityThreshold threshold below which diagonal
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,82, elements are considered null and matrix not positive definite
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,83, @throws NonSquareMatrixException if the matrix is not square.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,84, @throws NonSymmetricMatrixException if the matrix is not symmetric.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,85, @throws NonPositiveDefiniteMatrixException if the matrix is not
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,86, strictly positive definite.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,87, @see #CholeskyDecompositionImpl(RealMatrix)
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,88, @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,89, @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,91,"ublic CholeskyDecompositionImpl(final RealMatrix matrix,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,92,"inal double relativeSymmetryThreshold,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,93,inal double absolutePositivityThreshold) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,94,f (!matrix.isSquare()) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,95,"hrow new NonSquareMatrixException(matrix.getRowDimension(),"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,96,atrix.getColumnDimension());
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,99,inal int order = matrix.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,100,TData   = matrix.getData();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,101,achedL  = null;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,102,achedLT = null;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,104,/ check the matrix before transformation
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,105,or (int i = 0; i < order; ++i) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,106,inal double[] lI = lTData[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,108,/ check off-diagonal elements (and reset them to 0)
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,109,or (int j = i + 1; j < order; ++j) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,110,inal double[] lJ = lTData[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,111,inal double lIJ = lI[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,112,inal double lJI = lJ[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,113,inal double maxDelta =
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,114,"elativeSymmetryThreshold * FastMath.max(FastMath.abs(lIJ), FastMath.abs(lJI));"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,115,f (FastMath.abs(lIJ - lJI) > maxDelta) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,116,"hrow new NonSymmetricMatrixException(i, j, relativeSymmetryThreshold);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,118,J[i] = 0;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,122,/ transform the matrix
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,123,or (int i = 0; i < order; ++i) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,125,inal double[] ltI = lTData[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,127,/ check diagonal element
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,128,f (ltI[i] <= absolutePositivityThreshold) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,129,"hrow new NonPositiveDefiniteMatrixException(ltI[i], i, absolutePositivityThreshold);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,132,tI[i] = FastMath.sqrt(ltI[i]);
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,133,inal double inverse = 1.0 / ltI[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,135,or (int q = order - 1; q > i; --q) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,136,tI[q] *= inverse;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,137,inal double[] ltQ = lTData[q];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,138,or (int p = q; p < order; ++p) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,139,tQ[p] -= ltI[q] * ltI[p];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,145,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,146,ublic RealMatrix getL() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,147,f (cachedL == null) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,148,achedL = getLT().transpose();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,150,eturn cachedL;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,153,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,154,ublic RealMatrix getLT() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,156,f (cachedLT == null) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,157,achedLT = MatrixUtils.createRealMatrix(lTData);
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,160,/ return the cached matrix
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,161,eturn cachedLT;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,164,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,165,ublic double getDeterminant() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,166,ouble determinant = 1.0;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,167,or (int i = 0; i < lTData.length; ++i) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,168,ouble lTii = lTData[i][i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,169,eterminant *= lTii * lTii;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,171,eturn determinant;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,174,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,175,ublic DecompositionSolver getSolver() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,176,eturn new Solver(lTData);
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,179,** Specialized solver. */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,180,rivate static class Solver implements DecompositionSolver {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,181,** Row-oriented storage for L<sup>T</sup> matrix data. */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,182,rivate final double[][] lTData;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,185, Build a solver from decomposed matrix.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,186, @param lTData row-oriented storage for L<sup>T</sup> matrix data
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,188,rivate Solver(final double[][] lTData) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,189,his.lTData = lTData;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,192,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,193,ublic boolean isNonSingular() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,194,"/ if we get this far, the matrix was positive definite, hence non-singular"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,195,eturn true;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,198,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,199,ublic RealVector solve(final RealVector b) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,200,inal int m = lTData.length;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,201,f (b.getDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,202,"hrow new DimensionMismatchException(b.getDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,205,inal double[] x = b.toArray();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,207,/ Solve LY = b
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,208,or (int j = 0; j < m; j++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,209,inal double[] lJ = lTData[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,210,[j] /= lJ[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,211,inal double xJ = x[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,212,or (int i = j + 1; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,213,[i] -= xJ * lJ[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,217,/ Solve LTX = Y
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,218,or (int j = m - 1; j >= 0; j--) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,219,[j] /= lTData[j][j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,220,inal double xJ = x[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,221,or (int i = 0; i < j; i++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,222,[i] -= xJ * lTData[i][j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,226,"eturn new ArrayRealVector(x, false);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,229,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,230,ublic RealMatrix solve(RealMatrix b) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,231,inal int m = lTData.length;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,232,f (b.getRowDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,233,"hrow new DimensionMismatchException(b.getRowDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,236,inal int nColB = b.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,237,inal double[][] x = b.getData();
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,239,/ Solve LY = b
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,240,or (int j = 0; j < m; j++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,241,inal double[] lJ = lTData[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,242,inal double lJJ = lJ[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,243,inal double[] xJ = x[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,244,or (int k = 0; k < nColB; ++k) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,245,J[k] /= lJJ;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,247,or (int i = j + 1; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,248,inal double[] xI = x[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,249,inal double lJI = lJ[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,250,or (int k = 0; k < nColB; ++k) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,251,I[k] -= xJ[k] * lJI;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,256,/ Solve LTX = Y
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,257,or (int j = m - 1; j >= 0; j--) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,258,inal double lJJ = lTData[j][j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,259,inal double[] xJ = x[j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,260,or (int k = 0; k < nColB; ++k) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,261,J[k] /= lJJ;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,263,or (int i = 0; i < j; i++) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,264,inal double[] xI = x[i];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,265,inal double lIJ = lTData[i][j];
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,266,or (int k = 0; k < nColB; ++k) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,267,I[k] -= xJ[k] * lIJ;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,272,eturn new Array2DRowRealMatrix(x);
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,275,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,276,ublic RealMatrix getInverse() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,277,eturn solve(MatrixUtils.createRealIdentityMatrix(lTData.length));
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,23,ublic class CholeskyDecompositionImplTest {
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,23,public class CholeskyDecompositionTest {
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,36,holeskyDecompositionImpl llt =
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,37,ew CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData));
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,36,CholeskyDecomposition llt =
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,37,new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData));
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,47,ew CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,47,new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[3][2]));
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,55,ew CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(changed));
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,55,new CholeskyDecomposition(MatrixUtils.createRealMatrix(changed));
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,61,ew CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,61,new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,72,ew CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,72,new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,85,holeskyDecompositionImpl llt = new CholeskyDecompositionImpl(matrix);
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,85,CholeskyDecomposition llt = new CholeskyDecomposition(matrix);
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,96,ealMatrix l = new CholeskyDecompositionImpl(matrix).getL();
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,96,RealMatrix l = new CholeskyDecomposition(matrix).getL();
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,108,holeskyDecompositionImpl llt = new CholeskyDecompositionImpl(matrix);
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,108,CholeskyDecomposition llt = new CholeskyDecomposition(matrix);
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,125,holeskyDecompositionImpl llt =
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,126,ew CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData));
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,125,CholeskyDecomposition llt =
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionTest.java,126,new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData));
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,39,ew CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,39,new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver();
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,65,ew CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,65,new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver();
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,109,eturn new CholeskyDecompositionImpl(m).getDeterminant();
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,109,return new CholeskyDecomposition(m).getDeterminant();

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,172,"/ We had [x0..x1]. We update it to [x1, x]. Note that the"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,173,"/ value of x1 has switched to the other bound, thus inverting"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,172,"// The value of x1 has switched to the other bound, thus inverting"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,177,1 = x;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,178,1 = fx;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,181,"/ We had [x0..x1]. We update it to [x0, x]."
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,182,f (method == Method.ILLINOIS) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,178,switch (method) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,179,case ILLINOIS:
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,185,f (method == Method.PEGASUS) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,181,break;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,182,case PEGASUS:
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,184,break;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,185,case REGULA_FALSI:
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,186,if (x == x1) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,187,"final double delta = FastMath.max(rtol * FastMath.abs(x1),"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,188,atol);
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,189,// Update formula cannot make any progress: Update the
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,190,// search interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,191,x0 = 0.5 * (x0 + x1 - delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,192,f0 = computeObjectiveValue(x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,194,break;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,195,default:
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,196,// Should never happen.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,197,throw new MathInternalError();
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,188,1 = x;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,189,1 = fx;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,200,"// Update from [x0, x1] to [x0, x]."
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,201,x1 = x;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,202,f1 = fx;
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,20,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,43,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,44,public void testIssue631() {
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,45,final UnivariateRealFunction f = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,46,@Override
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,47,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,48,"return Math.exp(x) - Math.pow(Math.PI, 3.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,52,final UnivariateRealSolver solver = new RegulaFalsiSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,53,"final double root = solver.solve(3624, f, 1, 10);"
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,54,"Assert.assertEquals(3.4341896575482003, root, 1e-15);"

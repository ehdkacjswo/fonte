is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,17,package org.apache.commons.math3.optimization.general;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,19,import java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,20,import java.io.Serializable;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,21,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,23,import org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,24,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,25,import org.apache.commons.math3.exception.ConvergenceException;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,26,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,27,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,28,import org.apache.commons.math3.linear.BlockRealMatrix;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,29,import org.apache.commons.math3.linear.RealMatrix;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,30,import org.apache.commons.math3.optimization.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,31,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,32,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,33,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,36,* <p>Some of the unit tests are re-implementations of the MINPACK <a
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,37,"* href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,38,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,39,* The redistribution policy for MINPACK is available <a
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,40,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,41,"* convenience, it is reproduced below.</p>"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,43,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,44,* <tr><td>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,45,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,46,*    All rights reserved
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,47,* </td></tr>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,48,* <tr><td>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,49,"* Redistribution and use in source and binary forms, with or without"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,50,"* modification, are permitted provided that the following conditions"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,51,* are met:
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,52,* <ol>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,53,*  <li>Redistributions of source code must retain the above copyright
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,54,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,55,* <li>Redistributions in binary form must reproduce the above
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,56,"*     copyright notice, this list of conditions and the following"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,57,*     disclaimer in the documentation and/or other materials provided
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,58,*     with the distribution.</li>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,59,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,60,*     must include the following acknowledgment:
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,61,*     <code>This product includes software developed by the University of
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,62,"*           Chicago, as Operator of Argonne National Laboratory.</code>"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,63,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,64,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,65,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,66,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,67,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,68,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,69,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,70,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,71,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,72,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,73,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,74,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,75,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,76,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,77,*     BE CORRECTED.</strong></li>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,78,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,79,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,80,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,81,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,82,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,83,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,84,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,85,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,86,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,87,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,88,* <ol></td></tr>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,89,* </table>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,91,* @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,92,* @author Burton S. Garbow (original fortran minpack tests)
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,93,* @author Kenneth E. Hillstrom (original fortran minpack tests)
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,94,* @author Jorge J. More (original fortran minpack tests)
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,95,* @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,97,public abstract class AbstractLeastSquaresOptimizerAbstractTest {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,99,public abstract AbstractLeastSquaresOptimizer createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,101,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,102,public void testTrivial() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,103,LinearProblem problem =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,104,"new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,105,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,106,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,107,"optimizer.optimize(100, problem, problem.target, new double[] { 1 }, new double[] { 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,108,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,109,"Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,110,"Assert.assertEquals(3.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,111,try {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,112,optimizer.guessParametersErrors();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,113,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,114,} catch (NumberIsTooSmallException ee) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,115,// expected behavior
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,119,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,120,public void testQRColumnsPermutation() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,122,LinearProblem problem =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,123,"new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,124,"new double[] { 4.0, 6.0, 1.0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,126,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,127,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,128,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,129,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,130,"Assert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,131,"Assert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,132,"Assert.assertEquals(4.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,133,"Assert.assertEquals(6.0, optimum.getValue()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,134,"Assert.assertEquals(1.0, optimum.getValue()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,137,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,138,public void testNoDependency() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,139,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,140,"{ 2, 0, 0, 0, 0, 0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,141,"{ 0, 2, 0, 0, 0, 0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,142,"{ 0, 0, 2, 0, 0, 0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,143,"{ 0, 0, 0, 2, 0, 0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,144,"{ 0, 0, 0, 0, 2, 0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,145,"{ 0, 0, 0, 0, 0, 2 }"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,146,"}, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,147,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,148,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,149,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,150,"new double[] { 0, 0, 0, 0, 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,151,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,152,for (int i = 0; i < problem.target.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,153,"Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,157,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,158,public void testOneSet() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,160,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,161,"{  1,  0, 0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,162,"{ -1,  1, 0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,163,"{  0, -1, 1 }"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,164,"}, new double[] { 1, 1, 1});"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,165,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,166,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,167,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,168,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,169,"Assert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,170,"Assert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,171,"Assert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,174,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,175,public void testTwoSets() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,176,double epsilon = 1.0e-7;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,177,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,178,"{  2,  1,   0,  4,       0, 0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,179,"{ -4, -2,   3, -7,       0, 0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,180,"{  4,  1,  -2,  8,       0, 0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,181,"{  0, -3, -12, -1,       0, 0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,182,"{  0,  0,   0,  0, epsilon, 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,183,"{  0,  0,   0,  0,       1, 1 }"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,184,"}, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,186,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,187,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,188,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,189,"new double[] { 0, 0, 0, 0, 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,190,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,191,"Assert.assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,192,"Assert.assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,193,"Assert.assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,194,"Assert.assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,195,"Assert.assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,196,"Assert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,199,@Test(expected=ConvergenceException.class)
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,200,public void testNonInvertible() throws Exception {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,202,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,203,"{  1, 2, -3 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,204,"{  2, 1,  3 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,205,"{ -3, 0, -9 }"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,206,"}, new double[] { 1, 1, 1 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,208,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,210,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,213,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,214,public void testIllConditioned() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,215,LinearProblem problem1 = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,216,"{ 10.0, 7.0,  8.0,  7.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,217,"{  7.0, 5.0,  6.0,  5.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,218,"{  8.0, 6.0, 10.0,  9.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,219,"{  7.0, 5.0,  9.0, 10.0 }"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,220,"}, new double[] { 32, 23, 33, 31 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,221,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,222,PointVectorValuePair optimum1 =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,223,"optimizer.optimize(100, problem1, problem1.target, new double[] { 1, 1, 1, 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,224,"new double[] { 0, 1, 2, 3 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,225,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,226,"Assert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,227,"Assert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,228,"Assert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,229,"Assert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,231,LinearProblem problem2 = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,232,"{ 10.00, 7.00, 8.10, 7.20 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,233,"{  7.08, 5.04, 6.00, 5.00 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,234,"{  8.00, 5.98, 9.89, 9.00 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,235,"{  6.99, 4.99, 9.00, 9.98 }"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,236,"}, new double[] { 32, 23, 33, 31 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,237,PointVectorValuePair optimum2 =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,238,"optimizer.optimize(100, problem2, problem2.target, new double[] { 1, 1, 1, 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,239,"new double[] { 0, 1, 2, 3 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,240,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,241,"Assert.assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,242,"Assert.assertEquals(137.0, optimum2.getPoint()[1], 1.0e-8);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,243,"Assert.assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,244,"Assert.assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,247,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,248,public void testMoreEstimatedParametersSimple() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,250,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,251,"{ 3.0, 2.0,  0.0, 0.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,252,"{ 0.0, 1.0, -1.0, 1.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,253,"{ 2.0, 0.0,  1.0, 0.0 }"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,254,"}, new double[] { 7.0, 3.0, 5.0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,256,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,257,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,258,"new double[] { 7, 6, 5, 4 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,259,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,262,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,263,public void testMoreEstimatedParametersUnsorted() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,264,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,265,"{ 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,266,"{ 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,267,"{ 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,268,"{ 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,269,"{ 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,270,"}, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,272,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,273,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,274,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,275,"new double[] { 2, 2, 2, 2, 2, 2 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,276,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,277,"Assert.assertEquals(3.0, optimum.getPointRef()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,278,"Assert.assertEquals(4.0, optimum.getPointRef()[3], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,279,"Assert.assertEquals(5.0, optimum.getPointRef()[4], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,280,"Assert.assertEquals(6.0, optimum.getPointRef()[5], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,283,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,284,public void testRedundantEquations() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,285,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,286,"{ 1.0,  1.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,287,"{ 1.0, -1.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,288,"{ 1.0,  3.0 }"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,289,"}, new double[] { 3.0, 1.0, 5.0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,291,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,292,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,293,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,294,"new double[] { 1, 1 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,295,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,296,"Assert.assertEquals(2.0, optimum.getPointRef()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,297,"Assert.assertEquals(1.0, optimum.getPointRef()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,300,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,301,public void testInconsistentEquations() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,302,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,303,"{ 1.0,  1.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,304,"{ 1.0, -1.0 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,305,"{ 1.0,  3.0 }"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,306,"}, new double[] { 3.0, 1.0, 4.0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,308,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,309,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 1, 1 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,310,Assert.assertTrue(optimizer.getRMS() > 0.1);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,313,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,314,public void testInconsistentSizes1() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,315,LinearProblem problem =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,316,"new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,317,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,318,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,319,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,320,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,321,"Assert.assertEquals(-1, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,322,"Assert.assertEquals(+1, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,324,"optimizer.optimize(100, problem, problem.target,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,325,"new double[] { 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,326,"new double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,329,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,330,public void testInconsistentSizes2() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,331,LinearProblem problem =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,332,"new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,333,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,334,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,335,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,336,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,337,"Assert.assertEquals(-1, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,338,"Assert.assertEquals(+1, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,340,"optimizer.optimize(100, problem, new double[] { 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,341,"new double[] { 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,342,"new double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,345,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,346,public void testCircleFitting() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,347,CircleVectorial circle = new CircleVectorial();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,348,"circle.addPoint( 30.0,  68.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,349,"circle.addPoint( 50.0,  -6.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,350,"circle.addPoint(110.0, -20.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,351,"circle.addPoint( 35.0,  15.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,352,"circle.addPoint( 45.0,  97.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,353,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,354,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,355,"optimizer.optimize(100, circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,356,"new double[] { 98.680, 47.345 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,357,Assert.assertTrue(optimizer.getEvaluations() < 10);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,358,Assert.assertTrue(optimizer.getJacobianEvaluations() < 10);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,359,double rms = optimizer.getRMS();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,360,"Assert.assertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * rms,  1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,361,"Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,362,"Assert.assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,363,"Assert.assertEquals(96.07590211815305, center.x,      1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,364,"Assert.assertEquals(48.13516790438953, center.y,      1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,365,double[][] cov = optimizer.getCovariances();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,366,"Assert.assertEquals(1.839, cov[0][0], 0.001);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,367,"Assert.assertEquals(0.731, cov[0][1], 0.001);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,368,"Assert.assertEquals(cov[0][1], cov[1][0], 1.0e-14);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,369,"Assert.assertEquals(0.786, cov[1][1], 0.001);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,370,double[] errors = optimizer.guessParametersErrors();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,371,"Assert.assertEquals(1.384, errors[0], 0.001);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,372,"Assert.assertEquals(0.905, errors[1], 0.001);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,374,// add perfect measurements and check errors are reduced
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,375,double  r = circle.getRadius(center);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,376,for (double d= 0; d < 2 * FastMath.PI; d += 0.01) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,377,"circle.addPoint(center.x + r * FastMath.cos(d), center.y + r * FastMath.sin(d));"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,379,double[] target = new double[circle.getN()];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,380,"Arrays.fill(target, 0.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,381,double[] weights = new double[circle.getN()];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,382,"Arrays.fill(weights, 2.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,383,"optimizer.optimize(100, circle, target, weights, new double[] { 98.680, 47.345 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,384,cov = optimizer.getCovariances();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,385,"Assert.assertEquals(0.0016, cov[0][0], 0.001);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,386,"Assert.assertEquals(3.2e-7, cov[0][1], 1.0e-9);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,387,"Assert.assertEquals(cov[0][1], cov[1][0], 1.0e-14);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,388,"Assert.assertEquals(0.0016, cov[1][1], 0.001);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,389,errors = optimizer.guessParametersErrors();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,390,"Assert.assertEquals(0.004, errors[0], 0.001);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,391,"Assert.assertEquals(0.004, errors[1], 0.001);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,394,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,395,public void testCircleFittingBadInit() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,396,CircleVectorial circle = new CircleVectorial();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,397,double[][] points = circlePoints;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,398,double[] target = new double[points.length];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,399,"Arrays.fill(target, 0.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,400,double[] weights = new double[points.length];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,401,"Arrays.fill(weights, 2.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,402,for (int i = 0; i < points.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,403,"circle.addPoint(points[i][0], points[i][1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,405,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,406,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,407,"optimizer.optimize(100, circle, target, weights, new double[] { -12, -12 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,408,"Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,409,Assert.assertTrue(optimizer.getEvaluations() < 25);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,410,Assert.assertTrue(optimizer.getJacobianEvaluations() < 20);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,411,"Assert.assertEquals( 0.043, optimizer.getRMS(), 1.0e-3);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,412,"Assert.assertEquals( 0.292235,  circle.getRadius(center), 1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,413,"Assert.assertEquals(-0.151738,  center.x,      1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,414,"Assert.assertEquals( 0.2075001, center.y,      1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,417,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,418,public void testCircleFittingGoodInit() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,419,CircleVectorial circle = new CircleVectorial();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,420,double[][] points = circlePoints;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,421,double[] target = new double[points.length];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,422,"Arrays.fill(target, 0.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,423,double[] weights = new double[points.length];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,424,"Arrays.fill(weights, 2.0);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,425,for (int i = 0; i < points.length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,426,"circle.addPoint(points[i][0], points[i][1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,428,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,429,PointVectorValuePair optimum =
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,430,"optimizer.optimize(100, circle, target, weights, new double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,431,"Assert.assertEquals(-0.1517383071957963, optimum.getPointRef()[0], 1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,432,"Assert.assertEquals(0.2074999736353867,  optimum.getPointRef()[1], 1.0e-6);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,433,"Assert.assertEquals(0.04268731682389561, optimizer.getRMS(),       1.0e-8);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,436,private final double[][] circlePoints = new double[][] {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,437,"{-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,438,"{-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,439,"{-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,440,"{-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,441,"{ 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,442,"{ 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,443,"{-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,444,"{-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,445,"{-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,446,"{-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,447,"{-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,448,"{ 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,449,"{ 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,450,"{-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,451,"{-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,452,"{-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,453,"{-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,454,"{-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,455,"{ 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,456,"{ 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,457,"{ 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,458,"{-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,459,"{-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,460,"{-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,461,"{-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,462,"{-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,463,"{ 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,464,"{ 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,465,"{-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,468,"static class LinearProblem implements DifferentiableMultivariateVectorFunction, Serializable {"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,470,private static final long serialVersionUID = 703247177355019415L;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,471,final RealMatrix factors;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,472,final double[] target;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,473,"public LinearProblem(double[][] factors, double[] target) {"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,474,this.factors = new BlockRealMatrix(factors);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,475,this.target  = target;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,478,public double[] value(double[] variables) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,479,return factors.operate(variables);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,482,public MultivariateMatrixFunction jacobian() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,483,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,484,public double[][] value(double[] point) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,485,return factors.getData();
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,20,mport java.awt.geom.Point2D;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,21,mport java.io.Serializable;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,22,mport java.util.Arrays;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,27,mport org.apache.commons.math3.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,28,mport org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,29,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,30,mport org.apache.commons.math3.linear.BlockRealMatrix;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,31,mport org.apache.commons.math3.linear.RealMatrix;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,33,mport org.apache.commons.math3.optimization.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,34,mport org.apache.commons.math3.util.FastMath;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,35,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,100,ublic class GaussNewtonOptimizerTest {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,102,Test
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,103,ublic void testTrivial() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,104,inearProblem problem =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,105,"ew LinearProblem(new double[][] { { 2 } }, new double[] { 3 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,107,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,108," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,110,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,111,"ptimizer.optimize(100, problem, problem.target, new double[] { 1 }, new double[] { 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,112,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,113,"ssert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,114,"ssert.assertEquals(3.0, optimum.getValue()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,117,Test
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,118,ublic void testColumnsPermutation() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,120,inearProblem problem =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,121,"ew LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,122,"ew double[] { 4.0, 6.0, 1.0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,124,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,125," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,127,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,128,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,129,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,130,"ssert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,131,"ssert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,132,"ssert.assertEquals(4.0, optimum.getValue()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,133,"ssert.assertEquals(6.0, optimum.getValue()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,134,"ssert.assertEquals(1.0, optimum.getValue()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,138,Test
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,139,ublic void testNoDependency() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,140,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,141," 2, 0, 0, 0, 0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,142," 0, 2, 0, 0, 0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,143," 0, 0, 2, 0, 0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,144," 0, 0, 0, 2, 0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,145," 0, 0, 0, 0, 2, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,146," 0, 0, 0, 0, 0, 2 }"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,147,", new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,149,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,150," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,87,public class GaussNewtonOptimizerTest
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,88,extends AbstractLeastSquaresOptimizerAbstractTest {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,152,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,153,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,154,"ew double[] { 0, 0, 0, 0, 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,155,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,156,or (int i = 0; i < problem.target.length; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,157,"ssert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,90,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,91,public AbstractLeastSquaresOptimizer createOptimizer() {
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,92,"return new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,161,Test
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,162,ublic void testOneSet() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,164,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,165,"  1,  0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,166," -1,  1, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,167,"  0, -1, 1 }"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,168,", new double[] { 1, 1, 1});"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,170,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,171," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,173,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,174,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,175,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,176,"ssert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,177,"ssert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,178,"ssert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,182,Test
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,183,ublic void testTwoSets() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,184,ouble epsilon = 1.0e-7;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,185,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,186,"  2,  1,   0,  4,       0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,187," -4, -2,   3, -7,       0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,188,"  4,  1,  -2,  8,       0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,189,"  0, -3, -12, -1,       0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,190,"  0,  0,   0,  0, epsilon, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,191,"  0,  0,   0,  0,       1, 1 }"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,192,", new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,194,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,195," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,197,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,198,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,199,"ew double[] { 0, 0, 0, 0, 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,200,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,201,"ssert.assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,202,"ssert.assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,203,"ssert.assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,204,"ssert.assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,205,"ssert.assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,206,"ssert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,95,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,96,@Test(expected = ConvergenceException.class)
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,97,public void testMoreEstimatedParametersSimple() {
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,99,* Exception is expected with this optimizer
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,101,super.testMoreEstimatedParametersSimple();
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,104,@Override
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,211,ublic void testNonInversible() throws Exception {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,213,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,214,"  1, 2, -3 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,215,"  2, 1,  3 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,216," -3, 0, -9 }"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,217,", new double[] { 1, 1, 1 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,219,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,220," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,222,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,225,Test
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,226,ublic void testIllConditioned() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,227,inearProblem problem1 = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,228," 10.0, 7.0,  8.0,  7.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,229,"  7.0, 5.0,  6.0,  5.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,230,"  8.0, 6.0, 10.0,  9.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,231,"  7.0, 5.0,  9.0, 10.0 }"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,232,", new double[] { 32, 23, 33, 31 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,234,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,235," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,237,ointVectorValuePair optimum1 =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,238,"ptimizer.optimize(100, problem1, problem1.target, new double[] { 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,239,"ew double[] { 0, 1, 2, 3 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,240,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,241,"ssert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,242,"ssert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,243,"ssert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,244,"ssert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,246,inearProblem problem2 = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,247," 10.00, 7.00, 8.10, 7.20 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,248,"  7.08, 5.04, 6.00, 5.00 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,249,"  8.00, 5.98, 9.89, 9.00 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,250,"  6.99, 4.99, 9.00, 9.98 }"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,251,", new double[] { 32, 23, 33, 31 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,252,ointVectorValuePair optimum2 =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,253,"ptimizer.optimize(100, problem2, problem2.target, new double[] { 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,254,"ew double[] { 0, 1, 2, 3 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,255,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,256,"ssert.assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,257,"ssert.assertEquals(137.0, optimum2.getPoint()[1], 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,258,"ssert.assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,259,"ssert.assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,263,Test(expected=ConvergenceException.class)
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,264,ublic void testMoreEstimatedParametersSimple() throws Exception {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,266,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,267," 3.0, 2.0,  0.0, 0.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,268," 0.0, 1.0, -1.0, 1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,269," 2.0, 0.0,  1.0, 0.0 }"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,270,", new double[] { 7.0, 3.0, 5.0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,272,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,273," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,275,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,276,"ew double[] { 7, 6, 5, 4 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,279,Test(expected=ConvergenceException.class)
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,280,ublic void testMoreEstimatedParametersUnsorted() throws Exception {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,281,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,282," 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,283," 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,284," 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,285," 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,286," 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,287,", new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,289,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,290," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,292,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,293,"ew double[] { 2, 2, 2, 2, 2, 2 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,296,Test
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,297,ublic void testRedundantEquations() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,298,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,299," 1.0,  1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,300," 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,301," 1.0,  3.0 }"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,302,", new double[] { 3.0, 1.0, 5.0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,304,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,305," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,307,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,308,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,309,"ew double[] { 1, 1 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,310,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,311,"ssert.assertEquals(2.0, optimum.getPoint()[0], 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,312,"ssert.assertEquals(1.0, optimum.getPoint()[1], 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,315,Test
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,316,ublic void testInconsistentEquations() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,317,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,318," 1.0,  1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,319," 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,320," 1.0,  3.0 }"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,321,", new double[] { 3.0, 1.0, 4.0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,323,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,324," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,326,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 1, 1 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,327,ssert.assertTrue(optimizer.getRMS() > 0.1);
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,331,Test(expected=DimensionMismatchException.class)
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,332,ublic void testInconsistentSizes1() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,333,inearProblem problem =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,334,"ew LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,336,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,337," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,339,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,340,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,341,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,342,"ssert.assertEquals(-1, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,343,"ssert.assertEquals(+1, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,345,"ptimizer.optimize(100, problem, problem.target,"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,346,"ew double[] { 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,347,"ew double[] { 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,350,Test(expected=DimensionMismatchException.class)
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,351,ublic void testInconsistentSizes2() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,352,inearProblem problem =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,353,"ew LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,355,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,356," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,358,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,359,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,360,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,361,"ssert.assertEquals(-1, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,362,"ssert.assertEquals(+1, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,364,"ptimizer.optimize(100, problem, new double[] { 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,365,"ew double[] { 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,366,"ew double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,106,public void testMoreEstimatedParametersUnsorted() {
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,108,* Exception is expected with this optimizer
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,110,super.testMoreEstimatedParametersUnsorted();
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,386,Test
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,387,ublic void testCircleFitting() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,388,ircleVectorial circle = new CircleVectorial();
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,389,"ircle.addPoint( 30.0,  68.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,390,"ircle.addPoint( 50.0,  -6.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,391,"ircle.addPoint(110.0, -20.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,392,"ircle.addPoint( 35.0,  15.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,393,"ircle.addPoint( 45.0,  97.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,395,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,396," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-13, 1.0e-13));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,398,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,399,"ptimizer.optimize(100, circle, new double[] { 0, 0, 0, 0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,400,"ew double[] { 1, 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,401,"ew double[] { 98.680, 47.345 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,402,"ssert.assertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * optimizer.getRMS(),  1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,403,"oint2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,404,"ssert.assertEquals(69.96016175359975, circle.getRadius(center), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,405,"ssert.assertEquals(96.07590209601095, center.x, 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,406,"ssert.assertEquals(48.135167894714,   center.y, 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,130,@Override
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,411,ircleVectorial circle = new CircleVectorial();
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,412,ouble[][] points = circlePoints;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,413,ouble[] target = new double[points.length];
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,414,"rrays.fill(target, 0.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,415,ouble[] weights = new double[points.length];
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,416,"rrays.fill(weights, 2.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,417,or (int i = 0; i < points.length; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,418,"ircle.addPoint(points[i][0], points[i][1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,421,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,422," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,424,"ptimizer.optimize(100, circle, target, weights, new double[] { -12, -12 });"
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,134,* This test does not converge with this optimizer
True,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,136,super.testCircleFittingBadInit();
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,427,Test
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,428,ublic void testCircleFittingGoodInit() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,429,ircleVectorial circle = new CircleVectorial();
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,430,ouble[][] points = circlePoints;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,431,ouble[] target = new double[points.length];
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,432,"rrays.fill(target, 0.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,433,ouble[] weights = new double[points.length];
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,434,"rrays.fill(weights, 2.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,435,or (int i = 0; i < points.length; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,436,"ircle.addPoint(points[i][0], points[i][1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,439,aussNewtonOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,440," new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,442,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,443,"ptimizer.optimize(100, circle, target, weights, new double[] { 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,444,"ssert.assertEquals(-0.1517383071957963, optimum.getPointRef()[0], 1.0e-6);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,445,"ssert.assertEquals(0.2074999736353867,  optimum.getPointRef()[1], 1.0e-6);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,446,"ssert.assertEquals(0.04268731682389561, optimizer.getRMS(),       1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,449,"rivate static class LinearProblem implements DifferentiableMultivariateVectorFunction, Serializable {"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,451,rivate static final long serialVersionUID = -8804268799379350190L;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,452,inal RealMatrix factors;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,453,inal double[] target;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,454,"ublic LinearProblem(double[][] factors, double[] target) {"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,455,his.factors = new BlockRealMatrix(factors);
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,456,his.target  = target;
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,459,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,460,eturn factors.operate(variables);
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,463,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,464,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,465,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,466,eturn factors.getData();
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,472,rivate final double[][] circlePoints = new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,473,"-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,474,"-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,475,"-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,476,"-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,477," 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,478," 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,479,"-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,480,"-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,481,"-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,482,"-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,483,"-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,484," 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,485," 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,486,"-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,487,"-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,488,"-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,489,"-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,490,"-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,491," 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,492," 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,493," 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,494,"-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,495,"-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,496,"-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,497,"-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,498,"-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,499," 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,500," 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
False,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java,501,"-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,23,mport java.util.Arrays;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,25,import org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,26,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,30,mport org.apache.commons.math3.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,31,mport org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,32,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,33,mport org.apache.commons.math3.linear.BlockRealMatrix;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,34,mport org.apache.commons.math3.linear.RealMatrix;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,36,mport org.apache.commons.math3.optimization.SimpleVectorValueChecker;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,38,mport org.apache.commons.math3.util.Precision;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,33,import org.apache.commons.math3.util.Precision;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,105,ublic class LevenbergMarquardtOptimizerTest {
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,99,public class LevenbergMarquardtOptimizerTest extends AbstractLeastSquaresOptimizerAbstractTest {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,107,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,108,ublic void testTrivial() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,109,inearProblem problem =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,110,"ew LinearProblem(new double[][] { { 2 } }, new double[] { 3 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,111,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,112,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,113,"ptimizer.optimize(100, problem, problem.target, new double[] { 1 }, new double[] { 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,114,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,115,ry {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,116,ptimizer.guessParametersErrors();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,117,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,118, catch (NumberIsTooSmallException ee) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,119,/ expected behavior
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,121,"ssert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,122,"ssert.assertEquals(3.0, optimum.getValue()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,125,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,126,ublic void testQRColumnsPermutation() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,128,inearProblem problem =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,129,"ew LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,130,"ew double[] { 4.0, 6.0, 1.0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,132,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,133,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,134,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,135,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,136,"ssert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,137,"ssert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,138,"ssert.assertEquals(4.0, optimum.getValue()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,139,"ssert.assertEquals(6.0, optimum.getValue()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,140,"ssert.assertEquals(1.0, optimum.getValue()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,143,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,144,ublic void testNoDependency() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,145,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,146," 2, 0, 0, 0, 0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,147," 0, 2, 0, 0, 0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,148," 0, 0, 2, 0, 0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,149," 0, 0, 0, 2, 0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,150," 0, 0, 0, 0, 2, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,151," 0, 0, 0, 0, 0, 2 }"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,152,", new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,153,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,154,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,155,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,156,"ew double[] { 0, 0, 0, 0, 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,157,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,158,or (int i = 0; i < problem.target.length; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,159,"ssert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,163,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,164,ublic void testOneSet() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,166,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,167,"  1,  0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,168," -1,  1, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,169,"  0, -1, 1 }"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,170,", new double[] { 1, 1, 1});"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,171,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,172,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,173,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,174,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,175,"ssert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,176,"ssert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,177,"ssert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,180,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,181,ublic void testTwoSets() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,182,ouble epsilon = 1.0e-7;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,183,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,184,"  2,  1,   0,  4,       0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,185," -4, -2,   3, -7,       0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,186,"  4,  1,  -2,  8,       0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,187,"  0, -3, -12, -1,       0, 0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,188,"  0,  0,   0,  0, epsilon, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,189,"  0,  0,   0,  0,       1, 1 }"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,190,", new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,192,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,193,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,194,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,195,"ew double[] { 0, 0, 0, 0, 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,196,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,197,"ssert.assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,198,"ssert.assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,199,"ssert.assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,200,"ssert.assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,201,"ssert.assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,202,"ssert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,101,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,102,public AbstractLeastSquaresOptimizer createOptimizer() {
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,103,return new LevenbergMarquardtOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,106,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,110,"* Overrides the method from parent class, since the default singularity"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,111,* threshold (1e-14) does not trigger the expected exception.
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,213,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,214,"ptimizer.optimize(100, problem, problem.target,"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,215,"ew double[] { 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,216,"ew double[] { 0, 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,119,AbstractLeastSquaresOptimizer optimizer = createOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,120,"optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,219,/ The default singularity threshold (1e-14) does not trigger the
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,220,/ expected exception.
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,224,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,225,ublic void testIllConditioned() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,226,inearProblem problem1 = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,227," 10.0, 7.0,  8.0,  7.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,228,"  7.0, 5.0,  6.0,  5.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,229,"  8.0, 6.0, 10.0,  9.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,230,"  7.0, 5.0,  9.0, 10.0 }"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,231,", new double[] { 32, 23, 33, 31 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,232,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,233,ointVectorValuePair optimum1 =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,234,"ptimizer.optimize(100, problem1, problem1.target, new double[] { 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,235,"ew double[] { 0, 1, 2, 3 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,236,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,237,"ssert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,238,"ssert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,239,"ssert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,240,"ssert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,242,inearProblem problem2 = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,243," 10.00, 7.00, 8.10, 7.20 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,244,"  7.08, 5.04, 6.00, 5.00 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,245,"  8.00, 5.98, 9.89, 9.00 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,246,"  6.99, 4.99, 9.00, 9.98 }"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,247,", new double[] { 32, 23, 33, 31 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,248,ointVectorValuePair optimum2 =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,249,"ptimizer.optimize(100, problem2, problem2.target, new double[] { 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,250,"ew double[] { 0, 1, 2, 3 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,251,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,252,"ssert.assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,253,"ssert.assertEquals(137.0, optimum2.getPoint()[1], 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,254,"ssert.assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,255,"ssert.assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,258,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,259,ublic void testMoreEstimatedParametersSimple() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,261,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,262," 3.0, 2.0,  0.0, 0.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,263," 0.0, 1.0, -1.0, 1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,264," 2.0, 0.0,  1.0, 0.0 }"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,265,", new double[] { 7.0, 3.0, 5.0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,267,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,268,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,269,"ew double[] { 7, 6, 5, 4 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,270,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,273,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,274,ublic void testMoreEstimatedParametersUnsorted() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,275,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,276," 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,277," 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,278," 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,279," 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,280," 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,281,", new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,283,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,284,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,285,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,286,"ew double[] { 2, 2, 2, 2, 2, 2 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,287,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,288,"ssert.assertEquals(3.0, optimum.getPointRef()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,289,"ssert.assertEquals(4.0, optimum.getPointRef()[3], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,290,"ssert.assertEquals(5.0, optimum.getPointRef()[4], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,291,"ssert.assertEquals(6.0, optimum.getPointRef()[5], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,294,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,295,ublic void testRedundantEquations() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,296,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,297," 1.0,  1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,298," 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,299," 1.0,  3.0 }"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,300,", new double[] { 3.0, 1.0, 5.0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,302,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,303,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,304,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,305,"ew double[] { 1, 1 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,306,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,307,"ssert.assertEquals(2.0, optimum.getPointRef()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,308,"ssert.assertEquals(1.0, optimum.getPointRef()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,311,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,312,ublic void testInconsistentEquations() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,313,inearProblem problem = new LinearProblem(new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,314," 1.0,  1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,315," 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,316," 1.0,  3.0 }"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,317,", new double[] { 3.0, 1.0, 4.0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,319,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,320,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 1, 1 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,321,ssert.assertTrue(optimizer.getRMS() > 0.1);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,324,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,325,ublic void testInconsistentSizes() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,326,inearProblem problem =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,327,"ew LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,328,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,330,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,331,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,332,"ssert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,333,"ssert.assertEquals(-1, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,334,"ssert.assertEquals(+1, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,336,ry {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,337,"ptimizer.optimize(100, problem, problem.target,"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,338,"ew double[] { 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,339,"ew double[] { 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,340,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,341, catch (DimensionMismatchException oe) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,342,/ expected behavior
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,345,ry {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,346,"ptimizer.optimize(100, problem, new double[] { 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,347,"ew double[] { 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,348,"ew double[] { 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,349,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,350, catch (DimensionMismatchException oe) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,351,/ expected behavior
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,392,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,393,ublic void testCircleFitting() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,394,ircleVectorial circle = new CircleVectorial();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,395,"ircle.addPoint( 30.0,  68.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,396,"ircle.addPoint( 50.0,  -6.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,397,"ircle.addPoint(110.0, -20.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,398,"ircle.addPoint( 35.0,  15.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,399,"ircle.addPoint( 45.0,  97.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,400,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,401,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,402,"ptimizer.optimize(100, circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,403,"ew double[] { 98.680, 47.345 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,404,ssert.assertTrue(optimizer.getEvaluations() < 10);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,405,ssert.assertTrue(optimizer.getJacobianEvaluations() < 10);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,406,ouble rms = optimizer.getRMS();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,407,"ssert.assertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * rms,  1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,408,"oint2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,409,"ssert.assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,410,"ssert.assertEquals(96.07590211815305, center.x,      1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,411,"ssert.assertEquals(48.13516790438953, center.y,      1.0e-10);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,412,ouble[][] cov = optimizer.getCovariances();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,413,"ssert.assertEquals(1.839, cov[0][0], 0.001);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,414,"ssert.assertEquals(0.731, cov[0][1], 0.001);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,415,"ssert.assertEquals(cov[0][1], cov[1][0], 1.0e-14);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,416,"ssert.assertEquals(0.786, cov[1][1], 0.001);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,417,ouble[] errors = optimizer.guessParametersErrors();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,418,"ssert.assertEquals(1.384, errors[0], 0.001);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,419,"ssert.assertEquals(0.905, errors[1], 0.001);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,421,/ add perfect measurements and check errors are reduced
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,422,ouble  r = circle.getRadius(center);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,423,or (double d= 0; d < 2 * FastMath.PI; d += 0.01) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,424,"ircle.addPoint(center.x + r * FastMath.cos(d), center.y + r * FastMath.sin(d));"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,426,ouble[] target = new double[circle.getN()];
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,427,"rrays.fill(target, 0.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,428,ouble[] weights = new double[circle.getN()];
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,429,"rrays.fill(weights, 2.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,430,"ptimizer.optimize(100, circle, target, weights, new double[] { 98.680, 47.345 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,431,ov = optimizer.getCovariances();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,432,"ssert.assertEquals(0.0016, cov[0][0], 0.001);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,433,"ssert.assertEquals(3.2e-7, cov[0][1], 1.0e-9);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,434,"ssert.assertEquals(cov[0][1], cov[1][0], 1.0e-14);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,435,"ssert.assertEquals(0.0016, cov[1][1], 0.001);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,436,rrors = optimizer.guessParametersErrors();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,437,"ssert.assertEquals(0.004, errors[0], 0.001);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,438,"ssert.assertEquals(0.004, errors[1], 0.001);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,441,Test
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,442,ublic void testCircleFittingBadInit() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,443,ircleVectorial circle = new CircleVectorial();
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,444,ouble[][] points = new double[][] {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,445,"-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,446,"-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,447,"-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,448,"-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,449," 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,450," 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,451,"-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,452,"-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,453,"-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,454,"-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,455,"-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,456," 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,457," 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,458,"-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,459,"-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,460,"-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,461,"-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,462,"-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,463," 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,464," 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,465," 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,466,"-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,467,"-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,468,"-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,469,"-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,470,"-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,471," 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,472," 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,473,"-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,475,ouble[] target = new double[points.length];
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,476,"rrays.fill(target, 0.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,477,ouble[] weights = new double[points.length];
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,478,"rrays.fill(weights, 2.0);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,479,or (int i = 0; i < points.length; ++i) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,480,"ircle.addPoint(points[i][0], points[i][1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,482,evenbergMarquardtOptimizer optimizer
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,483," new LevenbergMarquardtOptimizer(new SimpleVectorValueChecker(1.0e-8, 1.0e-8));"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,484,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,485,"ptimizer.optimize(100, circle, target, weights, new double[] { -12, -12 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,486,"oint2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,487,ssert.assertTrue(optimizer.getEvaluations() < 25);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,488,ssert.assertTrue(optimizer.getJacobianEvaluations() < 20);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,489,"ssert.assertEquals( 0.043, optimizer.getRMS(), 1.0e-3);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,490,"ssert.assertEquals( 0.292235,  circle.getRadius(center), 1.0e-6);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,491,"ssert.assertEquals(-0.151738,  center.x,      1.0e-6);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,492,"ssert.assertEquals( 0.2075001, center.y,      1.0e-6);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,642,"rivate static class LinearProblem implements DifferentiableMultivariateVectorFunction, Serializable {"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,644,rivate static final long serialVersionUID = 703247177355019415L;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,645,inal RealMatrix factors;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,646,inal double[] target;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,647,"ublic LinearProblem(double[][] factors, double[] target) {"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,648,his.factors = new BlockRealMatrix(factors);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,649,his.target  = target;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,652,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,653,eturn factors.operate(variables);
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,656,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,657,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,658,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,659,eturn factors.getData();

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,1,package org.apache.commons.math3.genetics;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,3,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,4,import java.util.Collections;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,5,import java.util.HashSet;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,6,import java.util.List;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,7,import java.util.Set;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,9,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,10,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,11,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,12,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,13,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,16,* Order 1 Crossover [OX1] builds offspring from <b>ordered</b> chromosomes by copying a
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,17,"* consecutive slice from one parent, and filling up the remaining genes from the other"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,18,* parent as they appear.
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,19,* <p>
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,20,* This policy works by applying the following rules:
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,21,* <ol>
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,22,*   <li>select a random slice of consecutive genes from parent 1</li>
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,23,*   <li>copy the slice to child 1 and mark out the genes in parent 2</li>
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,24,"*   <li>starting from the right side of the slice, copy genes from parent 2 as they"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,25,*       appear to child 1 if they are not yet marked out.</li>
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,26,* </ol>
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,27,* </p>
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,29,"* Example (random sublist from index 3 to 7, underlined):"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,30,* <pre>
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,31,* p1 = (8 4 7 3 6 2 5 1 9 0)   X   c1 = (0 4 7 3 6 2 5 1 8 9)
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,33,* p2 = (0 1 2 3 4 5 6 7 8 9)   X   c2 = (8 1 2 3 4 5 6 7 9 0)
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,34,* </pre>
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,36,"* This policy works only on {@link AbstractListChromosome}, and therefore it"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,37,"* is parameterized by T. Moreover, the chromosomes must have same lengths."
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,39,"* @see <a href=""http://www.rubicite.com/Tutorials/GeneticAlgorithms/CrossoverOperators/Order1CrossoverOperator.aspx"""
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,40,* Order 1 Crossover Operator</a>
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,42,* @param <T> generic type of the {@link AbstractListChromosome}s for crossover
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,43,* @since 3.1
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,44,* @version $Id$
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,46,public class OrderedCrossover<T> implements CrossoverPolicy {
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,49,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,51,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,52,"public ChromosomePair crossover(final Chromosome first, final Chromosome second) {"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,53,if (!(first instanceof AbstractListChromosome<?> && second instanceof AbstractListChromosome<?>)) {
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,54,throw new MathIllegalArgumentException(LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,56,"return mate((AbstractListChromosome<T>) first, (AbstractListChromosome<T>) second);"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,60,"* Helper for {@link #crossover(Chromosome, Chromosome)}. Performs the actual crossover."
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,62,* @param first the first chromosome
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,63,* @param second the second chromosome
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,64,* @return the pair of new chromosomes that resulted from the crossover
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,65,* @throws DimensionMismatchException if the length of the two chromosomes is different
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,67,"protected ChromosomePair mate(final AbstractListChromosome<T> first, final AbstractListChromosome<T> second) {"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,68,final int length = first.getLength();
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,69,if (length != second.getLength()) {
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,70,"throw new DimensionMismatchException(second.getLength(), length);"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,73,// array representations of the parents
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,74,final List<T> parent1Rep = first.getRepresentation();
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,75,final List<T> parent2Rep = second.getRepresentation();
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,76,// and of the children
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,77,final List<T> child1 = new ArrayList<T>(length);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,78,final List<T> child2 = new ArrayList<T>(length);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,79,// sets of already inserted items for quick access
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,80,final Set<T> child1Set = new HashSet<T>(length);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,81,final Set<T> child2Set = new HashSet<T>(length);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,83,final RandomGenerator random = GeneticAlgorithm.getRandomGenerator();
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,84,"// choose random points, making sure that lb < ub."
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,85,int a = random.nextInt(length);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,86,int b;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,87,do {
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,88,b = random.nextInt(length);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,89,} while (a == b);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,90,// determine the lower and upper bounds
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,91,"final int lb = FastMath.min(a, b);"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,92,"final int ub = FastMath.max(a, b);"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,94,// add the subLists that are between lb and ub
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,95,"child1.addAll(parent1Rep.subList(lb, ub + 1));"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,96,child1Set.addAll(child1);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,97,"child2.addAll(parent2Rep.subList(lb, ub + 1));"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,98,child2Set.addAll(child2);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,100,// iterate over every item in the parents
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,101,for (int i = 1; i <= length; i++) {
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,102,final int idx = (ub + i) % length;
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,104,// retrieve the current item in each parent
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,105,final T item1 = parent1Rep.get(idx);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,106,final T item2 = parent2Rep.get(idx);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,108,// if the first child already contains the item in the second parent add it
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,109,if (!child1Set.contains(item2)) {
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,110,child1.add(item2);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,111,child1Set.add(item2);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,114,// if the second child already contains the item in the first parent add it
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,115,if (!child2Set.contains(item1)) {
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,116,child2.add(item1);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,117,child2Set.add(item1);
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,121,// rotate so that the original slice is in the same place as in the parents.
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,122,"Collections.rotate(child1, lb);"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,123,"Collections.rotate(child2, lb);"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,125,"return new ChromosomePair(first.newFixedLengthChromosome(child1),"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,126,second.newFixedLengthChromosome(child2));
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,1,package org.apache.commons.math3.genetics;
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,3,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,4,import java.util.HashSet;
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,5,import java.util.Set;
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,7,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,8,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,9,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,10,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,12,public class OrderedCrossoverTest {
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,14,@Test
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,15,public void testCrossover() {
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,16,"final Integer[] p1 = new Integer[] { 8, 4, 7, 3, 6, 2, 5, 1, 9, 0 };"
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,17,"final Integer[] p2 = new Integer[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };"
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,18,final DummyListChromosome p1c = new DummyListChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,19,final DummyListChromosome p2c = new DummyListChromosome(p2);
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,21,final CrossoverPolicy cp = new OrderedCrossover<Integer>();
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,23,for (int i = 0; i < 20; i++) {
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,24,final Set<Integer> parentSet1 = new HashSet<Integer>(Arrays.asList(p1));
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,25,final Set<Integer> parentSet2 = new HashSet<Integer>(Arrays.asList(p2));
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,27,"final ChromosomePair pair = cp.crossover(p1c, p2c);"
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,29,final Integer[] c1 = ((DummyListChromosome) pair.getFirst()).getRepresentation().toArray(new Integer[p1.length]);
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,30,final Integer[] c2 = ((DummyListChromosome) pair.getSecond()).getRepresentation().toArray(new Integer[p2.length]);
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,32,"Assert.assertNotSame(p1c, pair.getFirst());"
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,33,"Assert.assertNotSame(p2c, pair.getSecond());"
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,35,// make sure that the children have exactly the same elements as their parents
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,36,for (int j = 0; j < c1.length; j++) {
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,37,Assert.assertTrue(parentSet1.contains(c1[j]));
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,38,parentSet1.remove(c1[j]);
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,39,Assert.assertTrue(parentSet2.contains(c2[j]));
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,40,parentSet2.remove(c2[j]);
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,45,@Test(expected = DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,46,public void testCrossoverDimensionMismatchException() {
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,47,"final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 };"
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,48,"final Integer[] p2 = new Integer[] { 0, 1, 1, 0, 1 };"
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,50,final BinaryChromosome p1c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,51,final BinaryChromosome p2c = new DummyBinaryChromosome(p2);
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,53,final CrossoverPolicy cp = new OrderedCrossover<Integer>();
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,54,"cp.crossover(p1c, p2c);"
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,57,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,58,public void testCrossoverInvalidFixedLengthChromosomeFirst() {
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,59,"final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 };"
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,60,final BinaryChromosome p1c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,61,final Chromosome p2c = new Chromosome() {
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,62,public double fitness() {
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,63,// Not important
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,64,return 0;
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,68,final CrossoverPolicy cp = new OrderedCrossover<Integer>();
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,69,"cp.crossover(p1c, p2c);"
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,72,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,73,public void testCrossoverInvalidFixedLengthChromosomeSecond() {
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,74,"final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 };"
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,75,final BinaryChromosome p2c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,76,final Chromosome p1c = new Chromosome() {
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,77,public double fitness() {
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,78,// Not important
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,79,return 0;
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,83,final CrossoverPolicy cp = new OrderedCrossover<Integer>();
True,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java,84,"cp.crossover(p1c, p2c);"

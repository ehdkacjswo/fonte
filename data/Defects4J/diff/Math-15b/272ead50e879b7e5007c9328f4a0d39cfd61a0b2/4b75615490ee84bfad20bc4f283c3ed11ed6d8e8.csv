is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,18,ackage org.apache.commons.math.ode.jacobians;
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,20,mport org.apache.commons.math.ode.events.EventException;
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,22,** This interface represents a handler for discrete events triggered
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,23, during ODE integration.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,25, <p>Some events can be triggered at discrete times as an ODE problem
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,26, is solved. This occurs for example when the integration process
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,27, should be stopped as some state is reached (G-stop facility) when the
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,28," precise date is unknown a priori, or when the derivatives have"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,29," discontinuities, or simply when the user wants to monitor some"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,30, states boundaries crossings.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,31, </p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,33, <p>These events are defined as occurring when a <code>g</code>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,34, switching function sign changes.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,36, <p>Since events are only problem-dependent and are triggered by the
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,37," independent <i>time</i> variable and the state vector, they can"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,38," occur at virtually any time, unknown in advance. The integrators will"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,39," take care to avoid sign changes inside the steps, they will reduce"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,40, the step size when such an event is detected in order to put this
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,41, event exactly at the end of the current step. This guarantees that
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,42, step interpolation (which always has a one step scope) is relevant
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,43, even in presence of discontinuities. This is independent from the
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,44, stepsize control provided by integrators that monitor the local
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,45," error (this event handling feature is available for all integrators,"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,46, including fixed step ones).</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,48, <p>Note that is is possible to register a {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,49, org.apache.commons.math.ode.events.EventHandler classical event handler}
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,50, in the low level integrator used to build a {@link FirstOrderIntegratorWithJacobians}
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,51, rather than implementing this class. The event handlers registered at low level
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,52, will see the big compound state whether the event handlers defined by this interface
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,53," see the original state, and its jacobians in separate arrays.</p>"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,55, <p>The compound state is guaranteed to contain the original state in the first
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,56," elements, followed by the jacobian with respect to initial state (in row order),"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,57, followed by the jacobian with respect to parameters (in row order). If for example
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,58," the original state dimension is 6 and there are 3 parameters, the compound state will"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,59," be a 60 elements array. The first 6 elements will be the original state, the next 36"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,60," elements will be the jacobian with respect to initial state, and the remaining 18 elements"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,61, will be the jacobian with respect to parameters.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,63, <p>Dealing with low level event handlers is cumbersome if one really needs the jacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,64," in these methods, but it also prevents many data being copied back and forth between"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,65, state and jacobians on one side and compound state on the other side. So for performance
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,66," reasons, it is recommended to use this interface <em>only</em> if jacobians are really"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,67, needed and to use lower level handlers if only state is needed.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,69, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,70, @since 2.1
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,73,ublic interface EventHandlerWithJacobians  {
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,75,** Stop indicator.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,76, <p>This value should be used as the return value of the {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,77, #eventOccurred eventOccurred} method when the integration should be
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,78, stopped after the event ending the current step.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,80,nt STOP = 0;
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,82,** Reset state indicator.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,83, <p>This value should be used as the return value of the {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,84, #eventOccurred eventOccurred} method when the integration should
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,85," go on after the event ending the current step, with a new state"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,86, vector (which will be retrieved thanks to the {@link #resetState
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,87, resetState} method).</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,89,nt RESET_STATE = 1;
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,91,** Reset derivatives indicator.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,92, <p>This value should be used as the return value of the {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,93, #eventOccurred eventOccurred} method when the integration should
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,94," go on after the event ending the current step, with a new derivatives"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,95, vector (which will be retrieved thanks to the {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,96, org.apache.commons.math.ode.FirstOrderDifferentialEquations#computeDerivatives}
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,97, method).</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,99,nt RESET_DERIVATIVES = 2;
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,101,** Continue indicator.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,102, <p>This value should be used as the return value of the {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,103, #eventOccurred eventOccurred} method when the integration should go
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,104, on after the event ending the current step.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,106,nt CONTINUE = 3;
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,108,** Compute the value of the switching function.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,110, <p>The discrete events are generated when the sign of this
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,111, switching function changes. The integrator will take care to change
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,112, the stepsize in such a way these events occur exactly at step boundaries.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,113, The switching function must be continuous in its roots neighborhood
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,114," (but not necessarily smooth), as the integrator will need to find its"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,115, roots to locate precisely the events.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,117, @param t current value of the independent <i>time</i> variable
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,118, @param y array containing the current value of the state vector
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,119, @param dydy0 array containing the current value of the jacobian of
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,120, the state vector with respect to initial state
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,121, @param dydp array containing the current value of the jacobian of
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,122, the state vector with respect to parameters
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,123, @return value of the g switching function
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,124, @exception EventException if the switching function cannot be evaluated
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,126,"ouble g(double t, double[] y, double[][] dydy0, double[][] dydp)"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,127,hrows EventException;
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,129,** Handle an event and choose what to do next.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,131, <p>This method is called when the integrator has accepted a step
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,132," ending exactly on a sign change of the function, just <em>before</em>"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,133, the step handler itself is called (see below for scheduling). It
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,134, allows the user to update his internal data to acknowledge the fact
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,135, the event has been handled (for example setting a flag in the {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,136, org.apache.commons.math.ode.jacobians.ODEWithJacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,137, differential equations} to switch the derivatives computation in
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,138," case of discontinuity), or to direct the integrator to either stop"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,139," or continue integration, possibly with a reset state or derivatives.</p>"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,141, <ul>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,142,"   <li>if {@link #STOP} is returned, the step handler will be called"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,143,   with the <code>isLast</code> flag of the {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,144,   org.apache.commons.math.ode.jacobians.StepHandlerWithJacobians#handleStep(
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,145,"   StepInterpolatorWithJacobians, boolean) handleStep} method set to true and"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,146,"   the integration will be stopped,</li>"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,147,"   <li>if {@link #RESET_STATE} is returned, the {@link #resetState"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,148,   resetState} method will be called once the step handler has
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,149,"   finished its task, and the integrator will also recompute the"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,150,"   derivatives,</li>"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,151,"   <li>if {@link #RESET_DERIVATIVES} is returned, the integrator"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,152,"   will recompute the derivatives,"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,153,"   <li>if {@link #CONTINUE} is returned, no specific action will"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,154,   be taken (apart from having called this method) and integration
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,155,   will continue.</li>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,156, </ul>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,158, <p>The scheduling between this method and the {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,159, org.apache.commons.math.ode.jacobians.StepHandlerWithJacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,160, StepHandlerWithJacobians} method {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,161, org.apache.commons.math.ode.jacobians.StepHandlerWithJacobians#handleStep(
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,162," StepInterpolatorWithJacobians, boolean) handleStep(interpolator, isLast)}"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,163, is to call this method first and <code>handleStep</code> afterwards. This
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,164, scheduling allows the integrator to pass <code>true</code> as the
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,165, <code>isLast</code> parameter to the step handler to make it aware the step
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,166, will be the last one if this method returns {@link #STOP}. As the
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,167, interpolator may be used to navigate back throughout the last step (as {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,168, org.apache.commons.math.ode.sampling.StepNormalizer StepNormalizer}
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,169," does for example), user code called by this method and user"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,170, code called by step handlers may experience apparently out of order values
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,171," of the independent time variable. As an example, if the same user object"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,172, implements both this {@link EventHandlerWithJacobians EventHandler} interface and the
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,173, {@link org.apache.commons.math.ode.sampling.FixedStepHandler FixedStepHandler}
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,174," interface, a <em>forward</em> integration may call its"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,175, <code>eventOccurred</code> method with t = 10 first and call its
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,176, <code>handleStep</code> method with t = 9 afterwards. Such out of order
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,177, calls are limited to the size of the integration step for {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,178, org.apache.commons.math.ode.sampling.StepHandler variable step handlers} and
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,179, to the size of the fixed step for {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,180, org.apache.commons.math.ode.sampling.FixedStepHandler fixed step handlers}.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,182, @param t current value of the independent <i>time</i> variable
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,183, @param y array containing the current value of the state vector
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,184, @param dydy0 array containing the current value of the jacobian of
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,185, the state vector with respect to initial state
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,186, @param dydp array containing the current value of the jacobian of
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,187, the state vector with respect to parameters
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,188," @param increasing if true, the value of the switching function increases"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,189, when times increases around event (note that increase is measured with respect
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,190," to physical time, not with respect to integration which may go backward in time)"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,191," @return indication of what the integrator should do next, this"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,192," value must be one of {@link #STOP}, {@link #RESET_STATE},"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,193, {@link #RESET_DERIVATIVES} or {@link #CONTINUE}
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,194, @exception EventException if the event occurrence triggers an error
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,196,"nt eventOccurred(double t, double[] y, double[][] dydy0, double[][] dydp,"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,197,oolean increasing) throws EventException;
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,199,** Reset the state prior to continue the integration.
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,201, <p>This method is called after the step handler has returned and
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,202," before the next step is started, but only when {@link"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,203, #eventOccurred} has itself returned the {@link #RESET_STATE}
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,204, indicator. It allows the user to reset the state vector for the
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,205," next step, without perturbing the step handler of the finishing"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,206, step. If the {@link #eventOccurred} never returns the {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,207," #RESET_STATE} indicator, this function will never be called, and it is"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,208, safe to leave its body empty.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,210, @param t current value of the independent <i>time</i> variable
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,211, @param y array containing the current value of the state vector
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,212, the new state should be put in the same array
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,213, @param dydy0 array containing the current value of the jacobian of
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,214," the state vector with respect to initial state, the new jacobian"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,215, should be put in the same array
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,216, @param dydp array containing the current value of the jacobian of
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,217," the state vector with respect to parameters, the new jacobian"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,218, should be put in the same array
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,219, @exception EventException if the state cannot be reseted
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,221,"oid resetState(double t, double[] y, double[][] dydy0, double[][] dydp)"
False,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java,222,hrows EventException;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,18,ackage org.apache.commons.math.ode.jacobians;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,20,mport java.io.IOException;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,21,mport java.io.ObjectInput;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,22,mport java.io.ObjectOutput;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,23,mport java.lang.reflect.Array;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,24,mport java.util.ArrayList;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,25,mport java.util.Collection;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,27,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,28,mport org.apache.commons.math.MaxEvaluationsExceededException;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,29,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,30,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,31,mport org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,32,mport org.apache.commons.math.ode.FirstOrderIntegrator;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,33,mport org.apache.commons.math.ode.IntegratorException;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,34,mport org.apache.commons.math.ode.events.EventException;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,35,mport org.apache.commons.math.ode.events.EventHandler;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,36,mport org.apache.commons.math.ode.sampling.StepHandler;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,37,mport org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,39,** This class enhances a first order integrator for differential equations to
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,40, compute also partial derivatives of the solution with respect to initial state
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,41, and parameters.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,42," <p>In order to compute both the state and its derivatives, the ODE problem"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,43, is extended with jacobians of the raw ODE and the variational equations are
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,44, added to form a new compound problem of higher dimension. If the original ODE
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,45," problem has dimension n and there are p parameters, the compound problem will"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,46, have dimension n &times; (1 + n + p).</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,47, @see ParameterizedODE
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,48, @see ODEWithJacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,49, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,50, @since 2.1
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,52,ublic class FirstOrderIntegratorWithJacobians {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,54,** Underlying integrator for compound problem. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,55,rivate final FirstOrderIntegrator integrator;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,57,** Raw equations to integrate. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,58,rivate final ODEWithJacobians ode;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,60,** Maximal number of evaluations allowed. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,61,rivate int maxEvaluations;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,63,** Number of evaluations already performed. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,64,rivate int evaluations;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,66,** Build an enhanced integrator using internal differentiation to compute jacobians.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,67, @param integrator underlying integrator to solve the compound problem
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,68," @param ode original problem (f in the equation y' = f(t, y))"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,69, @param p parameters array (may be null if {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,70, ParameterizedODE#getParametersDimension()
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,71, getParametersDimension()} from original problem is zero)
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,72," @param hY step sizes to use for computing the jacobian df/dy, must have the"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,73, same dimension as the original problem
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,74," @param hP step sizes to use for computing the jacobian df/dp, must have the"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,75, same dimension as the original problem parameters dimension
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,76," @see #FirstOrderIntegratorWithJacobians(FirstOrderIntegrator,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,77, ODEWithJacobians)
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,79,"ublic FirstOrderIntegratorWithJacobians(final FirstOrderIntegrator integrator,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,80,"inal ParameterizedODE ode,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,81,"inal double[] p, final double[] hY, final double[] hP) {"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,82,"heckDimension(ode.getDimension(), hY);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,83,"heckDimension(ode.getParametersDimension(), p);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,84,"heckDimension(ode.getParametersDimension(), hP);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,85,his.integrator = integrator;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,86,"his.ode = new FiniteDifferencesWrapper(ode, p, hY, hP);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,87,etMaxEvaluations(-1);
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,90,** Build an enhanced integrator using ODE builtin jacobian computation features.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,91, @param integrator underlying integrator to solve the compound problem
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,92," @param ode original problem, which can compute the jacobians by itself"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,93," @see #FirstOrderIntegratorWithJacobians(FirstOrderIntegrator,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,94," ParameterizedODE, double[], double[], double[])"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,96,"ublic FirstOrderIntegratorWithJacobians(final FirstOrderIntegrator integrator,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,97,inal ODEWithJacobians ode) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,98,his.integrator = integrator;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,99,his.ode = ode;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,100,etMaxEvaluations(-1);
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,103,** Add a step handler to this integrator.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,104, <p>The handler will be called by the integrator for each accepted
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,105, step.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,106, @param handler handler for the accepted steps
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,107, @see #getStepHandlers()
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,108, @see #clearStepHandlers()
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,110,ublic void addStepHandler(StepHandlerWithJacobians handler) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,111,inal int n = ode.getDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,112,inal int k = ode.getParametersDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,113,"ntegrator.addStepHandler(new StepHandlerWrapper(handler, n, k));"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,116,** Get all the step handlers that have been added to the integrator.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,117, @return an unmodifiable collection of the added events handlers
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,118, @see #addStepHandler(StepHandlerWithJacobians)
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,119, @see #clearStepHandlers()
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,121,ublic Collection<StepHandlerWithJacobians> getStepHandlers() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,122,inal Collection<StepHandlerWithJacobians> handlers =
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,123,ew ArrayList<StepHandlerWithJacobians>();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,124,or (final StepHandler handler : integrator.getStepHandlers()) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,125,f (handler instanceof StepHandlerWrapper) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,126,andlers.add(((StepHandlerWrapper) handler).getHandler());
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,129,eturn handlers;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,132,** Remove all the step handlers that have been added to the integrator.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,133, @see #addStepHandler(StepHandlerWithJacobians)
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,134, @see #getStepHandlers()
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,136,ublic void clearStepHandlers() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,137,ntegrator.clearStepHandlers();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,140,** Add an event handler to the integrator.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,141, @param handler event handler
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,142, @param maxCheckInterval maximal time interval between switching
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,143, function checks (this interval prevents missing sign changes in
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,144, case the integration steps becomes very large)
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,145, @param convergence convergence threshold in the event time search
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,146, @param maxIterationCount upper limit of the iteration count in
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,147, the event time search
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,148, @see #getEventHandlers()
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,149, @see #clearEventHandlers()
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,151,"ublic void addEventHandler(EventHandlerWithJacobians handler,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,152,"ouble maxCheckInterval,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,153,"ouble convergence,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,154,nt maxIterationCount) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,155,inal int n = ode.getDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,156,inal int k = ode.getParametersDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,157,"ntegrator.addEventHandler(new EventHandlerWrapper(handler, n, k),"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,158,"axCheckInterval, convergence, maxIterationCount);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,161,** Get all the event handlers that have been added to the integrator.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,162, @return an unmodifiable collection of the added events handlers
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,163," @see #addEventHandler(EventHandlerWithJacobians, double, double, int)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,164, @see #clearEventHandlers()
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,166,ublic Collection<EventHandlerWithJacobians> getEventHandlers() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,167,inal Collection<EventHandlerWithJacobians> handlers =
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,168,ew ArrayList<EventHandlerWithJacobians>();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,169,or (final EventHandler handler : integrator.getEventHandlers()) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,170,f (handler instanceof EventHandlerWrapper) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,171,andlers.add(((EventHandlerWrapper) handler).getHandler());
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,174,eturn handlers;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,177,** Remove all the event handlers that have been added to the integrator.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,178," @see #addEventHandler(EventHandlerWithJacobians, double, double, int)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,179, @see #getEventHandlers()
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,181,ublic void clearEventHandlers() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,182,ntegrator.clearEventHandlers();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,185,** Integrate the differential equations and the variational equations up to the given time.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,186, <p>This method solves an Initial Value Problem (IVP) and also computes the derivatives
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,187, of the solution with respect to initial state and parameters. This can be used as
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,188, a basis to solve Boundary Value Problems (BVP).</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,189, <p>Since this method stores some internal state variables made
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,190, available in its public interface during integration ({@link
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,191," #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,192, @param t0 initial time
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,193, @param y0 initial value of the state vector at t0
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,194, @param dY0dP initial value of the state vector derivative with respect to the
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,195, parameters at t0
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,196, @param t target time for the integration
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,197, (can be set to a value smaller than <code>t0</code> for backward integration)
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,198, @param y placeholder where to put the state vector at each successful
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,199,"  step (and hence at the end of integration), can be the same object as y0"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,200, @param dYdY0 placeholder where to put the state vector derivative with respect
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,201, to the initial state (dy[i]/dy0[j] is in element array dYdY0[i][j]) at each successful
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,202,  step (and hence at the end of integration)
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,203, @param dYdP placeholder where to put the state vector derivative with respect
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,204, to the parameters (dy[i]/dp[j] is in element array dYdP[i][j]) at each successful
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,205,  step (and hence at the end of integration)
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,206," @return stop time, will be the same as target time if integration reached its"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,207," target, but may be different if some event handler stops it at some point."
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,208, @throws IntegratorException if the integrator cannot perform integration
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,209, @throws MathUserException this exception is propagated to the caller if
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,210, the underlying user function triggers one
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,212,"ublic double integrate(final double t0, final double[] y0, final double[][] dY0dP,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,213,"inal double t, final double[] y,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,214,"inal double[][] dYdY0, final double[][] dYdP)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,215,"hrows MathUserException, IntegratorException {"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,217,inal int n = ode.getDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,218,inal int k = ode.getParametersDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,219,"heckDimension(n, y0);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,220,"heckDimension(n, y);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,221,"heckDimension(n, dYdY0);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,222,"heckDimension(n, dYdY0[0]);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,223,f (k != 0) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,224,"heckDimension(n, dY0dP);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,225,"heckDimension(k, dY0dP[0]);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,226,"heckDimension(n, dYdP);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,227,"heckDimension(k, dYdP[0]);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,230,"/ set up initial state, including partial derivatives"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,231,/ the compound state z contains the raw state y and its derivatives
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,232,/ with respect to initial state y0 and to parameters p
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,233,/    y[i]         is stored in z[i]
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,234,/    dy[i]/dy0[j] is stored in z[n + i * n + j]
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,235,/    dy[i]/dp[j]  is stored in z[n * (n + 1) + i * k + j]
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,236,inal double[] z = new double[n * (1 + n + k)];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,237,"ystem.arraycopy(y0, 0, z, 0, n);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,238,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,240,/ set diagonal element of dy/dy0 to 1.0 at t = t0
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,241,[i * (1 + n) + n] = 1.0;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,243,/ set initial derivatives with respect to parameters
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,244,"ystem.arraycopy(dY0dP[i], 0, z, n * (n + 1) + i * k, k);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,248,/ integrate the compound state variational equations
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,249,valuations = 0;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,250,"inal double stopTime = integrator.integrate(new MappingWrapper(), t0, z, t, z);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,252,/ dispatch the final compound state into the state and partial derivatives arrays
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,253,"ispatchCompoundState(z, y, dYdY0, dYdP);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,255,eturn stopTime;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,259,** Dispatch a compound state array into state and jacobians arrays.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,260, @param z compound state
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,261, @param y raw state array to fill
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,262, @param dydy0 jacobian array to fill
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,263, @param dydp jacobian array to fill
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,265,"rivate static void dispatchCompoundState(final double[] z, final double[] y,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,266,"inal double[][] dydy0, final double[][] dydp) {"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,268,inal int n = y.length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,269,inal int k = dydp[0].length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,271,/ state
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,272,"ystem.arraycopy(z, 0, y, 0, n);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,274,/ jacobian with respect to initial state
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,275,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,276,"ystem.arraycopy(z, n * (i + 1), dydy0[i], 0, n);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,279,/ jacobian with respect to parameters
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,280,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,281,"ystem.arraycopy(z, n * (n + 1) + i * k, dydp[i], 0, k);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,286,** Get the current value of the step start time t<sub>i</sub>.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,287, <p>This method can be called during integration (typically by
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,288, the object implementing the {@link org.apache.commons.math.ode.FirstOrderDifferentialEquations
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,289, differential equations} problem) if the value of the current step that
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,290, is attempted is needed.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,291, <p>The result is undefined if the method is called outside of
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,292, calls to <code>integrate</code>.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,293, @return current value of the step start time t<sub>i</sub>
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,295,ublic double getCurrentStepStart() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,296,eturn integrator.getCurrentStepStart();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,299,** Get the current signed value of the integration stepsize.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,300, <p>This method can be called during integration (typically by
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,301, the object implementing the {@link org.apache.commons.math.ode.FirstOrderDifferentialEquations
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,302, differential equations} problem) if the signed value of the current stepsize
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,303, that is tried is needed.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,304, <p>The result is undefined if the method is called outside of
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,305, calls to <code>integrate</code>.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,306, @return current signed value of the stepsize
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,308,ublic double getCurrentSignedStepsize() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,309,eturn integrator.getCurrentSignedStepsize();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,312,** Set the maximal number of differential equations function evaluations.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,313, <p>The purpose of this method is to avoid infinite loops which can occur
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,314, for example when stringent error constraints are set or when lots of
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,315," discrete events are triggered, thus leading to many rejected steps.</p>"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,316, @param maxEvaluations maximal number of function evaluations (negative
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,317," values are silently converted to maximal integer value, thus representing"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,318, almost unlimited evaluations)
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,320,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,321,his.maxEvaluations = (maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,324,** Get the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,325, @return maximal number of functions evaluations
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,327,ublic int getMaxEvaluations() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,328,eturn maxEvaluations;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,331,** Get the number of evaluations of the differential equations function.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,332, <p>
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,333, The number of evaluations corresponds to the last call to the
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,334, <code>integrate</code> method. It is 0 if the method has not been called yet.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,335, </p>
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,336, @return number of evaluations of the differential equations function
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,338,ublic int getEvaluations() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,339,eturn evaluations;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,342,** Check array dimensions.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,343, @param expected expected dimension
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,344, @param array (may be null if expected is 0)
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,345, @throws IllegalArgumentException if the array dimension does not match the expected one
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,347,"rivate void checkDimension(final int expected, final Object array)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,348,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,349,nt arrayDimension = (array == null) ? 0 : Array.getLength(array);
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,350,f (arrayDimension != expected) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,351,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,352,"ocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, arrayDimension, expected);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,356,** Wrapper class used to map state and jacobians into compound state. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,357,rivate class MappingWrapper implements  ExtendedFirstOrderDifferentialEquations {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,359,** Current state. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,360,rivate final double[]   y;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,362,** Time derivative of the current state. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,363,rivate final double[]   yDot;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,365,** Derivatives of yDot with respect to state. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,366,rivate final double[][] dFdY;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,368,** Derivatives of yDot with respect to parameters. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,369,rivate final double[][] dFdP;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,371,** Simple constructor.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,373,ublic MappingWrapper() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,375,inal int n = ode.getDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,376,inal int k = ode.getParametersDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,377,    = new double[n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,378,Dot = new double[n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,379,FdY = new double[n][n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,380,FdP = new double[n][k];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,384,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,385,ublic int getDimension() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,386,inal int n = y.length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,387,inal int k = dFdP[0].length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,388,eturn n * (1 + n + k);
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,391,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,392,ublic int getMainSetDimension() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,393,eturn ode.getDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,396,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,397,"ublic void computeDerivatives(final double t, final double[] z, final double[] zDot)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,398,hrows MathUserException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,400,inal int n = y.length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,401,inal int k = dFdP[0].length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,403,"/ compute raw ODE and its jacobians: dy/dt, d[dy/dt]/dy0 and d[dy/dt]/dp"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,404,"ystem.arraycopy(z,    0, y,    0, n);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,405,f (++evaluations > maxEvaluations) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,406,hrow new MathUserException(new MaxEvaluationsExceededException(maxEvaluations));
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,408,"de.computeDerivatives(t, y, yDot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,409,"de.computeJacobians(t, y, yDot, dFdY, dFdP);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,411,/ state part of the compound equations
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,412,"ystem.arraycopy(yDot, 0, zDot, 0, n);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,414,/ variational equations: from d[dy/dt]/dy0 to d[dy/dy0]/dt
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,415,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,416,inal double[] dFdYi = dFdY[i];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,417,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,418,ouble s = 0;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,419,inal int startIndex = n + j;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,420,nt zIndex = startIndex;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,421,or (int l = 0; l < n; ++l) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,422, += dFdYi[l] * z[zIndex];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,423,Index += n;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,425,Dot[startIndex + i * n] = s;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,429,/ variational equations: from d[dy/dt]/dy0 and d[dy/dt]/dp to d[dy/dp]/dt
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,430,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,431,inal double[] dFdYi = dFdY[i];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,432,inal double[] dFdPi = dFdP[i];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,433,or (int j = 0; j < k; ++j) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,434,ouble s = dFdPi[j];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,435,inal int startIndex = n * (n + 1) + j;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,436,nt zIndex = startIndex;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,437,or (int l = 0; l < n; ++l) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,438, += dFdYi[l] * z[zIndex];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,439,Index += k;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,441,Dot[startIndex + i * k] = s;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,449,** Wrapper class to compute jacobians by finite differences for ODE which do not compute them themselves. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,450,rivate class FiniteDifferencesWrapper implements ODEWithJacobians {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,452,** Raw ODE without jacobians computation. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,453,rivate final ParameterizedODE ode;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,455,** Parameters array (may be null if parameters dimension from original problem is zero) */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,456,rivate final double[] p;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,458,** Step sizes to use for computing the jacobian df/dy. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,459,rivate final double[] hY;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,461,** Step sizes to use for computing the jacobian df/dp. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,462,rivate final double[] hP;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,464,** Temporary array for state derivatives used to compute jacobians. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,465,rivate final double[] tmpDot;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,467,** Simple constructor.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,468," @param ode original ODE problem, without jacobians computations"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,469, @param p parameters array (may be null if parameters dimension from original problem is zero)
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,470, @param hY step sizes to use for computing the jacobian df/dy
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,471, @param hP step sizes to use for computing the jacobian df/dp
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,473,"ublic FiniteDifferencesWrapper(final ParameterizedODE ode,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,474,"inal double[] p, final double[] hY, final double[] hP) {"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,475,his.ode = ode;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,476,his.p  = p.clone();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,477,his.hY = hY.clone();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,478,his.hP = hP.clone();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,479,mpDot = new double[ode.getDimension()];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,482,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,483,ublic int getDimension() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,484,eturn ode.getDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,487,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,488,"ublic void computeDerivatives(double t, double[] y, double[] yDot) throws MathUserException {"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,489,"/ this call to computeDerivatives has already been counted,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,490,/ we must not increment the counter again
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,491,"de.computeDerivatives(t, y, yDot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,494,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,495,ublic int getParametersDimension() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,496,eturn ode.getParametersDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,499,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,500,"ublic void computeJacobians(double t, double[] y, double[] yDot,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,501,"ouble[][] dFdY, double[][] dFdP)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,502,hrows MathUserException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,504,inal int n = hY.length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,505,inal int k = hP.length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,507,valuations += n + k;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,508,f (evaluations > maxEvaluations) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,509,hrow new MathUserException(new MaxEvaluationsExceededException(maxEvaluations));
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,512,/ compute df/dy where f is the ODE and y is the state array
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,513,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,514,inal double savedYj = y[j];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,515,[j] += hY[j];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,516,"de.computeDerivatives(t, y, tmpDot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,517,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,518,FdY[i][j] = (tmpDot[i] - yDot[i]) / hY[j];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,520,[j] = savedYj;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,523,/ compute df/dp where f is the ODE and p is the parameters array
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,524,or (int j = 0; j < k; ++j) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,525,"de.setParameter(j, p[j] +  hP[j]);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,526,"de.computeDerivatives(t, y, tmpDot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,527,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,528,FdP[i][j] = (tmpDot[i] - yDot[i]) / hP[j];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,530,"de.setParameter(j, p[j]);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,537,** Wrapper for step handlers. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,538,rivate static class StepHandlerWrapper implements StepHandler {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,540,** Underlying step handler with jacobians. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,541,rivate final StepHandlerWithJacobians handler;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,543,** Dimension of the original ODE. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,544,rivate final int n;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,546,** Number of parameters. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,547,rivate final int k;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,549,** Simple constructor.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,550, @param handler underlying step handler with jacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,551, @param n dimension of the original ODE
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,552, @param k number of parameters
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,554,"ublic StepHandlerWrapper(final StepHandlerWithJacobians handler,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,555,"inal int n, final int k) {"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,556,his.handler = handler;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,557,his.n       = n;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,558,his.k       = k;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,561,** Get the underlying step handler with jacobians.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,562, @return underlying step handler with jacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,564,ublic StepHandlerWithJacobians getHandler() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,565,eturn handler;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,568,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,569,"ublic void handleStep(StepInterpolator interpolator, boolean isLast)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,570,hrows MathUserException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,571,"andler.handleStep(new StepInterpolatorWrapper(interpolator, n, k), isLast);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,574,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,575,ublic boolean requiresDenseOutput() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,576,eturn handler.requiresDenseOutput();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,579,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,580,ublic void reset() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,581,andler.reset();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,586,** Wrapper for step interpolators. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,587,rivate static class StepInterpolatorWrapper
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,588,mplements StepInterpolatorWithJacobians {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,590,** Wrapped interpolator. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,591,rivate StepInterpolator interpolator;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,593,** State array. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,594,rivate double[] y;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,596,** Jacobian with respect to initial state dy/dy0. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,597,rivate double[][] dydy0;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,599,** Jacobian with respect to parameters dy/dp. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,600,rivate double[][] dydp;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,602,** Time derivative of the state array. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,603,rivate double[] yDot;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,605,** Time derivative of the sacobian with respect to initial state dy/dy0. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,606,rivate double[][] dydy0Dot;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,608,** Time derivative of the jacobian with respect to parameters dy/dp. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,609,rivate double[][] dydpDot;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,611,** Simple constructor.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,612, <p>This constructor is used only for externalization. It does nothing.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,614,"SuppressWarnings(""unused"")"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,615,ublic StepInterpolatorWrapper() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,618,** Simple constructor.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,619, @param interpolator wrapped interpolator
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,620, @param n dimension of the original ODE
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,621, @param k number of parameters
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,623,"ublic StepInterpolatorWrapper(final StepInterpolator interpolator,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,624,"inal int n, final int k) {"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,625,his.interpolator = interpolator;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,626,        = new double[n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,627,ydy0    = new double[n][n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,628,ydp     = new double[n][k];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,629,Dot     = new double[n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,630,ydy0Dot = new double[n][n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,631,ydpDot  = new double[n][k];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,634,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,635,ublic void setInterpolatedTime(double time) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,636,nterpolator.setInterpolatedTime(time);
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,639,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,640,ublic boolean isForward() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,641,eturn interpolator.isForward();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,644,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,645,ublic double getPreviousTime() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,646,eturn interpolator.getPreviousTime();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,649,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,650,ublic double getInterpolatedTime() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,651,eturn interpolator.getInterpolatedTime();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,654,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,655,ublic double[] getInterpolatedY() throws MathUserException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,656,ouble[] extendedState = interpolator.getInterpolatedState();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,657,"ystem.arraycopy(extendedState, 0, y, 0, y.length);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,658,eturn y;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,661,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,662,ublic double[][] getInterpolatedDyDy0() throws MathUserException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,663,ouble[] extendedState = interpolator.getInterpolatedState();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,664,inal int n = y.length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,665,nt start = n;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,666,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,667,"ystem.arraycopy(extendedState, start, dydy0[i], 0, n);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,668,tart += n;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,670,eturn dydy0;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,673,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,674,ublic double[][] getInterpolatedDyDp() throws MathUserException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,675,ouble[] extendedState = interpolator.getInterpolatedState();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,676,inal int n = y.length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,677,inal int k = dydp[0].length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,678,nt start = n * (n + 1);
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,679,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,680,"ystem.arraycopy(extendedState, start, dydp[i], 0, k);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,681,tart += k;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,683,eturn dydp;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,686,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,687,ublic double[] getInterpolatedYDot() throws MathUserException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,688,ouble[] extendedDerivatives = interpolator.getInterpolatedDerivatives();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,689,"ystem.arraycopy(extendedDerivatives, 0, yDot, 0, yDot.length);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,690,eturn yDot;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,693,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,694,ublic double[][] getInterpolatedDyDy0Dot() throws MathUserException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,695,ouble[] extendedDerivatives = interpolator.getInterpolatedDerivatives();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,696,inal int n = y.length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,697,nt start = n;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,698,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,699,"ystem.arraycopy(extendedDerivatives, start, dydy0Dot[i], 0, n);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,700,tart += n;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,702,eturn dydy0Dot;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,705,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,706,ublic double[][] getInterpolatedDyDpDot() throws MathUserException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,707,ouble[] extendedDerivatives = interpolator.getInterpolatedDerivatives();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,708,inal int n = y.length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,709,inal int k = dydpDot[0].length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,710,nt start = n * (n + 1);
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,711,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,712,"ystem.arraycopy(extendedDerivatives, start, dydpDot[i], 0, k);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,713,tart += k;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,715,eturn dydpDot;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,718,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,719,ublic double getCurrentTime() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,720,eturn interpolator.getCurrentTime();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,723,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,724,ublic StepInterpolatorWithJacobians copy() throws MathUserException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,725,inal int n = y.length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,726,inal int k = dydp[0].length;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,727,tepInterpolatorWrapper copied =
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,728,"ew StepInterpolatorWrapper(interpolator.copy(), n, k);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,729,"opyArray(y,        copied.y);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,730,"opyArray(dydy0,    copied.dydy0);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,731,"opyArray(dydp,     copied.dydp);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,732,"opyArray(yDot,     copied.yDot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,733,"opyArray(dydy0Dot, copied.dydy0Dot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,734,"opyArray(dydpDot,  copied.dydpDot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,735,eturn copied;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,738,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,739,ublic void writeExternal(ObjectOutput out) throws IOException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,740,ut.writeObject(interpolator);
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,741,ut.writeInt(y.length);
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,742,ut.writeInt(dydp[0].length);
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,743,"riteArray(out, y);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,744,"riteArray(out, dydy0);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,745,"riteArray(out, dydp);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,746,"riteArray(out, yDot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,747,"riteArray(out, dydy0Dot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,748,"riteArray(out, dydpDot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,751,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,752,"ublic void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,753,nterpolator = (StepInterpolator) in.readObject();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,754,inal int n = in.readInt();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,755,inal int k = in.readInt();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,756,        = new double[n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,757,ydy0    = new double[n][n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,758,ydp     = new double[n][k];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,759,Dot     = new double[n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,760,ydy0Dot = new double[n][n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,761,ydpDot  = new double[n][k];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,762,"eadArray(in, y);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,763,"eadArray(in, dydy0);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,764,"eadArray(in, dydp);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,765,"eadArray(in, yDot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,766,"eadArray(in, dydy0Dot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,767,"eadArray(in, dydpDot);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,770,** Copy an array.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,771, @param src source array
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,772, @param dest destination array
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,774,"rivate static void copyArray(final double[] src, final double[] dest) {"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,775,"ystem.arraycopy(src, 0, dest, 0, src.length);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,778,** Copy an array.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,779, @param src source array
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,780, @param dest destination array
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,782,"rivate static void copyArray(final double[][] src, final double[][] dest) {"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,783,or (int i = 0; i < src.length; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,784,"opyArray(src[i], dest[i]);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,788,** Write an array.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,789, @param out output stream
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,790, @param array array to write
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,791, @exception IOException if array cannot be read
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,793,"rivate static void writeArray(final ObjectOutput out, final double[] array)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,794,hrows IOException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,795,or (int i = 0; i < array.length; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,796,ut.writeDouble(array[i]);
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,800,** Write an array.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,801, @param out output stream
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,802, @param array array to write
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,803, @exception IOException if array cannot be read
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,805,"rivate static void writeArray(final ObjectOutput out, final double[][] array)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,806,hrows IOException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,807,or (int i = 0; i < array.length; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,808,"riteArray(out, array[i]);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,812,** Read an array.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,813, @param in input stream
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,814, @param array array to read
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,815, @exception IOException if array cannot be read
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,817,"rivate static void readArray(final ObjectInput in, final double[] array)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,818,hrows IOException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,819,or (int i = 0; i < array.length; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,820,rray[i] = in.readDouble();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,824,** Read an array.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,825, @param in input stream
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,826, @param array array to read
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,827, @exception IOException if array cannot be read
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,829,"rivate static void readArray(final ObjectInput in, final double[][] array)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,830,hrows IOException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,831,or (int i = 0; i < array.length; ++i) {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,832,"eadArray(in, array[i]);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,838,** Wrapper for event handlers. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,839,rivate static class EventHandlerWrapper implements EventHandler {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,841,** Underlying event handler with jacobians. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,842,rivate final EventHandlerWithJacobians handler;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,844,** State array. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,845,rivate double[] y;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,847,** Jacobian with respect to initial state dy/dy0. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,848,rivate double[][] dydy0;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,850,** Jacobian with respect to parameters dy/dp. */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,851,rivate double[][] dydp;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,853,** Simple constructor.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,854, @param handler underlying event handler with jacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,855, @param n dimension of the original ODE
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,856, @param k number of parameters
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,858,"ublic EventHandlerWrapper(final EventHandlerWithJacobians handler,"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,859,"inal int n, final int k) {"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,860,his.handler = handler;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,861,        = new double[n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,862,ydy0    = new double[n][n];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,863,ydp     = new double[n][k];
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,866,** Get the underlying event handler with jacobians.
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,867, @return underlying event handler with jacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,869,ublic EventHandlerWithJacobians getHandler() {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,870,eturn handler;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,873,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,874,"ublic int eventOccurred(double t, double[] z, boolean increasing)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,875,hrows EventException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,876,"ispatchCompoundState(z, y, dydy0, dydp);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,877,"eturn handler.eventOccurred(t, y, dydy0, dydp, increasing);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,880,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,881,"ublic double g(double t, double[] z)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,882,hrows EventException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,883,"ispatchCompoundState(z, y, dydy0, dydp);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,884,"eturn handler.g(t, y, dydy0, dydp);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,887,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,888,"ublic void resetState(double t, double[] z)"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,889,hrows EventException {
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,890,"ispatchCompoundState(z, y, dydy0, dydp);"
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,891,"andler.resetState(t, y, dydy0, dydp);"
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,18,ackage org.apache.commons.math.ode.jacobians;
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,20,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,21,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,24,** This interface represents {@link ParameterizedODE
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,25, first order differential equations} with parameters and partial derivatives.
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,27, @see FirstOrderIntegratorWithJacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,29, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,30, @since 2.1
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,33,ublic interface ODEWithJacobians extends FirstOrderDifferentialEquations {
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,35,** Get the number of parameters.
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,36, @return number of parameters
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,38,nt getParametersDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,40,** Compute the partial derivatives of ODE with respect to state.
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,41, @param t current value of the independent <I>time</I> variable
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,42, @param y array containing the current value of the state vector
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,43, @param yDot array containing the current value of the time derivative of the state vector
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,44, @param dFdY placeholder array where to put the jacobian of the ODE with respect to the state vector
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,45, @param dFdP placeholder array where to put the jacobian of the ODE with respect to the parameters
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,46, @throws MathUserException this exception is propagated to the caller if the
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,47, underlying user function triggers one
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,49,"oid computeJacobians(double t, double[] y, double[] yDot, double[][] dFdY, double[][] dFdP)"
False,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java,50,hrows MathUserException;
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,18,ackage org.apache.commons.math.ode.jacobians;
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,20,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,23,** This interface represents {@link FirstOrderDifferentialEquations
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,24, first order differential equations} with parameters.
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,26, @see FirstOrderIntegratorWithJacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,28, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,29, @since 2.1
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,32,ublic interface ParameterizedODE extends FirstOrderDifferentialEquations {
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,34,** Get the number of parameters.
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,35, @return number of parameters
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,37,nt getParametersDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,39,** Set a parameter.
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,40, @param i index of the parameters (must be between 0
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,41, and {@link #getParametersDimension() getParametersDimension() - 1})
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,42, @param value value for the parameter
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,44,"oid setParameter(int i, double value);"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,18,ackage org.apache.commons.math.ode.jacobians;
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,20,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,23, This interface represents a handler that should be called after
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,24, each successful step.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,26, <p>The ODE integrators compute the evolution of the state vector at
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,27, some grid points that depend on their own internal algorithm. Once
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,28, they have found a new grid point (possibly after having computed
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,29," several evaluation of the derivative at intermediate points), they"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,30, provide it to objects implementing this interface. These objects
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,31, typically either ignore the intermediate steps and wait for the
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,32," last one, store the points in an ephemeris, or forward them to"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,33, specialized processing or output methods.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,35, <p>Note that is is possible to register a {@link
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,36, org.apache.commons.math.ode.sampling.StepHandler classical step handler}
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,37, in the low level integrator used to build a {@link FirstOrderIntegratorWithJacobians}
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,38, rather than implementing this class. The step handlers registered at low level
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,39, will see the big compound state whether the step handlers defined by this interface
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,40," see the original state, and its jacobians in separate arrays.</p>"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,42, <p>The compound state is guaranteed to contain the original state in the first
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,43," elements, followed by the jacobian with respect to initial state (in row order),"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,44, followed by the jacobian with respect to parameters (in row order). If for example
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,45," the original state dimension is 6 and there are 3 parameters, the compound state will"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,46," be a 60 elements array. The first 6 elements will be the original state, the next 36"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,47," elements will be the jacobian with respect to initial state, and the remaining 18 elements"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,48, will be the jacobian with respect to parameters.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,50, <p>Dealing with low level step handlers is cumbersome if one really needs the jacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,51," in these methods, but it also prevents many data being copied back and forth between"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,52, state and jacobians on one side and compound state on the other side. So for performance
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,53," reasons, it is recommended to use this interface <em>only</em> if jacobians are really"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,54, needed and to use lower level handlers if only state is needed.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,56, @see FirstOrderIntegratorWithJacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,57, @see StepInterpolatorWithJacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,58, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,59, @since 2.1
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,62,ublic interface StepHandlerWithJacobians {
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,64,** Determines whether this handler needs dense output.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,65, <p>This method allows the integrator to avoid performing extra
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,66, computation if the handler does not need dense output.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,67, @return true if the handler needs dense output
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,69,oolean requiresDenseOutput();
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,71,** Reset the step handler.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,72, Initialize the internal data as required before the first step is
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,73, handled.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,75,oid reset();
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,78, Handle the last accepted step
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,79, @param interpolator interpolator for the last accepted step. For
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,80," efficiency purposes, the various integrators reuse the same"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,81," object on each call, so if the instance wants to keep it across"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,82, all calls (for example to provide at the end of the integration a
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,83," continuous model valid throughout the integration range, as the"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,84, {@link org.apache.commons.math.ode.ContinuousOutputModel
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,85," ContinuousOutputModel} class does), it should build a local copy"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,86, using the clone method of the interpolator and store this copy.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,87, Keeping only a reference to the interpolator and reusing it will
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,88, result in unpredictable behavior (potentially crashing the application).
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,89, @param isLast true if the step is the last one
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,90, @throws MathUserException this exception is propagated to the
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,91, caller if the underlying user function triggers one
False,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java,93,"oid handleStep(StepInterpolatorWithJacobians interpolator, boolean isLast) throws MathUserException;"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,18,ackage org.apache.commons.math.ode.jacobians;
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,20,mport java.io.Externalizable;
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,22,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,24,** This interface represents an interpolator over the last step
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,25, during an ODE integration.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,27, <p>The various ODE integrators provide objects implementing this
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,28, interface to the step handlers. These objects are often custom
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,29, objects tightly bound to the integrator internal algorithms. The
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,30, handlers can use these objects to retrieve the state vector at
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,31, intermediate times between the previous and the current grid points
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,32, (this feature is often called dense output).</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,33, <p>One important thing to note is that the step handlers may be so
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,34, tightly bound to the integrators that they often share some internal
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,35, state arrays. This imply that one should <em>never</em> use a direct
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,36," reference to a step interpolator outside of the step handler, either"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,37," for future use or for use in another thread. If such a need arise, the"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,38, step interpolator <em>must</em> be copied using the dedicated
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,39, {@link #copy()} method.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,40, </p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,42, @see FirstOrderIntegratorWithJacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,43, @see StepHandlerWithJacobians
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,44, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,45, @since 2.1
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,48,ublic interface StepInterpolatorWithJacobians extends Externalizable {
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,51, Get the previous grid point time.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,52, @return previous grid point time
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,54,ouble getPreviousTime();
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,57, Get the current grid point time.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,58, @return current grid point time
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,60,ouble getCurrentTime();
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,63, Get the time of the interpolated point.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,64," If {@link #setInterpolatedTime} has not been called, it returns"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,65, the current grid point time.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,66, @return interpolation point time
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,68,ouble getInterpolatedTime();
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,71, Set the time of the interpolated point.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,72," <p>Setting the time outside of the current step is now allowed, but"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,73, should be used with care since the accuracy of the interpolator will
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,74, probably be very poor far from this step. This allowance has been
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,75, added to simplify implementation of search algorithms near the
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,76, step endpoints.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,77, <p>Setting the time changes the instance internal state. If a
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,78," specific state must be preserved, a copy of the instance must be"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,79, created using {@link #copy()}.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,80, @param time time of the interpolated point
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,82,oid setInterpolatedTime(double time);
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,85, Get the state vector of the interpolated point.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,86," <p>The returned vector is a reference to a reused array, so"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,87, it should not be modified and it should be copied if it needs
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,88, to be preserved across several calls.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,89, @return state vector at time {@link #getInterpolatedTime}
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,90, @see #getInterpolatedYDot()
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,91, @throws MathUserException if this call induces an automatic
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,92, step finalization that throws one
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,94,ouble[] getInterpolatedY() throws MathUserException;
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,97, Get the partial derivatives of the state vector with respect to
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,98, the initial state of the interpolated point.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,99," <p>The returned vector is a reference to a reused array, so"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,100, it should not be modified and it should be copied if it needs
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,101, to be preserved across several calls.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,102, @return partial derivatives of the state vector with respect to
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,103, the initial state at time {@link #getInterpolatedTime}
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,104, @see #getInterpolatedY()
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,105, @throws MathUserException if this call induces an automatic
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,106, step finalization that throws one
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,108,ouble[][] getInterpolatedDyDy0() throws MathUserException;
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,111, Get the partial derivatives of the state vector with respect to
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,112, the ODE parameters of the interpolated point.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,113," <p>The returned vector is a reference to a reused array, so"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,114, it should not be modified and it should be copied if it needs
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,115, to be preserved across several calls.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,116, @return partial derivatives of the state vector with respect to
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,117, the ODE parameters at time {@link #getInterpolatedTime}
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,118, @see #getInterpolatedY()
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,119, @throws MathUserException if this call induces an automatic
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,120, step finalization that throws one
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,122,ouble[][] getInterpolatedDyDp() throws MathUserException;
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,125, Get the time derivatives of the state vector of the interpolated point.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,126," <p>The returned vector is a reference to a reused array, so"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,127, it should not be modified and it should be copied if it needs
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,128, to be preserved across several calls.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,129, @return derivatives of the state vector at time {@link #getInterpolatedTime}
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,130, @see #getInterpolatedY()
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,131, @throws MathUserException if this call induces an automatic
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,132, step finalization that throws one
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,134,ouble[] getInterpolatedYDot() throws MathUserException;
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,137, Get the time derivatives of the jacobian of the state vector
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,138, with respect to the initial state of the interpolated point.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,139," <p>The returned vector is a reference to a reused array, so"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,140, it should not be modified and it should be copied if it needs
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,141, to be preserved across several calls.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,142, @return time derivatives of the jacobian of the state vector
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,143, with respect to the initial state at time {@link #getInterpolatedTime}
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,144, @see #getInterpolatedY()
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,145, @throws MathUserException if this call induces an automatic
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,146, step finalization that throws one
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,148,ouble[][] getInterpolatedDyDy0Dot() throws MathUserException;
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,151, Get the time derivatives of the jacobian of the state vector
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,152, with respect to the ODE parameters of the interpolated point.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,153," <p>The returned vector is a reference to a reused array, so"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,154, it should not be modified and it should be copied if it needs
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,155, to be preserved across several calls.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,156, @return time derivatives of the jacobian of the state vector
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,157, with respect to the ODE parameters at time {@link #getInterpolatedTime}
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,158, @see #getInterpolatedY()
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,159, @throws MathUserException if this call induces an automatic
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,160, step finalization that throws one
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,162,ouble[][] getInterpolatedDyDpDot() throws MathUserException;
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,164,** Check if the natural integration direction is forward.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,165, <p>This method provides the integration direction as specified by
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,166," the integrator itself, it avoid some nasty problems in"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,167, degenerated cases like null steps due to cancellation at step
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,168," initialization, step control or discrete events"
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,169, triggering.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,170, @return true if the integration variable (time) increases during
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,171, integration
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,173,oolean isForward();
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,175,** Copy the instance.
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,176, <p>The copied instance is guaranteed to be independent from the
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,177, original one. Both can be used with different settings for
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,178, interpolated time without any side effect.</p>
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,179," @return a deep copy of the instance, which can be used independently."
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,180, @throws MathUserException if this call induces an automatic
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,181, step finalization that throws one
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,182, @see #setInterpolatedTime(double)
False,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/StepInterpolatorWithJacobians.java,184,tepInterpolatorWithJacobians copy() throws MathUserException;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,18,ackage org.apache.commons.math.ode.jacobians;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,20,mport org.apache.commons.math.exception.MathUserException;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,21,mport org.apache.commons.math.ode.FirstOrderIntegrator;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,22,mport org.apache.commons.math.ode.IntegratorException;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,23,mport org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,24,mport org.apache.commons.math.stat.descriptive.SummaryStatistics;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,25,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,26,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,27,mport org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,29,ublic class FirstOrderIntegratorWithJacobiansTest {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,31,Test
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,32,ublic void testLowAccuracyExternalDifferentiation()
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,33,"hrows IntegratorException, MathUserException {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,34,"/ this test does not really test FirstOrderIntegratorWithJacobians,"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,35,"/ it only shows that WITHOUT this class, attempting to recover"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,36,/ the jacobians from external differentiation on simple integration
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,37,"/ results with low accuracy gives very poor results. In fact,"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,38,/ the curves dy/dp = g(b) when b varies from 2.88 to 3.08 are
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,39,/ essentially noise.
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,40,"/ This test is taken from Hairer, Norsett and Wanner book"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,41,"/ Solving Ordinary Differential Equations I (Nonstiff problems),"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,42,/ the curves dy/dp = g(b) are in figure 6.5
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,43,irstOrderIntegrator integ =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,44,"ew DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-4, 1.0e-4 }, new double[] { 1.0e-4, 1.0e-4 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,45,ouble hP = 1.0e-12;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,46,ummaryStatistics residualsP0 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,47,ummaryStatistics residualsP1 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,48,or (double b = 2.88; b < 3.08; b += 0.001) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,49,russelator brusselator = new Brusselator(b);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,50,"ouble[] y = { 1.3, b };"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,51,"nteg.integrate(brusselator, 0, y, 20.0, y);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,52,"ouble[] yP = { 1.3, b + hP };"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,53,"russelator.setParameter(0, b + hP);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,54,"nteg.integrate(brusselator, 0, yP, 20.0, yP);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,55,esidualsP0.addValue((yP[0] - y[0]) / hP - brusselator.dYdP0());
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,56,esidualsP1.addValue((yP[1] - y[1]) / hP - brusselator.dYdP1());
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,58,ssert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) > 600);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,59,ssert.assertTrue(residualsP0.getStandardDeviation() > 30);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,60,ssert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) > 800);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,61,ssert.assertTrue(residualsP1.getStandardDeviation() > 50);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,64,Test
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,65,ublic void testHighAccuracyExternalDifferentiation()
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,66,"hrows IntegratorException, MathUserException {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,67,irstOrderIntegrator integ =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,68,"ew DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-10, 1.0e-10 }, new double[] { 1.0e-10, 1.0e-10 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,69,ouble hP = 1.0e-12;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,70,ummaryStatistics residualsP0 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,71,ummaryStatistics residualsP1 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,72,or (double b = 2.88; b < 3.08; b += 0.001) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,73,russelator brusselator = new Brusselator(b);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,74,"ouble[] y = { 1.3, b };"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,75,"nteg.integrate(brusselator, 0, y, 20.0, y);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,76,"ouble[] yP = { 1.3, b + hP };"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,77,"russelator.setParameter(0, b + hP);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,78,"nteg.integrate(brusselator, 0, yP, 20.0, yP);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,79,esidualsP0.addValue((yP[0] - y[0]) / hP - brusselator.dYdP0());
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,80,esidualsP1.addValue((yP[1] - y[1]) / hP - brusselator.dYdP1());
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,82,ssert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) > 0.02);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,83,ssert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.03);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,84,ssert.assertTrue(residualsP0.getStandardDeviation() > 0.003);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,85,ssert.assertTrue(residualsP0.getStandardDeviation() < 0.004);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,86,ssert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) > 0.04);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,87,ssert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.05);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,88,ssert.assertTrue(residualsP1.getStandardDeviation() > 0.007);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,89,ssert.assertTrue(residualsP1.getStandardDeviation() < 0.008);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,92,Test
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,93,ublic void testInternalDifferentiation()
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,94,"hrows IntegratorException, MathUserException {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,95,irstOrderIntegrator integ =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,96,"ew DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-4, 1.0e-4 }, new double[] { 1.0e-4, 1.0e-4 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,97,ouble hP = 1.0e-12;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,98,ummaryStatistics residualsP0 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,99,ummaryStatistics residualsP1 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,100,or (double b = 2.88; b < 3.08; b += 0.001) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,101,russelator brusselator = new Brusselator(b);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,102,"russelator.setParameter(0, b);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,103,"ouble[] z = { 1.3, b };"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,104,ouble[][] dZdZ0 = new double[2][2];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,105,ouble[][] dZdP  = new double[2][1];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,106,ouble hY = 1.0e-12;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,107,irstOrderIntegratorWithJacobians extInt =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,108,"ew FirstOrderIntegratorWithJacobians(integ, brusselator, new double[] { b },"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,109,"ew double[] { hY, hY }, new double[] { hP });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,110,xtInt.setMaxEvaluations(5000);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,111,"xtInt.integrate(0, z, new double[][] { { 0.0 }, { 1.0 } }, 20.0, z, dZdZ0, dZdP);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,112,"ssert.assertEquals(5000, extInt.getMaxEvaluations());"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,113,ssert.assertTrue(extInt.getEvaluations() > 1500);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,114,ssert.assertTrue(extInt.getEvaluations() < 2100);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,115,"ssert.assertEquals(4 * integ.getEvaluations(), extInt.getEvaluations());"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,116,esidualsP0.addValue(dZdP[0][0] - brusselator.dYdP0());
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,117,esidualsP1.addValue(dZdP[1][0] - brusselator.dYdP1());
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,119,ssert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.02);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,120,ssert.assertTrue(residualsP0.getStandardDeviation() < 0.003);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,121,ssert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.05);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,122,ssert.assertTrue(residualsP1.getStandardDeviation() < 0.01);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,125,Test
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,126,ublic void testAnalyticalDifferentiation()
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,127,"hrows IntegratorException, MathUserException {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,128,irstOrderIntegrator integ =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,129,"ew DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-4, 1.0e-4 }, new double[] { 1.0e-4, 1.0e-4 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,130,ummaryStatistics residualsP0 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,131,ummaryStatistics residualsP1 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,132,or (double b = 2.88; b < 3.08; b += 0.001) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,133,russelator brusselator = new Brusselator(b);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,134,"russelator.setParameter(0, b);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,135,"ouble[] z = { 1.3, b };"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,136,ouble[][] dZdZ0 = new double[2][2];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,137,ouble[][] dZdP  = new double[2][1];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,138,irstOrderIntegratorWithJacobians extInt =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,139,"ew FirstOrderIntegratorWithJacobians(integ, brusselator);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,140,xtInt.setMaxEvaluations(5000);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,141,"xtInt.integrate(0, z, new double[][] { { 0.0 }, { 1.0 } }, 20.0, z, dZdZ0, dZdP);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,142,"ssert.assertEquals(5000, extInt.getMaxEvaluations());"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,143,ssert.assertTrue(extInt.getEvaluations() > 350);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,144,ssert.assertTrue(extInt.getEvaluations() < 510);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,145,"ssert.assertEquals(integ.getEvaluations(), extInt.getEvaluations());"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,146,esidualsP0.addValue(dZdP[0][0] - brusselator.dYdP0());
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,147,esidualsP1.addValue(dZdP[1][0] - brusselator.dYdP1());
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,149,ssert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.014);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,150,ssert.assertTrue(residualsP0.getStandardDeviation() < 0.003);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,151,ssert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.05);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,152,ssert.assertTrue(residualsP1.getStandardDeviation() < 0.01);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,155,Test
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,156,"ublic void testFinalResult() throws IntegratorException, MathUserException {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,157,irstOrderIntegrator integ =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,158,"ew DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-10, 1.0e-10 }, new double[] { 1.0e-10, 1.0e-10 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,159,"ouble[] y = new double[] { 0.0, 1.0 };"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,160,"ircle circle = new Circle(y, 1.0, 1.0, 0.1);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,161,ouble[][] dydy0 = new double[2][2];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,162,ouble[][] dydp  = new double[2][3];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,163,ouble t = 18 * FastMath.PI;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,164,irstOrderIntegratorWithJacobians extInt =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,165,"ew FirstOrderIntegratorWithJacobians(integ, circle);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,166,"xtInt.integrate(0, y, circle.exactDyDp(0), t, y, dydy0, dydp);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,167,or (int i = 0; i < y.length; ++i) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,168,"ssert.assertEquals(circle.exactY(t)[i], y[i], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,170,or (int i = 0; i < dydy0.length; ++i) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,171,or (int j = 0; j < dydy0[i].length; ++j) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,172,"ssert.assertEquals(circle.exactDyDy0(t)[i][j], dydy0[i][j], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,175,or (int i = 0; i < dydp.length; ++i) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,176,or (int j = 0; j < dydp[i].length; ++j) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,177,"ssert.assertEquals(circle.exactDyDp(t)[i][j], dydp[i][j], 1.0e-7);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,182,Test
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,183,"ublic void testStepHandlerResult() throws IntegratorException, MathUserException {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,184,irstOrderIntegrator integ =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,185,"ew DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-10, 1.0e-10 }, new double[] { 1.0e-10, 1.0e-10 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,186,"ouble[] y = new double[] { 0.0, 1.0 };"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,187,"inal Circle circle = new Circle(y, 1.0, 1.0, 0.1);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,188,ouble[][] dydy0 = new double[2][2];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,189,ouble[][] dydp  = new double[2][3];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,190,ouble t = 18 * FastMath.PI;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,191,inal FirstOrderIntegratorWithJacobians extInt =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,192,"ew FirstOrderIntegratorWithJacobians(integ, circle);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,193,xtInt.addStepHandler(new StepHandlerWithJacobians() {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,195,ublic void reset() {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,198,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,199,eturn false;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,202,"ublic void handleStep(StepInterpolatorWithJacobians interpolator, boolean isLast)"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,203,hrows MathUserException {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,204,ouble     t     = interpolator.getCurrentTime();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,205,ouble[]   y     = interpolator.getInterpolatedY();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,206,ouble[][] dydy0 = interpolator.getInterpolatedDyDy0();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,207,ouble[][] dydp  = interpolator.getInterpolatedDyDp();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,208,"ssert.assertEquals(interpolator.getPreviousTime(), extInt.getCurrentStepStart(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,209,ssert.assertTrue(extInt.getCurrentSignedStepsize() < 0.5);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,210,or (int i = 0; i < y.length; ++i) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,211,"ssert.assertEquals(circle.exactY(t)[i], y[i], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,213,or (int i = 0; i < dydy0.length; ++i) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,214,or (int j = 0; j < dydy0[i].length; ++j) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,215,"ssert.assertEquals(circle.exactDyDy0(t)[i][j], dydy0[i][j], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,218,or (int i = 0; i < dydp.length; ++i) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,219,or (int j = 0; j < dydp[i].length; ++j) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,220,"ssert.assertEquals(circle.exactDyDp(t)[i][j], dydp[i][j], 3.0e-8);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,224,ouble[]   yDot     = interpolator.getInterpolatedYDot();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,225,ouble[][] dydy0Dot = interpolator.getInterpolatedDyDy0Dot();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,226,ouble[][] dydpDot  = interpolator.getInterpolatedDyDpDot();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,228,or (int i = 0; i < yDot.length; ++i) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,229,"ssert.assertEquals(circle.exactYDot(t)[i], yDot[i], 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,231,or (int i = 0; i < dydy0Dot.length; ++i) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,232,or (int j = 0; j < dydy0Dot[i].length; ++j) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,233,"ssert.assertEquals(circle.exactDyDy0Dot(t)[i][j], dydy0Dot[i][j], 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,236,or (int i = 0; i < dydpDot.length; ++i) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,237,or (int j = 0; j < dydpDot[i].length; ++j) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,238,"ssert.assertEquals(circle.exactDyDpDot(t)[i][j], dydpDot[i][j], 3.0e-9);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,243,"xtInt.integrate(0, y, circle.exactDyDp(0), t, y, dydy0, dydp);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,246,Test
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,247,"ublic void testEventHandler() throws IntegratorException, MathUserException {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,248,irstOrderIntegrator integ =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,249,"ew DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-10, 1.0e-10 }, new double[] { 1.0e-10, 1.0e-10 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,250,"ouble[] y = new double[] { 0.0, 1.0 };"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,251,"inal Circle circle = new Circle(y, 1.0, 1.0, 0.1);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,252,ouble[][] dydy0 = new double[2][2];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,253,ouble[][] dydp  = new double[2][3];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,254,ouble t = 18 * FastMath.PI;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,255,inal FirstOrderIntegratorWithJacobians extInt =
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,256,"ew FirstOrderIntegratorWithJacobians(integ, circle);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,257,xtInt.addEventHandler(new EventHandlerWithJacobians() {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,259,"ublic int eventOccurred(double t, double[] y, double[][] dydy0,"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,260,"ouble[][] dydp, boolean increasing) {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,261,"ssert.assertEquals(0.1, y[1], 1.0e-11);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,262,ssert.assertTrue(!increasing);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,263,eturn STOP;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,266,"ublic double g(double t, double[] y, double[][] dydy0,"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,267,ouble[][] dydp) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,268,eturn y[1] - 0.1;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,271,"ublic void resetState(double t, double[] y, double[][] dydy0,"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,272,ouble[][] dydp) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,274,", 10.0, 1.0e-10, 1000);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,275,"ouble stopTime = extInt.integrate(0, y, circle.exactDyDp(0), t, y, dydy0, dydp);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,276,ssert.assertTrue(stopTime < 5.0 * FastMath.PI);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,279,"rivate static class Brusselator implements ParameterizedODE, ODEWithJacobians {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,281,rivate double b;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,283,ublic Brusselator(double b) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,284,his.b = b;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,287,ublic int getDimension() {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,288,eturn 2;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,291,"ublic void setParameter(int i, double p) {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,292, = p;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,295,ublic int getParametersDimension() {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,296,eturn 1;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,299,"ublic void computeDerivatives(double t, double[] y, double[] yDot) {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,300,ouble prod = y[0] * y[0] * y[1];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,301,Dot[0] = 1 + prod - (b + 1) * y[0];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,302,Dot[1] = b * y[0] - prod;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,305,"ublic void computeJacobians(double t, double[] y, double[] yDot, double[][] dFdY, double[][] dFdP) {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,306,ouble p = 2 * y[0] * y[1];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,307,ouble y02 = y[0] * y[0];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,308,FdY[0][0] = p - (1 + b);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,309,FdY[0][1] = y02;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,310,FdY[1][0] = b - p;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,311,FdY[1][1] = -y02;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,312,FdP[0][0] = -y[0];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,313,FdP[1][0] = y[0];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,316,ublic double dYdP0() {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,317,eturn -1088.232716447743 + (1050.775747149553 + (-339.012934631828 + 36.52917025056327 * b) * b) * b;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,320,ublic double dYdP1() {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,321,eturn 1502.824469929139 + (-1438.6974831849952 + (460.959476642384 - 49.43847385647082 * b) * b) * b;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,326,** ODE representing a point moving on a circle with provided center and angular rate. */
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,327,rivate static class Circle implements ODEWithJacobians {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,329,rivate final double[] y0;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,330,rivate double cx;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,331,rivate double cy;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,332,rivate double omega;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,334,"ublic Circle(double[] y0, double cx, double cy, double omega) {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,335,his.y0    = y0.clone();
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,336,his.cx    = cx;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,337,his.cy    = cy;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,338,his.omega = omega;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,341,ublic int getDimension() {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,342,eturn 2;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,345,ublic int getParametersDimension() {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,346,eturn 3;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,349,"ublic void computeDerivatives(double t, double[] y, double[] yDot) {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,350,Dot[0] = omega * (cy - y[1]);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,351,Dot[1] = omega * (y[0] - cx);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,354,"ublic void computeJacobians(double t, double[] y, double[] yDot, double[][] dFdY, double[][] dFdP) {"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,356,FdY[0][0] = 0;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,357,FdY[0][1] = -omega;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,358,FdY[1][0] = omega;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,359,FdY[1][1] = 0;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,361,FdP[0][0] = 0;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,362,FdP[0][1] = omega;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,363,FdP[0][2] = cy - y[1];
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,364,FdP[1][0] = -omega;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,365,FdP[1][1] = 0;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,366,FdP[1][2] = y[0] - cx;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,370,ublic double[] exactY(double t) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,371,ouble cos = FastMath.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,372,ouble sin = FastMath.sin(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,373,ouble dx0 = y0[0] - cx;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,374,ouble dy0 = y0[1] - cy;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,375,eturn new double[] {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,376,"x + cos * dx0 - sin * dy0,"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,377,y + sin * dx0 + cos * dy0
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,381,ublic double[][] exactDyDy0(double t) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,382,ouble cos = FastMath.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,383,ouble sin = FastMath.sin(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,384,eturn new double[][] {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,385," cos, -sin },"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,386," sin,  cos }"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,390,ublic double[][] exactDyDp(double t) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,391,ouble cos = FastMath.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,392,ouble sin = FastMath.sin(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,393,ouble dx0 = y0[0] - cx;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,394,ouble dy0 = y0[1] - cy;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,395,eturn new double[][] {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,396," 1 - cos, sin,    -t * (sin * dx0 + cos * dy0) },"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,397," -sin,    1 - cos, t * (cos * dx0 - sin * dy0) }"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,401,ublic double[] exactYDot(double t) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,402,ouble oCos = omega * FastMath.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,403,ouble oSin = omega * FastMath.sin(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,404,ouble dx0 = y0[0] - cx;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,405,ouble dy0 = y0[1] - cy;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,406,eturn new double[] {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,407,"oSin * dx0 - oCos * dy0,"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,408,Cos * dx0 - oSin * dy0
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,412,ublic double[][] exactDyDy0Dot(double t) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,413,ouble oCos = omega * FastMath.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,414,ouble oSin = omega * FastMath.sin(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,415,eturn new double[][] {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,416," -oSin, -oCos },"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,417,"  oCos, -oSin }"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,421,ublic double[][] exactDyDpDot(double t) {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,422,ouble cos  = FastMath.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,423,ouble sin  = FastMath.sin(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,424,ouble oCos = omega * cos;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,425,ouble oSin = omega * sin;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,426,ouble dx0  = y0[0] - cx;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,427,ouble dy0  = y0[1] - cy;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,428,eturn new double[][] {
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,429,"  oSin, oCos, -sin * dx0 - cos * dy0 - t * ( oCos * dx0 - oSin * dy0) },"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,430," -oCos, oSin,  cos * dx0 - sin * dy0 + t * (-oSin * dx0 - oCos * dy0) }"

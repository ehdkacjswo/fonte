is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,17,package org.apache.commons.math;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,19,import java.io.PrintStream;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,20,import java.io.PrintWriter;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,21,import java.text.MessageFormat;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,22,import java.util.Locale;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,23,import java.util.MissingResourceException;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,24,import java.util.ResourceBundle;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,27,* Base class for commons-math unchecked exceptions.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,29,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,30,* @since 2.0
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,32,public class MathRuntimeException extends RuntimeException {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,34,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,35,private static final long serialVersionUID = -2880601850253924272L;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,37,/** Cache for resources bundle. */
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,38,private static ResourceBundle cachedResources = null;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,41,* Pattern used to build the message.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,43,private final String pattern;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,46,* Arguments used to build the message.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,48,private final Object[] arguments;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,51,* Translate a string to a given locale.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,52,* @param s string to translate
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,53,* @param locale locale into which to translate the string
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,54,* @return translated string or original string
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,55,* for unsupported locales or unknown strings
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,57,"private static String translate(final String s, final Locale locale) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,58,try {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,59,if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,60,// caching the resource bundle
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,61,cachedResources =
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,62,"ResourceBundle.getBundle(""org.apache.commons.math.MessagesResources"", locale);"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,65,if (cachedResources.getLocale().getLanguage().equals(locale.getLanguage())) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,66,// the value of the resource is the translated string
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,67,return cachedResources.getString(s);
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,70,} catch (MissingResourceException mre) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,71,// do nothing here
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,74,// the locale is not supported or the resource is unknown
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,75,// don't translate and fall back to using the string as is
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,76,return s;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,81,* Builds a message string by from a pattern and its arguments.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,82,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,83,* @param arguments format arguments
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,84,* @param locale Locale in which the message should be translated
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,85,* @return a message string
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,87,"private static String buildMessage(final String pattern, final Object[] arguments,"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,88,final Locale locale) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,89,"return new MessageFormat(translate(pattern, locale), locale).format(arguments);"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,93,* Constructs a new <code>MathRuntimeException</code> with no
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,94,* detail message.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,96,public MathRuntimeException() {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,97,super();
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,98,this.pattern   = null;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,99,this.arguments = new Object[0];
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,103,* Constructs a new <code>MathRuntimeException</code> with specified
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,104,* formatted detail message.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,105,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,106,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,107,* @param arguments format arguments
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,109,"public MathRuntimeException(final String pattern, final Object[] arguments) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,110,"super(buildMessage(pattern, arguments, Locale.US));"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,111,this.pattern   = pattern;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,112,this.arguments = (Object[]) arguments.clone();
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,116,* Constructs a new <code>MathRuntimeException</code> with specified
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,117,* nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,119,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,120,*                   to be thrown.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,122,public MathRuntimeException(final Throwable rootCause) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,123,super(rootCause);
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,124,this.pattern   = getMessage();
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,125,this.arguments = new Object[0];
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,129,* Constructs a new <code>MathRuntimeException</code> with specified
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,130,* formatted detail message and nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,131,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,132,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,133,* @param arguments format arguments
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,134,* @param rootCause the exception or error that caused this exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,135,* to be thrown.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,137,"public MathRuntimeException(final String pattern, final Object[] arguments,"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,138,final Throwable rootCause) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,139,"super(buildMessage(pattern, arguments, Locale.US), rootCause);"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,140,this.pattern   = pattern;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,141,this.arguments = (Object[]) arguments.clone();
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,144,/** Gets the pattern used to build the message of this throwable.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,146,* @return the pattern used to build the message of this throwable
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,148,public String getPattern() {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,149,return pattern;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,152,/** Gets the arguments used to build the message of this throwable.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,154,* @return the arguments used to build the message of this throwable
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,156,public Object[] getArguments() {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,157,return (Object[]) arguments.clone();
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,160,/** Gets the message in a specified locale.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,162,* @param locale Locale in which the message should be translated
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,164,* @return localized message
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,166,public String getMessage(final Locale locale) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,167,"return (pattern == null) ? null : buildMessage(pattern, arguments, locale);"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,170,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,171,public String getLocalizedMessage() {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,172,return getMessage(Locale.getDefault());
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,176,* Prints the stack trace of this exception to the standard error stream.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,178,public void printStackTrace() {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,179,printStackTrace(System.err);
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,183,* Prints the stack trace of this exception to the specified stream.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,185,* @param out  the <code>PrintStream</code> to use for output
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,187,public void printStackTrace(final PrintStream out) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,188,synchronized (out) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,189,"PrintWriter pw = new PrintWriter(out, false);"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,190,printStackTrace(pw);
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,191,// Flush the PrintWriter before it's GC'ed.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,192,pw.flush();
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,136,/ org.apache.commons.math.ode.AdaptiveStepsizeIntegrator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,136,// org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,148,"/ org.apache.commons.math.ode.AdaptiveStepsizeIntegrator,"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,149,/ org.apache.commons.math.ode.RungeKuttaIntegrator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,148,"// org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,149,// org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,161,// org.apache.commons.math.ode.ContinuousOutputModel
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,162,// org.apache.commons.math.optimization.DirectSearchOptimizer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,163,"{ ""unexpected exception caught"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,164,"""exception inattendue lev\u00e9e"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,163,"aucun des {0} points de d\u00e9part n''aboutit \u00e0 une convergence""  }"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,168,"""aucun des {0} points de d\u00e9part n''aboutit \u00e0 une convergence""  },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,170,// org.apache.commons.math.random.EmpiricalDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,171,"{ ""no bin selected"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,172,"""aucun compartiment s\u00e9lectionn\u00e9"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,174,// org.apache.commons.math.linear.EigenDecompositionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,175,"{ ""negative element on decomposed tridiagonal of {0}x{1} matrix"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,176,"""\u00e9l\u00e9ment n\u00e9gatif dans la d\u00e9composition tri-diagonale d''une matrice {0}x{1}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,178,// org.apache.commons.math.linear.NonSquareMatrixException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,179,"{ ""a {0}x{1} matrix was provided instead of a square matrix"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,180,"""une matrice {0}x{1} a \u00e9t\u00e9 fournie \u00e0 la place d''une matrice carr\u00e9e"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,182,// org.apache.commons.math.linear.SingularMatrixException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,183,"{ ""matrix is singular"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,184,"""matrice singuli\u00e8re"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,186,// org.apache.commons.math.linear.RankDeficientMatrixException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,187,"{ ""matrix is rank-deficient"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,188,"""le rang de la matrice est inf\u00e9rieur \u00e0 sa dimension"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,190,// org.apache.commons.math.linear.RealVectorImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,191,"{ ""index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,192,"""index {0} hors de la plage autoris\u00e9e [{1}, {2}]"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,194,// org.apache.commons.math.linear.BigMatrixImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,195,// org.apache.commons.math.linear.RealMatrixImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,196,"{ ""row index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,197,"""index de ligne {0} hors de la plage autoris\u00e9e [{1}, {2}]"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,198,"{ ""column index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,199,"""index de colonne {0} hors de la plage autoris\u00e9e [{1}, {2}]"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,200,"{ ""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,201,"""pas d''entr\u00e9e aux indices ({0}, {1}) dans une matrice {2}x{3}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,202,"{ ""initial row {0} after final row {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,203,"""ligne initiale {0} apr\u00e8s la ligne finale {1}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,204,"{ ""initial column {0} after final column {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,205,"""colonne initiale {0} apr\u00e8s la colonne finale {1}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,206,"{ ""empty selected row index array"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,207,"""tableau des indices de lignes s\u00e9lectionn\u00e9es vide"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,208,"{ ""empty selected column index array"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,209,"""tableau des indices de colonnes s\u00e9lectionn\u00e9es vide"" }"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,582,f (startRow < 0 || startRow > endRow || endRow > data.length ||
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,583,tartColumn < 0 || startColumn > endColumn ||
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,584,ndColumn > data[0].length ) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,585,hrow new MatrixIndexException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,586,"invalid row or column index selection"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,583,checkRowIndex(startRow);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,584,checkRowIndex(endRow);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,585,if (startRow > endRow) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,586,"throw new MatrixIndexException(""initial row {0} after final row {1}"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,587,"new Object[] { startRow, endRow });"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,590,checkColumnIndex(startColumn);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,591,checkColumnIndex(endColumn);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,592,if (startColumn > endColumn) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,593,"throw new MatrixIndexException(""initial column {0} after final column {1}"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,594,"new Object[] { startColumn, endColumn });"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,592,"ubMatrixData[i - startRow], 0,"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,593,ndColumn - startColumn + 1);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,601,"subMatrixData[i - startRow], 0,"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,602,endColumn - startColumn + 1);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,612,hrow new MatrixIndexException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,613,"selected row and column index arrays must be non-empty"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,624,if (selectedRows.length == 0) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,625,"throw new MatrixIndexException(""empty selected row index array"", new Object[0]);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,627,"throw new MatrixIndexException(""empty selected column index array"", new Object[0]);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,626,atch (ArrayIndexOutOfBoundsException e) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,627,"hrow new MatrixIndexException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,640,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,641,// we redo the loop with checks enabled
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,642,// in order to generate an appropriate message
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,643,for (final int row : selectedRows) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,644,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,646,for (final int column : selectedColumns) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,647,checkColumnIndex(column);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,661,f ((row < 0) || (column < 0)){
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,662,hrow new MatrixIndexException
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,663,"""invalid row or column index selection"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,684,final int nCols = subMatrix[0].length;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,667,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,668,"Matrix must have at least one row."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,687,"throw new IllegalArgumentException(""Matrix must have at least one row."");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,670,inal int nCols = subMatrix[0].length;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,672,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,673,"Matrix must have at least one column."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,690,"throw new IllegalArgumentException(""Matrix must have at least one column."");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,677,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,678,"All input rows must have the same length."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,695,"throw new IllegalArgumentException(""All input rows must have the same length."");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,682,f ((row > 0)||(column > 0)) throw new MatrixIndexException
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,683,"""matrix must be initialized to perfom this method"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,700,if ((row > 0) || (column > 0)) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,701,"throw new IllegalStateException(""matrix must be initialized to perform this method"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,687,f (((nRows + row) > this.getRowDimension()) ||
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,688,nCols + column > this.getColumnDimension()))
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,689,hrow new MatrixIndexException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,690,"invalid row or column index selection"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,705,} else {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,706,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,707,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,708,checkRowIndex(nRows + row - 1);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,709,checkColumnIndex(nCols + column - 1);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,706,"f ( !isValidCoordinate( row, 0)) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,707,"hrow new MatrixIndexException(""illegal row argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,728,checkRowIndex(row);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,724,"f ( !isValidCoordinate( 0, column)) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,725,"hrow new MatrixIndexException(""illegal column argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,744,checkColumnIndex(column);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,746,"f ( !isValidCoordinate( row, 0 ) ) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,747,"hrow new MatrixIndexException(""illegal row argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,764,checkRowIndex(row);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,767,"f ( !isValidCoordinate( row, 0 ) ) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,768,"hrow new MatrixIndexException(""illegal row argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,783,checkRowIndex(row);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,789,"f ( !isValidCoordinate(0, col) ) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,790,"hrow new MatrixIndexException(""illegal column argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,803,checkColumnIndex(col);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,812,"f ( !isValidCoordinate( 0, col ) ) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,813,"hrow new MatrixIndexException(""illegal column argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,824,checkColumnIndex(col);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,843,"hrow new MatrixIndexException(""matrix entry does not exist"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,853,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,854,new Object[] {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,855,"row, column,"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,856,"getRowDimension(), getColumnDimension()"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,903,"hrow new InvalidMatrixException(""matrix is not square"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,917,"throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1101,"hrow new InvalidMatrixException(""coefficient matrix is not square"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1115,"throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1104,"hrow new InvalidMatrixException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1118,throw new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1174,"hrow new InvalidMatrixException(""LU decomposition requires that the matrix be square."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1188,"throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1221,"hrow new InvalidMatrixException(""matrix is singular"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1235,throw new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1454, Tests a given coordinate as being valid or invalid
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1456, @param row the row index.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1457, @param col the column index.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1458, @return true if the coordinate is with the current dimensions
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1468,* Check if a row index is valid.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1469,* @param row row index to check
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1470,* @exception MatrixIndexException if index is not valid
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1460,"rivate boolean isValidCoordinate(int row, int col) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1461,inal int nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1462,inal int nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1463,eturn !(row < 0 || row >= nRows || col < 0 || col >= nCols);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1472,private void checkRowIndex(final int row) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1473,if (row < 0 || row >= getRowDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1474,"throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1475,"new Object[] { row, 0, getRowDimension() - 1});"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1480,* Check if a column index is valid.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1481,* @param column column index to check
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1482,* @exception MatrixIndexException if index is not valid
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1484,private void checkColumnIndex(final int column)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1485,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1486,if (column < 0 || column >= getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1487,"throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1488,"new Object[] { column, 0, getColumnDimension() - 1});"
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,20,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,26,ublic class InvalidMatrixException extends RuntimeException {
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,28,public class InvalidMatrixException extends MathRuntimeException {
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,28,** Serializable version identifier */
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,29,rivate static final long serialVersionUID = 5318837237354354107L;
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,30,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,31,private static final long serialVersionUID = 1135533765052675495L;
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,32, Default constructor.
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,34,* Construct an exception with the given message.
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,35,* @param pattern format specifier
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,36,* @param arguments format arguments
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,37,* @since 2.0
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,34,ublic InvalidMatrixException() {
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,35,his(null);
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,39,"public InvalidMatrixException(final String pattern, final Object[] arguments) {"
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,40,"super(pattern, arguments);"
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,40, @param message descriptive error message.
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,45,* @param cause the exception or error that caused this exception
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,46,* to be thrown.
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,47,* @since 2.0
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,42,ublic InvalidMatrixException(String message) {
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,43,uper(message);
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,49,public InvalidMatrixException(final Throwable cause) {
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,50,super(cause);
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,111,"hrow new InvalidMatrixException(""LU decomposition requires that the matrix be square"");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,111,"throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,275,"hrow new InvalidMatrixException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,275,throw new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,317,"hrow new InvalidMatrixException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,317,throw new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,371,"hrow new InvalidMatrixException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,371,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,20,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,21," Thrown when an operation addresses a matrix coordinate (row,col)"
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,23,"* Thrown when an operation addresses a matrix coordinate (row, col)"
False,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,25,ublic class MatrixIndexException extends RuntimeException {
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,27,public class MatrixIndexException extends MathRuntimeException {
False,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,28,rivate static final long serialVersionUID = 3728473373420246054L;
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,30,private static final long serialVersionUID = -2382324504109300625L;
False,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,31, Construct an exception with the given message and root cause.
False,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,32, @param message descriptive error message.
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,33,* Constructs a new instance with specified formatted detail message.
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,34,* @param pattern format specifier
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,35,* @param arguments format arguments
False,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,34,ublic MatrixIndexException(String message) {
False,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,35,uper(message);
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,37,"public MatrixIndexException(final String pattern, final Object[] arguments) {"
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,38,"super(pattern, arguments);"
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,21,* Thrown when an operation defined only for square matrices is applied to non-square ones.
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,22,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,23,* @since 2.0
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,25,public class NonSquareMatrixException extends InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,27,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,28,private static final long serialVersionUID = 8996207526636673730L;
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,31,* Construct an exception with the given message.
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,32,* @param rows number of rows of the faulty matrix
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,33,* @param columns number of columns of the faulty matrix
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,35,"public NonSquareMatrixException(final int rows, final int columns) {"
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,36,"super(""a {0}x{1} matrix was provided instead of a square matrix"","
True,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/NonSquareMatrixException.java,37,"new Object[] { rows, columns });"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,310,"hrow new InvalidMatrixException(""Matrix is rank-deficient"");"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,310,throw new RankDeficientMatrixException();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,384,"hrow new InvalidMatrixException(""Matrix is rank-deficient"");"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,384,throw new RankDeficientMatrixException();
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,21,* Thrown when a matrix is singular.
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,22,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,23,* @since 2.0
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,25,public class RankDeficientMatrixException extends InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,27,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,28,private static final long serialVersionUID = 7051890448195709736L;
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,31,* Construct an exception with a default message.
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,33,public RankDeficientMatrixException() {
True,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,34,"super(""matrix is rank-deficient"", new Object[0]);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,385,f (startRow < 0 || startRow > endRow || endRow > data.length ||
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,386,tartColumn < 0 || startColumn > endColumn ||
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,387,ndColumn > data[0].length) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,388,hrow new MatrixIndexException(
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,389,"invalid row or column index selection"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,386,checkRowIndex(startRow);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,387,checkRowIndex(endRow);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,388,if (startRow > endRow) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,389,"throw new MatrixIndexException(""initial row {0} after final row {1}"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,390,"new Object[] { startRow, endRow });"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,393,checkColumnIndex(startColumn);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,394,checkColumnIndex(endColumn);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,395,if (startColumn > endColumn) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,396,"throw new MatrixIndexException(""initial column {0} after final column {1}"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,397,"new Object[] { startColumn, endColumn });"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,405,hrow new MatrixIndexException(
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,406,"selected row and column index arrays must be non-empty"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,415,if (selectedRows.length == 0) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,416,"throw new MatrixIndexException(""empty selected row index array"", new Object[0]);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,418,"throw new MatrixIndexException(""empty selected column index array"", new Object[0]);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,419,"hrow new MatrixIndexException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,432,// we redo the loop with checks enabled
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,433,// in order to generate an appropriate message
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,434,for (final int row : selectedRows) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,435,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,437,for (final int column : selectedColumns) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,438,checkColumnIndex(column);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,453,f ((row < 0) || (column < 0)){
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,454,hrow new MatrixIndexException
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,455,"""invalid row or column index selection"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,459,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,460,"Matrix must have at least one row."");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,476,"throw new IllegalArgumentException(""Matrix must have at least one row."");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,464,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,465,"Matrix must have at least one column."");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,481,"throw new IllegalArgumentException(""Matrix must have at least one column."");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,469,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,470,"All input rows must have the same length."");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,486,"throw new IllegalArgumentException(""All input rows must have the same length."");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,474,f ((row > 0)||(column > 0)) throw new MatrixIndexException
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,475,"""matrix must be initialized to perfom this method"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,491,if ((row > 0) || (column > 0)) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,492,"throw new IllegalStateException(""matrix must be initialized to perform this method"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,479,f (((nRows + row) > this.getRowDimension()) ||
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,480,nCols + column > this.getColumnDimension()))
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,481,hrow new MatrixIndexException(
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,482,"invalid row or column index selection"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,496,} else {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,497,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,498,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,499,checkRowIndex(nRows + row - 1);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,500,checkColumnIndex(nCols + column - 1);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,491,"f ( !isValidCoordinate( row, 0)) {"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,492,"hrow new MatrixIndexException(""illegal row argument"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,513,checkRowIndex(row);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,502,"f ( !isValidCoordinate( 0, column)) {"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,503,"hrow new MatrixIndexException(""illegal column argument"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,522,checkColumnIndex(column);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,525,"f ( !isValidCoordinate( row, 0 ) ) {"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,526,"hrow new MatrixIndexException(""illegal row argument"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,543,checkRowIndex(row);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,536,"f ( !isValidCoordinate(0, col) ) {"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,537,"hrow new MatrixIndexException(""illegal column argument"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,552,checkColumnIndex(col);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,553,"hrow new MatrixIndexException(""matrix entry does not exist"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,567,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,568,new Object[] {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,569,"row, column,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,570,"getRowDimension(), getColumnDimension()"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,879,"etSubMatrix(in,0,0);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,897,"setSubMatrix(in, 0, 0);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,883, Tests a given coordinate as being valid or invalid
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,885, @param row the row index.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,886, @param col the column index.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,887, @return true if the coordinate is with the current dimensions
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,901,* Check if a row index is valid.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,902,* @param row row index to check
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,903,* @exception MatrixIndexException if index is not valid
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,889,"rivate boolean isValidCoordinate(int row, int col) {"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,890,inal int nRows = getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,891,inal int nCols = getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,892,eturn !(row < 0 || row > nRows - 1 || col < 0 || col > nCols -1);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,905,private void checkRowIndex(final int row) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,906,if (row < 0 || row >= getRowDimension()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,907,"throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,908,"new Object[] { row, 0, getRowDimension() - 1});"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,913,* Check if a column index is valid.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,914,* @param column column index to check
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,915,* @exception MatrixIndexException if index is not valid
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,917,private void checkColumnIndex(final int column)
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,918,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,919,if (column < 0 || column >= getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,920,"throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,921,"new Object[] { column, 0, getColumnDimension() - 1});"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1190,RealVectorImpl out = new RealVectorImpl(n);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1191,ealVectorImpl out = new RealVectorImpl(n);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1194,eturn out;
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1196,hrow new MatrixIndexException(e.getMessage());
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1194,checkIndex(index);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1195,checkIndex(index + n - 1);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1197,return out;
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1205,hrow new MatrixIndexException(e.getMessage());
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1205,checkIndex(index);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1220,hrow new MatrixIndexException(e.getMessage());
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1220,checkIndex(index);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1221,checkIndex(index + v.getDimension() - 1);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1229,hrow new MatrixIndexException(e.getMessage());
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1230,checkIndex(index);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1231,checkIndex(index + v.length - 1);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1391,* Check if an index is valid.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1392,* @param index index to check
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1393,* @exception MatrixIndexException if index is not valid
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1395,private void checkIndex(final int index)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1396,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1397,if (index < 0 || index >= getDimension()) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1398,"throw new MatrixIndexException(""index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1399,"new Object[] { index, 0, getDimension() - 1});"
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,21,* Thrown when a matrix is singular.
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,22,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,23,* @since 2.0
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,25,public class SingularMatrixException extends InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,27,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,28,private static final long serialVersionUID = -7379143356784298432L;
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,31,* Construct an exception with a default message.
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,33,public SingularMatrixException() {
True,src/java/org/apache/commons/math/linear/SingularMatrixException.java,src/java/org/apache/commons/math/linear/SingularMatrixException.java,34,"super(""matrix is singular"", new Object[0]);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,71,"hrow new InvalidMatrixException(""transformation to tridiagonal requires that the matrix be square"");"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,71,"throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,786,"hrow new InvalidMatrixException(""incorrect dimensions"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,786,"throw new InvalidMatrixException(""incorrect dimensions"", new Object[0]);"
False,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,29,ublic void testConstructor(){
False,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,30,nvalidMatrixException ex = new InvalidMatrixException();
False,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,31,ssertNull(ex.getMessage());
False,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,39,nvalidMatrixException ex = new InvalidMatrixException(msg);
True,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,32,"InvalidMatrixException ex = new InvalidMatrixException(msg, new Object[0]);"
False,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,32,atrixIndexException ex = new MatrixIndexException(msg);
True,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,32,"MatrixIndexException ex = new MatrixIndexException(msg, new Object[0]);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,608,"ail(""expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,609, catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,608,"fail(""expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,609,} catch (IllegalStateException e) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,614,"ail(""expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,615, catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,614,"fail(""expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,615,} catch (IllegalStateException e) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,662,"hrow new InvalidMatrixException(""incorrect dimensions"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,662,"throw new InvalidMatrixException(""incorrect dimensions"", new Object[0]);"

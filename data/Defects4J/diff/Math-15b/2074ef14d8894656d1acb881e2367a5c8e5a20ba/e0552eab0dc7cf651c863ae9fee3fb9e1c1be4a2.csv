is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,38," Defaults are {@link NaNStrategy#MAXIMAL} and {@link TiesStrategy#AVERAGE},"
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,38,"* Defaults are {@link NaNStrategy#FAILED} and {@link TiesStrategy#AVERAGE},"
False,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,75,ublic static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,75,public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,19,import junit.framework.Assert;
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,43,"ublic void testDefault() { // Ties averaged, NaNs maximal"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,45,"public void testDefault() { // Ties averaged, NaNs failed"
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,45,ouble[] ranks = ranking.rank(exampleData);
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,46,"ouble[] correctRanks = { 5, 3, 6, 7, 3, 8, 9, 1, 3 };"
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,47,"estUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,47,double[] ranks;
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,49,try {
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,50,ranks = ranking.rank(exampleData);
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,51,"Assert.fail(""expected NotANumberException due to NaNStrategy.FAILED"");"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,52,} catch (NotANumberException e) {
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,53,// expected
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,49,"orrectRanks = new double[] { 1.5, 1.5, 4, 3, 5 };"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,57,"double[] correctRanks = new double[] { 1.5, 1.5, 4, 3, 5 };"
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,54,anks = ranking.rank(multipleNaNs);
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,55,"orrectRanks = new double[] { 1, 2, 3.5, 3.5 };"
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,56,"estUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,63,try {
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,64,ranks = ranking.rank(multipleNaNs);
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,65,"Assert.fail(""expected NotANumberException due to NaNStrategy.FAILED"");"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,66,} catch (NotANumberException e) {
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,67,// expected
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,67,aturalRanking ranking = new NaturalRanking(TiesStrategy.MINIMUM);
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,80,"NaturalRanking ranking = new NaturalRanking(NaNStrategy.MAXIMAL, TiesStrategy.MINIMUM);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,19,mport org.apache.commons.math.stat.Frequency;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,20,mport org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,21,mport org.apache.commons.math.Retry;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,22,mport org.apache.commons.math.RetryRunner;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,24,mport org.junit.runner.RunWith;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,25,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,26,mport org.junit.Test;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,29, Test cases for the AbstractRandomGenerator class
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,20,* Test cases for the AbstractRandomGenerator class.
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,34,RunWith(RetryRunner.class)
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,35,ublic class AbstractRandomGeneratorTest extends RandomDataTest {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,37,rotected TestRandomGenerator testGenerator = new TestRandomGenerator();
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,39,ublic AbstractRandomGeneratorTest() {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,40,andomData = new RandomDataImpl(testGenerator);
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,25,public class AbstractRandomGeneratorTest extends RandomGeneratorAbstractTest {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,44,Test
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,45,Retry(2)
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,46,ublic void testNextInt() {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,47,ry {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,48,estGenerator.nextInt(-1);
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,49,"ssert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,50, catch (MathIllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,51,/ ignored
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,53,requency freq = new Frequency();
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,54,nt value = 0;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,55,or (int i=0; i<smallSampleSize; i++) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,56,alue = testGenerator.nextInt(4);
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,57,"ssert.assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,58,req.addValue(value);
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,60,ong[] observed = new long[4];
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,61,or (int i=0; i<4; i++) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,62,bserved[i] = freq.getCount(i);
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,65,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,66, Change to 11.34 for alpha = .01
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,68,"ssert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,69,"estStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,28,public void testNextInt2() {
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,29,// Currently broken.  Remove this stub when MATH-640 is resolved
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,73,Test
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,74,Retry(2)
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,75,ublic void testNextLong() {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,76,ong q1 = Long.MAX_VALUE/4;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,77,ong q2 = 2 *  q1;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,78,ong q3 = 3 * q1;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,80,requency freq = new Frequency();
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,81,ong val = 0;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,82,nt value = 0;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,83,or (int i=0; i<smallSampleSize; i++) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,84,al = testGenerator.nextLong();
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,85,f (val < q1) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,86,alue = 0;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,87, else if (val < q2) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,88,alue = 1;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,89, else if (val < q3) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,90,alue = 2;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,91, else {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,92,alue = 3;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,94,req.addValue(value);
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,96,ong[] observed = new long[4];
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,97,or (int i=0; i<4; i++) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,98,bserved[i] = freq.getCount(i);
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,101,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,102, Change to 11.34 for alpha = .01
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,104,"ssert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,105,"estStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,33,public void testNextLong2() {
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,34,// Currently broken.  Remove this stub when MATH-640 is resolved
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,108,Test
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,109,Retry(2)
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,110,ublic void testNextBoolean() {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,111,ong halfSampleSize = smallSampleSize / 2;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,112,"ouble[] expected = {halfSampleSize, halfSampleSize};"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,113,ong[] observed = new long[2];
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,114,or (int i=0; i<smallSampleSize; i++) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,115,f (testGenerator.nextBoolean()) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,116,bserved[0]++;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,117, else {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,118,bserved[1]++;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,121,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,122, Change to 6.635 for alpha = .01
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,124,"ssert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,125,"estStatistic.chiSquare(expected,observed) < 10.828);"
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,37,public AbstractRandomGeneratorTest() {
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,38,super();
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,128,Test
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,129,Retry(2)
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,130,ublic void testNextFloat() {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,131,requency freq = new Frequency();
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,132,loat val = 0;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,133,nt value = 0;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,134,or (int i=0; i<smallSampleSize; i++) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,135,al = testGenerator.nextFloat();
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,136,f (val < 0.25) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,137,alue = 0;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,138, else if (val < 0.5) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,139,alue = 1;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,140, else if (val < 0.75) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,141,alue = 2;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,142, else {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,143,alue = 3;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,145,req.addValue(value);
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,147,ong[] observed = new long[4];
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,148,or (int i=0; i<4; i++) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,149,bserved[i] = freq.getCount(i);
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,152,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,153, Change to 11.34 for alpha = .01
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,155,"ssert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,156,"estStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,41,protected RandomGenerator makeGenerator() {
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,42,RandomGenerator generator = new TestRandomGenerator();
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,43,generator.setSeed(1000);
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,44,return generator;
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,17,package org.apache.commons.math.random;
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,19,import java.util.Random;
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,22,* Test cases for the BitStreamGenerator class
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,24,* @version $Id$
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,27,public class BitsStreamGeneratorTest extends RandomGeneratorAbstractTest {
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,29,public BitsStreamGeneratorTest() {
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,30,super();
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,33,protected RandomGenerator makeGenerator() {
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,34,RandomGenerator generator = new TestBitStreamGenerator();
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,35,generator.setSeed(1000);
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,36,return generator;
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,40,* Test BitStreamGenerator using a Random as bit source.
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,42,static class TestBitStreamGenerator extends BitsStreamGenerator {
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,44,private BitRandom ran = new BitRandom();
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,46,@Override
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,47,public void setSeed(int seed) {
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,48,ran.setSeed(seed);
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,51,@Override
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,52,public void setSeed(int[] seed) {
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,53,ran.setSeed(seed[0]);
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,56,@Override
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,57,public void setSeed(long seed) {
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,58,ran.setSeed((int) seed);
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,62,@Override
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,63,protected int next(int bits) {
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,64,return ran.nextBits(bits);
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,69,* Extend Random to expose next(bits)
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,71,"@SuppressWarnings(""serial"")"
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,72,static class BitRandom extends Random {
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,73,public BitRandom() {
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,74,super();
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,76,public int nextBits(int bits) {
True,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java,77,return next(bits);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,20,mport org.apache.commons.math.stat.descriptive.SummaryStatistics;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,21,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,22,mport org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,27,ublic class MersenneTwisterTest {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,29,Test
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,30,ublic void testGaussian() {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,31,ersenneTwister mt = new MersenneTwister(42853252100l);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,32,ummaryStatistics sample = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,33,or (int i = 0; i < 1000; ++i) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,34,ample.addValue(mt.nextGaussian());
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,36,"ssert.assertEquals(0.0, sample.getMean(), 0.005);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,37,"ssert.assertEquals(1.0, sample.getStandardDeviation(), 0.025);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,40,Test
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,41,ublic void testDouble() {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,42,ersenneTwister mt = new MersenneTwister(195357343514l);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,43,ummaryStatistics sample = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,44,or (int i = 0; i < 1000; ++i) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,45,ample.addValue(mt.nextDouble());
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,47,"ssert.assertEquals(0.5, sample.getMean(), 0.02);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,48,"ssert.assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,49,"ample.getStandardDeviation(),"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,50,.002);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,53,Test
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,54,ublic void testFloat() {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,55,ersenneTwister mt = new MersenneTwister(4442733263l);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,56,ummaryStatistics sample = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,57,or (int i = 0; i < 1000; ++i) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,58,ample.addValue(mt.nextFloat());
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,60,"ssert.assertEquals(0.5, sample.getMean(), 0.01);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,61,"ssert.assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,62,"ample.getStandardDeviation(),"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,63,.006);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,66,Test(expected=MathIllegalArgumentException.class)
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,67,ublic void testNextIntNeg() {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,68,ew MersenneTwister(1).nextInt(-1);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,71,Test
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,72,ublic void testNextIntN() {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,73,ersenneTwister mt = new MersenneTwister(0x12b8a7412bb25el);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,74,or (int n = 1; n < 20; ++n) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,75,nt[] count = new int[n];
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,76,or (int k = 0; k < 10000; ++k) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,77,nt l = mt.nextInt(n);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,78,+count[l];
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,79,ssert.assertTrue(l >= 0);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,80,ssert.assertTrue(l <  n);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,82,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,83,ssert.assertTrue(n * count[i] >  8600);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,84,ssert.assertTrue(n * count[i] < 11200);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,89,Test
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,90,ublic void testNextInt() {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,91,"ersenneTwister mt = new MersenneTwister(new int[] { 1, 2, 3, 4, 5 });"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,92,nt walk = 0;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,93,or (int k = 0; k < 10000; ++k) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,94,f (mt.nextInt() >= 0) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,95,+walk;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,96, else {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,97,-walk;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,100,ssert.assertTrue(FastMath.abs(walk) < 120);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,103,Test
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,104,ublic void testNextLong() {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,105,ersenneTwister mt = new MersenneTwister(12345);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,106,nt walk = 0;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,107,or (int k = 0; k < 10000; ++k) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,108,f (mt.nextLong() >= 0) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,109,+walk;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,110, else {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,111,-walk;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,114,ssert.assertTrue(FastMath.abs(walk) < 50);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,117,Test
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,118,ublic void testNexBoolean() {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,119,ersenneTwister mt = new MersenneTwister(76342);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,120,nt walk = 0;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,121,or (int k = 0; k < 10000; ++k) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,122,f (mt.nextBoolean()) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,123,+walk;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,124, else {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,125,-walk;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,128,ssert.assertTrue(FastMath.abs(walk) < 250);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,22,public class MersenneTwisterTest extends RandomGeneratorAbstractTest {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,131,Test
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,132,ublic void testNexBytes() {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,133,ersenneTwister mt = new MersenneTwister(0);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,134,nt[] count = new int[256];
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,135,yte[] bytes = new byte[10];
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,136,or (int k = 0; k < 100000; ++k) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,137,t.nextBytes(bytes);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,138,or (byte b : bytes) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,139,+count[b + 128];
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,142,nt min = Integer.MAX_VALUE;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,143,nt max = Integer.MIN_VALUE;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,144,or (int c : count) {
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,145,"in = FastMath.min(min, c);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,146,"ax = FastMath.max(max, c);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,148,nt expected = (100000 * bytes.length) / count.length;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,149,ssert.assertTrue((expected - 200) < min);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,150,ssert.assertTrue(max < (expected + 200));
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,24,@Override
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,25,protected RandomGenerator makeGenerator() {
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,26,return new MersenneTwister(100);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,29,// TODO: Some of the tests moved up to RandomGeneratorAbstractTest tested alternative seeding / constructors
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,30,// Tests exercising these features directly should be added to this class.
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,68,randomData.reSeed(1000);
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,250,/ Reseed randomGenerator to get fixed sequence
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,251,andomData.reSeed(1000);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,17,package org.apache.commons.math.random;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,19,import org.apache.commons.math.TestUtils;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,20,import org.apache.commons.math.stat.Frequency;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,21,import org.apache.commons.math.stat.descriptive.SummaryStatistics;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,22,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,23,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,26,import org.junit.Before;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,27,import org.junit.Test;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,30,* Base class for RandomGenerator tests.
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,32,* Tests RandomGenerator methods directly and also executes RandomDataTest
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,33,* test cases against a RandomDataImpl created using the provided generator.
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,35,"* RandomGenerator test classes should extend this class, implementing"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,36,* makeGenerator() to provide a concrete generator to test. The generator
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,37,* returned by makeGenerator should be seeded with a fixed seed.
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,39,* @version $Id$
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,42,public abstract class RandomGeneratorAbstractTest extends RandomDataTest {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,44,/** RandomGenerator under test */
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,45,protected RandomGenerator generator;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,48,* Override this method in subclasses to provide a concrete generator to test.
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,49,* Return a generator seeded with a fixed seed.
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,51,protected abstract RandomGenerator makeGenerator();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,54,* Initialize generator and randomData instance in superclass.
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,56,public RandomGeneratorAbstractTest() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,57,generator = makeGenerator();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,58,randomData = new RandomDataImpl(generator);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,62,* Set a fixed seed for the tests
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,64,@Before
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,65,public void setUp() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,66,generator = makeGenerator();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,69,"// Omit secureXxx tests, since they do not use the provided generator"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,70,@Override
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,71,public void testNextSecureLong() {}
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,73,@Override
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,74,public void testNextSecureInt() {}
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,76,@Override
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,77,public void testNextSecureHex() {}
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,79,@Test
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,80,public void testNextIntDirect() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,81,try {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,82,generator.nextInt(-1);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,83,"Assert.fail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,84,} catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,85,// ignored
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,87,Frequency freq = new Frequency();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,88,int value = 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,89,for (int i=0; i<smallSampleSize; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,90,value = generator.nextInt(4);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,91,"Assert.assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,92,freq.addValue(value);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,94,long[] observed = new long[4];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,95,for (int i=0; i<4; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,96,observed[i] = freq.getCount(i);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,99,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,100,* Change to 11.34 for alpha = .01
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,102,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,103,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,106,@Test
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,107,public void testNextLongDirect() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,108,long q1 = Long.MAX_VALUE/4;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,109,long q2 = 2 *  q1;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,110,long q3 = 3 * q1;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,112,Frequency freq = new Frequency();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,113,long val = 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,114,int value = 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,115,for (int i=0; i<smallSampleSize; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,116,val = generator.nextLong();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,117,val = val < 0 ? -val : val;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,118,if (val < q1) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,119,value = 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,120,} else if (val < q2) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,121,value = 1;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,122,} else if (val < q3) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,123,value = 2;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,124,} else {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,125,value = 3;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,127,freq.addValue(value);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,129,long[] observed = new long[4];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,130,for (int i=0; i<4; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,131,observed[i] = freq.getCount(i);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,134,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,135,* Change to 11.34 for alpha = .01
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,137,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,138,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,141,@Test
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,142,public void testNextBooleanDirect() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,143,long halfSampleSize = smallSampleSize / 2;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,144,"double[] expected = {halfSampleSize, halfSampleSize};"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,145,long[] observed = new long[2];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,146,for (int i=0; i<smallSampleSize; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,147,if (generator.nextBoolean()) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,148,observed[0]++;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,149,} else {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,150,observed[1]++;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,153,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,154,* Change to 6.635 for alpha = .01
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,156,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,157,"testStatistic.chiSquare(expected,observed) < 10.828);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,160,@Test
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,161,public void testNextFloatDirect() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,162,Frequency freq = new Frequency();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,163,float val = 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,164,int value = 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,165,for (int i=0; i<smallSampleSize; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,166,val = generator.nextFloat();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,167,if (val < 0.25) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,168,value = 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,169,} else if (val < 0.5) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,170,value = 1;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,171,} else if (val < 0.75) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,172,value = 2;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,173,} else {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,174,value = 3;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,176,freq.addValue(value);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,178,long[] observed = new long[4];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,179,for (int i=0; i<4; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,180,observed[i] = freq.getCount(i);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,183,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,184,* Change to 11.34 for alpha = .01
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,186,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,187,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,190,@Test
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,191,public void testDoubleDirect() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,192,SummaryStatistics sample = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,193,for (int i = 0; i < 10000; ++i) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,194,sample.addValue(generator.nextDouble());
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,196,"Assert.assertEquals(0.5, sample.getMean(), 0.02);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,197,"Assert.assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,198,"sample.getStandardDeviation(),"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,199,0.01);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,202,@Test
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,203,public void testFloatDirect() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,204,SummaryStatistics sample = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,205,for (int i = 0; i < 1000; ++i) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,206,sample.addValue(generator.nextFloat());
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,208,"Assert.assertEquals(0.5, sample.getMean(), 0.01);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,209,"Assert.assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,210,"sample.getStandardDeviation(),"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,211,0.01);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,214,@Test(expected=MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,215,public void testNextIntNeg() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,216,generator.nextInt(-1);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,219,@Test
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,220,public void testNextInt2() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,221,int walk = 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,222,for (int k = 0; k < 10000; ++k) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,223,if (generator.nextInt() >= 0) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,224,++walk;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,225,} else {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,226,--walk;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,229,"Assert.assertTrue(""Walked too far astray: "" + walk, FastMath.abs(walk) < 120);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,232,@Test
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,233,public void testNextLong2() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,234,int walk = 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,235,for (int k = 0; k < 1000; ++k) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,236,if (generator.nextLong() >= 0) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,237,++walk;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,238,} else {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,239,--walk;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,242,"Assert.assertTrue(""Walked too far astray: "" + walk, FastMath.abs(walk) < 100);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,245,@Test
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,246,public void testNexBoolean2() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,247,int walk = 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,248,for (int k = 0; k < 10000; ++k) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,249,if (generator.nextBoolean()) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,250,++walk;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,251,} else {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,252,--walk;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,255,Assert.assertTrue(FastMath.abs(walk) < 250);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,258,@Test
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,259,public void testNexBytes() throws Exception {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,260,long[] count = new long[256];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,261,byte[] bytes = new byte[10];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,262,double[] expected = new double[256];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,263,final int sampleSize = 100000;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,265,for (int i = 0; i < 256; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,266,expected[i] = (double) sampleSize / 265f;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,269,for (int k = 0; k < sampleSize; ++k) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,270,generator.nextBytes(bytes);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,271,for (byte b : bytes) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,272,++count[b + 128];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,276,"TestUtils.assertChiSquareAccept(expected, count, 0.001);"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,21,mport org.apache.commons.math.stat.descriptive.SummaryStatistics;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,22,mport org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,23,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,26,ublic class Well1024aTest {
True,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,23,public class Well1024aTest extends RandomGeneratorAbstractTest {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,28,Test
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,29,ublic void testGaussian() {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,30,ell1024a mt = new Well1024a(42853252100l);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,31,ummaryStatistics sample = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,32,or (int i = 0; i < 10000; ++i) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,33,ample.addValue(mt.nextGaussian());
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,35,"ssert.assertEquals(0.0, sample.getMean(), 0.004);"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,36,"ssert.assertEquals(1.0, sample.getStandardDeviation(), 0.003);"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,39,Test
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,40,ublic void testDouble() {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,41,ell1024a mt = new Well1024a(195357343514l);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,42,ummaryStatistics sample = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,43,or (int i = 0; i < 10000; ++i) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,44,ample.addValue(mt.nextDouble());
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,46,"ssert.assertEquals(0.5, sample.getMean(), 0.0006);"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,47,"ssert.assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,48,"ample.getStandardDeviation(),"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,49,.002);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,52,Test
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,53,ublic void testFloat() {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,54,ell1024a mt = new Well1024a(4442733263l);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,55,ummaryStatistics sample = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,56,or (int i = 0; i < 10000; ++i) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,57,ample.addValue(mt.nextFloat());
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,59,"ssert.assertEquals(0.5, sample.getMean(), 0.0001);"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,60,"ssert.assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,61,"ample.getStandardDeviation(),"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,62,.003);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,65,Test(expected=MathIllegalArgumentException.class)
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,66,ublic void testNextIntNeg() {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,67,ew Well1024a(1).nextInt(-1);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,70,Test
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,71,ublic void testNextIntN() {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,72,ell1024a mt = new Well1024a(0x12b8a7412bb25el);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,73,or (int n = 1; n < 20; ++n) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,74,nt[] count = new int[n];
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,75,or (int k = 0; k < 10000; ++k) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,76,nt l = mt.nextInt(n);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,77,+count[l];
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,78,ssert.assertTrue(l >= 0);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,79,ssert.assertTrue(l <  n);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,81,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,82,ssert.assertTrue(n * count[i] >  8600);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,83,ssert.assertTrue(n * count[i] < 11200);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,88,Test
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,89,ublic void testNextInt() {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,90,"ell1024a mt = new Well1024a(new int[] { 1, 2, 3, 4, 5 });"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,91,nt walk = 0;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,92,or (int k = 0; k < 10000; ++k) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,93,f (mt.nextInt() >= 0) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,94,+walk;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,95, else {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,96,-walk;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,99,ssert.assertTrue(FastMath.abs(walk) < 70);
True,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,25,@Override
True,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,26,protected RandomGenerator makeGenerator() {
True,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,27,return new Well1024a(100);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,102,Test
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,103,ublic void testNextLong() {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,104,ell1024a mt = new Well1024a(12345);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,105,nt walk = 0;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,106,or (int k = 0; k < 10000; ++k) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,107,f (mt.nextLong() >= 0) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,108,+walk;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,109, else {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,110,-walk;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,113,ssert.assertTrue(FastMath.abs(walk) < 70);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,116,Test
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,117,ublic void testNexBoolean() {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,118,ell1024a mt = new Well1024a(76342);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,119,nt walk = 0;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,120,or (int k = 0; k < 10000; ++k) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,121,f (mt.nextBoolean()) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,122,+walk;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,123, else {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,124,-walk;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,127,ssert.assertTrue(FastMath.abs(walk) < 180);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,130,Test
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,131,ublic void testNexBytes() {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,132,ell1024a mt = new Well1024a(0);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,133,nt[] count = new int[256];
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,134,yte[] bytes = new byte[10];
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,135,or (int k = 0; k < 1000000; ++k) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,136,t.nextBytes(bytes);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,137,or (byte b : bytes) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,138,+count[b + 128];
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,141,nt min = Integer.MAX_VALUE;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,142,nt max = Integer.MIN_VALUE;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,143,or (int c : count) {
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,144,"in = FastMath.min(min, c);"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,145,"ax = FastMath.max(max, c);"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,147,nt expected = (1000000 * bytes.length) / count.length;
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,148,ssert.assertTrue((expected - 600) < min);
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,149,ssert.assertTrue(max < (expected + 600));
False,src/test/java/org/apache/commons/math/random/Well19937aTest.java,src/test/java/org/apache/commons/math/random/Well19937aTest.java,22,ublic class Well19937aTest {
True,src/test/java/org/apache/commons/math/random/Well19937aTest.java,src/test/java/org/apache/commons/math/random/Well19937aTest.java,22,public class Well19937aTest extends RandomGeneratorAbstractTest {
True,src/test/java/org/apache/commons/math/random/Well19937aTest.java,src/test/java/org/apache/commons/math/random/Well19937aTest.java,24,@Override
True,src/test/java/org/apache/commons/math/random/Well19937aTest.java,src/test/java/org/apache/commons/math/random/Well19937aTest.java,25,public RandomGenerator makeGenerator() {
True,src/test/java/org/apache/commons/math/random/Well19937aTest.java,src/test/java/org/apache/commons/math/random/Well19937aTest.java,26,return new Well19937a(100);
False,src/test/java/org/apache/commons/math/random/Well19937cTest.java,src/test/java/org/apache/commons/math/random/Well19937cTest.java,22,ublic class Well19937cTest {
True,src/test/java/org/apache/commons/math/random/Well19937cTest.java,src/test/java/org/apache/commons/math/random/Well19937cTest.java,22,public class Well19937cTest extends RandomGeneratorAbstractTest {
True,src/test/java/org/apache/commons/math/random/Well19937cTest.java,src/test/java/org/apache/commons/math/random/Well19937cTest.java,24,@Override
True,src/test/java/org/apache/commons/math/random/Well19937cTest.java,src/test/java/org/apache/commons/math/random/Well19937cTest.java,25,public RandomGenerator makeGenerator() {
True,src/test/java/org/apache/commons/math/random/Well19937cTest.java,src/test/java/org/apache/commons/math/random/Well19937cTest.java,26,return new Well19937c(100);
False,src/test/java/org/apache/commons/math/random/Well44497aTest.java,src/test/java/org/apache/commons/math/random/Well44497aTest.java,22,ublic class Well44497aTest {
True,src/test/java/org/apache/commons/math/random/Well44497aTest.java,src/test/java/org/apache/commons/math/random/Well44497aTest.java,22,public class Well44497aTest extends RandomGeneratorAbstractTest {
True,src/test/java/org/apache/commons/math/random/Well44497aTest.java,src/test/java/org/apache/commons/math/random/Well44497aTest.java,24,@Override
True,src/test/java/org/apache/commons/math/random/Well44497aTest.java,src/test/java/org/apache/commons/math/random/Well44497aTest.java,25,public RandomGenerator makeGenerator() {
True,src/test/java/org/apache/commons/math/random/Well44497aTest.java,src/test/java/org/apache/commons/math/random/Well44497aTest.java,26,return new Well44497a(100);
False,src/test/java/org/apache/commons/math/random/Well44497bTest.java,src/test/java/org/apache/commons/math/random/Well44497bTest.java,22,ublic class Well44497bTest {
True,src/test/java/org/apache/commons/math/random/Well44497bTest.java,src/test/java/org/apache/commons/math/random/Well44497bTest.java,22,public class Well44497bTest extends RandomGeneratorAbstractTest {
True,src/test/java/org/apache/commons/math/random/Well44497bTest.java,src/test/java/org/apache/commons/math/random/Well44497bTest.java,24,@Override
True,src/test/java/org/apache/commons/math/random/Well44497bTest.java,src/test/java/org/apache/commons/math/random/Well44497bTest.java,25,public RandomGenerator makeGenerator() {
True,src/test/java/org/apache/commons/math/random/Well44497bTest.java,src/test/java/org/apache/commons/math/random/Well44497bTest.java,26,return new Well44497b(100);
False,src/test/java/org/apache/commons/math/random/Well512aTest.java,src/test/java/org/apache/commons/math/random/Well512aTest.java,22,ublic class Well512aTest {
True,src/test/java/org/apache/commons/math/random/Well512aTest.java,src/test/java/org/apache/commons/math/random/Well512aTest.java,22,public class Well512aTest extends RandomGeneratorAbstractTest {
True,src/test/java/org/apache/commons/math/random/Well512aTest.java,src/test/java/org/apache/commons/math/random/Well512aTest.java,24,@Override
True,src/test/java/org/apache/commons/math/random/Well512aTest.java,src/test/java/org/apache/commons/math/random/Well512aTest.java,25,public RandomGenerator makeGenerator() {
True,src/test/java/org/apache/commons/math/random/Well512aTest.java,src/test/java/org/apache/commons/math/random/Well512aTest.java,26,return new Well512a(100);

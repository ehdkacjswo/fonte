is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,5,* reserved.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,9,* are met:
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,17,*    distribution.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,57,* Error thrown when a numerical computation can not be performed because the
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,58,* numerical result failed to converge to a finite value.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,60,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,62,public class ConvergenceException extends MathException {
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,64,* Default constructor.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,66,public ConvergenceException() {
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,67,"this(null, null);"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,71,* Construct an exception with the given message.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,72,* @param message descriptive error message.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,74,public ConvergenceException(String message) {
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,75,"this(message, null);"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,79,* Construct an exception with the given message and root cause.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,80,* @param message descriptive error message.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,81,* @param cause root cause.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,83,"public ConvergenceException(String message, Throwable cause) {"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,84,"super(message, cause);"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,88,* Create an exception with a given root cause.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,89,* @param throwable caught exception causing this problem
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,91,public ConvergenceException(Throwable throwable) {
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,92,"this(null, throwable);"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,5,* reserved.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,9,* are met:
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,17,*    distribution.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,57,* Signals a configuration problem with any of the factory methods.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,58,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:22 $
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,60,public class MathConfigurationException extends MathException {
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,63,* Default constructor.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,65,public MathConfigurationException() {
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,66,"this(null, null);"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,70,* Construct an exception with the given message.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,71,* @param message message describing the problem
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,73,public MathConfigurationException(final String message) {
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,74,"this(message, null);"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,78,* Construct an exception with the given message and root cause.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,79,* @param message message describing the problem
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,80,* @param throwable caught exception causing this problem
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,82,public MathConfigurationException(
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,83,"final String message,"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,84,final Throwable throwable) {
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,85,"super(message, throwable);"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,89,* Construct an exception with the given root cause.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,90,* @param throwable caught exception causing this problem
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,92,public MathConfigurationException(final Throwable throwable) {
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,93,"this(null, throwable);"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,5,* reserved.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,9,* are met:
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,17,*    distribution.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,56,import org.apache.commons.lang.exception.NestableException;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,59,* A generic exception indicating problems in the math package.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,60,* @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:22 $
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,62,public class MathException extends NestableException {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,65,* Constructs a MathException
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,67,public MathException() {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,68,"this(null, null);"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,72,* Create an exception with a given error message.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,73,* @param message message describing the problem
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,75,public MathException(final String message) {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,76,"this(message, null);"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,80,* Create an exception with a given error message and root cause.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,81,* @param message message describing the problem
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,82,* @param throwable caught exception causing this problem
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,84,"public MathException(final String message, final Throwable throwable) {"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,85,"super(message, throwable);"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,89,* Create an exception with a given root cause.
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,90,* @param throwable caught exception causing this problem
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,92,public MathException(final Throwable throwable) {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,93,"this(null, throwable);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,59,* Provide the bisection algorithm for solving for zeros of real univariate
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,60,* functions.  It will only search for one zero in the given interval.  The
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,61,* function is supposed to be continuous but not necessarily smooth.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,62,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,64,public class BisectionSolver extends UnivariateRealSolverImpl {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,66,* Construct a solver for the given function.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,67,* @param f function to solve.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,69,public BisectionSolver(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,70,"super(f, 100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,74,* Solve for a zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,75,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,76,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,77,* @param initial the start value to use (ignored).
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,78,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,79,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,80,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,82,"public double solve(double min, double max, double initial)"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,83,throws MathException {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,85,"return solve(min, max);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,89,* Solve for a zero root in the given interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,90,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,91,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,92,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,93,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,94,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,96,"public double solve(double min, double max) throws MathException {"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,97,clearResult();
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,99,double m;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,100,double fm;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,101,double fmin;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,103,int i = 0;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,104,while (i < maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,105,"m = midpoint(min, max);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,106,fmin = f.value(min);
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,107,fm = f.value(m);
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,109,if (fm * fmin > 0.0) {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,110,// max and m bracket the root.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,111,min = m;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,112,fmin = fm;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,113,} else {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,114,// min and m bracket the root.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,115,max = m;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,118,if (Math.abs(max - min) <= absoluteAccuracy) {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,119,"m = midpoint(min, max);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,120,"setResult(m, i);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,121,return m;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,123,++i;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,126,"throw new MathException(""Maximal iteration number exceeded"");"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,130,* Compute the midpoint of two values.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,131,* @param a first value.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,132,* @param b second value.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,133,* @return the midpoint.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,135,"public static double midpoint(double a, double b) {"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,136,return (a + b) * .5;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,59,* Provide the Brent algorithm for solving for zeros of real univariate
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,60,* functions.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,61,* It will only search for one zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,62,* The function is supposed to be continuous but not necessarily smooth.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,66,public class BrentSolver extends UnivariateRealSolverImpl {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,68,* Construct a solver for the given function.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,69,* @param f function to solve.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,71,public BrentSolver(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,72,"super(f, 100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,76,* Solve for a zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,77,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,78,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,79,* @param initial the start value to use (ignored).
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,80,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,81,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,82,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,84,"public double solve(double min, double max, double initial)"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,85,throws MathException {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,87,"return solve(min, max);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,91,* Solve for a zero root in the given interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,92,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,93,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,94,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,95,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,96,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,98,"public double solve(double min, double max) throws MathException {"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,99,clearResult();
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,100,// Index 0 is the old approximation for the root.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,101,// Index 1 is the last calculated approximation  for the root.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,102,// Index 2 is a bracket for the root with respect to x1.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,103,double x0 = min;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,104,double x1 = max;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,105,double y0 = f.value(x0);
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,106,double y1 = f.value(x1);
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,107,if ((y0 > 0) == (y1 > 0)) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,108,"throw new MathException(""Interval doesn't bracket a zero."");"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,110,double x2 = x0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,111,double y2 = y0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,112,double delta = x1 - x0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,113,double oldDelta = delta;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,115,int i = 0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,116,while (i < maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,117,if (Math.abs(y2) < Math.abs(y1)) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,118,x0 = x1;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,119,x1 = x2;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,120,x2 = x0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,121,y0 = y1;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,122,y1 = y2;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,123,y2 = y0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,125,if (Math.abs(y1) <= functionValueAccuracy) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,126,// Avoid division by very small values. Assume
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,127,// the iteration has converged (the problem may
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,128,// still be ill conditioned)
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,129,"setResult(x1, i);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,130,return result;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,132,double dx = (x2 - x1);
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,133,double tolerance =
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,134,"Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,135,if (Math.abs(dx) <= tolerance) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,136,"setResult(x1, i);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,137,return result;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,139,if ((Math.abs(oldDelta) < tolerance) ||
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,140,(Math.abs(y0) <= Math.abs(y1))) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,141,// Force bisection.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,142,delta = 0.5 * dx;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,143,oldDelta = delta;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,144,} else {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,145,double r3 = y1 / y0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,146,double p;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,147,double p1;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,148,if (x0 == x2) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,149,// Linear interpolation.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,150,p = dx * r3;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,151,p1 = 1.0 - r3;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,152,} else {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,153,// Inverse quadratic interpolation.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,154,double r1 = y0 / y2;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,155,double r2 = y1 / y2;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,156,p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,157,p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,159,if (p > 0.0) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,160,p1 = -p1;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,161,} else {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,162,p = -p;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,164,if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,165,p >= Math.abs(0.5 * oldDelta * p1)) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,166,// Inverse quadratic interpolation gives a value
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,167,"// in the wrong direction, or progress is slow."
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,168,// Fall back to bisection.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,169,delta = 0.5 * dx;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,170,oldDelta = delta;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,171,} else {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,172,oldDelta = delta;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,173,delta = p / p1;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,176,"// Save old X1, Y1"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,177,x0 = x1;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,178,y0 = y1;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,179,"// Compute new X1, Y1"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,180,if (Math.abs(delta) > tolerance) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,181,x1 = x1 + delta;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,182,} else if (dx > 0.0) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,183,x1 = x1 + 0.5 * tolerance;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,184,} else if (dx <= 0.0) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,185,x1 = x1 - 0.5 * tolerance;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,187,y1 = f.value(x1);
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,188,if ((y1 > 0) == (y2 > 0)) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,189,x2 = x0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,190,y2 = y0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,191,delta = x1 - x0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,192,oldDelta = delta;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,194,i++;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,196,"throw new MathException(""Maximal iteration number exceeded."");"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,56,import org.apache.commons.lang.exception.NestableRuntimeException;
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,59,* Error thrown when a numerical computation can not be performed because the
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,60,* numerical result failed to converge to a finite value.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,62,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,64,public class ConvergenceException extends NestableRuntimeException {
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,66,* Default constructor.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,68,public ConvergenceException() {
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,69,"this(null, null);"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,73,* Construct an exception with the given message.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,74,* @param message descriptive error message.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,76,public ConvergenceException(String message) {
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,77,"this(message, null);"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,81,* Construct an exception with the given message and root cause.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,82,* @param message descriptive error message.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,83,* @param cause root cause.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,85,"public ConvergenceException(String message, Throwable cause) {"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,86,"super(message, cause);"
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,90,* Create an exception with a given root cause.
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,91,* @param throwable caught exception causing this problem
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,93,public ConvergenceException(Throwable throwable) {
True,src/java/org/apache/commons/math/analysis/ConvergenceException.java,src/java/org/apache/commons/math/analysis/ConvergenceException.java,94,"this(null, throwable);"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,56,import java.util.Arrays;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,58,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,61,* Represents a cubic spline function.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,62,* Spline functions map a certain interval of real numbers to real numbers.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,63,"* A cubic spline consists of segments of cubic functions. For this class,"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,64,* polynominal coefficents are used.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,65,* Arguments outside of the domain cause an IllegalArgumentException.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,67,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,69,public class CubicSplineFunction implements UnivariateRealFunction {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,70,/** Spline segment interval delimiters. Size is N+1 for N segments. */
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,71,private double xval[];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,74,* The spline segment's polynominal coefficients.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,75,"* The first index runs over the intervals, size is N."
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,76,"* The second index adresses the coefficients in the segment, with"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,77,* index 0 being the absolute coefficient and index 3 the coefficient
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,78,* for the third power.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,79,* The coefficients are setup so that x runs from 0 to xval[i+1]-xval[i].
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,81,private double c[][];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,84,* Construct a function with the given segment delimiters and polynomial
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,85,* coefficients.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,86,* @param xval Spline segment interval delimiters
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,87,* @param c spline segment's polynominal coefficients
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,89,"public CubicSplineFunction(double xval[], double c[][]) {"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,90,super();
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,91,"// TODO: should copy the arguments here, for safety. This could be a major overhead."
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,92,this.xval = xval;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,93,this.c = c;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,97,* Compute the value for the function.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,98,* @param x the point for which the function value should be computed
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,99,* @return the value
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,100,* @throws MathException if the function couldn't be computed due to
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,101,*  missing additional data or other environmental problems.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,102,* @see UnivariateRealFunction#value(double)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,104,public double value(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,105,if (x < xval[0] || x > xval[xval.length - 1]) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,106,"throw new IllegalArgumentException(""Argument outside domain"");"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,108,"int i = Arrays.binarySearch(xval, x);"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,109,if (i < 0) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,110,i = -i - 2;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,112,x = x - xval[i];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,113,return ((c[i][3] * x + c[i][2]) * x + c[i][1]) * x + c[i][0];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,117,* Compute the value for the first derivative of the function.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,118,* It is recommended to provide this method only if the first derivative is
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,119,* analytical. Numerical derivatives may be acceptable in some cases.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,120,* An implementation should throw an UnsupportedOperationException if
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,121,* this method is not implemented.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,122,* @param x the point for which the first derivative should be computed
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,123,* @return the value
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,124,* @throws MathException if the derivative couldn't be computed.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,125,* @see UnivariateRealFunction#firstDerivative(double)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,127,public double firstDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,128,if (x < xval[0] || x > xval[xval.length - 1]) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,129,"throw new IllegalArgumentException(""Argument outside domain"");"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,131,"int i = Arrays.binarySearch(xval, x);"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,132,if (i < 0) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,133,i = -i - 2;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,135,x = x - xval[i];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,136,return (3 * c[i][3] * x + 2 * c[i][2]) * x + c[i][1];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,140,* Compute the value for the second derivative of the function.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,141,* It is recommended to provide this method only if the second derivative is
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,142,* analytical. Numerical derivatives may be acceptable in some cases.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,143,* An implementation should throw an UnsupportedOperationException if
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,144,* this method is not implemented.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,145,* @param x the point for which the first derivative should be computed
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,146,* @return the value
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,147,* @throws MathException if the second derivative couldn't be computed.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,148,* @see UnivariateRealFunction#secondDerivative(double)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,150,public double secondDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,151,if (x < xval[0] || x > xval[xval.length - 1]) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,152,"throw new IllegalArgumentException(""Argument outside domain"");"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,154,"int i = Arrays.binarySearch(xval, x);"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,155,if (i < 0) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,156,i = -i - 2;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,158,x = x - xval[i];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,159,return 6 * c[i][3] * x + 2 * c[i][2];
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,59,* Auxillary class for testing solvers.
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,61,* @author pietsch at apache.org
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,64,public class QuinticFunction implements UnivariateRealFunction {
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,66,/* Evaluate quintic.
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,67,* @see org.apache.commons.math.UnivariateRealFunction#value(double)
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,69,public double value(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,70,return (x-1)*(x-0.5)*x*(x+0.5)*(x+1);
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,73,/* First derivative of quintic.
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,74,* @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,76,public double firstDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,77,return (5*x*x-3.75)*x*x+0.25;
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,80,/* Second order derivative of quintic.
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,81,* Unsupported.
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,82,* @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,84,public double secondDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/QuinticFunction.java,src/java/org/apache/commons/math/analysis/QuinticFunction.java,85,throw new UnsupportedOperationException();
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,59,* Utility class comprised of root finding techniques.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,61,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,63,public class RootFinding {
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,65,* Default constructor. Prohibit construction.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,67,private RootFinding() {
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,68,super();
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,72,"* For a function, f, this method returns two values, a and b that bracket"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,73,"* a root of f.  That is to say, there exists a value c between a and b"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,74,* such that f(c) = 0.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,76,* @param function the function
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,77,* @param initial midpoint of the returned range.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,78,"* @param lowerBound for numerical safety, a never is less than this value."
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,79,"* @param upperBound for numerical safety, b never is greater than this"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,80,*                   value.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,81,"* @return a two element array holding {a, b}."
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,82,* @throws MathException if a root can not be bracketted.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,84,"public static double[] bracket(UnivariateRealFunction function,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,85,"double initial,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,86,"double lowerBound,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,87,double upperBound) throws MathException {
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,88,"return bracket( function, initial, lowerBound, upperBound,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,89,Integer.MAX_VALUE ) ;
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,93,"* For a function, f, this method returns two values, a and b that bracket"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,94,"* a root of f.  That is to say, there exists a value c between a and b"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,95,* such that f(c) = 0.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,97,* @param function the function
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,98,* @param initial midpoint of the returned range.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,99,"* @param lowerBound for numerical safety, a never is less than this value."
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,100,"* @param upperBound for numerical safety, b never is greater than this"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,101,*                   value.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,102,"* @param maximumIterations to guard against infinite looping, maximum"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,103,*                          number of iterations to perform
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,104,"* @return a two element array holding {a, b}."
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,105,* @throws MathException if a root can not be bracketted.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,107,"public static double[] bracket(UnivariateRealFunction function,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,108,"double initial,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,109,"double lowerBound,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,110,"double upperBound,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,111,int maximumIterations) throws MathException {
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,112,double a = initial;
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,113,double b = initial;
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,114,double fa;
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,115,double fb;
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,116,int numIterations = 0 ;
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,118,do {
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,119,"a = Math.max(a - 1.0, lowerBound);"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,120,"b = Math.min(b + 1.0, upperBound);"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,121,fa = function.value(a);
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,122,fb = function.value(b);
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,123,numIterations += 1 ;
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,124,} while ( (fa * fb > 0.0) && ( numIterations < maximumIterations ) );
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,126,"return new double[]{a, b};"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,59,* Provide the secant algorithm for solving for zeros of real univariate
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,60,"* functions. Because of forced bracketing, convergence is slower than"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,61,"* the unrestricted secant algorithm. However, slow convergence of the"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,62,* Regula Falsi can be avoided.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,63,* It will only search for one zero in the given interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,64,* The function is supposed to be continuous but not necessarily smooth.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,66,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,68,public class SecantSolver extends UnivariateRealSolverImpl {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,70,* Construct a solver for the given function.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,71,* @param f function to solve.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,73,public SecantSolver(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,74,"super(f, 100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,78,* Solve for a zero in the given interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,79,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,80,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,81,* @param initial the start value to use (ignored).
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,82,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,83,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,84,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,86,"public double solve(double min, double max, double initial)"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,87,throws MathException {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,89,"return solve(min, max);"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,93,* Solve for a zero root in the given interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,94,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,95,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,96,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,97,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,98,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,100,"public double solve(double min, double max) throws MathException {"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,101,clearResult();
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,102,// Index 0 is the old approximation for the root.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,103,// Index 1 is the last calculated approximation  for the root.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,104,// Index 2 is a bracket for the root with respect to x0.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,105,// OldDelta is the length of the bracketing interval of the last
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,106,// iteration.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,107,double x0 = min;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,108,double x1 = max;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,109,double y0 = f.value(x0);
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,110,double y1 = f.value(x1);
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,111,if ((y0 > 0) == (y1 > 0)) {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,112,"throw new MathException(""Interval doesn't bracket a zero."");"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,114,double x2 = x0;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,115,double y2 = y0;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,116,double oldDelta = x2 - x1;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,117,int i = 0;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,118,while (i < maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,119,if (Math.abs(y2) < Math.abs(y1)) {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,120,x0 = x1;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,121,x1 = x2;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,122,x2 = x0;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,123,y0 = y1;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,124,y1 = y2;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,125,y2 = y0;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,127,if (Math.abs(y1) <= functionValueAccuracy) {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,128,"setResult(x1, i);"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,129,return result;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,131,if (Math.abs(oldDelta) <
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,132,"Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,133,"setResult(x1, i);"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,134,return result;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,136,double delta;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,137,if (Math.abs(y1) > Math.abs(y0)) {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,138,// Function value increased in last iteration. Force bisection.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,139,delta = 0.5 * oldDelta;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,140,} else {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,141,delta = (x0 - x1) / (1 - y0 / y1);
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,142,if (delta / oldDelta > 1) {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,143,// New approximation falls outside bracket.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,144,// Fall back to bisection.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,145,delta = 0.5 * oldDelta;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,148,x0 = x1;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,149,y0 = y1;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,150,x1 = x1 + delta;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,151,y1 = f.value(x1);
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,152,if ((y1 > 0) == (y2 > 0)) {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,153,"// New bracket is (x0,x1)."
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,154,x2 = x0;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,155,y2 = y0;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,157,oldDelta = x2 - x1;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,158,i++;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,160,"throw new MathException(""Maximal iteration number exceeded"");"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,59,* Auxillary class for testing solvers.
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,61,* The function is extraordinarily well behaved around zero roots: it
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,62,"* has an inflection point there (second order derivative is zero),"
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,63,* which means linear approximation (Regula Falsi) will converge
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,64,* quadratically.
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,66,* @author pietsch at apache.org
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,69,public class SinFunction implements UnivariateRealFunction {
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,71,/* Evaluate sinus fuction.
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,72,* @see org.apache.commons.math.UnivariateRealFunction#value(double)
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,74,public double value(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,75,return Math.sin(x);
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,78,/* First derivative of sinus function
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,79,* @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,81,public double firstDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,82,return Math.cos(x);
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,85,/* Second derivative of sinus function.
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,86,* Unsupported.
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,87,* @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,89,public double secondDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/SinFunction.java,src/java/org/apache/commons/math/analysis/SinFunction.java,90,throw new UnsupportedOperationException();
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,57,* Computes a natural spline interpolation for the data set.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,59,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,62,public class SplineInterpolator implements UnivariateRealInterpolator {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,63,/** the natural spline coefficients. */
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,64,private double[][] c = null;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,67,* Computes an interpolating function for the data set.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,68,* @param xval the arguments for the interpolation points
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,69,* @param yval the values for the interpolation points
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,70,* @return a function which interpolates the data set
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,72,"public UnivariateRealFunction interpolate(double[] xval, double[] yval) {"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,73,if (xval.length != yval.length) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,74,"throw new IllegalArgumentException(""Dataset arrays must have same length."");"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,77,if (c == null) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,78,// Number of intervals. The number of data points is N+1.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,79,int n = xval.length - 1;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,80,// Check whether the xval vector has ascending values.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,81,// Separation should be checked too (not implemented: which criteria?).
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,82,for (int i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,83,if (xval[i] >= xval[i + 1]) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,84,"throw new IllegalArgumentException(""Dataset must specify sorted, ascending x values."");"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,87,"// Vectors for the equation system. There are n-1 equations for the unknowns s[i] (1<=i<=N-1),"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,88,"// which are second order derivatives for the spline at xval[i]. At the end points, s[0]=s[N]=0."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,89,"// Vectors are offset by -1, except the lower diagonal vector which is offset by -2. Layout:"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,90,// d[0]*s[1]+u[0]*s[2]                                           = b[0]
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,91,// l[0]*s[1]+d[1]*s[2]+u[1]*s[3]                                 = b[1]
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,92,//           l[1]*s[2]+d[2]*s[3]+u[2]*s[4]                       = b[2]
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,94,//                     l[N-4]*s[N-3]+d[N-3]*s[N-2]+u[N-3]*s[N-1] = b[N-3]
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,95,//                                   l[N-3]*s[N-2]+d[N-2]*s[N-1] = b[N-2]
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,96,// Vector b is the right hand side (RHS) of the system.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,97,double b[] = new double[n - 1];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,98,// Vector d is diagonal of the matrix and also holds the computed solution.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,99,double d[] = new double[n - 1];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,100,// Setup right hand side and diagonal.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,101,double dquot = (yval[1] - yval[0]) / (xval[1] - xval[0]);
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,102,for (int i = 0; i < n - 1; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,103,// TODO avoid recomputing the term
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,104,//    (yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1])
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,105,// take it from the previous loop pass. Note: the interesting part of performance
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,106,"// loss is the range check in the array access, not the computation itself."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,107,double dquotNext =
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,108,(yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1]);
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,109,b[i] = 6.0 * (dquotNext - dquot);
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,110,d[i] = 2.0 * (xval[i + 2] - xval[i]);
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,111,dquot = dquotNext;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,113,// u[] and l[] (for the upper and lower diagonal respectively) are not
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,114,"// really needed, the computation is folded into the system solving loops."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,115,// Keep this for documentation purposes:
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,116,//double u[] = new double[n - 2]; // upper diagonal
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,117,//double l[] = new double[n - 2]; // lower diagonal
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,118,// Set up upper and lower diagonal. Keep the offsets in mind.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,119,//for (int i = 0; i < n - 2; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,120,//  u[i] = xval[i + 2] - xval[i + 1];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,121,//  l[i] = xval[i + 2] - xval[i + 1];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,123,// Solve the system: forward pass.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,124,for (int i = 0; i < n - 2; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,125,double delta = xval[i + 2] - xval[i + 1];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,126,double deltaquot = delta / d[i];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,127,d[i + 1] -= delta * deltaquot;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,128,b[i + 1] -= b[i] * deltaquot;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,130,// Solve the system: backward pass.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,131,d[n - 2] = b[n - 2] / d[n - 2];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,132,for (int i = n - 3; i >= 0; i--) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,133,d[i] = (b[i] - (xval[i + 2] - xval[i + 1]) * d[i + 1]) / d[i];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,135,// Compute coefficients as usual polynomial coefficients.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,136,"// Not the best with respect to roundoff on evaluation, but simple."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,137,c = new double[n][4];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,138,double delta = xval[1] - xval[0];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,139,c[0][3] = d[0] / delta / 6.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,140,c[0][2] = 0.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,141,c[0][1] = (yval[1] - yval[0]) / delta - d[0] * delta / 6.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,142,for (int i = 1; i < n - 2; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,143,delta = xval[i + 1] - xval[i];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,144,c[i][3] = (d[i] - d[i - 1]) / delta / 6.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,145,c[i][2] = d[i - 1] / 2.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,146,c[i][1] =
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,147,(yval[i + 1] - yval[i]) / delta -
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,148,(d[i] / 2.0 - d[i - 1]) * delta / 3.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,150,delta = (xval[n] - xval[n - 1]);
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,151,c[n - 1][3] = -d[n - 2] / delta / 6.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,152,c[n - 1][2] = d[n - 2] / 2.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,153,c[n - 1][1] =
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,154,(yval[n] - yval[n - 1]) / delta - d[n - 2] * delta / 3.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,155,for (int i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,156,c[i][0] = yval[i];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,160,"// TODO: copy xval, unless copied in CubicSplineFunction constructor"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,161,"return new CubicSplineFunction(xval, c);"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,57,* @version $Revision: 1.4 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,59,public interface UnivariateFunction {
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,60,// TODO: More documentation
True,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,65,double evaluate(double x);
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,59,* Provide an interface univariate real functions.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,60,* The object may held temporary data which is shared between calculations
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,61,* of the value and the derivatives for the same argument. It is not guaranteed
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,62,"* that derivatives are evaluated after the value, the evaluation algorithm"
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,63,* should throw an InvalidStateException if it can't cope with this.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,65,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,67,public interface UnivariateRealFunction {
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,69,* Compute the value for the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,70,* @param x the point for which the function value should be computed
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,71,* @return the value
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,72,* @throws MathException if the function couldn't be computed due to
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,73,*  missing additional data or other environmental problems.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,75,public double value(double x) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,78,* Compute the value for the first derivative of the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,79,* It is recommended to provide this method only if the first derivative is
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,80,* analytical. Numerical derivatives may be acceptable in some cases.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,81,* An implementation should throw an UnsupportedOperationException if
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,82,* this method is not implemented.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,83,* @param x the point for which the first derivative should be computed
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,84,* @return the value
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,85,* @throws MathException if the derivative couldn't be computed.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,87,public double firstDerivative(double x) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,90,* Compute the value for the second derivative of the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,91,* It is recommended to provide this method only if the second derivative is
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,92,* analytical. Numerical derivatives may be acceptable in some cases.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,93,* An implementation should throw an UnsupportedOperationException if
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,94,* this method is not implemented.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,95,* @param x the point for which the first derivative should be computed
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,96,* @return the value
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,97,* @throws MathException if the second derivative couldn't be computed.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,99,public double secondDerivative(double x) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,59,* Interface for interpolating a data set.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,61,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,63,public interface UnivariateRealInterpolator {
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,66,* Computes an interpolating function for the data set.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,67,* @param xval the arguments for the interpolation points
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,68,* @param yval the values for the interpolation points
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,69,* @return a function which interpolates the data set
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,70,* @throws MathException if arguments violate assumptions made by the
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,71,*         interpolationg algorithm
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,73,"public UnivariateRealFunction interpolate(double xval[], double yval[])"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,74,throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,59,* Provide an interface to algorithms for solving for zeros of real univariate
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,60,* functions.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,61,* An implementation will only search for one zero in the given interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,63,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,65,public interface UnivariateRealSolver {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,68,* Set the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,70,"* Usually a high iteration count indicates convergence problems. However,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,71,"* the ""reasonable value"" varies widely for different solvers, users are"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,72,* advised to use the default value supplied by the solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,74,* An exception will be thrown if the number is exceeded.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,76,* @param count maximum number of iterations
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,78,public void setMaximalIterationCount(int count);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,81,* Get the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,83,* @return the actual upper limit
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,85,public int getMaximalIterationCount();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,88,* Reset the upper limit for the number of iterations to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,90,* The default value is supplied by the solver implementation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,92,* @see #setMaximalIterationCount(int)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,94,public void resetMaximalIterationCount();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,97,* Set the absolute accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,99,* The default is usually choosen so taht roots in the interval
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,100,* -10..-0.1 and +0.1..+10 can be found wit a reasonable accuracy. If the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,101,"* expected absolute value of your roots is of much smaller magnitude, set"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,102,* this to a smaller value.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,104,* Solvers are advised to do a plausibility check with the relative
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,105,"* accuracy, but clients should not rely on this."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,107,* @param accuracy the accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,108,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,109,*         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,111,public void setAbsoluteAccuracy(double accuracy) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,114,* Get the actual absolute accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,116,* @return the accuracy
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,118,public double getAbsoluteAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,121,* Reset the absolute accuracy to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,123,* The default value is provided by the solver implementation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,125,public void resetAbsoluteAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,128,* Set the relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,130,* This is used to stop iterations if the absolute accuracy can't be
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,131,* achieved due to large values or short mantissa length.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,133,* If this should be the primary criterium for convergence rather then a
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,134,"* safety measure, set the absolute accuracy to a ridiculously small value,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,135,* like 1E-1000.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,137,* @param accuracy the relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,138,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,139,*         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,141,public void setRelativeAccuracy(double accuracy) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,144,* Get the actual relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,145,* @return the accuracy
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,147,public double getRelativeAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,150,* Reset the relative accuracy to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,151,* The default value is provided by the solver implementation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,153,public void resetRelativeAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,156,* Set the function value accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,158,* This is used to determine whan an evaluated function value or some other
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,159,* value which is used as divisor is zero.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,161,* This is a safety guard and it shouldn't be necesary to change this in
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,162,* general.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,164,* @param accuracy the accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,165,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,166,*         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,168,public void setFunctionValueAccuracy(double accuracy) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,171,* Get the actual function value accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,172,* @return the accuracy
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,174,public double getFunctionValueAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,177,* Reset the actual function accuracy to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,178,* The default value is provided by the solver implementation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,180,public void resetFunctionValueAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,183,* Solve for a zero root in the given interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,184,* A solver may require that the interval brackets a single zero root.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,185,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,186,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,187,* @return a value where the function is zero
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,188,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,189,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,191,"public double solve(double min, double max) throws MathException;"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,194,"* Solve for a zero in the given interval, start at startValue."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,195,* A solver may require that the interval brackets a single zero root.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,196,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,197,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,198,* @param startValue the start value to use
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,199,* @return a value where the function is zero
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,200,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,201,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,203,"public double solve(double min, double max, double startValue)"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,204,throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,207,* Get the result of the last run of the solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,208,* @return the last result.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,209,"* @throws MathException if there is no result available, either"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,210,* because no result was yet computed or the last attempt failed.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,212,public double getResult() throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,215,* Get the number of iterations in the last run of the solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,216,* This is mainly meant for testing purposes. It may occasionally
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,217,* help track down performance problems: if the iteration count
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,218,"* is notoriously high, check whether the function is evaluated"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,219,"* properly, and whether another solver is more amenable to the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,220,* problem.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,221,* @return the last iteration count.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,222,"* @throws MathException if there is no result available, either"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,223,* because no result was yet computed or the last attempt failed.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,225,public int getIterationCount() throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,56,import org.apache.commons.discovery.tools.DiscoverClass;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,59,* A factory to easily get a default solver and some convenience
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,60,* functions.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,61,"* Because solvers are easily reusable, the factory does not"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,62,* store configuration data and creates preconfigured solvers
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,63,"* (this may be controversial, because the configuration data"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,64,* may also be used for the default solver used by the static
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,65,* solve() method).
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,66,* @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,68,public abstract class UnivariateRealSolverFactory {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,70,* Default constructor.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,72,protected UnivariateRealSolverFactory() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,76,* Create a new factory.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,77,* @return a new factory.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,79,public static UnivariateRealSolverFactory newInstance() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,80,UnivariateRealSolverFactory factory = null;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,81,try {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,82,DiscoverClass dc = new DiscoverClass();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,83,factory = (UnivariateRealSolverFactory) dc.newInstance(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,84,"UnivariateRealSolverFactory.class,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,85,"""org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl"");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,86,} catch(Exception ex) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,87,// ignore as default implementation will be used.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,89,return factory;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,93,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,94,* actual solver returned is determined by the underlying factory.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,95,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,96,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,98,public abstract UnivariateRealSolver newDefaultSolver(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,99,UnivariateRealFunction f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,102,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,103,* solver is an implementation of the bisection method.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,104,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,105,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,107,public abstract UnivariateRealSolver newBisectionSolver(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,108,UnivariateRealFunction f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,111,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,112,* solver is an implementation of the Brent method.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,113,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,114,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,116,public abstract UnivariateRealSolver newBrentSolver(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,117,UnivariateRealFunction f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,120,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,121,* solver is an implementation of the secant method.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,122,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,123,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,125,public abstract UnivariateRealSolver newSecantSolver(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,126,UnivariateRealFunction f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,58,* A factory to easily get a default solver and some convenience
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,59,* functions.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,60,"* Because solvers are easily reusable, the factory does not"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,61,* store configuration data and creates preconfigured solvers
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,62,"* (this may be controversial, because the configuration data"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,63,* may also be used for the default solver used by the static
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,64,* solve() method).
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,65,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,67,public class UnivariateRealSolverFactoryImpl
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,68,extends UnivariateRealSolverFactory {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,71,* Default constructor.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,73,public UnivariateRealSolverFactoryImpl() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,77,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,78,* actual solver returned is determined by the underlying factory.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,80,* This factory returns a {@link BrentSolver} instance.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,82,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,83,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,85,public UnivariateRealSolver newDefaultSolver(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,86,return newBrentSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,90,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,91,* solver is an implementation of the bisection method.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,92,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,93,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,95,public UnivariateRealSolver newBisectionSolver(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,96,return new BisectionSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,100,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,101,* solver is an implementation of the Brent method.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,102,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,103,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,105,public UnivariateRealSolver newBrentSolver(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,106,return new BrentSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,110,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,111,* solver is an implementation of the secant method.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,112,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,113,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,115,public UnivariateRealSolver newSecantSolver(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,116,return new SecantSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,55,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,57,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,60,* Provide a default implementation for several functions useful to generic
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,61,* solvers.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,63,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,65,public abstract class UnivariateRealSolverImpl
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,66,implements UnivariateRealSolver {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,68,/** Maximum absolute error. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,69,protected double absoluteAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,71,/** Maximum relative error. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,72,protected double relativeAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,74,/** Maximum error of function. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,75,protected double functionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,77,/** Maximum number of iterations. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,78,protected int maximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,80,/** Default maximum absolute error. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,81,protected double defaultAbsoluteAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,83,/** Default maximum relative error. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,84,protected double defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,86,/** Default maximum error of function. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,87,protected double defaultFunctionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,89,/** Default maximum number of iterations. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,90,protected int defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,92,/** Indicates where a root has been computed. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,93,protected boolean resultComputed = false;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,95,/** The last computed root. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,96,protected double result;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,98,// Mainly for test framework.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,99,/** The last iteration count. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,100,protected int iterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,102,/** The function to solve. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,103,protected UnivariateRealFunction f;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,106,* Construct a solver with given iteration count and accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,107,* @param f the function to solve.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,108,* @param defaultAbsoluteAccuracy maximum absolue error.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,109,* @param defaultMaximalIterationCount maximum number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,111,protected UnivariateRealSolverImpl(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,112,"UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,113,"int defaultMaximalIterationCount,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,114,double defaultAbsoluteAccuracy) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,116,super();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,118,this.f = f;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,119,this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,120,this.defaultRelativeAccuracy = 1E-14;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,121,this.defaultFunctionValueAccuracy = 1E-15;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,122,this.absoluteAccuracy = defaultAbsoluteAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,123,this.relativeAccuracy = defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,124,this.functionValueAccuracy = defaultFunctionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,125,this.defaultMaximalIterationCount = defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,126,this.maximalIterationCount = defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,130,* Access the last computed root.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,131,* @return the last computed root.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,132,* @throws MathException if no root has been computed.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,134,public double getResult() throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,135,if (resultComputed) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,136,return result;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,137,} else {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,138,// TODO: could this be an IllegalStateException instead?
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,139,"throw new MathException(""No result available"");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,144,* Access the last iteration count.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,145,* @return the last iteration count.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,146,* @throws MathException if no root has been computed.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,149,public int getIterationCount() throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,150,if (resultComputed) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,151,return iterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,152,} else {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,153,// TODO: could this be an IllegalStateException instead?
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,154,"throw new MathException(""No result available"");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,159,* Convenience function for implementations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,160,* @param result the result to set
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,161,* @param iterationCount the iteration count to set
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,163,"protected final void setResult(double result, int iterationCount) {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,164,this.result = result;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,165,this.iterationCount = iterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,166,this.resultComputed = true;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,170,* Convenience function for implementations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,172,protected final void clearResult() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,173,this.resultComputed = false;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,177,* Set the absolute accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,179,* @param accuracy the accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,180,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,181,*         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,183,public void setAbsoluteAccuracy(double accuracy)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,184,throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,185,absoluteAccuracy = accuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,189,* Get the actual absolute accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,191,* @return the accuracy
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,193,public double getAbsoluteAccuracy() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,194,return absoluteAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,198,* Reset the absolute accuracy to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,200,public void resetAbsoluteAccuracy() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,201,absoluteAccuracy = defaultAbsoluteAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,205,* Set the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,207,* @param count maximum number of iterations
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,209,public void setMaximalIterationCount(int count) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,210,maximalIterationCount = count;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,214,* Get the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,216,* @return the actual upper limit
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,218,public int getMaximalIterationCount() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,219,return maximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,223,* Reset the upper limit for the number of iterations to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,225,public void resetMaximalIterationCount() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,226,maximalIterationCount = defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,230,* Set the relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,232,* @param accuracy the relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,233,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,234,*         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,236,public void setRelativeAccuracy(double accuracy) throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,237,relativeAccuracy = accuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,241,* Get the actual relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,242,* @return the accuracy
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,244,public double getRelativeAccuracy() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,245,return relativeAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,249,* Reset the relative accuracy to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,251,public void resetRelativeAccuracy() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,252,relativeAccuracy = defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,256,* Set the function value accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,258,* @param accuracy the accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,259,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,260,*         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,262,public void setFunctionValueAccuracy(double accuracy)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,263,throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,264,functionValueAccuracy = accuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,268,* Get the actual function value accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,269,* @return the accuracy
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,271,public double getFunctionValueAccuracy() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,272,return functionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,276,* Reset the actual function accuracy to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,278,public void resetFunctionValueAccuracy() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,279,functionValueAccuracy = defaultFunctionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,59,* Utility routines for {@link UnivariateRealSolver} objects.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,60,* @version $Revision: 1.4 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,62,public class UnivariateRealSolverUtil {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,64,* Default constructor.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,66,private UnivariateRealSolverUtil() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,67,super();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,71,* Method to solve for zeros of real univariate functions.  A
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,72,* default solver is created and used for solving.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,73,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,74,* @param x0 the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,75,* @param x1 the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,76,* @return a value where the function is zero.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,77,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,78,*         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,80,"public static double solve(UnivariateRealFunction f, double x0, double x1)"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,81,throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,83,return UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,84,".solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,88,* Convience method to solve for zeros of real univariate functions.  A
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,89,* default solver is created and used for solving.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,90,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,91,* @param x0 the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,92,* @param x1 the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,93,* @param absoluteAccuracy the accuracy to be used by the solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,94,* @return a value where the function is zero.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,95,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,96,*         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,98,public static double solve(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,99,"UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,100,"double x0,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,101,"double x1,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,102,double absoluteAccuracy)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,103,throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,105,UnivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,106,.newDefaultSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,107,solver.setAbsoluteAccuracy(absoluteAccuracy);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,108,"return solver.solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,59,* Utility routines for {@link UnivariateRealSolver} objects.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,60,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,62,public class UnivariateRealSolverUtils {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,64,* Default constructor.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,66,private UnivariateRealSolverUtils() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,67,super();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,71,* Method to solve for zeros of real univariate functions.  A
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,72,* default solver is created and used for solving.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,73,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,74,* @param x0 the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,75,* @param x1 the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,76,* @return a value where the function is zero.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,77,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,78,*         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,80,"public static double solve(UnivariateRealFunction f, double x0, double x1)"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,81,throws MathException
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,83,if(f == null){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,84,"throw new IllegalArgumentException(""f can not be null."");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,87,return UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,88,".solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,92,* Convience method to solve for zeros of real univariate functions.  A
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,93,* default solver is created and used for solving.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,94,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,95,* @param x0 the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,96,* @param x1 the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,97,* @param absoluteAccuracy the accuracy to be used by the solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,98,* @return a value where the function is zero.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,99,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,100,*         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,102,public static double solve(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,103,"UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,104,"double x0,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,105,"double x1,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,106,double absoluteAccuracy)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,107,throws MathException
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,109,if(f == null){
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,110,"throw new IllegalArgumentException(""f can not be null."");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,113,UnivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,114,.newDefaultSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,115,solver.setAbsoluteAccuracy(absoluteAccuracy);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,116,"return solver.solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,120,"* For a function, f, this method returns two values, a and b that bracket"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,121,"* a root of f.  That is to say, there exists a value c between a and b"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,122,* such that f(c) = 0.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,124,* @param function the function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,125,* @param initial midpoint of the returned range.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,126,"* @param lowerBound for numerical safety, a never is less than this value."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,127,"* @param upperBound for numerical safety, b never is greater than this"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,128,*                   value.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,129,"* @return a two element array holding {a, b}."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,130,* @throws MathException if a root can not be bracketted.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,132,"public static double[] bracket(UnivariateRealFunction function,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,133,"double initial,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,134,"double lowerBound,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,135,double upperBound) throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,136,"return bracket( function, initial, lowerBound, upperBound,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,137,Integer.MAX_VALUE ) ;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,141,"* For a function, f, this method returns two values, a and b that bracket"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,142,"* a root of f.  That is to say, there exists a value c between a and b"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,143,* such that f(c) = 0.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,145,* @param function the function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,146,* @param initial midpoint of the returned range.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,147,"* @param lowerBound for numerical safety, a never is less than this value."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,148,"* @param upperBound for numerical safety, b never is greater than this"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,149,*                   value.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,150,"* @param maximumIterations to guard against infinite looping, maximum"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,151,*                          number of iterations to perform
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,152,"* @return a two element array holding {a, b}."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,153,* @throws MathException if a root can not be bracketted.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,155,"public static double[] bracket(UnivariateRealFunction function,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,156,"double initial,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,157,"double lowerBound,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,158,"double upperBound,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,159,int maximumIterations) throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,160,double a = initial;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,161,double b = initial;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,162,double fa;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,163,double fb;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,164,int numIterations = 0 ;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,166,do {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,167,"a = Math.max(a - 1.0, lowerBound);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,168,"b = Math.min(b + 1.0, upperBound);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,169,fa = function.value(a);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,170,fb = function.value(b);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,171,numIterations += 1 ;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,172,} while ( (fa * fb > 0.0) && ( numIterations < maximumIterations ) );
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,174,"return new double[]{a, b};"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,5,* reserved.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,9,* are met:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,17,*    distribution.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,19,"* 3. The end-user documentation included with the redistribution,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,20,"*    if any, must include the following acknowledgment:"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,23,"*    Alternately, this acknowledgment may appear in the software itself,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,24,*    if and wherever such third-party acknowledgments normally appear.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,26,"* 4. The names ""Apache"" and ""Apache Software Foundation"" and"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,27,"*    ""Apache Geronimo"" must not be used to endorse or promote products"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,28,*    derived from this software without prior written permission. For
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,29,"*    written permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,31,"* 5. Products derived from this software may not be called ""Apache"","
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,32,"*    ""Apache Geronimo"", nor may ""Apache"" appear in their name, without"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,33,*    prior written permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,57,package org.apache.commons.math.complex;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,60,* Reference:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,61,*   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,63,* @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:22 $
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,65,public class Complex {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,67,/** The square root of -1. */
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,68,"public static final Complex I = new Complex(0.0, 1.0);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,71,"public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,73,/** 1. */
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,74,"public static final Complex ONE = new Complex(1.0, 0.0);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,76,/** The imaginary part. */
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,77,protected double imaginary;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,79,/** The real part. */
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,80,protected double real;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,83,* Create a complex number given the real and imaginary parts.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,84,* @param real the real part.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,85,* @param imaginary the imaginary part.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,87,"public Complex(double real, double imaginary) {"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,88,super();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,89,this.real = real;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,90,this.imaginary = imaginary;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,94,* Return the absolute value of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,95,* @return the absolute value.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,97,public double abs() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,98,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,99,return Double.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,101,return Math.sqrt(squareSum());
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,105,* Return the sum of this complex number and the given complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,106,* @param rhs the other complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,107,* @return the complex number sum.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,109,public Complex add(Complex rhs) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,110,if (isNaN() || rhs.isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,111,return NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,114,"return new Complex(real + rhs.getReal(),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,115,imaginary + rhs.getImaginary());
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,119,* Return the conjugate of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,120,* @return the conjugate.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,122,public Complex conjugate() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,123,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,124,return NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,127,"return new Complex(real, -imaginary);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,131,* Return the quotient of this complex number and the given complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,132,* @param rhs the other complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,133,* @return the complex number quotient.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,135,public Complex divide(Complex rhs) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,136,if (isNaN() || rhs.isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,137,return NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,140,if (Math.abs(rhs.getReal()) < Math.abs(rhs.getImaginary())) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,141,double q = rhs.getReal() / rhs.getImaginary();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,142,double d = (rhs.getReal() * q) + rhs.getImaginary();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,143,"return new Complex(((real * q) + imaginary) / d,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,144,((imaginary * q) - real) / d);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,145,} else {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,146,double q = rhs.getImaginary() / rhs.getReal();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,147,double d = (rhs.getImaginary() * q) + rhs.getReal();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,148,"return new Complex(((imaginary * q) + real) / d,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,149,(imaginary - (real * q)) / d);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,156,public boolean equals(Object other) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,157,boolean ret;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,159,if (this == other) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,160,ret = true;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,161,} else if (other == null) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,162,ret = false;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,163,} else {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,164,try {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,165,Complex rhs = (Complex)other;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,166,ret = (Double.doubleToRawLongBits(real) ==
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,167,Double.doubleToRawLongBits(rhs.getReal())) &&
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,168,(Double.doubleToRawLongBits(imaginary) ==
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,169,Double.doubleToRawLongBits(rhs.getImaginary()));
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,170,} catch (ClassCastException ex) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,171,// ignore exception
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,172,ret = false;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,176,return ret;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,180,* Access the imaginary part.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,181,* @return the imaginary part.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,183,public double getImaginary() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,184,return imaginary;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,188,* Access the real part.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,189,* @return the real part.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,191,public double getReal() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,192,return real;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,196,* Returns true if this complex number is the special Not-a-Number (NaN)
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,197,* value.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,198,* @return true if the value represented by this object is NaN; false
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,199,*         otherwise.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,201,public boolean isNaN() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,202,return Double.isNaN(real) || Double.isNaN(imaginary);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,206,* Return the product of this complex number and the given complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,207,* @param rhs the other complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,208,* @return the complex number product.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,210,public Complex multiply(Complex rhs) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,211,if (isNaN() || rhs.isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,212,return NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,215,double p = (real + imaginary) * (rhs.getReal() + rhs.getImaginary());
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,216,double ac = real * rhs.getReal();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,217,double bd = imaginary * rhs.getImaginary();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,218,"return new Complex(ac - bd, p - ac - bd);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,222,* Return the additive inverse of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,223,* @return the negation of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,225,public Complex negate() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,226,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,227,return NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,230,"return new Complex(-real, -imaginary);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,234,* Return the sum of the squared terms.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,235,* @return the square sum.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,237,private double squareSum() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,238,return real * real + imaginary * imaginary;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,242,* Return the difference between this complex number and the given complex
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,243,* number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,244,* @param rhs the other complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,245,* @return the complex number difference.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,247,public Complex subtract(Complex rhs) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,248,if (isNaN() || rhs.isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,249,return NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,252,"return new Complex(real - rhs.getReal(),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,253,imaginary - rhs.getImaginary());
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,5,* reserved.
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,9,* are met:
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,17,*    distribution.
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,19,"* 3. The end-user documentation included with the redistribution,"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,20,"*    if any, must include the following acknowledgment:"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,23,"*    Alternately, this acknowledgment may appear in the software itself,"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,24,*    if and wherever such third-party acknowledgments normally appear.
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,26,"* 4. The names ""Apache"" and ""Apache Software Foundation"" and"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,27,"*    ""Apache Geronimo"" must not be used to endorse or promote products"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,28,*    derived from this software without prior written permission. For
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,29,"*    written permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,31,"* 5. Products derived from this software may not be called ""Apache"","
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,32,"*    ""Apache Geronimo"", nor may ""Apache"" appear in their name, without"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,33,*    prior written permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,57,package org.apache.commons.math.complex;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,59,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,62,* Reference:
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,63,*   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,65,* @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:22 $
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,67,public class ComplexMath {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,72,private ComplexMath() {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,73,super();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,79,public static Complex acos(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,80,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,81,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,84,return Complex.I.negate().multiply(log(z.add(
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,85,Complex.I.multiply(sqrt1z(z)))));
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,91,public static Complex asin(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,92,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,93,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,96,return Complex.I.negate().multiply(log(sqrt1z(z).add(
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,97,Complex.I.multiply(z))));
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,103,public static Complex atan(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,104,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,105,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,108,return Complex.I.multiply(
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,109,log(Complex.I.add(z).divide(Complex.I.subtract(z))))
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,110,".multiply(new Complex(2.0, 0.0));"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,116,public static Complex cos(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,117,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,118,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,121,double a = z.getReal();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,122,double b = z.getImaginary();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,124,"return new Complex(Math.cos(a) * MathUtils.cosh(b),"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,125,-Math.sin(a) * MathUtils.sinh(b));
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,131,public static Complex cosh(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,132,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,133,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,136,double a = z.getReal();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,137,double b = z.getImaginary();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,139,"return new Complex(MathUtils.cosh(a) * Math.cos(b),"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,140,MathUtils.sinh(a) * Math.sin(b));
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,146,public static Complex exp(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,147,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,148,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,151,double b = z.getImaginary();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,152,double expA = Math.exp(z.getReal());
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,153,double sinB = Math.sin(b);
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,154,double cosB = Math.cos(b);
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,155,"return new Complex(expA * cosB, expA * sinB);"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,161,public static Complex log(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,162,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,163,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,166,"return new Complex(Math.log(z.abs()),"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,167,"Math.atan2(z.getImaginary(), z.getReal()));"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,173,"public static Complex pow(Complex y, Complex x) {"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,174,return exp(x.multiply(log(y)));
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,180,public static Complex sin(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,181,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,182,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,185,double a = z.getReal();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,186,double b = z.getImaginary();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,188,"return new Complex(Math.sin(a) * MathUtils.cosh(b),"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,189,Math.cos(a) * MathUtils.sinh(b));
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,195,public static Complex sinh(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,196,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,197,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,200,double a = z.getReal();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,201,double b = z.getImaginary();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,203,"return new Complex(MathUtils.sinh(a) * Math.cos(b),"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,204,MathUtils.cosh(a) * Math.sin(b));
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,210,public static Complex sqrt(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,211,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,212,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,215,double a = z.getReal();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,216,double b = z.getImaginary();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,218,double t = Math.sqrt((Math.abs(a) + z.abs()) / 2.0);
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,219,if (a >= 0.0) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,220,"return new Complex(t, b / (2.0 * t));"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,221,} else {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,222,double s = (b > 0.0 ? 1.0 : (b < 0.0 ? -1.0 : 0.0));
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,223,"return new Complex(Math.abs(z.getImaginary()) / (2.0 * t), s * t);"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,228,* Returns the square root of 1 - z^2.
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,229,* @return the square root of 1 - z^2.
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,231,public static Complex sqrt1z(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,232,return sqrt(Complex.ONE.subtract(z.multiply(z)));
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,238,public static Complex tan(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,239,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,240,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,243,double a2 = 2.0 * z.getReal();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,244,double b2 = 2.0 * z.getImaginary();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,245,double d = Math.cos(a2) + MathUtils.cosh(b2);
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,247,"return new Complex(Math.sin(a2) / d, MathUtils.sinh(b2) / 2);"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,253,public static Complex tanh(Complex z) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,254,if (z.isNaN()) {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,255,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,258,double a2 = 2.0 * z.getReal();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,259,double b2 = 2.0 * z.getImaginary();
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,260,double d = MathUtils.cosh(a2) + Math.cos(b2);
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,262,"return new Complex(MathUtils.sinh(a2) / d, Math.sin(b2) / 2);"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,57,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,58,import org.apache.commons.math.analysis.UnivariateRealSolverUtils;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,61,* Base class for various continuous distributions.  It provides default
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,62,* implementations for some of the methods that do not vary from distribution
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,63,* to distribution.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,65,* @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,67,public abstract class AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,68,implements ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,71,* Default constructor.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,73,protected AbstractContinuousDistribution() {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,74,super();
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,78,"* For this distribution, X, this method returns P(x0 &lt; X &lt; x1).  This"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,79,* is accomplished by using the equality P(x0 &lt; X &lt; x1) =
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,80,* P(X &lt; x1) - P(X &lt; x0).
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,82,* @param x0 the lower bound
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,83,* @param x1 the upper bound
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,84,* @return the cummulative probability.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,86,"public double cummulativeProbability(double x0, double x1) {"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,87,return cummulativeProbability(x1) - cummulativeProbability(x0);
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,91,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,92,* that P(X &lt; x) = <code>p</code>.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,94,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,95,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,97,public double inverseCummulativeProbability(final double p) {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,98,if (p < 0.0 || p > 1.0) {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,99,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,100,"""p must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,103,"// by default, do simple root finding using bracketing and bisection."
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,104,// subclasses can overide if there is a better method.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,105,UnivariateRealFunction rootFindingFunction =
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,106,new UnivariateRealFunction() {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,108,public double value(double x) throws MathException {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,109,return cummulativeProbability(x) - p;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,112,public double firstDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,113,return 0;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,116,public double secondDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,117,return 0;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,121,try {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,122,// bracket root
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,123,"double[] bracket = UnivariateRealSolverUtils.bracket(rootFindingFunction,"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,124,"getInitialDomain(p), getDomainLowerBound(p),"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,125,getDomainUpperBound(p));
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,127,// find root
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,128,double root = UnivariateRealSolverUtils.solve(
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,129,"rootFindingFunction, bracket[0], bracket[1]);"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,131,return root;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,132,} catch (MathException ex) {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,133,// this should never happen.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,134,return Double.NaN;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,139,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,140,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,141,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,143,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,144,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,146,protected abstract double getInitialDomain(double p);
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,149,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,150,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,151,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,153,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,154,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,155,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,157,protected abstract double getDomainLowerBound(double p);
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,160,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,161,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,162,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,164,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,165,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,166,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,168,protected abstract double getDomainUpperBound(double p);
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,58,* Base class for various discrete distributions.  It provides default
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,59,* implementations for some of the methods that do not vary from distribution
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,60,* to distribution.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,62,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,64,public abstract class AbstractDiscreteDistribution
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,65,implements DiscreteDistribution {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,68,* Default constructor.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,70,protected AbstractDiscreteDistribution() {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,71,super();
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,75,"* For this disbution, X, this method returns P(x0 &le; X &le; x1)."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,76,"* @param x0 the inclusive, lower bound"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,77,"* @param x1 the inclusive, upper bound"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,78,* @return the cummulative probability.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,80,"public double cummulativeProbability(int x0, int x1) {"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,81,return cummulativeProbability(x1) -
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,82,cummulativeProbability(x0 - 1);
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,86,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,87,* that P(X &le; x) &le; <code>p</code>.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,89,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,90,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,92,public int inverseCummulativeProbability(final double p) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,93,if (p < 0.0 || p > 1.0) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,94,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,95,"""p must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,98,"// by default, do simple bisection."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,99,// subclasses can override if there is a better method.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,100,int x0 = getDomainLowerBound(p);
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,101,int x1 = getDomainUpperBound(p);
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,102,double pm;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,103,while (x0 < x1) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,104,int xm = x0 + (x1 - x0) / 2;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,105,pm = cummulativeProbability(xm);
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,106,if (pm > p) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,107,// update x1
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,108,if (xm == x1) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,109,// this can happen with integer division
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,110,// simply decrement x1
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,111,--x1;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,112,} else {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,113,// update x1 normally
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,114,x1 = xm;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,116,} else {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,117,// update x0
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,118,if (xm == x0) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,119,// this can happen with integer division
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,120,// simply increment x0
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,121,++x0;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,122,} else {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,123,// update x0 normally
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,124,x0 = xm;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,129,// insure x0 is the correct critical point
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,130,pm = cummulativeProbability(x0);
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,131,while (pm > p) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,132,--x0;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,133,pm = cummulativeProbability(x0);
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,136,return x0;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,140,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,141,* bracket a PDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,142,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,144,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,145,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,146,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,148,protected abstract int getDomainLowerBound(double p);
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,151,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,152,* bracket a PDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,153,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,155,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,156,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,157,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,159,protected abstract int getDomainUpperBound(double p);
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,57,* The Binomial Distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,59,* Instances of BinomialDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,60,"* {@link DistributionFactory#createBinomialDistribution(int, double)}."
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,62,* References:
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,63,* <ul>
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,64,"* <li><a href=""http://mathworld.wolfram.com/BinomialDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,65,* Binomial Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,66,* </ul>
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,68,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,70,public interface BinomialDistribution extends DiscreteDistribution {
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,72,* Access the number of trials for this distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,73,* @return the number of trials.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,75,int getNumberOfTrials();
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,78,* Access the probability of success for this distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,79,* @return the probability of success.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,81,double getProbabilityOfSuccess();
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,84,* Change the number of trials for this distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,85,* @param trials the new number of trials.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,87,void setNumberOfTrials(int trials);
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,90,* Change the probability of success for this distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,91,* @param p the new probability of success.
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,93,void setProbabilityOfSuccess(double p);
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,56,import org.apache.commons.logging.LogFactory;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,57,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,58,import org.apache.commons.math.special.Beta;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,59,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,62,* The default implementation of {@link BinomialDistribution}.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,64,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,66,public class BinomialDistributionImpl extends AbstractDiscreteDistribution
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,67,implements BinomialDistribution {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,69,/** The number of trials. */
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,70,private int numberOfTrials;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,72,/** The probability of success. */
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,73,private double probabilityOfSuccess;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,76,* Create a binomial distribution with the given number of trials and
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,77,* probability of success.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,78,* @param trials the number of trials.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,79,* @param p the probability of success.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,81,"public BinomialDistributionImpl(int trials, double p) {"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,82,super();
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,83,setNumberOfTrials(trials);
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,84,setProbabilityOfSuccess(p);
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,88,* Access the number of trials for this distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,89,* @return the number of trials.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,91,public int getNumberOfTrials() {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,92,return numberOfTrials;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,96,* Access the probability of success for this distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,97,* @return the probability of success.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,99,public double getProbabilityOfSuccess() {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,100,return probabilityOfSuccess;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,104,* Change the number of trials for this distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,105,* @param trials the new number of trials.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,107,public void setNumberOfTrials(int trials) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,108,if (trials < 0) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,109,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,110,"""number of trials must be non-negative."");"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,112,numberOfTrials = trials;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,116,* Change the probability of success for this distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,117,* @param p the new probability of success.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,119,public void setProbabilityOfSuccess(double p) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,120,if (p < 0.0 || p > 1.0) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,121,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,122,"""probability of success must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,124,probabilityOfSuccess = p;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,128,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,129,* bracket a PDF root.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,131,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,132,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,133,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,135,protected int getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,136,return -1;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,140,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,141,* bracket a PDF root.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,143,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,144,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,145,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,147,protected int getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,148,return getNumberOfTrials();
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,152,"* For this disbution, X, this method returns P(X &le; x)."
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,153,* @param x the value at which the PDF is evaluated.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,154,* @return PDF for this distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,156,public double cummulativeProbability(int x) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,157,double ret;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,158,if (x < 0) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,159,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,160,} else if (x >= getNumberOfTrials()) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,161,ret = 1.0;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,162,} else {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,163,try {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,164,"ret = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,165,"x + 1.0, getNumberOfTrials() - x);"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,166,} catch (MathException ex) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,167,LogFactory.getLog(getClass()).error(
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,168,"""Failed to compute cummulative probability, returning NaN."","
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,169,ex);
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,170,ret = Double.NaN;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,173,return ret;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,177,"* For this disbution, X, this method returns P(X = x)."
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,178,* @param x the value at which the PMF is evaluated.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,179,* @return PMF for this distribution.
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,181,public double probability(int x) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,182,double ret;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,183,if (x < 0 || x > getNumberOfTrials()) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,184,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,185,} else {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,186,"ret = MathUtils.binomialCoefficientDouble(getNumberOfTrials(), x) *"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,187,"Math.pow(getProbabilityOfSuccess(), x) *"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,188,"Math.pow(1.0 - getProbabilityOfSuccess(),"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,189,getNumberOfTrials() - x);
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,191,return ret;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,57,* The Chi-Squared Distribution.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,59,* Instances of ChiSquaredDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,60,* {@link DistributionFactory#createChiSquareDistribution(double)}.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,62,* References:
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,63,* <ul>
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,64,"* <li><a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,65,* Chi-Squared Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,66,* </ul>
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,68,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,70,public interface ChiSquaredDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,72,* Modify the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,73,* @param degreesOfFreedom the new degrees of freedom.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,75,void setDegreesOfFreedom(double degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,78,* Access the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,79,* @return the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,81,double getDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,57,* The default implementation of {@link ChiSquaredDistribution}
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,59,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,61,public class ChiSquaredDistributionImpl
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,62,extends AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,63,implements ChiSquaredDistribution {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,65,/** Internal Gamma distribution. */
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,66,private GammaDistribution gamma;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,69,* Create a Chi-Squared distribution with the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,70,* @param degreesOfFreedom degrees of freedom.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,72,public ChiSquaredDistributionImpl(double degreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,73,super();
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,74,setGamma(DistributionFactory.newInstance().createGammaDistribution(
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,75,"degreesOfFreedom / 2.0, 2.0));"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,79,* Modify the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,80,* @param degreesOfFreedom the new degrees of freedom.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,82,public void setDegreesOfFreedom(double degreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,83,getGamma().setAlpha(degreesOfFreedom / 2.0);
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,87,* Access the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,88,* @return the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,90,public double getDegreesOfFreedom() {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,91,return getGamma().getAlpha() * 2.0;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,95,"* For this disbution, X, this method returns P(X &lt; x)."
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,96,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,97,* @return CDF for this distribution.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,99,public double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,100,return getGamma().cummulativeProbability(x);
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,104,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,105,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,106,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,108,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,109,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,110,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,112,protected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,113,return Double.MIN_VALUE * getGamma().getBeta();
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,117,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,118,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,119,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,121,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,122,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,123,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,125,protected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,126,// NOTE: chi squared is skewed to the left
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,127,"// NOTE: therefore, P(X < &mu;) > .5"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,129,double ret;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,131,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,132,// use mean
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,133,ret = getDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,134,} else {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,135,// use max
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,136,ret = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,139,return ret;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,143,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,144,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,145,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,147,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,148,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,150,protected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,151,// NOTE: chi squared is skewed to the left
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,152,"// NOTE: therefore, P(X < &mu;) > .5"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,154,double ret;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,156,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,157,// use 1/2 mean
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,158,ret = getDegreesOfFreedom() * .5;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,159,} else {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,160,// use mean
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,161,ret = getDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,164,return ret;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,168,* Modify the Gamma distribution.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,169,* @param gamma the new distribution.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,171,private void setGamma(GammaDistribution gamma) {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,172,this.gamma = gamma;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,176,* Access the Gamma distribution.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,177,* @return the internal Gamma distribution.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,179,private GammaDistribution getGamma() {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,180,return gamma;
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,57,* Base interface for various continuous distributions.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,59,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,61,public interface ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,63,"* For this disbution, X, this method returns P(X &lt; x)."
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,64,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,65,* @return CDF for this distribution.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,67,double cummulativeProbability(double x);
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,70,"* For this disbution, X, this method returns P(x0 &lt; X &lt; x1)."
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,71,* @param x0 the lower bound
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,72,* @param x1 the upper bound
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,73,* @return the cummulative probability.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,75,"double cummulativeProbability(double x0, double x1);"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,78,"* For this disbution, X, this method returns x such that P(X &lt; x) = p."
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,79,* @param p the cummulative probability.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,80,* @return x.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,82,double inverseCummulativeProbability(double p);
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,57,* Base interface for various discrete distributions.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,59,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,61,public interface DiscreteDistribution {
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,63,"* For this disbution, X, this method returns P(X = x)."
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,64,* @param x the value at which the PMF is evaluated.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,65,* @return PMF for this distribution.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,67,double probability(int x);
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,70,"* For this disbution, X, this method returns P(X &le; x)."
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,71,* @param x the value at which the PDF is evaluated.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,72,* @return PDF for this distribution.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,74,double cummulativeProbability(int x);
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,77,"* For this disbution, X, this method returns P(x0 &le; X &le; x1)."
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,78,"* @param x0 the inclusive, lower bound"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,79,"* @param x1 the inclusive, upper bound"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,80,* @return the cummulative probability.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,82,"double cummulativeProbability(int x0, int x1);"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,85,"* For this disbution, X, this method returns x such that P(X &le; x) <= p."
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,86,* @param p the cummulative probability.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,87,* @return x.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,89,int inverseCummulativeProbability(double p);
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,55,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,57,import org.apache.commons.discovery.tools.DiscoverClass;
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,60,* This factory provids the means to create common statistical distributions.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,61,* The following distributions are supported:
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,62,* <ul>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,63,* <li>Binomial</li>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,64,* <li>Chi-Squared</li>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,65,* <li>Exponential</li>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,66,* <li>F</li>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,67,* <li>Gamma</li>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,68,* <li>Student's t</li>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,69,* </ul>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,71,* Common usage:<pre>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,72,* DistributionFactory factory = DistributionFactory.newInstance();
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,74,* // create a Chi-Square distribution with 5 degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,75,* ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,76,* </pre>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,78,* @version $Revision: 1.16 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,80,public abstract class DistributionFactory {
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,82,* Default constructor.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,84,protected DistributionFactory() {
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,85,super();
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,89,* Create an instance of a <code>DistributionFactory</code>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,90,* @return a new factory.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,92,public static DistributionFactory newInstance() {
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,93,DistributionFactory factory = null;
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,94,try {
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,95,DiscoverClass dc = new DiscoverClass();
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,96,factory = (DistributionFactory) dc.newInstance(
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,97,"DistributionFactory.class,"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,98,"""org.apache.commons.math.stat.distribution.DistributionFactoryImpl"");"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,99,} catch(Exception ex) {
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,100,// ignore as default implementation will be used.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,102,return factory;
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,106,* Create a binomial distribution with the given number of trials and
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,107,* probability of success.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,108,* @param numberOfTrials the number of trials.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,109,* @param probabilityOfSuccess the probability of success.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,110,* @return a new binomial distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,112,public abstract BinomialDistribution createBinomialDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,113,"int numberOfTrials, double probabilityOfSuccess);"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,116,* Create a new chi-square distribution with the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,117,* @param degreesOfFreedom degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,118,* @return a new chi-square distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,120,public abstract ChiSquaredDistribution createChiSquareDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,121,double degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,124,* Create a new exponential distribution with the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,125,* @param mean mean.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,126,* @return a new exponential distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,128,public abstract ExponentialDistribution createExponentialDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,129,double mean);
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,132,* Create a new F-distribution with the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,133,* @param numeratorDegreesOfFreedom numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,134,* @param denominatorDegreesOfFreedom denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,135,* @return a new F-distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,137,public abstract FDistribution createFDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,138,"double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom);"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,141,* Create a new gamma distribution with the given alpha and beta values.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,142,* @param alpha the shape parameter.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,143,* @param beta the scale parameter.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,144,* @return a new gamma distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,146,public abstract GammaDistribution createGammaDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,147,"double alpha, double beta);"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,150,* Create a new t distribution with the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,151,* @param degreesOfFreedom degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,152,* @return a new t distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,154,public abstract TDistribution createTDistribution(double degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,157,* Create a new hypergeometric distribution with the given the population
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,158,"* size, the number of successes in the population, and the sample size."
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,159,* @param populationSize the population size.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,160,* @param numberOfSuccesses number of successes in the population.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,161,* @param sampleSize the sample size.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,162,* @return a new hypergeometric desitribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,164,public abstract HypergeometricDistribution
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,165,"createHypergeometricDistribution(int populationSize,"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,166,"int numberOfSuccesses, int sampleSize);"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,58,* A concrete distribution factory.  This is the default factory used by
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,59,* Commons-Math.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,61,* @version $Revision: 1.14 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,63,public class DistributionFactoryImpl extends DistributionFactory {
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,65,* Default constructor.  Package scope to prevent unwanted instantiation.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,67,public DistributionFactoryImpl() {
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,68,super();
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,72,* Create a new chi-square distribution with the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,73,* @param degreesOfFreedom degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,74,* @return a new chi-square distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,76,public ChiSquaredDistribution createChiSquareDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,77,final double degreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,79,return new ChiSquaredDistributionImpl(degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,83,* Create a new gamma distribution the given alpha and beta values.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,84,* @param alpha the shape parameter.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,85,* @param beta the scale parameter.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,86,* @return a new gamma distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,88,public GammaDistribution createGammaDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,89,"double alpha, double beta) {"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,91,"return new GammaDistributionImpl(alpha, beta);"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,95,* Create a new t distribution with the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,96,* @param degreesOfFreedom degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,97,* @return a new t distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,99,public TDistribution createTDistribution(double degreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,100,return new TDistributionImpl(degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,104,* Create a new F-distribution with the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,105,* @param numeratorDegreesOfFreedom numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,106,* @param denominatorDegreesOfFreedom denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,107,* @return a new F-distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,109,public FDistribution createFDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,110,"double numeratorDegreesOfFreedom,"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,111,double denominatorDegreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,112,"return new FDistributionImpl(numeratorDegreesOfFreedom,"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,113,denominatorDegreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,117,* Create a new exponential distribution with the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,118,* @param mean mean.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,119,* @return a new exponential distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,121,public ExponentialDistribution createExponentialDistribution(double mean) {
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,122,return new ExponentialDistributionImpl(mean);
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,126,* Create a binomial distribution with the given number of trials and
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,127,* probability of success.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,128,* @param numberOfTrials the number of trials.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,129,* @param probabilityOfSuccess the probability of success.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,130,* @return a new binomial distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,132,public BinomialDistribution createBinomialDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,133,"int numberOfTrials, double probabilityOfSuccess) {"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,134,"return new BinomialDistributionImpl(numberOfTrials,"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,135,probabilityOfSuccess);
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,139,* Create a new hypergeometric distribution with the given the population
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,140,"* size, the number of successes in the population, and the sample size."
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,141,* @param populationSize the population size.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,142,* @param numberOfSuccesses number of successes in the population.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,143,* @param sampleSize the sample size.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,144,* @return a new hypergeometric desitribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,146,public HypergeometricDistribution createHypergeometricDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,147,"int populationSize,"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,148,"int numberOfSuccesses,"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,149,int sampleSize)
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,151,"return new HypergeometricDistributionImpl(populationSize,"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,152,"numberOfSuccesses, sampleSize);"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,57,* The Exponential Distribution.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,59,* Instances of ExponentialDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,60,* {@link DistributionFactory#createExponentialDistribution(double)}.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,62,* References:
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,63,* <ul>
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,64,"* <li><a href=""http://mathworld.wolfram.com/ExponentialDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,65,* Exponential Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,67,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,69,public interface ExponentialDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,71,* Modify the mean.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,72,* @param mean the new mean.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,74,void setMean(double mean);
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,77,* Access the mean.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,78,* @return the mean.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,80,double getMean();
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,57,* The default implementation of {@link ExponentialDistribution}
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,59,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,61,public class ExponentialDistributionImpl
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,62,implements ExponentialDistribution {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,64,/** The mean of this distribution. */
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,65,private double mean;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,68,* Create a exponential distribution with the given mean.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,69,* @param mean mean of this distribution.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,71,public ExponentialDistributionImpl(double mean) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,72,super();
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,73,setMean(mean);
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,77,* Modify the mean.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,78,* @param mean the new mean.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,80,public void setMean(double mean) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,81,if (mean <= 0.0) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,82,"throw new IllegalArgumentException(""mean must be positive."");"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,84,this.mean = mean;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,88,* Access the mean.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,89,* @return the mean.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,91,public double getMean() {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,92,return mean;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,96,"* For this disbution, X, this method returns P(X &lt; x)."
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,98,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,99,* <ul>
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,100,* <li>
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,101,"* <a href=""http://mathworld.wolfram.com/ExponentialDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,102,"* Exponential Distribution</a>, equation (1).</li>"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,103,* </ul>
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,105,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,106,* @return CDF for this distribution.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,108,public double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,109,double ret;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,110,if (x <= 0.0) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,111,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,112,} else {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,113,ret = 1.0 - Math.exp(-x / getMean());
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,115,return ret;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,119,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,120,* that P(X &lt; x) = <code>p</code>.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,122,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,123,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,125,public double inverseCummulativeProbability(double p) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,126,double ret;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,128,if (p < 0.0 || p > 1.0) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,129,ret = Double.NaN;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,130,} else if (p == 1.0) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,131,ret = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,132,} else {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,133,ret = -getMean() * Math.log(1.0 - p);
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,136,return ret;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,140,"* For this disbution, X, this method returns P(x0 &lt; X &lt; x1)."
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,141,* @param x0 the lower bound
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,142,* @param x1 the upper bound
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,143,* @return the cummulative probability.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,145,"public double cummulativeProbability(double x0, double x1) {"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,146,return cummulativeProbability(x1) - cummulativeProbability(x0);
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,57,* F-Distribution.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,59,* Instances of FDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,60,"* {@link DistributionFactory#createFDistribution(double,double)}."
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,62,* References:
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,63,* <ul>
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,64,"* <li><a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,65,* F-Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,66,* </ul>
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,68,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,70,public interface FDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,72,* Modify the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,73,* @param degreesOfFreedom the new numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,75,void setNumeratorDegreesOfFreedom(double degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,78,* Access the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,79,* @return the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,81,double getNumeratorDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,84,* Modify the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,85,* @param degreesOfFreedom the new denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,87,void setDenominatorDegreesOfFreedom(double degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,90,* Access the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,91,* @return the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,93,double getDenominatorDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,56,import org.apache.commons.logging.LogFactory;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,57,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,58,import org.apache.commons.math.special.Beta;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,61,* Default implementation of
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,62,* {@link org.apache.commons.math.stat.distribution.FDistribution}.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,66,public class FDistributionImpl
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,67,extends AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,68,implements FDistribution {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,70,/** The numerator degrees of freedom*/
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,71,private double numeratorDegreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,73,/** The numerator degrees of freedom*/
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,74,private double denominatorDegreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,77,* Create a F distribution using the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,78,* @param numeratorDegreesOfFreedom the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,79,* @param denominatorDegreesOfFreedom the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,81,"public FDistributionImpl(double numeratorDegreesOfFreedom,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,82,double denominatorDegreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,83,super();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,84,setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,85,setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,89,"* For this disbution, X, this method returns P(X &lt; x)."
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,91,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,92,* <ul>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,93,* <li>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,94,"* <a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,95,"* F-Distribution</a>, equation (4).</li>"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,96,* </ul>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,98,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,99,* @return CDF for this distribution.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,101,public double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,102,double ret;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,103,if (x <= 0.0) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,104,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,105,} else {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,106,double n = getNumeratorDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,107,double m = getDenominatorDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,109,try {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,110,"ret = Beta.regularizedBeta((n * x) / (m + n * x),"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,111,"0.5 * n,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,112,0.5 * m);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,113,} catch (MathException ex) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,114,LogFactory.getLog(getClass()).error(
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,115,"""Failed to compute cummulative probability, returning NaN."","
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,116,ex);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,117,ret = Double.NaN;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,120,return ret;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,124,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,125,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,126,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,128,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,129,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,130,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,132,protected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,133,return 0.0;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,137,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,138,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,139,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,141,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,142,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,143,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,145,protected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,146,return Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,150,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,151,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,152,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,154,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,155,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,157,protected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,158,return getDenominatorDegreesOfFreedom() /
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,159,(getDenominatorDegreesOfFreedom() - 2.0);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,163,* Modify the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,164,* @param degreesOfFreedom the new numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,166,public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,167,if (degreesOfFreedom <= 0.0) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,168,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,169,"""degrees of freedom must be positive."");"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,171,this.numeratorDegreesOfFreedom = degreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,175,* Access the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,176,* @return the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,178,public double getNumeratorDegreesOfFreedom() {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,179,return numeratorDegreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,183,* Modify the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,184,* @param degreesOfFreedom the new denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,186,public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,187,if (degreesOfFreedom <= 0.0) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,188,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,189,"""degrees of freedom must be positive."");"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,191,this.denominatorDegreesOfFreedom = degreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,195,* Access the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,196,* @return the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,198,public double getDenominatorDegreesOfFreedom() {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,199,return denominatorDegreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,57,* The Gamma Distribution.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,59,* Instances of GammaDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,60,"* {@link DistributionFactory#createGammaDistribution(double,double)}."
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,62,* References:
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,63,* <ul>
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,64,"* <li><a href=""http://mathworld.wolfram.com/GammaDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,65,* Gamma Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,66,* </ul>
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,68,* @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,70,public interface GammaDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,72,"* Modify the shape parameter, alpha."
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,73,* @param alpha the new shape parameter.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,75,void setAlpha(double alpha);
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,78,"* Access the shape parameter, alpha"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,79,* @return alpha.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,81,double getAlpha();
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,84,"* Modify the scale parameter, beta."
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,85,* @param beta the new scale parameter.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,87,void setBeta(double beta);
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,90,"* Access the scale parameter, beta"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,91,* @return beta.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,93,double getBeta();
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,56,import org.apache.commons.logging.LogFactory;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,57,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,58,import org.apache.commons.math.special.Gamma;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,61,* The default implementation of {@link GammaDistribution}
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,63,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,65,public class GammaDistributionImpl extends AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,66,implements GammaDistribution {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,68,/** The shape parameter. */
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,69,private double alpha;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,71,/** The scale parameter. */
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,72,private double beta;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,75,* Create a new gamma distribution with the given alpha and beta values.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,76,* @param alpha the shape parameter.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,77,* @param beta the scale parameter.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,79,"public GammaDistributionImpl(double alpha, double beta) {"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,80,super();
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,81,setAlpha(alpha);
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,82,setBeta(beta);
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,86,"* For this disbution, X, this method returns P(X &lt; x)."
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,88,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,89,* <ul>
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,90,* <li>
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,91,"* <a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,92,"* Chi-Squared Distribution</a>, equation (9).</li>"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,93,"* <li>Casella, G., & Berger, R. (1990). <i>Statistical Inference</i>."
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,94,"* Belmont, CA: Duxbury Press.</li>"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,95,* </ul>
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,97,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,98,* @return CDF for this distribution.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,100,public double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,101,double ret;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,103,if (x <= 0.0) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,104,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,105,} else {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,106,try {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,107,"ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,108,} catch(MathException ex){
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,109,LogFactory.getLog(getClass()).error(
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,110,"""Failed to compute cummulative probability, returning NaN."","
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,111,ex);
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,112,ret = Double.NaN;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,116,return ret;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,120,"* Modify the shape parameter, alpha."
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,121,* @param alpha the new shape parameter.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,123,public void setAlpha(double alpha) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,124,if (alpha <= 0.0) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,125,"throw new IllegalArgumentException(""alpha must be positive"");"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,127,this.alpha = alpha;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,131,"* Access the shape parameter, alpha"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,132,* @return alpha.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,134,public double getAlpha() {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,135,return alpha;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,139,"* Modify the scale parameter, beta."
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,140,* @param beta the new scale parameter.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,142,public void setBeta(double beta) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,143,if (beta <= 0.0) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,144,"throw new IllegalArgumentException(""beta must be positive"");"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,146,this.beta = beta;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,150,"* Access the scale parameter, beta"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,151,* @return beta.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,153,public double getBeta() {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,154,return beta;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,158,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,159,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,160,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,162,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,163,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,164,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,165,* TODO: try to improve on this estimate
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,167,protected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,168,return Double.MIN_VALUE;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,172,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,173,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,174,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,176,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,177,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,178,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,179,* TODO: try to improve on this estimate
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,181,protected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,182,// NOTE: gamma is skewed to the left
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,183,"// NOTE: therefore, P(X < &mu;) > .5"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,185,double ret;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,187,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,188,// use mean
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,189,ret = getAlpha() * getBeta();
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,190,} else {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,191,// use max value
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,192,ret = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,195,return ret;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,199,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,200,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,201,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,203,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,204,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,205,* TODO: try to improve on this estimate
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,207,protected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,208,"// Gamma is skewed to the left, therefore, P(X < &mu;) > .5"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,210,double ret;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,212,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,213,// use 1/2 mean
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,214,ret = getAlpha() * getBeta() * .5;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,215,} else {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,216,// use mean
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,217,ret = getAlpha() * getBeta();
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,220,return ret;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,55,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,58,* The Hypergeometric Distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,60,* Instances of HypergeometricDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,61,"* {@link DistributionFactory#createHypergeometricDistribution(int, int, int)}."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,63,* References:
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,64,* <ul>
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,65,"* <li><a href=""http://mathworld.wolfram.com/HypergeometricDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,66,* Hypergeometric Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,67,* </ul>
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,69,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,71,public interface HypergeometricDistribution extends DiscreteDistribution {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,73,* Access the number of successes.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,74,* @return the number of successes.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,76,public abstract int getNumberOfSuccesses();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,79,* Access the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,80,* @return the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,82,public abstract int getPopulationSize();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,85,* Access the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,86,* @return the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,88,public abstract int getSampleSize();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,91,* Modify the number of successes.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,92,* @param num the new number of successes.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,94,public abstract void setNumberOfSuccesses(int num);
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,97,* Modify the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,98,* @param size the new population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,100,public abstract void setPopulationSize(int size);
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,103,* Modify the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,104,* @param size the new sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,106,public abstract void setSampleSize(int size);
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,55,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,60,* The default implementation of {@link HypergeometricDistribution}.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,62,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,64,public class HypergeometricDistributionImpl extends AbstractDiscreteDistribution
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,65,implements HypergeometricDistribution
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,68,/** The number of successes in the population. */
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,69,private int numberOfSuccesses;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,71,/** The population size. */
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,72,private int populationSize;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,74,/** The sample size. */
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,75,private int sampleSize;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,78,* Construct a new hypergeometric distribution with the given the population
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,79,"* size, the number of successes in the population, and the sample size."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,80,* @param populationSize the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,81,* @param numberOfSuccesses number of successes in the population.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,82,* @param sampleSize the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,84,"public HypergeometricDistributionImpl(int populationSize,"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,85,"int numberOfSuccesses, int sampleSize)"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,87,super();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,88,setPopulationSize(populationSize);
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,89,setSampleSize(sampleSize);
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,90,setNumberOfSuccesses(numberOfSuccesses);
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,94,"* For this disbution, X, this method returns P(X &le; x)."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,95,* @param x the value at which the PDF is evaluated.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,96,* @return PDF for this distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,98,public double cummulativeProbability(int x) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,99,double ret;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,101,int n = getPopulationSize();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,102,int m = getNumberOfSuccesses();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,103,int k = getSampleSize();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,105,"int[] domain = getDomain(n, m, k);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,106,if (x < domain[0]) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,107,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,108,} else if(x >= domain[1]) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,109,ret = 1.0;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,110,} else {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,111,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,112,for (int i = domain[0]; i <= x; ++i){
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,113,"ret += probability(n, m, k, i);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,117,return ret;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,121,* Return the domain for the given hypergeometric distribution parameters.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,122,* @param n the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,123,* @param m number of successes in the population.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,124,* @param k the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,125,* @return a two element array containing the lower and upper bounds of the
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,126,*         hypergeometric distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,128,"private int[] getDomain(int n, int m, int k){"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,129,return new int[]{
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,130,"getLowerDomain(n, m, k),"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,131,"getUpperDomain(m, k)"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,136,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,137,* bracket a PDF root.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,139,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,140,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,141,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,143,protected int getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,144,"return getLowerDomain(getPopulationSize(), getNumberOfSuccesses(),"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,145,getSampleSize());
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,149,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,150,* bracket a PDF root.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,152,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,153,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,154,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,156,protected int getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,157,"return getUpperDomain(getSampleSize(), getNumberOfSuccesses());"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,161,* Return the lowest domain value for the given hypergeometric distribution
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,162,* parameters.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,163,* @param n the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,164,* @param m number of successes in the population.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,165,* @param k the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,166,* @return the lowest domain value of the hypergeometric distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,168,"private int getLowerDomain(int n, int m, int k) {"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,169,"return Math.max(0, m - (n - k));"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,173,* Access the number of successes.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,174,* @return the number of successes.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,176,public int getNumberOfSuccesses() {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,177,return numberOfSuccesses;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,181,* Access the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,182,* @return the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,184,public int getPopulationSize() {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,185,return populationSize;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,189,* Access the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,190,* @return the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,192,public int getSampleSize() {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,193,return sampleSize;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,197,* Return the highest domain value for the given hypergeometric distribution
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,198,* parameters.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,199,* @param m number of successes in the population.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,200,* @param k the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,201,* @return the highest domain value of the hypergeometric distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,203,"private int getUpperDomain(int m, int k){"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,204,"return Math.min(k, m);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,208,"* For this disbution, X, this method returns P(X = x)."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,209,* @param x the value at which the PMF is evaluated.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,210,* @return PMF for this distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,212,public double probability(int x) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,213,double ret;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,215,int n = getPopulationSize();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,216,int m = getNumberOfSuccesses();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,217,int k = getSampleSize();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,219,"int[] domain = getDomain(n, m, k);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,220,if(x < domain[0] || x > domain[1]){
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,221,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,222,} else {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,223,"ret = probability(n, m, k, x);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,226,return ret;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,230,"* For the disbution, X, defined by the given hypergeometric distribution"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,231,"* parameters, this method returns P(X = x)."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,232,* @param n the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,233,* @param m number of successes in the population.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,234,* @param k the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,235,* @param x the value at which the PMF is evaluated.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,236,* @return PMF for the distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,238,"private double probability(int n, int m, int k, int x) {"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,239,"return Math.exp(MathUtils.binomialCoefficientLog(m, x) +"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,240,"MathUtils.binomialCoefficientLog(n - m, k - x) -"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,241,"MathUtils.binomialCoefficientLog(n, k));"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,245,* Modify the number of successes.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,246,* @param num the new number of successes.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,248,public void setNumberOfSuccesses(int num) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,249,if(num < 0){
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,250,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,251,"""number of successes must be non-negative."");"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,253,numberOfSuccesses = num;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,257,* Modify the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,258,* @param size the new population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,260,public void setPopulationSize(int size) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,261,if(size <= 0){
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,262,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,263,"""population size must be positive."");"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,265,populationSize = size;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,269,* Modify the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,270,* @param size the new sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,272,public void setSampleSize(int size) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,273,if(size < 0){
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,274,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,275,"""sample size must be non-negative."");"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,277,sampleSize = size;
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,57,* Student's t-Distribution.
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,59,* Instances of TDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,60,* {@link DistributionFactory#createTDistribution(double)}
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,62,* References:
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,63,* <ul>
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,64,"* <li><a href=""http://mathworld.wolfram.com/Studentst-Distribution.html"">"
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,65,* Student's t-Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,66,* </ul>
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,68,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:25:28 $
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,70,public interface TDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,72,* Modify the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,73,* @param degreesOfFreedom the new degrees of freedom.
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,75,void setDegreesOfFreedom(double degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,78,* Access the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,79,* @return the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,81,double getDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,56,import org.apache.commons.logging.LogFactory;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,57,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,58,import org.apache.commons.math.special.Beta;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,61,* Default implementation of
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,62,* {@link org.apache.commons.math.stat.distribution.TDistribution}.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:25:28 $
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,66,public class TDistributionImpl
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,67,extends AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,68,implements TDistribution {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,70,/** The degrees of freedom*/
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,71,private double degreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,74,* Create a t distribution using the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,75,* @param degreesOfFreedom the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,77,public TDistributionImpl(double degreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,78,super();
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,79,setDegreesOfFreedom(degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,83,* Modify the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,84,* @param degreesOfFreedom the new degrees of freedom.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,86,public void setDegreesOfFreedom(double degreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,87,if (degreesOfFreedom <= 0.0) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,88,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,89,"""degrees of freedom must be positive."");"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,91,this.degreesOfFreedom = degreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,95,* Access the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,96,* @return the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,98,public double getDegreesOfFreedom() {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,99,return degreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,103,"* For this disbution, X, this method returns P(X &lt; <code>x</code>)."
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,104,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,105,* @return CDF evaluted at <code>x</code>.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,107,public double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,108,double ret;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,109,if (x == 0.0) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,110,ret = 0.5;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,111,} else {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,112,double t;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,113,try {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,114,t = Beta.regularizedBeta(
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,115,"getDegreesOfFreedom() / (getDegreesOfFreedom() + (x * x)),"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,116,"0.5 * getDegreesOfFreedom(),"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,117,0.5);
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,118,if (x < 0.0) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,119,ret = 0.5 * t;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,120,} else {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,121,ret = 1.0 - 0.5 * t;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,123,} catch (MathException ex) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,124,LogFactory.getLog(getClass()).error(
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,125,"""Failed to compute cummulative probability, returning NaN."","
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,126,ex);
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,127,ret = Double.NaN;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,131,return ret;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,135,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,136,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,137,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,139,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,140,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,141,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,143,protected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,144,return -Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,148,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,149,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,150,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,152,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,153,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,154,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,156,protected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,157,return Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,161,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,162,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,163,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,165,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,166,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,168,protected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,169,return 0.0;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,5,* reserved.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,9,* are met:
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,17,*    distribution.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,55,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,58,* Interface defining a real-valued matrix with basic algebraic operations
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,59,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,61,public interface RealMatrix {
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,64,* Returns a (deep) copy of this.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,66,* @return matrix copy
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,68,RealMatrix copy();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,71,* Compute the sum of this and m.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,73,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,74,* @return     this + m
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,75,* @exception  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,77,RealMatrix add(RealMatrix m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,80,* Compute this minus m.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,82,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,83,* @return     this + m
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,84,* @exception  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,86,RealMatrix subtract(RealMatrix m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,89,* Returns the rank of the matrix.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,91,* @return the rank of this matrix
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,93,int getRank();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,96,* Returns the result of adding d to each entry of this.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,98,* @param d    value to be added to each entry
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,99,* @return     d + this
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,101,RealMatrix scalarAdd(double d);
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,104,* Returns the result multiplying each entry of this by d.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,106,* @param d    value to multiply all entries by
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,107,* @return     d * this
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,109,RealMatrix scalarMultiply(double d);
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,112,* Returns the result postmultiplying this by m.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,114,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,115,* @return     this * m
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,116,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,117,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,119,RealMatrix multiply(RealMatrix m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,122,* Returns matrix entries as a two-dimensional array.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,124,* @return    2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,126,double[][] getData();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,129,* Overwrites the underlying data for the matrix with
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,130,* a fresh copy of <code>data</code>.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,132,* @param  data  2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,134,void setData(double[][] data);
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,137,"* Returns the <a href=""http://mathworld.wolfram.com/"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,138,"* MaximumAbsoluteRowSumNorm.html"">maximum absolute row sum norm</a>"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,139,* of the matrix.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,141,* @return norm
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,143,double getNorm();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,146,* Returns the entries in row number <code>row</code> as an array.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,148,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,149,* @return array of entries in the row
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,150,* @throws IllegalArgumentException if row > rowDimension
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,152,double[] getRow(int row) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,155,* Returns the entries in column number <code>col</code> as an array.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,157,* @param col  column to fetch
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,158,* @return array of entries in the column
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,159,* @throws IllegalArgumentException if column > columnDimension
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,161,double[] getColumn(int col) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,164,* Returns the entry in the specified row and column.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,166,* @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,167,* @param column  column location of entry to be fetched
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,168,"* @return     matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,169,* @throws     IllegalArgumentException if entry does not exist
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,171,"double getEntry(int row, int column) throws IllegalArgumentException;"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,174,* Sets the entry in the specified row and column to the specified value.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,176,* @param row    row location of entry to be set
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,177,* @param column    column location of entry to be set
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,178,* @param value  value to set
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,179,* @throws IllegalArgumentException if entry does not exist
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,181,"void setEntry(int row, int column, double value)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,182,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,185,* Returns the transpose of this matrix.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,187,* @return transpose matrix
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,189,RealMatrix transpose();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,192,* Returns the inverse of this matrix.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,194,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,195,* @throws IllegalArgumentException if *this is not invertible
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,197,RealMatrix inverse() throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,200,* Returns the determinant of this matrix.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,202,* @return determinant
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,204,double getDeterminant();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,207,* Is this a square matrix?
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,208,* @return true if the matrix is square (rowDimension = columnDimension)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,210,boolean isSquare();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,213,* Is this a singular matrix?
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,214,* @return true if the matrix is singular
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,216,boolean isSingular();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,219,* Returns the number of rows in the matrix.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,221,* @return rowDimension
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,223,int getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,226,* Returns the number of columns in the matrix.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,228,* @return columnDimension
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,230,int getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,233,"* Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,234,* trace</a> of the matrix (the sum of the elements on the main diagonal).
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,236,* @return trace
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,238,double getTrace();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,241,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,243,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,244,* @return this*v
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,245,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,247,double[] operate(double[] v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,250,* Returns the result of premultiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,252,* @param v the row vector to premultiply by
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,253,* @return v*this
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,254,* @throws IllegalArgumentException if rowDimension != v.size()
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,256,RealMatrix preMultiply(double[] v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,259,* Returns the solution vector for a linear system with coefficient
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,260,* matrix = this and constant vector = <code>b</code>.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,262,* @param b  constant vector
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,263,"* @return   vector of solution values to AX = b, where A is *this"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,264,* @throws   IllegalArgumentException if rowDimension != b.length or matrix
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,265,*           is singular
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,267,double[] solve(double[] b) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,270,* Returns a matrix of (column) solution vectors for linear systems with
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,271,* coefficient matrix = this and constant vectors = columns of
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,272,* <code>b</code>.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,274,* @param b  matrix of constant vectors forming RHS of linear systems to
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,275,* to solve
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,276,* @return matrix of solution vectors
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,277,* @throws IllegalArgumentException if rowDimension != row dimension of b
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,278,* or this is not square or singular
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,280,RealMatrix solve(RealMatrix b) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,9,* are met:
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,55,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,59,* Implementation for RealMatrix using a double[][] array to store entries
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,60,"* and <a href=""http://www.math.gatech.edu/~bourbaki/"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,61,"* math2601/Web-notes/2num.pdf"">LU decompostion</a> to support linear system"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,62,* solution and inverse.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,63,* <p>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,64,"* The <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,65,"* /2num.pdf"">LU decompostion</a> is performed as needed, to support the"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,66,* following operations: <ul>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,67,* <li>solve</li>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,68,* <li>isSingular</li>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,69,* <li>getDeterminant</li>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,70,* <li>inverse</li> </ul>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,71,* <p>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,72,* <strong>Usage note</strong>:<br>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,73,* The LU decomposition is stored and reused on subsequent calls.  If matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,74,"* data are modified using any of the public setXxx methods, the saved"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,75,* decomposition is discarded.  If data are modified via references to the
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,76,"* underlying array obtained using <code>getDataRef()</code>, then the stored"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,77,"* LU decomposition will not be discarded.  In this case, you need to"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,78,* explicitly invoke <code>LUDecompose()</code> to recompute the decomposition
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,79,* before using any of the methods above.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,81,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,83,"public class RealMatrixImpl implements RealMatrix, Serializable {"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,85,/** Entries of the matrix */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,86,private double data[][] = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,88,/** Entries of LU decomposition.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,89,* All updates to data (other than luDecompostion) *must* set this to null
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,91,private double lu[][] = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,93,/** Pivot array associated with LU decompostion */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,94,private int[] pivot = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,96,/** Parity of the permutation associated with the LU decomposition */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,97,private int parity = 1;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,99,/** Bound to determine effective singularity in LU decomposition */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,100,private static double TOO_SMALL = 10E-12;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,103,* Creates a matrix with no data
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,105,public RealMatrixImpl() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,109,* Create a new RealMatrix with the supplied row and column dimensions.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,111,* @param rowDimension      the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,112,* @param columnDimension   the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,114,"public RealMatrixImpl(int rowDimension,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,115,int columnDimension) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,116,data = new double[rowDimension][columnDimension];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,117,lu = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,121,* Create a new RealMatrix using the <code>data</code> as the underlying
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,122,* data array.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,123,* <p>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,124,"* The input array is copied, not referenced."
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,126,* @param d data for new matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,128,public RealMatrixImpl(double[][] d) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,129,this.copyIn(d);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,130,lu = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,134,* Create a new (column) RealMatrix using <code>v</code> as the
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,135,* data for the unique column of the <code>v.length x 1</code> matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,136,* created.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,137,* <p>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,138,"* The input array is copied, not referenced."
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,140,* @param v column vector holding data for new matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,142,public RealMatrixImpl(double[] v) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,143,int nRows = v.length;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,144,data = new double[nRows][1];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,145,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,146,data[row][0] = v[row];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,151,* Create a new RealMatrix which is a copy of this.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,153,* @return  the cloned matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,155,public RealMatrix copy() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,156,return new RealMatrixImpl(this.copyOut());
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,160,* Compute the sum of this and <code>m</code>.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,162,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,163,* @return     this + m
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,164,* @exception  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,166,public RealMatrix add(RealMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,167,if (this.getColumnDimension() != m.getColumnDimension() ||
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,168,this.getRowDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,169,"throw new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,171,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,172,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,173,double[][] outData = new double[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,174,double[][] mData = m.getData();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,175,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,176,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,177,outData[row][col] = data[row][col] + mData[row][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,180,return new RealMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,184,* Compute  this minus <code>m</code>.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,186,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,187,* @return     this + m
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,188,* @exception  IllegalArgumentException if m is not the same size as *this
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,190,public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,191,if (this.getColumnDimension() != m.getColumnDimension() ||
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,192,this.getRowDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,193,"throw new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,195,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,196,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,197,double[][] outData = new double[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,198,double[][] mData = m.getData();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,199,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,200,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,201,outData[row][col] = data[row][col] - mData[row][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,204,return new RealMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,208,* Returns the rank of the matrix.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,210,* @return the rank of this matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,212,public int getRank() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,213,// FIXME: need to add singular value decomposition or drop this
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,214,"throw new UnsupportedOperationException(""not implemented yet"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,219,* Returns the result of adding d to each entry of this.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,221,* @param d    value to be added to each entry
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,222,* @return     d + this
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,224,public RealMatrix scalarAdd(double d) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,225,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,226,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,227,double[][] outData = new double[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,228,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,229,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,230,outData[row][col] = data[row][col] + d;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,233,return new RealMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,237,* Returns the result multiplying each entry of this by <code>d</code>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,238,* @param d  value to multiply all entries by
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,239,* @return d * this
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,241,public RealMatrix scalarMultiply(double d) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,242,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,243,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,244,double[][] outData = new double[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,245,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,246,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,247,outData[row][col] = data[row][col] * d;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,250,return new RealMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,254,* Returns the result postmultiplying this by <code>m</code>.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,255,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,256,* @return     this*m
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,257,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,258,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,260,public RealMatrix multiply(RealMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,261,if (this.getColumnDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,262,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,263,"(""Matrices are not multiplication compatible."");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,265,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,266,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,267,double[][] mData = m.getData();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,268,double[][] outData =
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,269,new double[nRows][nCols];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,270,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,271,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,272,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,273,sum = 0;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,274,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,275,sum += data[row][i] * mData[i][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,277,outData[row][col] = sum;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,280,return new RealMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,284,* Returns matrix entries as a two-dimensional array.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,285,* <p>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,286,* Makes a fresh copy of the underlying data.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,288,* @return    2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,290,public double[][] getData() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,291,return copyOut();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,295,* Overwrites the underlying data for the matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,296,* with a fresh copy of <code>inData</code>.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,298,* @param  inData 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,300,public void setData(double[][] inData) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,301,copyIn(inData);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,302,lu = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,306,* Returns a reference to the underlying data array.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,307,* <p>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,308,* Does not make a fresh copy of the underlying data.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,310,* @return 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,312,public double[][] getDataRef() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,313,return data;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,317,* Overwrites the underlying data for the matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,318,* with a reference to <code>inData</code>.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,319,* <p>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,320,* Does not make a fresh copy of <code>data</code>.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,322,* @param  inData 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,324,public void setDataRef(double[][] inData) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,325,this.data = inData;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,326,lu = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,331,* @return norm
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,333,public double getNorm() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,334,double maxColSum = 0;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,335,for (int col = 0; col < this.getColumnDimension(); col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,336,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,337,for (int row = 0; row < this.getRowDimension(); row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,338,sum += Math.abs(data[row][col]);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,340,"maxColSum = Math.max(maxColSum, sum);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,342,return maxColSum;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,347,* @param row  the row to be fetched
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,348,* @return array of entries in the row
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,349,* @throws IllegalArgumentException if row > rowDimension or row < 1
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,351,public double[] getRow(int row) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,352,if (row > this.getRowDimension() || row < 1) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,353,"throw new IllegalArgumentException(""illegal row argument"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,355,int ncols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,356,double[] out = new double[ncols];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,357,"System.arraycopy(data[row - 1], 0, out, 0, ncols);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,358,return out;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,362,* @param col column to fetch
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,363,* @return array of entries in the column
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,364,* @throws IllegalArgumentException if column > columnDimension or
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,365,* column < 1
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,367,public double[] getColumn(int col) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,368,if (col > this.getColumnDimension() || col < 1) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,369,"throw new IllegalArgumentException(""illegal column argument"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,371,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,372,double[] out = new double[nRows];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,373,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,374,out[row] = data[row][col - 1];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,376,return out;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,380,* @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,381,* @param column  column location of entry to be fetched
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,382,"* @return matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,383,* @throws IllegalArgumentException if entry does not exist
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,385,"public double getEntry(int row, int column)"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,386,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,387,if (row < 1 || column < 1 || row > this.getRowDimension() ||
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,388,column > this.getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,390,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,391,"(""matrix entry does not exist"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,393,return data[row - 1][column - 1];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,397,* @param row    row location of entry to be set
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,398,* @param column    column location of entry to be set
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,399,* @param value  value to set
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,400,* @throws IllegalArgumentException if entry does not exist
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,402,"public void setEntry(int row, int column, double value)"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,403,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,404,if (row < 1 || column < 1 || row > this.getRowDimension() ||
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,405,column > this.getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,407,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,408,"(""matrix entry does not exist"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,410,data[row - 1][column - 1] = value;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,411,lu = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,416,* @return transpose matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,418,public RealMatrix transpose() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,419,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,420,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,421,"RealMatrixImpl out = new RealMatrixImpl(nCols, nRows);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,422,double[][] outData = out.getDataRef();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,423,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,424,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,425,outData[col][row] = data[row][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,428,return out;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,432,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,433,* @throws IllegalArgumentException if this is not invertible
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,435,public RealMatrix inverse() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,436,return solve(getIdentity(this.getRowDimension()));
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,440,* @return determinant
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,441,* @throws IllegalArgumentException if matrix is not square
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,443,public double getDeterminant() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,444,if (!isSquare()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,445,"throw new IllegalArgumentException(""matrix is not square"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,447,if (isSingular()) {  // note: this has side effect of attempting LU
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,448,return 0d;        //       decomp if lu == null
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,449,} else {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,450,double det = (double) parity;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,451,for (int i = 0; i < this.getRowDimension(); i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,452,det *= lu[i][i];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,454,return det;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,459,* @return true if the matrix is square (rowDimension = columnDimension)
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,461,public boolean isSquare() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,462,return (this.getColumnDimension() == this.getRowDimension());
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,466,* @return true if the matrix is singular
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,468,public boolean isSingular() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,469,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,470,try {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,471,LUDecompose();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,472,return false;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,473,} catch (IllegalArgumentException ex) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,474,return true;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,476,} else {            // LU decomp must have been successfully performed
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,477,return false;   // so the matrix is not singular
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,482,* @return rowDimension
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,484,public int getRowDimension() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,485,return data.length;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,489,* @return columnDimension
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,491,public int getColumnDimension() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,492,return data[0].length;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,496,* @return trace
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,497,* @throws IllegalArgumentException if the matrix is not square
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,499,public double getTrace() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,500,if (!isSquare()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,501,"throw new IllegalArgumentException(""matrix is not square"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,503,double trace = data[0][0];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,504,for (int i = 1; i < this.getRowDimension(); i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,505,trace += data[i][i];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,507,return trace;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,511,* @param v vector to operate on
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,512,* @throws IllegalArgumentException if columnDimension != v.length
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,513,* @return resulting vector
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,515,public double[] operate(double[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,516,if (v.length != this.getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,517,"throw new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,519,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,520,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,521,double[] out = new double[v.length];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,522,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,523,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,524,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,525,sum += data[row][i] * v[i];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,527,out[row] = sum;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,529,return out;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,533,* @param v vector to premultiply by
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,534,* @throws IllegalArgumentException if rowDimension != v.length
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,535,* @return resulting matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,537,public RealMatrix preMultiply(double[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,538,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,539,if (v.length != nCols) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,540,"throw new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,542,"// being a bit lazy here -- probably should implement directly, like"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,543,// operate
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,544,RealMatrix pm = new RealMatrixImpl(v).transpose();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,545,return pm.multiply(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,549,* @param b  constant vector
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,550,"* @return   vector of solution values to AX = b, where A is this"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,551,* @throws   IllegalArgumentException if rowDimension != b.length or matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,552,*           is singular
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,554,public double[] solve(double[] b) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,555,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,556,if (b.length != nRows) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,557,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,558,"(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,560,RealMatrix bMatrix = new RealMatrixImpl(b);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,561,double[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,562,double[] out = new double[nRows];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,563,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,564,out[row] = solution[row][0];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,566,return out;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,570,"* Uses LU decomposition, performing the composition if the matrix has"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,571,"* not been decomposed, or if there have been changes to the matrix since"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,572,* the last decomposition.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,574,* @param b the constant vector
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,575,* @return solution matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,576,* @throws IllegalArgumentException if this is singular or dimensions
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,577,* do not match.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,579,public RealMatrix solve(RealMatrix b) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,580,if (!this.isSquare()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,581,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,582,"(""coefficient matrix is not square"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,584,if (b.getRowDimension() != this.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,585,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,587,if (this.isSingular()) {  // side effect: compute LU decomp
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,588,"throw new IllegalArgumentException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,591,int nCol = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,592,int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,593,int nRowB = b.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,595,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,596,double[][] bv = b.getData();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,597,double[][] bp = new double[nRowB][nColB];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,598,for (int row = 0; row < nRowB; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,599,for (int col = 0; col < nColB; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,600,bp[row][col] = bv[pivot[row]][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,603,bv = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,605,// Solve LY = b
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,606,for (int col = 0; col < nCol; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,607,for (int i = col + 1; i < nCol; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,608,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,609,bp[i][j] -= bp[col][j] * lu[i][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,614,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,615,for (int col = nCol - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,616,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,617,bp[col][j] /= lu[col][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,619,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,620,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,621,bp[i][j] -= bp[col][j] * lu[i][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,626,RealMatrixImpl outMat = new RealMatrixImpl(bp);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,627,return outMat;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,631,"* Computes a new <a href=""http://www.math.gatech.edu/~bourbaki/"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,632,"* math2601/Web-notes/2num.pdf"">LU decompostion</a> for this matrix,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,633,* storing the result for use by other methods.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,634,* <p>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,635,* <strong>Implementation Note</strong>:<br>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,636,"* Uses <a href=""http://www.damtp.cam.ac.uk/user/fdl/"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,637,"* people/sd/lectures/nummeth98/linear.htm"">Crout's algortithm</a>,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,638,* with partial pivoting.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,639,* <p>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,640,* <strong>Usage Note</strong>:<br>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,641,* This method should rarely be invoked directly. Its only use is
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,642,* to force recomputation of the LU decomposition when changes have been
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,643,* made to the underlying data using direct array references. Changes
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,644,* made using setXxx methods will trigger recomputation when needed
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,645,* automatically.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,647,* @throws IllegalArgumentException if the matrix is singular
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,649,public void LUDecompose() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,650,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,651,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,652,if (nRows < nCols) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,653,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,654,"(""LU decomposition requires row dimension >= column dimension"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,656,lu = this.getData();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,658,// Initialize pivot array and parity
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,659,pivot = new int[nRows];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,660,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,661,pivot[row] = row;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,663,parity = 1;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,665,// Loop over columns
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,666,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,668,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,670,// upper
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,671,for (int row = 0; row < col; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,672,sum = lu[row][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,673,for (int i = 0; i < row; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,674,sum -= lu[row][i] * lu[i][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,676,lu[row][col] = sum;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,679,// lower
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,680,int max = col; // pivot row
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,681,double largest = 0d;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,682,for (int row = col; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,683,sum = lu[row][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,684,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,685,sum -= lu[row][i] * lu[i][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,687,lu[row][col] = sum;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,689,// maintain best pivot choice
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,690,if (Math.abs(sum) > largest) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,691,largest = Math.abs(sum);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,692,max = row;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,696,// Singularity check
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,697,if (Math.abs(lu[max][col]) < TOO_SMALL) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,698,lu = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,699,"throw new IllegalArgumentException(""matrix is singular"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,702,// Pivot if necessary
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,703,if (max != col) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,704,double tmp = 0;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,705,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,706,tmp = lu[max][i];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,707,lu[max][i] = lu[col][i];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,708,lu[col][i] = tmp;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,710,int temp = pivot[max];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,711,pivot[max] = pivot[col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,712,pivot[col] = temp;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,713,parity = -parity;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,716,"//Divide the lower elements by the ""winning"" diagonal elt."
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,717,for (int row = col + 1; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,718,lu[row][col] /= lu[col][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,723,//------------------------ Protected methods
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,726,* Returns <code>dimension x dimension</code> identity matrix.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,728,* @param dimension dimension of identity matrix to generate
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,729,* @return identity matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,731,protected RealMatrix getIdentity(int dimension) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,732,"RealMatrixImpl out = new RealMatrixImpl(dimension, dimension);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,733,double[][] d = out.getDataRef();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,734,for (int row = 0; row < dimension; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,735,for (int col = 0; col < dimension; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,736,d[row][col] = row == col ? 1d : 0d;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,739,return out;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,742,//------------------------ Private methods
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,745,* Returns a fresh copy of the underlying data array.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,747,* @return a copy of the underlying data array.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,749,private double[][] copyOut() {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,750,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,751,double[][] out =
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,752,new double[nRows][this.getColumnDimension()];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,753,"// can't copy 2-d array in one shot, otherwise get row references"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,754,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,755,"System.arraycopy(data[i], 0, out[i], 0, data[i].length);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,757,return out;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,761,* Replaces data with a fresh copy of the input array.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,763,* @param in data to copy in
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,765,private void copyIn(double[][] in) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,766,int nRows = in.length;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,767,int nCols = in[0].length;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,768,data = new double[nRows][nCols];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,769,"System.arraycopy(in, 0, data, 0, in.length);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,770,for (int i = 0; i < nRows ; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,771,"System.arraycopy(in[i], 0, data[i], 0, nCols);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,773,lu = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,55,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,57,import java.io.IOException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,58,import java.io.File;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,59,import java.util.ArrayList;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,61,import org.apache.commons.math.stat.Univariate;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,64,"* Represents an <a href=""http://random.mat.sbg.ac.at/~ste/dipl/node11.html"">"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,65,* empirical probability distribution</a> -- a probability distribution derived
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,66,* from observed data without making any assumptions about the functional form
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,67,* of the population distribution that the data come from.<p>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,68,"* Implementations of this interface maintain data structures, called"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,69,"* <i>distribution digests</i>, that describe empirical distributions and"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,70,* support the following operations: <ul>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,71,* <li>loading the distribution from a file of observed data values</li>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,72,"* <li>saving and re-loading distribution digests to/from ""digest files"" </li>"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,73,"* <li>dividing the input data into ""bin ranges"" and reporting bin frequency"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,74,*     counts (data for histogram)</li>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,75,* <li>reporting univariate statistics describing the full set of data values
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,76,*     as well as the observations within each bin</li>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,77,* <li>generating random values from the distribution</li>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,78,* </ul>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,79,* Applications can use <code>EmpiricalDistribution</code> implementations to
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,80,* build grouped frequnecy histograms representing the input data or to
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,81,"* generate random values ""like"" those in the input file -- i.e., the values"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,82,* generated will follow the distribution of the values in the file.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,83,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,85,public interface EmpiricalDistribution {
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,88,* Computes the empirical distribution from the input file
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,89,* @param filePath fully qualified name of a file in the local file system
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,90,* @throws IOException if an IO error occurs
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,92,void load(String filePath) throws IOException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,95,* Computes the empirical distribution from the input file
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,96,* @param file url of the input file
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,97,* @throws IOException if an IO error occurs
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,99,void load(File file) throws IOException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,102,* Generates a random value from this distribution.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,103,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,104,* <li>the distribution must be loaded before invoking this method</li></ul>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,105,* @return the random value.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,106,* @throws IllegalStateException if the distribution has not been loaded
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,108,double getNextValue() throws IllegalStateException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,112,* Returns a Univariate describing this distribution.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,113,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,114,* <li>the distribution must be loaded before invoking this method</li></ul>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,115,* @return the sample statistics
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,116,* @throws IllegalStateException if the distribution has not been loaded
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,118,Univariate getSampleStats() throws IllegalStateException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,121,* Loads a saved distribution from a file.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,122,* @param file File reference for a file containing a digested distribution
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,123,* @throws IOException if an error occurs reading the file
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,125,void loadDistribution(File file) throws IOException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,128,* Loads a saved distribution from a file.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,129,* @param filePath fully qualified file path for a file
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,130,* containing a digested distribution
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,131,* @throws IOException if an error occurs reading the file
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,133,void loadDistribution(String filePath) throws IOException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,136,* Saves distribution to a file. Overwrites the file if it exists.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,137,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,138,* <li>the distribution must be loaded before invoking this method</li></ul>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,139,* @param filePath fully qualified file path for the file to be written
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,140,* @throws IOException if an error occurs reading the file
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,141,* @throws IllegalStateException if the distribution has not been loaded
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,143,void saveDistribution(String filePath) throws
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,144,"IOException,IllegalStateException;"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,147,* Saves distribution to a file. Overwrites the file if it exists.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,148,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,149,* <li>the distribution must be loaded before invoking this method</li></ul>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,150,* @param file File reference for the file to be written
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,151,* @throws IOException if an error occurs reading the file
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,152,* @throws IllegalStateException if the distribution has not been loaded
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,154,"void saveDistribution(File file) throws IOException,IllegalStateException;"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,157,* property indicating whether or not the distribution has been loaded
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,158,* @return true if the distribution has been loaded
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,160,boolean isLoaded();
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,163,* Returns the number of bins
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,164,* @return the number of bins.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,166,int getBinCount();
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,169,* Returns a list of Univariates containing statistics describing the
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,170,* values in each of the bins.  The ArrayList is indexed on the bin number.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,171,* @return ArrayList of bin statistics.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,173,ArrayList getBinStats();
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,176,* Returns the array of upper bounds for the bins.  Bins are: <br/>
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,177,"* [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,178,"*  (upperBounds[binCount-1],max]"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,179,* @return array of bin upper bounds
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,181,double[] getUpperBounds();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,55,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,57,import java.util.ArrayList;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,58,import java.io.Serializable;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,59,import java.io.BufferedReader;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,60,import java.io.FileReader;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,61,import java.io.File;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,62,import java.io.IOException;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,64,import org.apache.commons.math.stat.Univariate;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,65,import org.apache.commons.math.stat.UnivariateImpl;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,68,* Implements <code>EmpiricalDistribution</code> interface.  This implementation
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,69,* uses what amounts to the
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,70,"* <a href=""http://nedwww.ipac.caltech.edu/level5/March02/Silverman/Silver2_6.html"">"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,71,* Variable Kernel Method</a> with Gaussian smoothing:<p>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,72,* <strong>Digesting the input file</strong>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,73,* <ol><li>Pass the file once to compute min and max.</li>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,74,"* <li>Divide the range from min-max into <code>binCount</code> ""bins.""</li>"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,75,"* <li>Pass the data file again, computing bin counts and univariate"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,76,"*     statistics (mean, std dev.) for each of the bins </li>"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,77,"* <li>Divide the interval (0,1) into subintervals associated with the bins,"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,78,*     with the length of a bin's subinterval proportional to its count.</li></ol>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,79,* <strong>Generating random values from the distribution</strong><ol>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,80,"* <li>Generate a uniformly distributed value in (0,1) </li>"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,81,* <li>Select the subinterval to which the value belongs.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,82,* <li>Generate a random Gaussian value with mean = mean of the associated
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,83,*     bin and std dev = std dev of associated bin.</li></ol></p><p>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,84,*<strong>USAGE NOTES:</strong><ul>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,85,*<li>The <code>binCount</code> is set by default to 1000.  A good rule of thumb
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,86,*    is to set the bin count to approximately the length of the input file divided
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,87,*    by 10.  See TODO: add reference </li>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,88,*<li>The input file <i>must</i> be a plain text file containing one valid numeric
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,89,*    entry per line.</li>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,90,* </ol></p>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,92,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,94,"public class EmpiricalDistributionImpl implements Serializable,EmpiricalDistribution {"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,97,/** List of Univariate objects characterizing the bins */
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,98,private ArrayList binStats = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,100,/** Sample statistics */
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,101,Univariate sampleStats = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,103,/** number of bins */
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,104,private int binCount = 1000;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,106,/** is the distribution loaded? */
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,107,private boolean loaded = false;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,109,"/** upper bounds of subintervals in (0,1) ""belonging"" to the bins */"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,110,private double[] upperBounds = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,112,/** RandomData instance to use in repeated calls to getNext() */
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,113,private RandomData randomData = new RandomDataImpl();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,116,* Creates a new EmpiricalDistribution  with the default bin count
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,118,public EmpiricalDistributionImpl() {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,119,binStats = new ArrayList();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,123,* Creates a new EmpiricalDistribution  with the specified bin count
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,124,* @param binCount number of bins
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,126,public EmpiricalDistributionImpl(int binCount) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,127,this.binCount = binCount;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,128,binStats = new ArrayList();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,132,public void load(String filePath) throws IOException {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,133,File file = new File(filePath);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,134,load(file);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,138,public void load(File file) throws IOException {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,139,// Pass the file once to get sample stats
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,140,BufferedReader in = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,141,try {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,142,in = new BufferedReader(new FileReader(file));
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,143,String str = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,144,double val = 0.0;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,145,sampleStats = new UnivariateImpl();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,146,while ((str = in.readLine()) != null) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,147,val = new Double(str).doubleValue();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,148,sampleStats.addValue(val);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,150,in.close();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,151,in = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,152,} finally {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,153,if (in != null) try {in.close();} catch (Exception ex) {};
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,156,// Load array of bin upper bounds -- evenly spaced from min - max
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,157,double min = sampleStats.getMin();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,158,double max = sampleStats.getMax();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,159,double delta = (max - min)/(new Double(binCount)).doubleValue();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,160,double[] binUpperBounds = new double[binCount];
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,161,binUpperBounds[0] = min + delta;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,162,for (int i = 1; i< binCount - 1; i++) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,163,binUpperBounds[i] = binUpperBounds[i-1] + delta;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,165,binUpperBounds[binCount -1] = max;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,167,// Initialize binStats ArrayList
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,168,if (!binStats.isEmpty()) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,169,binStats.clear();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,171,for (int i = 0; i < binCount; i++) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,172,Univariate stats = new UnivariateImpl();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,173,"binStats.add(i,stats);"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,176,"// Pass the data again, filling data in binStats Array"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,177,try {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,178,in = new BufferedReader(new FileReader(file));
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,179,String str = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,180,double val = 0.0d;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,181,while ((str = in.readLine()) != null) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,182,val = new Double(str).doubleValue();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,184,// Find bin and add value to binStats for the bin
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,185,boolean found = false;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,186,int i = 0;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,187,while (!found) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,188,if (i >= binCount) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,189,"throw new RuntimeException(""bin alignment error"");"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,191,if (val <= binUpperBounds[i]) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,192,found = true;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,193,Univariate stats = (Univariate)binStats.get(i);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,194,stats.addValue(val);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,196,i++;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,199,in.close();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,200,in = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,201,} finally {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,202,if (in != null) try {in.close();} catch (Exception ex) {};
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,205,// Assign upperBounds based on bin counts
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,206,upperBounds = new double[binCount];
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,207,upperBounds[0] =
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,208,((double)((Univariate)binStats.get(0)).getN())/
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,209,(double)sampleStats.getN();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,210,for (int i = 1; i < binCount-1; i++) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,211,upperBounds[i] = upperBounds[i-1] +
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,212,((double)((Univariate)binStats.get(i)).getN())/
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,213,(double)sampleStats.getN();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,215,upperBounds[binCount-1] = 1.0d;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,217,loaded = true;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,221,* Generates a random value from this distribution
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,222,* @return the random value.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,223,* @throws IllegalStateException if the distribution has not been loaded
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,225,public double getNextValue() throws IllegalStateException {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,227,if (!loaded) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,228,"throw new IllegalStateException(""distribution not loaded"");"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,231,"// Start with a uniformly distributed random number in (0,1)"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,232,double x = Math.random();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,234,// Use this to select the bin and generate a Gaussian within the bin
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,235,for (int i = 0; i < binCount; i++) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,236,if (x <= upperBounds[i]) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,237,Univariate stats = (Univariate)binStats.get(i);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,238,if (stats.getN() > 0) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,239,if (stats.getStandardDeviation() > 0) {  // more than one obs
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,240,return randomData.nextGaussian
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,241,"(stats.getMean(),stats.getStandardDeviation());"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,242,} else {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,243,return stats.getMean(); // only one obs in bin
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,248,"throw new RuntimeException(""No bin selected"");"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,251,public void loadDistribution(String filePath) throws IOException {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,252,"throw new UnsupportedOperationException(""Not Implemented yet :-("");"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,255,public void loadDistribution(File file) throws IOException {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,256,"throw new UnsupportedOperationException(""Not Implemented yet :-("");"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,259,public void saveDistribution(String filePath) throws
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,260,"IOException,IllegalStateException {"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,261,"throw new UnsupportedOperationException(""Not Implemented yet :-("");"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,264,public void saveDistribution(File file) throws
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,265,"IOException,IllegalStateException {"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,266,"throw new UnsupportedOperationException(""Not Implemented yet :-("");"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,269,public Univariate getSampleStats() {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,270,return sampleStats;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,273,public int getBinCount() {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,274,return binCount;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,277,public ArrayList getBinStats() {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,278,return binStats;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,281,public double[] getUpperBounds() {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,282,return upperBounds;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,285,public boolean isLoaded() {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,286,return loaded;
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,5,* reserved.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,9,* are met:
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,17,*    distribution.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,55,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,56,import java.util.Collection;
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,59,* Random data generation utilities
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,60,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,62,public interface RandomData {
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,64,* Generates a random string of hex characters of length
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,65,* <code>len</code>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,66,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,67,"* The generated string will be random, but not cryptographically"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,68,"* secure. To generate cryptographically secure strings, use"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,69,* <code>nextSecureHexString</code>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,70,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,71,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,72,* <li><code>len > 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,73,*     is thrown.)</li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,74,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,76,* @param len the length of the string to be generated
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,77,* @return random string of hex characters of length <code>len</code>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,79,String nextHexString(int len);
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,82,* Generates a uniformly distributed random integer between
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,83,* <code>lower</code> and <code>upper</code> (endpoints included).
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,84,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,85,"* The generated integer will be random, but not cryptographically secure."
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,86,"* To generate cryptographically secure integer sequences, use"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,87,* <code>nextSecureInt</code>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,88,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,89,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,90,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,91,*     is thrown.)</li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,92,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,94,* @param lower lower bound for generated integer
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,95,* @param upper upper bound for generated integer
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,96,* @return a random integer greater than or equal to <code>lower</code>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,97,* and less than or equal to <code>upper</code>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,99,"int nextInt(int lower, int upper);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,102,* Generates a uniformly distributed random long integer between
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,103,* <code>lower</code> and <code>upper</code> (endpoints included).
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,104,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,105,"* The generated long integer values will be random, but not"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,106,* cryptographically secure.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,107,"* To generate cryptographically secure sequences of longs, use"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,108,* <code>nextSecureLong</code>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,109,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,110,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,111,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,112,*     is thrown.)</li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,113,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,115,* @param lower lower bound for generated integer
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,116,* @param upper upper bound for generated integer
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,117,* @return a random integer greater than or equal to <code>lower</code>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,118,* and less than or equal to <code>upper</code>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,120,"long nextLong(long lower, long upper);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,123,* Generates a random string of hex characters from a secure random
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,124,* sequence.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,125,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,126,"* If cryptographic security is not required,"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,127,* use <code>nextHexString()</code>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,128,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,129,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,130,* <li><code>len > 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,131,*     is thrown.)</li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,132,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,133,* @param len length of return string
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,134,* @return the random hex string
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,136,String nextSecureHexString(int len);
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,139,* Generates a uniformly distributed random integer between
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,140,* <code>lower</code> and <code>upper</code> (endpoints included)
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,141,* from a secure random sequence.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,142,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,143,* Sequences of integers generated using this method will be
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,144,"* cryptographically secure. If cryptographic security is not required,"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,145,* <code>nextInt</code> should be used instead of this method.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,146,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,147,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,148,"* <a href=""http://www.wikipedia.org/wiki/"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,149,"* Cryptographically_secure_pseudo-random_number_generator"">"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,150,* Secure Random Sequence</a>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,151,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,152,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,153,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,154,*     is thrown.)</li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,155,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,157,* @param lower lower bound for generated integer
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,158,* @param upper upper bound for generated integer
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,159,* @return a random integer greater than or equal to <code>lower</code>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,160,* and less than or equal to <code>upper</code>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,162,"int nextSecureInt(int lower, int upper);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,165,* Generates a random long integer between <code>lower</code>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,166,* and <code>upper</code> (endpoints included).<p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,167,* Sequences of long values generated using this method will be
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,168,"* cryptographically secure. If cryptographic security is not required,"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,169,* <code>nextLong</code> should be used instead of this method.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,170,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,171,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,172,"* <a href=""http://www.wikipedia.org/wiki/"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,173,"* Cryptographically_secure_pseudo-random_number_generator"">"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,174,* Secure Random Sequence</a>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,175,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,176,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,177,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,178,*     is thrown.)</li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,179,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,181,* @param lower lower bound for generated integer
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,182,* @param upper upper bound for generated integer
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,183,* @return a long integer greater than or equal to <code>lower</code>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,184,* and less than or equal to <code>upper</code>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,186,"long nextSecureLong(long lower, long upper);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,189,* Generates a random value from the Poisson distribution with
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,190,* the given mean.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,191,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,192,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,193,"* <a href=""http://www.itl.nist.gov/div898/handbook/"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,194,"* eda/section3/eda366j.htm"">"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,195,* Poisson Distribution</a>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,196,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,197,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,198,* <li>The specified mean <i>must</i> be positive (otherwise an
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,199,*     IllegalArgumentException is thrown.)</li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,200,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,201,* @param mean Mean of the distribution
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,202,* @return poisson deviate with the specified mean
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,204,long nextPoisson(double mean);
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,207,* Generates a random value from the
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,208,* Normal (or Gaussian) distribution with the given mean
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,209,* and standard deviation.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,210,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,211,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,212,"* <a href=""http://www.itl.nist.gov/div898/handbook/"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,213,"* eda/section3/eda3661.htm"">"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,214,* Normal Distribution</a>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,215,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,216,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,217,* <li><code>sigma > 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,218,*     is thrown.)</li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,219,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,220,* @param mu Mean of the distribution
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,221,* @param sigma Standard deviation of the distribution
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,222,"* @return random value from Gaussian distribution with mean = mu,"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,223,* standard deviation = sigma
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,225,"double nextGaussian(double mu, double sigma);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,228,* Generates a random value from the exponential distribution
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,229,* with expected value = <code>mean</code>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,230,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,231,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,232,"* <a href=""http://www.itl.nist.gov/div898/handbook/"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,233,"* eda/section3/eda3667.htm"">"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,234,* Exponential Distribution</a>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,235,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,236,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,237,* <li><code>mu >= 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,238,*     is thrown.)</li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,239,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,240,* @param mean Mean of the distribution
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,241,* @return random value from exponential distribution
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,243,double nextExponential(double mean);
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,246,* Generates a uniformly distributed random value from the open interval
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,247,"* (<code>lower</code>,<code>upper</code>) (i.e., endpoints excluded)."
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,248,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,249,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,250,"* <a href=""http://www.itl.nist.gov/div898/handbook/"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,251,"* eda/section3/eda3662.htm"">"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,252,* Uniform Distribution</a> <code>lower</code> and
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,253,* <code>upper - lower</code> are the
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,254,"* <a href = ""http://www.itl.nist.gov/div898/handbook/eda/"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,255,"* section3/eda364.htm"">"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,256,"* location and scale parameters</a>, respectively."
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,257,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,258,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,259,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,260,*     is thrown.)</li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,261,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,263,* @param lower lower endpoint of the interval of support
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,264,* @param upper upper endpoint of the interval of support
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,265,* @return uniformly distributed random value between lower
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,266,* and upper (exclusive)
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,268,"double nextUniform(double lower, double upper);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,271,* Generates an integer array of length <code>k</code> whose entries
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,272,"* are selected randomly, without repetition, from the integers <code>"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,273,* 0 through n-1</code> (inclusive).
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,274,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,275,* Generated arrays represent permutations
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,276,* of <code>n</code> taken <code>k</code> at a time.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,277,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,278,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,279,* <li> <code>k <= n</code></li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,280,* <li> <code>n > 0</code> </li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,281,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,282,"* If the preconditions are not met, an IllegalArgumentException is"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,283,* thrown.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,285,* @param n domain of the permutation
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,286,* @param k size of the permutation
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,287,* @return random k-permutation of n
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,289,"int[] nextPermutation(int n, int k);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,292,* Returns an array of <code>k</code> objects selected randomly
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,293,* from the Collection <code>c</code>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,294,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,295,* Sampling from <code>c</code>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,296,* is without replacement; but if <code>c</code> contains identical
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,297,"* objects, the sample may include repeats.  If all elements of <code>"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,298,"* c</code> are distinct, the resulting object array represents a"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,299,"* <a href=""http://rkb.home.cern.ch/rkb/AN16pp/"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,300,"* node250.html#SECTION0002500000000000000000"">"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,301,* Simple Random Sample</a> of size
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,302,* <code>k</code> from the elements of <code>c</code>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,303,* <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,304,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,305,* <li> k must be less than or equal to the size of c </li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,306,* <li> c must not be empty </li>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,307,* </ul>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,308,"* If the preconditions are not met, an IllegalArgumentException is"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,309,* thrown.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,311,* @param c collection to be sampled
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,312,* @param k size of the sample
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,313,* @return random sample of k elements from c
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,315,"Object[] nextSample(Collection c, int k);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,9,* are met:
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,55,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,57,import java.security.MessageDigest;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,58,import java.security.SecureRandom;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,59,import java.security.NoSuchAlgorithmException;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,60,import java.security.NoSuchProviderException;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,61,import java.util.Random;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,62,import java.util.Collection;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,65,* Implements the <code>RandomData</code> interface using
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,66,* <code>java.util.Random</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,67,* <code>java.util.Random.SecureRandom</code> instances to generate data.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,68,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,69,* Supports reseeding the underlying
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,70,"* <a href=""http://www.wikipedia.org/wiki/Pseudo-random_number_generator"">"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,71,* PRNG</a>. The <code>SecurityProvider</code> and <code>Algorithm</code>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,72,* used by the <code>SecureRandom</code> instance can also be reset.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,73,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,74,"* For details on the PRNGs, see the JDK documentation for"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,75,* <code>java.util.Random</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,76,* <code>java.util.Random.SecureRandom</code>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,77,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,78,* <strong>Usage Notes</strong>: <ul>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,79,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,80,* Instance variables are used to maintain <code>Random</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,81,"* <code>SecureRandom</code> instances used in data generation. Therefore,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,82,"* to generate a random sequence of values or strings, you should use just"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,83,* <strong>one</strong> <code>RandomDataImpl</code> instance repeatedly.</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,84,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,85,"* The ""secure"" methods are *much* slower.  These should be used only when"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,86,"* a <a href=""http://www.wikipedia.org/wiki/"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,87,"* Cryptographically_secure_pseudo-random_number_generator""> Secure Random"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,88,* Sequence</a> is required.</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,89,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,90,"* When a new <code>RandomDataImpl</code> is created, the underlying random"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,91,* number generators are <strong>not</strong> intialized.  The first call to a
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,92,"* data generation method, or to a <code>reSeed()</code> method instantiates"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,93,"* the appropriate generator.  If you do not explicitly seed the generator, it"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,94,* is by default seeded with the current time in milliseconds</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,95,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,96,* The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,97,* to the corresponding methods on the underlying <code>Random</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,98,"* <code>SecureRandom</code> instances.  Therefore, the contracts of these"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,99,"* methods are as defined in the JDK documentation.  In particular,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,100,* <code>reSeed(long)</code> fully resets the initial state of the non-secure
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,101,* random number generator (so that reseeding with a specific value always
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,102,* results in the same subsequent random sequence); whereas reSeedSecure(long)
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,103,* does <strong>not</strong> reinitialize the secure random number generator
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,104,* (so secure sequences started with calls to reseedSecure(long) won't be
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,105,* identical).</li></ul>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,107,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,109,public class RandomDataImpl implements RandomData {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,111,/** underlying random number generator */
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,112,private Random rand = null;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,114,/** underlying secure random number generator */
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,115,private SecureRandom secRand = null;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,118,* Construct a RandomDataImpl.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,120,public RandomDataImpl() {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,124,* <strong>Algorithm Description:</strong> hex strings are generated
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,125,* using a 2-step process. <ol>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,126,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,127,* len/2+1 binary bytes are generated using the underlying Random</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,128,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,129,* Each binary byte is translated into 2 hex digits</li></ol>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,130,* @param len the desired string length.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,131,* @return the random string.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,133,public String nextHexString(int len) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,134,if (len <= 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,135,"throw new IllegalArgumentException(""length must be positive"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,138,//Get a random number generator
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,139,Random ran = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,141,//Initialize output buffer
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,142,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,144,//Get int(len/2)+1 random bytes
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,145,byte[] randomBytes = new byte[(len / 2) + 1];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,146,ran.nextBytes(randomBytes);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,148,//Convert each byte to 2 hex digits
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,149,for (int i = 0; i < randomBytes.length; i++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,150,Integer c = new Integer(randomBytes[i]);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,152,/* Add 128 to byte value to make interval 0-255 before
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,153,* doing hex conversion.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,154,* This guarantees <= 2 hex digits from toHexString()
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,155,* toHexString would otherwise add 2^32 to negative arguments.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,157,String hex = Integer.toHexString(c.intValue() + 128);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,159,// Make sure we add 2 hex digits for each byte
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,160,if (hex.length() == 1)  {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,161,"hex = ""0"" + hex;"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,163,outBuffer.append(hex);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,165,"return outBuffer.toString().substring(0, len);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,169,* Generate a random int value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,170,"* <code>lower</code> and <code>upper</code>, inclusive."
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,171,* @param lower the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,172,* @param upper the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,173,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,175,"public int nextInt(int lower, int upper) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,176,if (lower >= upper) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,177,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,178,"(""upper bound must be > lower bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,180,Random rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,181,return lower + (int) (rand.nextDouble() * (upper - lower + 1));
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,185,* Generate a random long value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,186,"* <code>lower</code> and <code>upper</code>, inclusive."
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,187,* @param lower the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,188,* @param upper the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,189,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,191,"public long nextLong(long lower, long upper) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,192,if (lower >= upper) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,193,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,194,"(""upper bound must be > lower bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,196,Random rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,197,return lower + (long) (rand.nextDouble() * (upper - lower + 1));
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,201,* <strong>Algorithm Description:</strong> hex strings are generated in
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,202,* 40-byte segments using a 3-step process. <ol>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,203,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,204,* 20 random bytes are generated using the underlying
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,205,* <code>SecureRandom</code>.</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,206,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,207,* SHA-1 hash is applied to yield a 20-byte binary digest.</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,208,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,209,* Each byte of the binary digest is converted to 2 hex digits</li></ol>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,210,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,211,* TODO: find external reference or provide justification for the claim
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,212,* that this yields a cryptographically secure sequence of hex strings.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,213,* @param len the desired string length.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,214,* @return the random string.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,216,public String nextSecureHexString(int len) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,217,if (len <= 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,218,"throw new IllegalArgumentException(""length must be positive"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,221,// Get SecureRandom and setup Digest provider
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,222,SecureRandom secRan = getSecRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,223,MessageDigest alg = null;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,224,try {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,225,"alg = MessageDigest.getInstance(""SHA-1"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,226,} catch (NoSuchAlgorithmException ex) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,227,return null; // gulp FIXME? -- this *should* never fail.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,229,alg.reset();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,231,//Compute number of iterations required (40 bytes each)
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,232,int numIter = (len / 40) + 1;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,234,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,235,for (int iter = 1; iter < numIter + 1; iter++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,236,byte[] randomBytes = new byte[40];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,237,secRan.nextBytes(randomBytes);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,238,alg.update(randomBytes);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,240,//Compute hash -- will create 20-byte binary hash
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,241,byte hash[] = alg.digest();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,243,"//Loop over the hash, converting each byte to 2 hex digits"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,244,for (int i = 0; i < hash.length; i++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,245,Integer c = new Integer(hash[i]);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,247,/* Add 128 to byte value to make interval 0-255
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,248,* This guarantees <= 2 hex digits from toHexString()
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,249,* toHexString would otherwise add 2^32 to negative
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,250,* arguments
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,252,String hex = Integer.toHexString(c.intValue() + 128);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,254,//Keep strings uniform length -- guarantees 40 bytes
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,255,if (hex.length() == 1) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,256,"hex = ""0"" + hex;"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,258,outBuffer.append(hex);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,261,"return outBuffer.toString().substring(0, len);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,265,* Generate a random int value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,266,"* <code>lower</code> and <code>upper</code>, inclusive.  This algorithm"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,267,* using a secure random number generator for its engine.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,268,* @param lower the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,269,* @param upper the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,270,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,272,"public int nextSecureInt(int lower, int upper) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,273,if (lower >= upper) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,274,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,275,"(""lower bound must be < upper bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,277,SecureRandom sec = getSecRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,278,return lower + (int) (sec.nextDouble() * (upper - lower + 1));
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,282,* Generate a random long value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,283,"* <code>lower</code> and <code>upper</code>, inclusive.  This algorithm"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,284,* using a secure random number generator for its engine.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,285,* @param lower the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,286,* @param upper the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,287,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,289,"public long nextSecureLong(long lower, long upper) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,290,if (lower >= upper) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,291,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,292,"(""lower bound must be < upper bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,294,SecureRandom sec = getSecRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,295,return lower + (long) (sec.nextDouble() * (upper - lower + 1));
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,299,* <strong>Algorithm Description</strong>:
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,300,"* Uses simulation of a Poisson process using Uniform deviates, as"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,301,* described
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,302,"* <a href =""http://dmawww.epfl.ch/benarous/Pmmi/interactive/rng7.htm"">"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,303,* here</a>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,304,* @param mean mean of the Poisson distribution.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,305,* @return the random Poisson value.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,307,public long nextPoisson(double mean) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,308,if (mean <= 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,309,"throw new IllegalArgumentException(""Poisson mean must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,311,double p = Math.exp(-mean);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,312,long n = 0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,313,double r = 1.0d;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,314,Random rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,315,while (true) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,316,double rnd = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,317,r = r * rnd;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,318,if (r >= p) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,319,n++;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,320,} else {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,321,return n;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,327,* Generate a random value from a Normal distribution.  This algorithm
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,328,* generates random values for the general Normal distribution with the
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,329,"* given mean, <code>mu</code> and the given standard deviation,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,330,* <code>sigma</code>.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,331,* @param mu the mean of the distribution.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,332,* @param sigma the standard deviation of the distribution.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,333,* @return the random Normal value.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,335,"public double nextGaussian(double mu, double sigma) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,336,if (sigma <= 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,337,"throw new IllegalArgumentException(""Gaussian std dev must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,339,Random rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,340,return sigma * rand.nextGaussian() + mu;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,344,* <strong>Algorithm Description</strong>:  Uses the
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,345,"* <a href=""http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html"">"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,346,* Inversion Method</a> to generate exponential from uniform deviates.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,347,* @param mean the mean of the distribution.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,348,* @return the random Exponential value.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,350,public double nextExponential(double mean)  {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,351,if (mean < 0.0)  {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,352,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,353,"(""Exponential mean must be >= 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,355,Random rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,356,double unif = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,357,while (unif == 0.0d) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,358,unif = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,360,return -mean * Math.log(unif);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,364,* <strong>Algorithm Description</strong>: scales the output of
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,365,"* Random.nextDouble(), but rejects 0 values (i.e., will generate another"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,366,* random double if Random.nextDouble() returns 0).
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,367,* This is necessary to provide a symmetric output interval
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,368,* (both endpoints excluded).
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,369,* @param lower the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,370,* @param upper the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,371,* @return the random value.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,373,"public double nextUniform(double lower, double upper) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,374,if (lower >= upper) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,375,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,376,"(""lower bound must be <= upper bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,378,Random rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,380,// insure nextDouble() isn't 0.0
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,381,double u = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,382,while(u <= 0.0){
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,383,u = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,386,return lower + u * (upper - lower);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,390,* Returns the static Random used to generate random data.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,391,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,392,* Creates and initializes if null.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,394,* @return the static Random used to generate random data
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,396,private Random getRan() {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,397,if (rand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,398,rand = new Random();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,399,rand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,401,return rand;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,405,* Returns the static SecureRandom used to generate secure random data.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,406,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,407,* Creates and initializes if null.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,409,* @return the static SecureRandom used to generate secure random data
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,411,private SecureRandom getSecRan() {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,412,if (secRand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,413,secRand = new SecureRandom();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,414,secRand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,416,return secRand;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,420,* Reseeds the random number generator with the supplied seed.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,421,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,422,* Will create and initialize if null.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,424,* @param seed the seed value to use
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,426,public void reSeed(long seed) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,427,if (rand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,428,rand = new Random();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,430,rand.setSeed(seed);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,434,* Reseeds the secure random number generator with the current time
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,435,* in milliseconds.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,436,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,437,* Will create and initialize if null.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,439,public void reSeedSecure() {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,440,if (secRand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,441,secRand = new SecureRandom();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,443,secRand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,447,* Reseeds the secure random number generator with the supplied seed.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,448,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,449,* Will create and initialize if null.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,451,* @param seed the seed value to use
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,453,public void reSeedSecure(long seed) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,454,if (secRand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,455,secRand = new SecureRandom();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,457,secRand.setSeed(seed);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,461,* Reseeds the random number generator with the current time
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,462,* in milliseconds.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,464,public void reSeed() {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,465,if (rand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,466,rand = new Random();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,468,rand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,472,* Sets the PRNG algorithm for the underlying SecureRandom instance
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,473,* using the Security Provider API.  The Security Provider API is defined in
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,474,"* <a href=""http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA"">"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,475,* Java Cryptography Architecture API Specification & Reference.</a>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,476,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,477,* <strong>USAGE NOTE:</strong> This method carries <i>significant</i>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,478,* overhead and may take several seconds to execute.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,479,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,481,* @param algorithm the name of the PRNG algorithm
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,482,* @param provider the name of the provider
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,483,* @throws NoSuchAlgorithmException if the specified algorithm
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,484,* is not available
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,485,* @throws NoSuchProviderException if the specified provider
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,486,* is not installed
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,488,"public void setSecureAlgorithm(String algorithm, String provider)"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,489,"throws NoSuchAlgorithmException, NoSuchProviderException {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,490,"secRand = SecureRandom.getInstance(algorithm, provider);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,494,* Uses a 2-cycle permutation shuffle to generate a random permutation.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,495,* The shuffling process is described
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,496,* <a href=http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,497,* here</a>.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,498,* @param n the population size.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,499,* @param k the number to choose.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,500,* @return the random permutation.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,502,"public int[] nextPermutation(int n, int k) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,503,if (k > n) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,504,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,505,"(""permutation k exceeds n"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,507,if (k == 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,508,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,509,"(""permutation k must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,512,int[] index = getNatural(n);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,513,"shuffle(index, n - k);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,514,int[] result = new int[k];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,515,for (int i = 0; i < k; i++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,516,result[i] = index[n - i - 1];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,519,return result;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,523,* Uses a 2-cycle permutation shuffle to generate a random permutation.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,524,* <strong>Algorithm Description</strong>: Uses a 2-cycle permutation
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,525,* shuffle to generate a random permutation of <code>c.size()</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,526,* then returns the elements whose indexes correspond to the elements of
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,527,* the generated permutation.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,528,"* This technique is described, and proven to generate random samples,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,529,"* <a href=""http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html"">"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,530,* here</a>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,531,* @param c Collection to sample from.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,532,* @param k sample size.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,533,* @return the random sample.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,535,"public Object[] nextSample(Collection c, int k) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,536,int len = c.size();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,537,if (k > len) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,538,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,539,"(""sample size exceeds collection size"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,541,if (k == 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,542,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,543,"(""sample size must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,546,Object[] objects = c.toArray();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,547,"int[] index = nextPermutation(len, k);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,548,Object[] result = new Object[k];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,549,for (int i = 0; i < k; i++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,550,result[i] = objects[index[i]];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,552,return result;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,555,//------------------------Private methods----------------------------------
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,558,* Uses a 2-cycle permutation shuffle to randomly re-order the last elements
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,559,* of list.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,561,* @param list list to be shuffled
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,562,* @param end element past which shuffling begins
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,564,"private void shuffle(int[] list, int end) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,565,int target = 0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,566,for (int i = list.length - 1 ; i >= end; i--) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,567,if (i == 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,568,target = 0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,569,} else {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,570,"target = nextInt(0, i);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,572,int temp = list[target];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,573,list[target] = list[i];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,574,list[i] = temp;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,579,* Returns an array representing n.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,581,* @param n the natural number to represent
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,582,* @return array with entries = elements of n
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,584,private int[] getNatural(int n) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,585,int[] natural = new int[n];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,586,for (int i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,587,natural[i] = i;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,589,return natural;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,5,* reserved.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,9,* are met:
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,17,*    distribution.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,55,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,56,import java.io.BufferedReader;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,57,import java.io.FileReader;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,58,import java.io.File;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,59,import java.net.URL;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,60,import java.io.IOException;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,61,import java.net.MalformedURLException;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,64,* Generates values for use in simulation applications.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,65,* <p>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,66,* How values are generated is determined by the <code>mode</code>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,67,* property.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,68,* <p>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,69,* Supported <code>mode</code> values are: <ul>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,70,* <li> DIGEST_MODE -- uses an empirical distribution </li>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,71,* <li> REPLAY_MODE -- replays data from <code>valuesFile</code></li>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,72,* <li> UNIFORM_MODE -- generates uniformly distributed random values with
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,73,*                      mean = <code>mu</code> </li>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,74,* <li> EXPONENTIAL_MODE -- generates exponentially distributed random values
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,75,*                         with mean = <code>mu</code></li>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,76,* <li> GAUSSIAN_MODE -- generates Gaussian distributed random values with
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,77,*                       mean = <code>mu</code> and
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,78,*                       standard deviation = <code>sigma</code></li>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,79,* <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,81,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,84,public class ValueServer {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,85,/** mode determines how values are generated */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,86,private int mode = 5;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,88,/** URI to raw data values  */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,89,private URL valuesFileURL = null;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,91,/** Mean for use with non-data-driven modes */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,92,private double mu = 0.0;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,94,/** Standard deviation for use with GAUSSIAN_MODE */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,95,private double sigma = 0.0;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,97,/** Empirical probability distribution for use with DIGEST_MODE */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,98,private EmpiricalDistribution empiricalDistribution = null;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,100,/** file pointer for REPLAY_MODE */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,101,private BufferedReader filePointer = null;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,103,/** RandomDataImpl to use for random data generation */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,104,private RandomDataImpl randomData = new RandomDataImpl();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,106,// Data generation modes ======================================
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,108,/** Use empirical distribution  */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,109,public static final int DIGEST_MODE = 0;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,111,/** Replay data from valuesFilePath */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,112,public static final int REPLAY_MODE = 1;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,114,/** Uniform random deviates with mean = mu */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,115,public static final int UNIFORM_MODE = 2;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,117,/** Exponential random deviates with mean = mu */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,118,public static final int EXPONENTIAL_MODE = 3;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,120,"/** Gaussian random deviates with mean = mu, std dev = sigma */"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,121,public static final int GAUSSIAN_MODE = 4;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,123,/** Always return mu */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,124,public static final int CONSTANT_MODE = 5;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,126,/** Creates new ValueServer */
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,127,public ValueServer() {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,131,"* Returns the next generated value, generated according"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,132,* to the mode value (see MODE constants).
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,134,* @return generated value
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,135,* @throws IOException in REPLAY_MODE if a file I/O error occurs
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,137,public double getNext() throws IOException {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,138,switch (mode) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,139,case DIGEST_MODE: return getNextDigest();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,140,case REPLAY_MODE: return getNextReplay();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,141,case UNIFORM_MODE: return getNextUniform();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,142,case EXPONENTIAL_MODE: return getNextExponential();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,143,case GAUSSIAN_MODE: return getNextGaussian();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,144,case CONSTANT_MODE: return mu;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,145,default: throw new IllegalStateException
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,146,"(""Bad mode: "" + mode);"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,151,* Fills the input array with values generated using getNext() repeatedly.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,153,* @param values array to be filled
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,154,* @throws IOException in REPLAY_MODE if a file I/O error occurs
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,156,public void fill(double[] values) throws IOException {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,157,for (int i = 0; i < values.length; i++) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,158,values[i] = getNext();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,163,* Returns an array of length <code>length</code> with values generated
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,164,* using getNext() repeatedly.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,166,* @param length length of output array
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,167,* @return array of generated values
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,168,* @throws IOException in REPLAY_MODE if a file I/O error occurs
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,170,public double[] fill(int length) throws IOException {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,171,double[] out = new double[length];
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,172,for (int i = 0; i < length; i++) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,173,out[i] = getNext();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,175,return out;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,179,* Computes the empirical distribution using values from the file
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,180,"* in <code>valuesFilePath</code>, using the default number of bins."
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,181,* <p>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,182,* <code>valuesFileURL</code> must exist and be
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,183,* readable by *this at runtime.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,184,* <p>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,185,* This method must be called before using <code>getNext()</code>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,186,* with <code>mode = DISGEST_MODE</code>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,188,* @throws IOException if an I/O error occurs reading the input file
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,190,public void computeDistribution() throws IOException {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,191,empiricalDistribution = new EmpiricalDistributionImpl();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,192,empiricalDistribution.load(valuesFileURL.getFile());
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,196,* Computes the empirical distribution using values from the file
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,197,* in <code>valuesFilePath</code> and <code>binCount</code> bins.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,198,* <p>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,199,* <code>valuesFileURL</code> must exist and be
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,200,* readable by *this at runtime.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,201,* <p>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,202,* This method must be called before using <code>getNext()</code>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,203,* with <code>mode = DISGEST_MODE</code>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,205,* @param binCount the number of bins used in computing the empirical
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,206,* distribution
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,207,* @throws IOException if an error occurs reading the input file
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,209,public void computeDistribution(int binCount)
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,210,throws IOException {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,211,empiricalDistribution = new EmpiricalDistributionImpl(binCount);
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,212,empiricalDistribution.load(valuesFileURL.getFile());
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,213,mu = empiricalDistribution.getSampleStats().getMean();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,214,sigma = empiricalDistribution.getSampleStats().getStandardDeviation();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,217,/** Getter for property mode.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,218,* @return Value of property mode.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,220,public int getMode() {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,221,return mode;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,224,/** Setter for property mode.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,225,* @param mode New value of property mode.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,227,public void setMode(int mode) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,228,this.mode = mode;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,231,/** Getter for property valuesFilePath.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,232,* @return Value of property valuesFilePath.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,234,public String getValuesFileURL() {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,235,return valuesFileURL.toString();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,238,/** Setter for property valuesFilePath.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,239,* @param url New value of property valuesFilePath.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,240,* @throws MalformedURLException if url is not well formed
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,242,public void setValuesFileURL(String url) throws MalformedURLException {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,243,this.valuesFileURL = new URL(url);
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,246,/** Getter for property empiricalDistribution.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,247,* @return Value of property empiricalDistribution.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,249,public EmpiricalDistribution getEmpiricalDistribution() {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,250,return empiricalDistribution;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,254,* Opens <code>valuesFilePath</code> to use in REPLAY_MODE.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,256,* @throws IOException if an error occurs opening the file
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,258,public void openReplayFile() throws IOException {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,259,filePointer = new BufferedReader(new FileReader
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,260,(new File(valuesFileURL.getFile())));
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,264,* Closes <code>valuesFilePath</code> after use in REPLAY_MODE.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,266,* @throws IOException if an error occurs closing the file
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,268,public void closeReplayFile() throws IOException {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,269,if (filePointer != null) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,270,filePointer.close();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,271,filePointer = null;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,275,/** Getter for property mu.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,276,* @return Value of property mu.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,278,public double getMu() {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,279,return mu;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,282,/** Setter for property mu.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,283,* @param mu New value of property mu.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,285,public void setMu(double mu) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,286,this.mu = mu;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,289,/** Getter for property sigma.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,290,* @return Value of property sigma.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,292,public double getSigma() {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,293,return sigma;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,296,/** Setter for property sigma.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,297,* @param sigma New value of property sigma.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,299,public void setSigma(double sigma) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,300,this.sigma = sigma;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,303,//------------- private methods ---------------------------------
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,306,* Gets a random value in DIGEST_MODE.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,307,* <p>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,308,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,309,"* <li>Before this method is called, <code>computeDistribution()</code>"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,310,* must have completed successfully; otherwise an
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,311,* <code>IllegalStateException</code> will be thrown</li></ul>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,313,* @return next random value from the empirical distribution digest
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,315,private double getNextDigest() {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,316,if ((empiricalDistribution == null) ||
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,317,(empiricalDistribution.getBinStats().size() == 0)) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,318,"throw new IllegalStateException(""Digest not initialized"");"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,320,return empiricalDistribution.getNextValue();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,324,* Gets next sequential value from the <code>valuesFilePath</code>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,325,* opened by <code>openReplayFile()</code>.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,326,* <p>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,327,* Throws an IOException if <code>filePointer</code> is null or read fails.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,328,* Will wrap around to BOF is EOF is encountered.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,329,* <p>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,330,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,331,* <li> openReplayfile() must have completed successfully before
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,332,* invoking this method; otherwise an <code>IlleglaStateException</code>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,333,* will be thrown</li></ul>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,335,* @return next value from the replay file
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,336,* @throws IOException if there is a problem reading from the file
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,338,private double getNextReplay() throws IOException {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,339,String str = null;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,340,if (filePointer == null) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,341,"throw new IllegalStateException(""replay file not open"");"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,343,if ((str = filePointer.readLine()) == null) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,344,closeReplayFile();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,345,openReplayFile();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,346,str = filePointer.readLine();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,348,return new Double(str).doubleValue();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,352,* Gets a uniformly distributed random value with mean = mu.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,354,* @return random uniform value
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,356,private double getNextUniform() {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,357,"return randomData.nextUniform(0, 2 * mu);"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,361,* Gets an exponentially distributed random value with mean = mu.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,363,* @return random exponential value
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,365,private double getNextExponential() {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,366,return randomData.nextExponential(mu);
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,370,* Gets a Gaussian distributed random value with mean = mu
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,371,* and standard deviation = sigma.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,373,* @return random Gaussian value
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,375,private double getNextGaussian() {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,376,"return randomData.nextGaussian(mu, sigma);"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,5,* reserved.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,9,* are met:
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,17,*    distribution.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,54,package org.apache.commons.math.special;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,57,import org.apache.commons.math.util.ContinuedFraction;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,60,* This is a utility class that provides computation methods related to the
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,61,* Beta family of functions.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,63,* @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,65,public class Beta {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,66,/** Maximum allowed numerical error. */
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,67,private static final double DEFAULT_EPSILON = 10e-9;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,70,* Default constructor.  Prohibit instantiation.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,72,private Beta() {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,73,super();
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,77,"* Returns the regularized beta function I(x, a, b)."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,79,* @param x ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,80,* @param a ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,81,* @param b ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,82,"* @return the regularized beta function I(x, a, b)"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,83,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,85,"public static double regularizedBeta(double x, double a, double b)"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,86,throws MathException
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,88,"return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,92,"* Returns the regularized beta function I(x, a, b)."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,94,* @param x ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,95,* @param a ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,96,* @param b ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,97,* @param epsilon When the absolute value of the nth item in the
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,98,*                series is less than epsilon the approximation ceases
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,99,*                to calculate further elements in the series.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,100,"* @return the regularized beta function I(x, a, b)"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,101,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,103,"public static double regularizedBeta(double x, double a, double b,"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,104,double epsilon) throws MathException
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,106,"return regularizedBeta(x, a, b, epsilon, Integer.MAX_VALUE);"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,110,"* Returns the regularized beta function I(x, a, b)."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,112,* @param x ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,113,* @param a ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,114,* @param b ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,115,"* @param maxIterations Maximum number of ""iterations"" to complete."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,116,"* @return the regularized beta function I(x, a, b)"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,117,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,119,"public static double regularizedBeta(double x, double a, double b,"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,120,int maxIterations) throws MathException
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,122,"return regularizedBeta(x, a, b, DEFAULT_EPSILON, maxIterations);"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,126,"* Returns the regularized beta function I(x, a, b)."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,128,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,129,* <ul>
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,130,* <li>
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,131,"* <a href=""http://mathworld.wolfram.com/RegularizedBetaFunction.html"">"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,132,* Regularized Beta Function</a>.</li>
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,133,* <li>
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,134,"* <a href=""http://functions.wolfram.com/06.21.10.0001.01"">"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,135,* Regularized Beta Function</a>.</li>
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,136,* </ul>
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,138,* @param x ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,139,* @param a ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,140,* @param b ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,141,* @param epsilon When the absolute value of the nth item in the
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,142,*                series is less than epsilon the approximation ceases
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,143,*                to calculate further elements in the series.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,144,"* @param maxIterations Maximum number of ""iterations"" to complete."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,145,"* @return the regularized beta function I(x, a, b)"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,146,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,148,"public static double regularizedBeta(double x, final double a,"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,149,"final double b, double epsilon, int maxIterations) throws MathException"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,151,double ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,153,if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,154,(x > 1) || (a <= 0.0) || (b <= 0.0)) {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,155,ret = Double.NaN;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,156,} else {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,157,ContinuedFraction fraction = new ContinuedFraction() {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,158,"protected double getB(int n, double x) {"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,159,double ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,160,double m;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,161,switch (n) {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,162,case 1 :
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,163,ret = 1.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,164,break;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,165,default :
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,166,if (n % 2 == 0) { // even
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,167,m = (n - 2.0) / 2.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,168,ret = -((a + m) * (a + b + m) * x) /
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,169,((a + (2 * m)) * (a + (2 * m) + 1.0));
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,170,} else {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,171,m = (n - 1.0) / 2.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,172,ret = (m * (b - m) * x) /
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,173,((a + (2 * m) - 1) * (a + (2 * m)));
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,175,break;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,177,return ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,180,"protected double getA(int n, double x) {"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,181,double ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,182,switch (n) {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,183,case 0 :
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,184,ret = 0.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,185,break;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,186,default :
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,187,ret = 1.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,188,break;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,190,return ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,193,ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,194,"Math.log(a) - logBeta(a, b, epsilon, maxIterations)) *"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,195,"fraction.evaluate(x, epsilon, maxIterations);"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,198,return ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,202,"* Returns the natural logarithm of the beta function B(a, b)."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,204,* @param a ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,205,* @param b ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,206,"* @return log(B(a, b))"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,208,"public static double logBeta(double a, double b) {"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,209,"return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,213,"* Returns the natural logarithm of the beta function B(a, b)."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,215,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,216,* <ul>
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,217,"* <li><a href=""http://mathworld.wolfram.com/BetaFunction.html"">"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,218,"* Beta Function</a>, equation (1).</li>"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,219,* </ul>
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,221,* @param a ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,222,* @param b ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,223,* @param epsilon When the absolute value of the nth item in the
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,224,*                series is less than epsilon the approximation ceases
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,225,*                to calculate further elements in the series.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,226,"* @param maxIterations Maximum number of ""iterations"" to complete."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,227,"* @return log(B(a, b))"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,229,"public static double logBeta(double a, double b, double epsilon,"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,230,int maxIterations) {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,232,double ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,234,if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,235,ret = Double.NaN;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,236,} else {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,237,ret = Gamma.logGamma(a) + Gamma.logGamma(b) -
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,238,Gamma.logGamma(a + b);
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,241,return ret;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,5,* reserved.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,9,* are met:
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,17,*    distribution.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,54,package org.apache.commons.math.special;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,56,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,57,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,60,* This is a utility class that provides computation methods related to the
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,61,* Gamma family of functions.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,63,* @version $Revision: 1.14 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,65,public class Gamma {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,66,/** Maximum allowed numerical error. */
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,67,private static final double DEFAULT_EPSILON = 10e-9;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,69,/** Lanczos coefficients */
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,70,private static double[] lanczos =
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,72,"0.99999999999999709182,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,73,"57.156235665862923517,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,74,"-59.597960355475491248,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,75,"14.136097974741747174,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,76,"-0.49191381609762019978,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,77,".33994649984811888699e-4,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,78,".46523628927048575665e-4,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,79,"-.98374475304879564677e-4,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,80,".15808870322491248884e-3,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,81,"-.21026444172410488319e-3,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,82,".21743961811521264320e-3,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,83,"-.16431810653676389022e-3,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,84,".84418223983852743293e-4,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,85,"-.26190838401581408670e-4,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,86,".36899182659531622704e-5,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,91,* Default constructor.  Prohibit instantiation.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,93,private Gamma() {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,94,super();
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,98,"* Returns the regularized gamma function P(a, x)."
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,100,* @param a ???
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,101,* @param x ???
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,102,"* @return the regularized gamma function P(a, x)"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,103,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,105,"public static double regularizedGammaP(double a, double x)"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,106,throws MathException
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,108,"return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,112,"* Returns the regularized gamma function P(a, x)."
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,114,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,115,* <ul>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,116,* <li>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,117,"* <a href=""http://mathworld.wolfram.com/RegularizedGammaFunction.html"">"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,118,"* Regularized Gamma Function</a>, equation (1).</li>"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,119,* <li>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,120,"* <a href=""http://mathworld.wolfram.com/IncompleteGammaFunction.html"">"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,121,"* Incomplete Gamma Function</a>, equation (4).</li>"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,122,* <li>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,123,"* <a href=""http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html"">"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,124,"* Confluent Hypergeometric Function of the First Kind</a>, equation (1)."
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,125,* </li>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,126,* </ul>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,128,* @param a ???
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,129,* @param x ???
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,130,* @param epsilon When the absolute value of the nth item in the
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,131,*                series is less than epsilon the approximation ceases
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,132,*                to calculate further elements in the series.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,133,"* @param maxIterations Maximum number of ""iterations"" to complete."
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,134,"* @return the regularized gamma function P(a, x)"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,135,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,137,"public static double regularizedGammaP(double a,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,138,"double x,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,139,"double epsilon,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,140,int maxIterations)
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,141,throws MathException
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,143,double ret;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,145,if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,146,ret = Double.NaN;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,147,} else if (x == 0.0) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,148,ret = 0.0;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,149,} else {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,150,// calculate series
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,151,double n = 0.0; // current element index
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,152,double an = 1.0 / a; // n-th element in the series
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,153,double sum = an; // partial sum
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,154,while (Math.abs(an) > epsilon && n < maxIterations) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,155,// compute next element in the series
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,156,n = n + 1.0;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,157,an = an * (x / (a + n));
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,159,// update partial sum
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,160,sum = sum + an;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,162,if (n >= maxIterations) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,163,throw new ConvergenceException(
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,164,"""maximum number of iterations reached"");"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,165,} else {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,166,ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,170,return ret;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,174,* Returns the natural logarithm of the gamma function &#915;(x).
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,176,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,177,* <ul>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,178,"* <li><a href=""http://mathworld.wolfram.com/GammaFunction.html"">"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,179,"* Gamma Function</a>, equation (28).</li>"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,180,"* <li><a href=""http://mathworld.wolfram.com/LanczosApproximation.html"">"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,181,"* Lanczos Approximation</a>, equations (1) through (5).</li>"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,182,"* <li><a href=""http://my.fit.edu/~gabdo/gamma.txt"">Paul Godfrey, A note on"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,183,* the computation of the convergent Lanczos complex Gamma approximation
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,184,* </a></li>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,185,* </ul>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,187,* @param x ???
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,188,* @return log(&#915;(x))
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,190,public static double logGamma(double x) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,191,double ret;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,193,if (Double.isNaN(x) || (x <= 0.0)) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,194,ret = Double.NaN;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,195,} else {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,196,double g = 607.0 / 128.0;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,198,double sum = 0.0;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,199,for (int i = 1; i < lanczos.length; ++i) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,200,sum = sum + (lanczos[i] / (x + i));
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,202,sum = sum + lanczos[0];
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,204,double tmp = x + g + .5;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,205,ret = ((x + .5) * Math.log(tmp)) - tmp +
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,206,(.5 * Math.log(2.0 * Math.PI)) + Math.log(sum) - Math.log(x);
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,209,return ret;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,9,* are met:
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,56,import java.util.Arrays;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,58,import org.apache.commons.math.stat.univariate.rank.Percentile;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,61,* Provides univariate measures for an array of doubles.
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,62,* @version $Revision: 1.15 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,64,public abstract class AbstractStoreUnivariate
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,65,extends AbstractUnivariate
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,66,implements StoreUnivariate {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,68,/** Percentile */
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,69,protected Percentile percentile = new Percentile(50);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,72,* Create an AbstractStoreUnivariate
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,74,public AbstractStoreUnivariate() {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,75,super();
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,79,* Create an AbstractStoreUnivariate with a specific Window
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,80,* @param window WindowSIze for stat calculation
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,82,public AbstractStoreUnivariate(int window) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,83,super(window);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,87,* @see org.apache.commons.math.stat.StoreUnivariate#getPercentile(double)
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,89,public double getPercentile(double p) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,90,percentile.setPercentile(p);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,91,return apply(percentile);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,95,* @see org.apache.commons.math.stat.StoreUnivariate#getSortedValues()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,97,public double[] getSortedValues() {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,98,double[] sort = getValues();
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,99,Arrays.sort(sort);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,100,return sort;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,104,* @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,106,public abstract void addValue(double value);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,109,* @see org.apache.commons.math.stat.StoreUnivariate#getValues()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,111,public abstract double[] getValues();
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,115,* @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,117,public abstract double getElement(int index);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,9,* are met:
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,56,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,57,import org.apache.commons.math.stat.univariate.moment.FourthMoment;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,58,import org.apache.commons.math.stat.univariate.moment.GeometricMean;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,59,import org.apache.commons.math.stat.univariate.moment.Kurtosis;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,60,import org.apache.commons.math.stat.univariate.moment.Mean;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,61,import org.apache.commons.math.stat.univariate.moment.Skewness;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,62,import org.apache.commons.math.stat.univariate.moment.Variance;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,63,import org.apache.commons.math.stat.univariate.rank.Max;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,64,import org.apache.commons.math.stat.univariate.rank.Min;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,65,import org.apache.commons.math.stat.univariate.summary.Sum;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,66,import org.apache.commons.math.stat.univariate.summary.SumOfLogs;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,67,import org.apache.commons.math.stat.univariate.summary.SumOfSquares;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,70,* Provides univariate measures for an array of doubles.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,71,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,73,public abstract class AbstractUnivariate implements Univariate {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,75,/** hold the window size **/
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,76,protected int windowSize = Univariate.INFINITE_WINDOW;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,78,/** count of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,79,protected int n = 0;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,81,"/** FourthMoment is used in calculating mean, variance,skew and kurtosis */"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,82,protected FourthMoment moment = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,84,/** sum of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,85,protected Sum sum = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,87,/** sum of the square of each value that has been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,88,protected SumOfSquares sumsq = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,90,/** min of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,91,protected Min min = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,93,/** max of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,94,protected Max max = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,96,/** sumLog of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,97,protected SumOfLogs sumLog = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,99,/** geoMean of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,100,protected GeometricMean geoMean = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,102,/** mean of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,103,protected Mean mean = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,105,/** variance of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,106,protected Variance variance = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,108,/** skewness of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,109,protected Skewness skewness = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,111,/** kurtosis of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,112,protected Kurtosis kurtosis = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,115,* Construct an AbstractUnivariate
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,117,public AbstractUnivariate() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,118,super();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,120,sum = new Sum();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,121,sumsq = new SumOfSquares();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,122,min = new Min();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,123,max = new Max();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,124,sumLog = new SumOfLogs();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,125,geoMean = new GeometricMean();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,127,moment = new FourthMoment();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,128,mean = new Mean(moment);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,129,variance = new Variance(moment);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,130,skewness = new Skewness(moment);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,131,kurtosis = new Kurtosis(moment);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,135,* Construct an AbstractUnivariate with a window
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,136,* @param window The Window Size
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,138,public AbstractUnivariate(int window) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,139,this();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,140,setWindowSize(window);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,144,* Apply the given statistic to this univariate collection.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,145,* @param stat the statistic to apply
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,146,* @return the computed value of the statistic.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,148,public abstract double apply(UnivariateStatistic stat);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,152,"* If windowSize is set to Infinite,"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,153,* statistics are calculated using the following
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,154,"* <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,155,* recursive strategy
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,156,* </a>.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,157,* @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,159,public abstract void addValue(double value);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,162,* @see org.apache.commons.math.stat.Univariate#getN()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,164,public int getN() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,165,return n;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,169,* @see org.apache.commons.math.stat.Univariate#getSum()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,171,public double getSum() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,172,return apply(sum);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,176,* @see org.apache.commons.math.stat.Univariate#getSumsq()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,178,public double getSumsq() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,179,return apply(sumsq);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,183,* @see org.apache.commons.math.stat.Univariate#getMean()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,185,public double getMean() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,186,return apply(mean);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,190,* Returns the standard deviation for this collection of values
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,191,* @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,193,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,194,double stdDev = Double.NaN;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,195,if (getN() > 0) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,196,if (getN() > 1) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,197,stdDev = Math.sqrt(getVariance());
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,198,} else {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,199,stdDev = 0.0;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,202,return (stdDev);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,206,* Returns the variance of the values that have been added via West's
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,207,* algorithm as described by
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,208,"* <a href=""http://doi.acm.org/10.1145/359146.359152"">Chan, T. F. and"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,209,"* J. G. Lewis 1979, <i>Communications of the ACM</i>,"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,210,"* vol. 22 no. 9, pp. 526-531.</a>."
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,212,* @return The variance of a set of values.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,213,*         Double.NaN is returned for an empty
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,214,*         set of values and 0.0 is returned for
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,215,*         a &lt;= 1 value set.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,217,public double getVariance() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,218,return apply(variance);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,222,* Returns the skewness of the values that have been added as described by
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,223,"* <a href=""http://mathworld.wolfram.com/k-Statistic.html"">"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,224,* Equation (6) for k-Statistics</a>.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,225,* @return The skew of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,226,*         an empty set of values and 0.0 is returned for a
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,227,*         &lt;= 2 value set.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,229,public double getSkewness() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,230,return apply(skewness);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,234,* Returns the kurtosis of the values that have been added as described by
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,235,"* <a href=""http://mathworld.wolfram.com/k-Statistic.html"">"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,236,* Equation (7) for k-Statistics</a>.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,238,* @return The kurtosis of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,239,*         an empty set of values and 0.0 is returned for a &lt;= 3
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,240,*         value set.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,242,public double getKurtosis() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,243,return apply(kurtosis);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,247,* @see org.apache.commons.math.stat.StoreUnivariate#getKurtosisClass()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,249,public int getKurtosisClass() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,250,int kClass = Univariate.MESOKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,252,double kurtosis = getKurtosis();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,253,if (kurtosis > 0) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,254,kClass = Univariate.LEPTOKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,255,} else if (kurtosis < 0) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,256,kClass = Univariate.PLATYKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,258,return (kClass);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,262,* @see org.apache.commons.math.stat.Univariate#getMax()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,264,public double getMax() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,265,return apply(max);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,269,* @see org.apache.commons.math.stat.Univariate#getMin()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,271,public double getMin() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,272,return apply(min);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,276,* @see org.apache.commons.math.stat.Univariate#getGeometricMean()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,278,public double getGeometricMean() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,279,return apply(geoMean);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,283,* Generates a text report displaying
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,284,* univariate statistics from values that
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,285,* have been added.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,286,* @return String with line feeds displaying statistics
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,288,public String toString() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,289,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,290,"outBuffer.append(""UnivariateImpl:\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,291,"outBuffer.append(""n: "" + n + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,292,"outBuffer.append(""min: "" + min + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,293,"outBuffer.append(""max: "" + max + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,294,"outBuffer.append(""mean: "" + getMean() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,295,"outBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,296,"outBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,297,"outBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,298,return outBuffer.toString();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,302,* @see org.apache.commons.math.stat.Univariate#clear()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,304,public void clear() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,305,this.n = 0;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,306,min.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,307,max.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,308,sum.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,309,sumLog.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,310,sumsq.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,311,geoMean.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,313,moment.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,314,mean.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,315,variance.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,316,skewness.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,317,kurtosis.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,321,* @see org.apache.commons.math.stat.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,323,public int getWindowSize() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,324,return windowSize;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,328,* @see org.apache.commons.math.stat.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,330,public void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,331,clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,332,this.windowSize = windowSize;
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,9,* are met:
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,56,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,59,* Applyable.java
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,61,* TODO: add javadocs
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,63,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,65,public interface Applyable {
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,68,* Applies a UnivariateStatistic object against this object
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,69,* and returns the result.
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,70,* @param stat The stat to apply.
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,71,* @return The result value of the application.
True,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,73,double apply(UnivariateStatistic stat);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,9,* are met:
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,56,import java.util.List;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,58,import org.apache.commons.math.util.BeanTransformer;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,61,* This implementation of StoreUnivariate uses commons-beanutils to gather
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,62,* univariate statistics for a List of Java Beans by property.  This
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,63,"* implementation uses beanutils' PropertyUtils to get a simple, nested,"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,64,"* indexed, mapped, or combined property from an element of a List."
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,65,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,67,public class BeanListUnivariateImpl extends ListUnivariateImpl {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,70,* propertyName of the property to get from the bean
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,72,private String propertyName;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,75,* Construct a BeanListUnivariate with specified
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,76,* backing list
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,77,* @param list Backing List
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,79,public BeanListUnivariateImpl(List list) {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,80,"this(list, null);"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,84,* Construct a BeanListUnivariate with specified
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,85,* backing list and propertyName
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,86,* @param list Backing List
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,87,* @param propertyName Bean propertyName
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,89,"public BeanListUnivariateImpl(List list, String propertyName) {"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,90,super(list);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,91,setPropertyName(propertyName);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,95,* @return propertyName
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,97,public String getPropertyName() {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,98,return propertyName;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,102,* @param propertyName Name of Property
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,104,public void setPropertyName(String propertyName) {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,105,this.propertyName = propertyName;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,106,setTransformer(new BeanTransformer(propertyName));
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,110,* @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,112,public void addValue(double v) {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,113,String msg =
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,114,"""The BeanListUnivariateImpl does not accept values "" +"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,115,"""through the addValue method.  Because elements of this list "" +"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,116,"""are JavaBeans, one must be sure to set the 'propertyName' "" +"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,117,"""property and add new Beans to the underlying list via the "" +"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,118,"""addBean(Object bean) method"";"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,119,throw new UnsupportedOperationException(msg);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,123,* Adds a bean to this list.
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,125,* @param bean Bean to add to the list
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,127,public void addObject(Object bean) {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,128,list.add(bean);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,9,* are met:
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,55,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,56,import org.apache.commons.math.stat.distribution.DistributionFactory;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,57,import org.apache.commons.math.stat.distribution.TDistribution;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,60,* Estimates an ordinary least squares regression model
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,61,* with one independent variable.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,62,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,63,* <code> y = intercept + slope * x  </code>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,64,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,65,* Standard errors for <code>intercept</code> and <code>slope</code> are
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,66,"* available as well as ANOVA, r-square and Pearson's r statistics."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,67,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,68,"* Observations (x,y pairs) can be added to the model one at a time or they"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,69,* can be provided in a 2-dimensional array.  The observations are not stored
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,70,"* in memory, so there is no limit to the number of observations that can be"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,71,* added to the model.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,72,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,73,* <strong>Usage Notes</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,74,"* <li> When there are fewer than two observations in the model, or when"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,75,* there is no variation in the x values (i.e. all x values are the same)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,76,* all statistics return <code>NaN</code>. At least two observations with
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,77,* different x coordinates are requred to estimate a bivariate regression
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,78,* model.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,79,* </li>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,80,* <li> getters for the statistics always compute values based on the current
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,81,"* set of observations -- i.e., you can get statistics, then add more data"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,82,* and get updated statistics without using a new instance.  There is no
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,83,"* ""compute"" method that updates all statistics.  Each of the getters performs"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,84,* the necessary computations to return the requested statistic.</li>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,85,* </ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,87,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,89,public class BivariateRegression {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,91,/** sum of x values */
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,92,private double sumX = 0d;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,94,/** total variation in x (sum of squared deviations from xbar) */
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,95,private double sumXX = 0d;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,97,/** sum of y values */
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,98,private double sumY = 0d;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,100,/** total variation in y (sum of squared deviations from ybar) */
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,101,private double sumYY = 0d;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,103,/** sum of products */
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,104,private double sumXY = 0d;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,106,/** number of observations */
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,107,private long n = 0;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,109,"/** mean of accumulated x values, used in updating formulas */"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,110,private double xbar = 0;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,112,"/** mean of accumulated y values, used in updating formulas */"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,113,private double ybar = 0;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,116,// ---------------------Public methods--------------------------------------
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,119,"* Adds the observation (x,y) to the regression data set."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,120,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,121,* Uses updating formulas for means and sums of squares defined in
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,122,"* ""Algorithms for Computing the Sample Variance: Analysis and"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,123,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,124,"* 1983, American Statistician, vol. 37, pp. 242-247, referenced in"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,125,"* Weisberg, S. ""Applied Linear Regression"". 2nd Ed. 1985"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,128,* @param x independent variable value
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,129,* @param y dependent variable value
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,131,"public void addData(double x, double y) {"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,132,if (n == 0) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,133,xbar = x;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,134,ybar = y;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,135,} else {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,136,sumXX += ((double) n / (double) (n + 1)) * (x - xbar) * (x - xbar);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,137,sumYY += ((double) n / (double) (n + 1)) * (y - ybar) * (y - ybar);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,138,sumXY += ((double) n / (double) (n + 1)) * (x - xbar) * (y - ybar);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,139,xbar += (1d / (double) (n + 1)) * (x - xbar);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,140,ybar += (1d / (double) (n + 1)) * (y - ybar);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,142,sumX += x;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,143,sumY += y;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,144,n++;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,148,* Adds the observations represented by the elements in
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,149,* <code>data</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,150,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,151,"* <code>(data[0][0],data[0][1])</code> will be the first observation, then"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,152,"* <code>(data[1][0],data[1][1])</code>, etc. <p>"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,154,* This method does not replace data that has already been added.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,155,"* To replace all data, use <code>clear()</code> before adding the new"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,156,* data.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,158,* @param data array of observations to be added
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,160,public void addData(double[][] data) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,161,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,162,"addData(data[i][0], data[i][1]);"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,167,* Clears all data from the model.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,169,public void clear() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,170,sumX = 0d;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,171,sumXX = 0d;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,172,sumY = 0d;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,173,sumYY = 0d;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,174,sumXY = 0d;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,175,n = 0;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,179,* Returns the number of observations that have been added to the model.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,181,* @return n number of observations that have been added.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,183,public long getN() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,184,return n;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,188,"* Returns the ""predicted"" <code>y</code> value associated with the"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,189,* supplied <code>x</code> value.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,190,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,191,* <code> predict(x) = intercept + slope * x </code>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,192,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,193,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,194,* <li>At least two observations (with at least two different x values)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,195,* must have been added before invoking this method. If this method is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,196,"* invoked before a model can be estimated, <code>Double,NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,197,* returned.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,198,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,200,* @param x input <code>x</code> value
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,201,* @return predicted <code>y</code> value
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,203,public double predict(double x) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,204,double b1 = getSlope();
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,205,return getIntercept(b1) + b1 * x;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,209,* Returns the intercept of the estimated regression line.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,210,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,211,* The least squares estimate of the intercept is computed using the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,212,"* <a href=""http://www.xycoon.com/estimation4.htm"">normal equations</a>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,213,* The intercept is sometimes denoted b0.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,214,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,215,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,216,* <li>At least two observations (with at least two different x values)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,217,* must have been added before invoking this method. If this method is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,218,"* invoked before a model can be estimated, <code>Double,NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,219,* returned.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,220,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,222,* @return the intercept of the regression line
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,224,public double getIntercept() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,225,return getIntercept(getSlope());
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,229,* Returns the slope of the estimated regression line.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,230,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,231,* The least squares estimate of the slope is computed using the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,232,"* <a href=""http://www.xycoon.com/estimation4.htm"">normal equations</a>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,233,* The slope is sometimes denoted b1.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,234,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,235,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,236,* <li>At least two observations (with at least two different x values)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,237,* must have been added before invoking this method. If this method is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,238,"* invoked before a model can be estimated, <code>Double.NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,239,* returned.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,240,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,242,* @return the slope of the regression line
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,244,public double getSlope() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,245,if (n < 2) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,246,return Double.NaN;  //not enough data
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,248,if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,249,return Double.NaN; //not enough variation in x
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,251,return sumXY / sumXX;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,255,"* Returns the <a href=""http://www.xycoon.com/SumOfSquares.htm"">"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,256,* sum of squared errors</a> (SSE) associated with the regression
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,257,* model.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,258,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,259,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,260,* <li>At least two observations (with at least two different x values)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,261,* must have been added before invoking this method. If this method is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,262,"* invoked before a model can be estimated, <code>Double,NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,263,* returned.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,264,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,266,* @return sum of squared errors associated with the regression model
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,268,public double getSumSquaredErrors() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,269,return getSumSquaredErrors(getSlope());
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,273,* Returns the sum of squared deviations of the y values about their mean.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,274,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,275,* This is defined as SSTO
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,276,"* <a href=""http://www.xycoon.com/SumOfSquares.htm"">here</a>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,277,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,278,"* If <code>n < 2</code>, this returns <code>Double.NaN</code>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,280,* @return sum of squared deviations of y values
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,282,public double getTotalSumSquares() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,283,if (n < 2) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,284,return Double.NaN;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,286,return sumYY;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,290,* Returns the sum of squared deviations of the predicted y values about
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,291,* their mean (which equals the mean of y).
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,292,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,293,* This is usually abbreviated SSR or SSM.  It is defined as SSM
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,294,"* <a href=""http://www.xycoon.com/SumOfSquares.htm"">here</a>"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,295,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,296,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,297,* <li>At least two observations (with at least two different x values)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,298,* must have been added before invoking this method. If this method is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,299,"* invoked before a model can be estimated, <code>Double,NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,300,* returned.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,301,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,303,* @return sum of squared deviations of predicted y values
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,305,public double getRegressionSumSquares() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,306,return getRegressionSumSquares(getSlope());
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,310,"* Returns the sum of squared errors divided by the degrees of freedom,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,311,* usually abbreviated MSE.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,312,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,313,"* If there are fewer than <strong>three</strong> data pairs in the model,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,314,"* or if there is no variation in <code>x</code>, this returns"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,315,* <code>Double.NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,317,* @return sum of squared deviations of y values
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,319,public double getMeanSquareError() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,320,if (n < 3) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,321,return Double.NaN;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,323,return getSumSquaredErrors() / (double) (n - 2);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,327,"* Returns <a href=""http://www.stt.msu.edu/~xiaoyimi/STT200/Lecture5.pdf"">"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,328,"* Pearson's product moment correlation coefficient</a>,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,329,* usually denoted r.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,330,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,331,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,332,* <li>At least two observations (with at least two different x values)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,333,* must have been added before invoking this method. If this method is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,334,"* invoked before a model can be estimated, <code>Double,NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,335,* returned.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,336,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,338,* @return Pearson's r
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,340,public double getR() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,341,double b1 = getSlope();
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,342,double result = Math.sqrt(getRSquare(b1));
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,343,if (b1 < 0) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,344,result = -result;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,346,return result;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,350,"* Returns the <a href=""http://www.xycoon.com/coefficient1.htm"">"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,351,"* coefficient of determination</a>,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,352,* usually denoted r-square.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,353,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,354,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,355,* <li>At least two observations (with at least two different x values)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,356,* must have been added before invoking this method. If this method is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,357,"* invoked before a model can be estimated, <code>Double,NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,358,* returned.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,359,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,361,* @return r-square
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,363,public double getRSquare() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,364,return getRSquare(getSlope());
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,369,"* Returns the <a href=""http://www.xycoon.com/standarderrorb0.htm"">"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,370,"* standard error of the intercept estimate</a>,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,371,* usually denoted s(b0).
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,372,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,373,* If there are fewer that <strong>three</strong> observations in the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,374,"* model, or if there is no variation in x, this returns"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,375,* <code>Double.NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,377,* @return standard error associated with intercept estimate
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,379,public double getInterceptStdErr() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,380,return Math.sqrt(getMeanSquareError() * ((1d / (double) n) +
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,381,(xbar * xbar) / sumXX));
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,385,"* Returns the <a href=""http://www.xycoon.com/standerrorb(1).htm"">standard"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,386,"* error of the slope estimate</a>,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,387,* usually denoted s(b1).
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,388,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,389,"* If there are fewer that <strong>three</strong> data pairs in the model,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,390,"* or if there is no variation in x, this returns <code>Double.NaN</code>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,392,* @return standard error associated with slope estimate
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,394,public double getSlopeStdErr() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,395,return Math.sqrt(getMeanSquareError() / sumXX);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,399,* Returns the half-width of a 95% confidence interval for the slope
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,400,* estimate.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,401,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,402,* The 95% confidence interval is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,403,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,404,"* <code>(getSlope() - getSlopeConfidenceInterval(),"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,405,* getSlope() + getSlopeConfidenceInterval())</code>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,406,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,407,* If there are fewer that <strong>three</strong> observations in the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,408,"* model, or if there is no variation in x, this returns"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,409,* <code>Double.NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,410,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,411,* <strong>Usage Note</strong>:<br>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,412,* The validity of this statistic depends on the assumption that the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,413,* observations included in the model are drawn from a
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,414,"* <a href=""http://mathworld.wolfram.com/"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,415,"* BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,417,* @return half-width of 95% confidence interval for the slope estimate
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,419,public double getSlopeConfidenceInterval() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,420,return getSlopeConfidenceInterval(0.05d);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,424,* Returns the half-width of a (100-100*alpha)% confidence interval for
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,425,* the slope estimate.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,426,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,427,* The (100-100*alpha)% confidence interval is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,428,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,429,"* <code>(getSlope() - getSlopeConfidenceInterval(),"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,430,* getSlope() + getSlopeConfidenceInterval())</code>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,431,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,432,"* To request, for example, a 99% confidence interval, use"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,433,* <code>alpha = .01</code>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,434,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,435,* <strong>Usage Note</strong>:<br>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,436,* The validity of this statistic depends on the assumption that the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,437,* observations included in the model are drawn from a
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,438,"* <a href=""http://mathworld.wolfram.com/"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,439,"* BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,440,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,441,* <strong> Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,442,* <li>If there are fewer that <strong>three</strong> observations in the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,443,"* model, or if there is no variation in x, this returns"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,444,* <code>Double.NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,445,* </li>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,446,* <li><code>(0 < alpha < 1)</code>; otherwise an
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,447,* <code>IllegalArgumentException</code> is thrown.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,448,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,450,* @param alpha the desired significance level
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,451,* @return half-width of 95% confidence interval for the slope estimate
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,453,public double getSlopeConfidenceInterval(double alpha) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,454,if (alpha >= 1 || alpha <= 0) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,455,throw new IllegalArgumentException();
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,457,return getSlopeStdErr() *
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,458,getTDistribution().inverseCummulativeProbability(1d - alpha / 2d);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,462,* Returns the significance level of the slope (equiv) correlation.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,463,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,464,"* Specifically, the returned value is the smallest <code>alpha</code>"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,465,* such that the slope confidence interval with significance level
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,466,* equal to <code>alpha</code> does not include <code>0</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,467,"* On regression output, this is often denoted <code>Prob(|t| > 0)</code>"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,468,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,469,* <strong>Usage Note</strong>:<br>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,470,* The validity of this statistic depends on the assumption that the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,471,* observations included in the model are drawn from a
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,472,"* <a href=""http://mathworld.wolfram.com/"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,473,"* BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,474,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,475,* If there are fewer that <strong>three</strong> observations in the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,476,"* model, or if there is no variation in x, this returns"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,477,* <code>Double.NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,479,* @return significance level for slope/correlation
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,481,public double getSignificance() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,482,return (1d - getTDistribution().cummulativeProbability(
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,483,Math.abs(getSlope()) / getSlopeStdErr()));
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,486,// ---------------------Private methods-----------------------------------
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,489,"* Returns the intercept of the estimated regression line, given the slope."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,490,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,491,* Will return <code>NaN</code> if slope is <code>NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,493,* @param slope current slope
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,494,* @return the intercept of the regression line
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,496,private double getIntercept(double slope) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,497,return (sumY - slope * sumX) / ((double) n);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,501,* Returns the sum of squared errors associated with the regression
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,502,"* model, using the slope of the regression line."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,503,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,504,* Returns NaN if the slope is NaN.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,506,* @param b1 current slope
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,507,* @return sum of squared errors associated with the regression model
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,509,private double getSumSquaredErrors(double b1) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,510,return sumYY - sumXY * sumXY / sumXX;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,514,* Computes r-square from the slope.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,515,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,516,* will return NaN if slope is Nan.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,518,* @param b1 current slope
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,519,* @return r-square
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,521,private double getRSquare(double b1) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,522,double ssto = getTotalSumSquares();
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,523,return (ssto - getSumSquaredErrors(b1)) / ssto;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,527,* Computes SSR from b1.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,529,* @param slope regression slope estimate
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,530,* @return sum of squared deviations of predicted y values
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,532,private double getRegressionSumSquares(double slope) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,533,return slope * slope * sumXX;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,537,* Uses distribution framework to get a t distribution instance
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,538,* with df = n - 2
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,540,* @return t distribution with df = n - 2
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,542,private TDistribution getTDistribution() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,543,return DistributionFactory.newInstance().createTDistribution(n - 2);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,9,* are met:
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,56,import java.util.Iterator;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,58,import org.apache.commons.collections.Bag;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,59,import org.apache.commons.collections.HashBag;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,62,* Maintains a frequency distribution. <br>
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,63,"* Accepts int, long or string values, converting"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,64,* all to Strings and maintaining frequency counts.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,66,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,68,public class Frequency {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,69,/** name for this frequency distribution. */
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,70,private String name;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,72,/** underlying collection */
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,73,private Bag freqTable = new HashBag();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,76,* Default constructor.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,78,public Frequency() {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,79,this(null);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,83,* Construct a frequency distribution with the given name.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,84,* @param name the name for the new distribution.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,86,public Frequency(String name) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,87,super();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,88,setName(name);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,92,* Return a string representation of describing this frequency
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,93,* distribution.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,94,* @return a string representation.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,96,public String toString() {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,97,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,98,"outBuffer.append(""Value \t Frequency \n"");"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,99,Iterator iter = freqTable.uniqueSet().iterator();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,100,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,101,Object value = iter.next();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,102,outBuffer.append(value);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,103,outBuffer.append('\t');
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,104,outBuffer.append(freqTable.getCount(value));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,105,outBuffer.append('\n');
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,107,return outBuffer.toString();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,111,* Adds 1 to the frequency count for v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,112,* @param v the value to add.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,114,public void addValue(String v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,115,freqTable.add(v);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,119,* Adds 1 to the frequency count for v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,120,* @param v the value to add.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,122,public void addValue(int v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,123,addValue((new Integer(v)).toString());
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,127,* Adds 1 to the frequency count for v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,128,* @param v the value to add.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,130,public void addValue(long v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,131,addValue((new Long(v)).toString());
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,135,* Returns the number of values = v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,136,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,137,* @return the absolute frequency of v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,139,public long getCount(String v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,140,return freqTable.getCount(v);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,144,* Returns the sum of all frequencies
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,145,* @return the aggregate frequency.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,147,public long getSumFreq() {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,148,return freqTable.size();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,152,* Returns the percentage of values = v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,153,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,154,* @return the relative frequency of v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,156,public double getPct(String v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,157,return (double) getCount(v) / (double) getSumFreq();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,160,/** Clears the frequency table */
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,161,public void clear() {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,162,freqTable.clear();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,165,/** Getter for property name.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,166,* @return Value of property name.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,168,public String getName() {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,169,return name;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,172,/** Setter for property name.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,173,* @param name New value of property name.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,175,public void setName(java.lang.String name) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,176,this.name = name;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,9,* are met:
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,56,import java.util.List;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,58,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,59,import org.apache.commons.math.util.DefaultTransformer;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,60,import org.apache.commons.math.util.NumberTransformer;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,63,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,65,public class ListUnivariateImpl
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,66,extends AbstractStoreUnivariate
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,67,implements StoreUnivariate {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,70,* Holds a reference to a list - GENERICs are going to make
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,71,* out lives easier here as we could only accept List<Number>
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,73,protected List list;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,75,/** Number Transformer maps Objects to Number for us. */
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,76,protected NumberTransformer transformer;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,79,* Construct a ListUnivariate with a specific List.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,80,* @param list The list that will back this Univariate
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,82,public ListUnivariateImpl(List list) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,83,"this(list, new DefaultTransformer());"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,87,* Construct a ListUnivariate with a specific List.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,88,* @param list The list that will back this Univariate
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,89,* @param transformer the number transformer used to convert the list items.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,91,"public ListUnivariateImpl(List list, NumberTransformer transformer) {"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,92,super();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,93,this.list = list;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,94,this.transformer = transformer;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,98,* @see org.apache.commons.math.stat.StoreUnivariate#getValues()
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,100,public double[] getValues() {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,102,int length = list.size();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,104,// If the window size is not INFINITE_WINDOW AND
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,105,"// the current list is larger that the window size, we need to"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,106,// take into account only the last n elements of the list
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,107,// as definied by windowSize
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,109,if (windowSize != Univariate.INFINITE_WINDOW &&
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,110,windowSize < list.size())
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,112,"length = list.size() - Math.max(0, list.size() - windowSize);"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,115,// Create an array to hold all values
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,116,double[] copiedArray = new double[length];
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,118,for (int i = 0; i < copiedArray.length; i++) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,119,copiedArray[i] = getElement(i);
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,121,return copiedArray;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,125,* @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,127,public double getElement(int index) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,129,double value = Double.NaN;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,131,int calcIndex = index;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,133,if (windowSize != Univariate.INFINITE_WINDOW &&
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,134,windowSize < list.size())
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,136,calcIndex = (list.size() - windowSize) + index;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,139,try {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,140,value = transformer.transform(list.get(calcIndex));
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,141,} catch (Exception e) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,142,e.printStackTrace();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,145,return value;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,149,* @see org.apache.commons.math.stat.Univariate#getN()
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,151,public int getN() {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,152,int n = 0;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,154,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,155,if (list.size() > windowSize) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,156,n = windowSize;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,157,} else {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,158,n = list.size();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,160,} else {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,161,n = list.size();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,163,return n;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,167,* @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,169,public void addValue(double v) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,170,list.add(new Double(v));
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,174,* Adds an object to this list.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,175,* @param o Object to add to the list
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,177,public void addObject(Object o) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,178,list.add(o);
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,182,* @see org.apache.commons.math.stat.Univariate#clear()
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,184,public void clear() {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,185,super.clear();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,186,list.clear();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,190,* Apply the given statistic to this univariate collection.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,191,* @param stat the statistic to apply
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,192,* @return the computed value of the statistic.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,194,public double apply(UnivariateStatistic stat) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,195,double[] v = this.getValues();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,197,if (v != null) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,198,"return stat.evaluate(v, 0, v.length);"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,200,return Double.NaN;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,204,* Access the number transformer.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,205,* @return the number transformer.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,207,public NumberTransformer getTransformer() {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,208,return transformer;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,212,* Modify the number transformer.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,213,* @param transformer the new number transformer.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,215,public void setTransformer(NumberTransformer transformer) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,216,this.transformer = transformer;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,9,* are met:
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,56,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,57,import org.apache.commons.math.stat.univariate.moment.Mean;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,58,import org.apache.commons.math.stat.univariate.moment.Variance;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,59,import org.apache.commons.math.stat.univariate.rank.Max;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,60,import org.apache.commons.math.stat.univariate.rank.Min;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,61,import org.apache.commons.math.stat.univariate.summary.Product;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,62,import org.apache.commons.math.stat.univariate.summary.Sum;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,63,import org.apache.commons.math.stat.univariate.summary.SumOfLogs;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,64,import org.apache.commons.math.stat.univariate.summary.SumOfSquares;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,67,* StatUtils provides easy static implementations of common double[] based
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,68,"* statistical methods. These return a single result value or in some cases, as"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,69,"* identified in the javadoc for each method, Double.NaN."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,70,* @version $Revision: 1.21 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,72,public final class StatUtils {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,74,/** sum */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,75,private static UnivariateStatistic sum = new Sum();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,77,/** sumSq */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,78,private static UnivariateStatistic sumSq = new SumOfSquares();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,80,/** prod */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,81,private static UnivariateStatistic prod = new Product();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,83,/** sumLog */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,84,private static UnivariateStatistic sumLog = new SumOfLogs();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,86,/** min */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,87,private static UnivariateStatistic min = new Min();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,89,/** max */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,90,private static UnivariateStatistic max = new Max();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,92,/** mean */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,93,private static UnivariateStatistic mean = new Mean();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,95,/** variance */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,96,private static UnivariateStatistic variance = new Variance();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,99,* Private Constructor
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,101,private StatUtils() {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,105,* The sum of the values that have been added to Univariate.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,106,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,107,* @return the sum of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,109,public static double sum(final double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,110,return sum.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,114,* The sum of the values that have been added to Univariate.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,115,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,116,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,117,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,118,* @return the sum of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,120,public static double sum(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,121,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,122,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,123,final int length) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,124,"return sum.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,128,* Returns the sum of the squares of the available values.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,129,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,130,* @return the sum of the squared values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,132,public static double sumSq(final double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,133,return sumSq.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,137,* Returns the sum of the squares of the available values.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,138,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,139,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,140,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,141,* @return the sum of the squared values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,143,public static double sumSq(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,144,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,145,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,146,final int length) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,147,"return sumSq.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,151,* Returns the product for this collection of values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,152,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,153,* @return the product values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,155,public static double product(final double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,156,return prod.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,160,* Returns the product for this collection of values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,161,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,162,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,163,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,164,* @return the product values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,166,public static double product(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,167,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,168,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,169,final int length) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,170,"return prod.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,174,* Returns the sum of the natural logs for this collection of values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,175,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,176,* @return the sumLog value or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,178,public static double sumLog(final double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,179,return sumLog.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,183,* Returns the sum of the natural logs for this collection of values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,184,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,185,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,186,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,187,* @return the sumLog value or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,189,public static double sumLog(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,190,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,191,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,192,final int length) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,193,"return sumLog.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,197,* Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,198,* arithmetic mean </a> of the available values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,199,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,200,* @return the mean of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,202,public static double mean(final double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,203,return mean.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,207,* Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,208,* arithmetic mean </a> of the available values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,209,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,210,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,211,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,212,* @return the mean of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,214,public static double mean(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,215,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,216,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,217,final int length) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,218,"return mean.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,222,* Returns the variance of the available values. This uses a corrected
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,223,* two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,224,"* <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,225,"* corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,226,"* ""Algorithms for Computing the Sample Variance: Analysis and"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,227,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,228,"* 1983, American Statistician, vol. 37, pp. 242?247."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,230,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,231,"* @return the result, Double.NaN if no values for an empty array"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,232,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,234,public static double variance(final double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,235,return variance.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,239,* Returns the variance of the available values. This uses a corrected
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,240,* two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,241,"* <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,242,"* corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,243,"* ""Algorithms for Computing the Sample Variance: Analysis and"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,244,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,245,"* 1983, American Statistician, vol. 37, pp. 242?247."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,247,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,248,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,249,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,250,"* @return the result, Double.NaN if no values for an empty array"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,251,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,253,public static double variance(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,254,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,255,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,256,final int length) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,257,"return variance.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,261,* Returns the maximum of the available values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,262,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,263,* @return the maximum of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,265,public static double max(final double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,266,return max.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,270,* Returns the maximum of the available values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,271,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,272,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,273,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,274,* @return the maximum of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,276,public static double max(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,277,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,278,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,279,final int length) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,280,"return max.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,284,* Returns the minimum of the available values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,285,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,286,* @return the minimum of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,288,public static double min(final double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,289,return min.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,293,* Returns the minimum of the available values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,294,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,295,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,296,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,297,* @return the minimum of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,299,public static double min(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,300,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,301,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,302,final int length) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,303,"return min.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,9,* are met:
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,57,* StoreUnivariate implements the Univariate interface
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,58,* but maintains the set of values which contribute to
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,59,* the values being returned.  This implementation of
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,60,* Univariate provides additional percentile functionality
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,61,* such as.  This additional functionality comes with
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,62,* a price of increased storage costs.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,63,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,65,public interface StoreUnivariate extends Univariate {
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,68,* Returns the current set of values in an array of double primitives.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,69,* The order of addition is preserved.  The returned array is a fresh
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,70,"* copy of the underlying data -- i.e., it is not a reference to the"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,71,* stored data.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,73,* @return returns the current set of numbers in the order in which they
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,74,*         were added to this set
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,76,double[] getValues();
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,79,"* Returns the current set of values in an array of double primitives,"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,80,* sorted in ascending order.  The returned array is a fresh
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,81,"* copy of the underlying data -- i.e., it is not a reference to the"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,82,* stored data.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,83,* @return returns the current set of
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,84,* numbers sorted in ascending order
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,86,double[] getSortedValues();
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,89,* Returns the element at the specified index
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,90,* @param index The Index of the element
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,91,* @return return the element at the specified index
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,93,double getElement(int index);
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,96,* Returns an estimate for the pth percentile of the stored values.
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,97,* This estimate follows the interpolation-adjusted defintion presented
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,98,"* <a href=""http://www.utdallas.edu/~ammann/stat5311/node8.html"">here</a>"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,99,* <p/>
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,100,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,101,* <li><code>0 &lt; p &lt; 100</code> (otherwise an
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,102,* <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,103,* <li>at least one value must be stored (returns <code>Double.NaN
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,104,*     </code> otherwise)</li>
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,105,* </ul>
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,107,* @param p the requested percentile (scaled from 0 - 100)
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,108,* @return An estimate for the pth percentile of the stored data
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,109,* values
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,111,double getPercentile(double p);
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,9,* are met:
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,56,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,57,import org.apache.commons.math.util.ContractableDoubleArray;
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,60,* @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,62,public class StoreUnivariateImpl extends AbstractStoreUnivariate {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,64,/** A contractable double array is used.  memory is reclaimed when
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,65,* the storage of the array becomes too empty.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,67,protected ContractableDoubleArray eDA;
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,70,* Construct a StoreUnivariateImpl
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,72,public StoreUnivariateImpl() {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,73,eDA = new ContractableDoubleArray();
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,77,* @see org.apache.commons.math.stat.StoreUnivariate#getValues()
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,79,public double[] getValues() {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,81,double[] copiedArray = new double[eDA.getNumElements()];
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,82,System.arraycopy(
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,83,"eDA.getElements(),"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,84,"0,"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,85,"copiedArray,"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,86,"0,"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,87,eDA.getNumElements());
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,88,return copiedArray;
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,92,* @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,94,public double getElement(int index) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,95,return eDA.getElement(index);
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,99,* @see org.apache.commons.math.stat.Univariate#getN()
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,101,public int getN() {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,102,return eDA.getNumElements();
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,106,* @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,108,public synchronized void addValue(double v) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,109,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,110,if (getN() == windowSize) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,111,eDA.addElementRolling(v);
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,112,} else if (getN() < windowSize) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,113,eDA.addElement(v);
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,114,} else {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,115,String msg =
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,116,"""A window Univariate had more element than "" +"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,117,"""the windowSize.  This is an inconsistent state."";"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,118,throw new RuntimeException(msg);
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,120,} else {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,121,eDA.addElement(v);
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,126,* @see org.apache.commons.math.stat.Univariate#clear()
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,128,public synchronized void clear() {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,129,super.clear();
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,130,eDA.clear();
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,134,* @see org.apache.commons.math.stat.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,136,public synchronized void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,137,this.windowSize = windowSize;
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,139,// We need to check to see if we need to discard elements
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,140,// from the front of the array.  If the windowSize is less than
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,141,// the current number of elements.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,142,if (windowSize < eDA.getNumElements()) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,143,eDA.discardFrontElements(eDA.getNumElements() - windowSize);
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,148,* Apply the given statistic to this univariate collection.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,149,* @param stat the statistic to apply
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,150,* @return the computed value of the statistic.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,152,public double apply(UnivariateStatistic stat) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,153,if (eDA != null) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,154,"return stat.evaluate(eDA.getValues(), eDA.start(), eDA.getNumElements());"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,156,return Double.NaN;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,9,* are met:
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,56,* A collection of commonly used test statistics and statistical tests.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,58,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,60,public interface TestStatistic {
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,63,"* Computes the <a href=""http://www.itl.nist.gov/div898/handbook/eda"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,64,"* /section3/eda35f.htm"">Chi-Square statistic</a> comparing"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,65,* <code>observed</code> and <code>expected</code> freqeuncy counts.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,66,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,67,* This statistic can be used to perform Chi-Square tests.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,68,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,69,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,70,* <li>Expected counts must all be positive.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,71,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,72,* <li>Observed counds must all be >= 0.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,73,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,74,* <li>The observed and expected arrays must have the same length and
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,75,* their common length must be at least 2.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,76,* </li></ul><p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,77,"* If any of the preconditions are not met, an"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,78,* <code>IllegalArgumentException</code> is thrown.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,80,* @param observed array of observed frequency counts
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,81,* @param expected array of exptected frequency counts
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,82,* @return chiSquare statistic
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,83,* @throws IllegalArgumentException if preconditions are not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,85,"double chiSquare(double[] expected, double[] observed)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,86,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,89,"* Returns the <i>observed significance level</i>, or <a href="
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,90,"* ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,91,"* p-value</a>, associated with a <a href=""http://www.itl.nist.gov/div898/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,92,"* handbook/eda/section3/eda35f.htm"">Chi-square goodness of fit test</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,93,* comparing the <code>observed</code> frequency counts to those in the
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,94,* <code>expected</code> array.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,95,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,96,* The number returned is the smallest significance level
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,97,* at which one can reject the null hypothesis that the observed counts
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,98,* conform to the frequency distribution described by the expected counts.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,99,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,100,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,101,* <li>Expected counts must all be positive.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,102,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,103,* <li>Observed counds must all be >= 0.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,104,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,105,* <li>The observed and expected arrays must have the same length and
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,106,* their common length must be at least 2.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,107,* </li></ul><p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,108,"* If any of the preconditions are not met, an"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,109,* <code>IllegalArgumentException</code> is thrown.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,111,* @param observed array of observed frequency counts
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,112,* @param expected array of exptected frequency counts
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,113,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,114,* @throws IllegalArgumentException if preconditions are not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,116,"double chiSquareTest(double[] expected, double[] observed)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,117,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,120,"* Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,121,"* section3/eda35f.htm"">Chi-square goodness of fit test</a> evaluating the"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,122,* null hypothesis that the observed counts conform to the frequency
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,123,"* distribution described by the expected counts, with significance level"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,124,* <code>alpha</code>.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,125,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,126,* <strong>Example:</strong><br>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,127,* To test the hypothesis that <code>observed</code> follows
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,128,"* <code>expected</code> at the 99% level, use <p>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,129,"* <code>chiSquareTest(expected, observed, 0.01) </code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,130,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,131,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,132,* <li>Expected counts must all be positive.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,133,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,134,* <li>Observed counds must all be >= 0.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,135,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,136,* <li>The observed and expected arrays must have the same length and
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,137,* their common length must be at least 2.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,138,* <li> <code> 0 < alpha < 0.5 </code>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,139,* </li></ul><p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,140,"* If any of the preconditions are not met, an"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,141,* <code>IllegalArgumentException</code> is thrown.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,143,* @param observed array of observed frequency counts
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,144,* @param expected array of exptected frequency counts
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,145,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,146,* @return true iff null hypothesis can be rejected with confidence
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,147,* 1 - alpha
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,148,* @throws IllegalArgumentException if preconditions are not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,150,"boolean chiSquareTest(double[] expected, double[] observed, double alpha)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,151,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,154,"* Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,155,"* section2/prc22.htm#formula""> t statistic </a> given observed values and"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,156,* a comparison constant.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,157,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,158,* This statistic can be used to perform a one sample t-test for the mean.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,159,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,160,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,161,* <li>The observed array length must be at least 2.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,162,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,164,* @param mu comparison constant
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,165,* @param observed array of values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,166,* @return t statistic
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,167,* @throws IllegalArgumentException if input array length is less than 2
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,169,"double t(double mu, double[] observed)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,170,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,173,"* Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,174,"* /prc31.htm"">2-sample t statistic </a>, without the assumption of equal"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,175,* sample variances.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,176,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,177,* This statistic can be used to perform a two-sample t-test to compare
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,178,* sample means.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,179,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,180,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,181,* <li>The observed array lengths must both be at least 5.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,182,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,184,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,185,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,186,* @return t statistic
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,187,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,189,"double t(double[] sample1, double[] sample2)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,190,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,193,"* Returns the <i>observed significance level</i>, or <a href="
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,194,"* ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,195,"* p-value</a>, associated with a two-sample, two-tailed t-test"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,196,* comparing the means of the input arrays.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,197,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,198,* The number returned is the smallest significance level
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,199,* at which one can reject the null hypothesis that the two means are
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,200,* equal in favor of the two-sided alternative that they are different.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,201,"* For a one-sided test, divide the returned value by 2."
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,202,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,203,* The test does not assume that the underlying popuation variances are
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,204,* equal and it uses approximated degrees of freedom computed from the
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,205,"* sample data as described <a href=""http://www.itl.nist.gov/div898/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,206,"* handbook/prc/section3/prc31.htm"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,207,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,208,* <strong>Usage Note:</strong><br>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,209,* The validity of the p-value depends on the assumptions of the parametric
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,210,"* t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,211,"* statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,212,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,213,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,214,* <li>The observed array lengths must both be at least 5.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,215,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,217,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,218,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,219,* @return p-value for t-test
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,220,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,222,"double tTest(double[] sample1, double[] sample2)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,223,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,226,"* Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,227,"* section3/eda353.htm"">two-sided t-test</a> evaluating the null"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,228,* hypothesis that <code>sample1</code> and <code>sample2</code> are drawn
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,229,"* from populations with the same mean, with significance level"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,230,* <code>alpha</code>.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,231,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,232,* Returns <code>true</code> iff the null hypothesis that the means are
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,233,* equal can be rejected with confidence <code>1 - alpha</code>.  To
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,234,"* perform a 1-sided test, use <code>alpha / 2</code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,235,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,236,* <strong>Examples:</strong><br><ol>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,237,* <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,238,"* the 95% level, use <br><code>tTest(sample1, sample2, 0.05) </code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,239,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,240,* <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,241,"* at the 99% level, first verify that the measured mean of"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,242,* <code>sample 1</code> is less than the mean of <code>sample 2</code>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,243,"* and then use <br><code>tTest(sample1, sample2, 0.005) </code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,244,* </li></ol>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,245,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,246,* The test does not assume that the underlying popuation variances are
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,247,* equal and it uses approximated degrees of freedom computed from the
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,248,"* sample data as described <a href=""http://www.itl.nist.gov/div898/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,249,"* handbook/prc/section3/prc31.htm"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,250,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,251,* <strong>Usage Note:</strong><br>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,252,* The validity of the test depends on the assumptions of the parametric
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,253,"* t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,254,"* statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,255,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,256,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,257,* <li>The observed array lengths must both be at least 5.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,258,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,259,* <li> <code> 0 < alpha < 0.5 </code>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,260,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,262,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,263,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,264,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,265,* @return true if the null hypothesis can be rejected with
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,266,* confidence 1 - alpha
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,267,* @throws IllegalArgumentException if the preconditions are not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,269,"boolean tTest(double[] sample1, double[] sample2, double alpha)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,270,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,273,"* Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,274,"* section3/eda353.htm"">two-sided t-test</a> evaluating the null"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,275,* hypothesis that the mean of the population from which
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,276,* <code>sample</code> is drawn equals <code>mu</code>.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,277,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,278,* Returns <code>true</code> iff the null hypothesis can be
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,279,* rejected with confidence <code>1 - alpha</code>.  To
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,280,"* perform a 1-sided test, use <code>alpha / 2</code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,281,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,282,* <strong>Examples:</strong><br><ol>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,283,* <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,284,"* the 95% level, use <br><code>tTest(mu, sample, 0.05) </code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,285,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,286,* <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,287,"* at the 99% level, first verify that the measured sample mean is less"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,288,* than <code>mu</code> and then use
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,289,"* <br><code>tTest(mu, sample, 0.005) </code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,290,* </li></ol>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,291,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,292,* <strong>Usage Note:</strong><br>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,293,* The validity of the test depends on the assumptions of the one-sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,294,"* parametric t-test procedure, as discussed"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,295,"* <a href=""http://www.basic.nwu.edu/statguidefiles/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,296,"* sg_glos.html#one-sample"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,297,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,298,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,299,* <li>The observed array length must be at least 5.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,300,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,302,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,303,* @param sample array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,304,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,305,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,306,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,308,"boolean tTest(double mu, double[] sample, double alpha)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,309,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,312,"* Returns the <i>observed significance level</i>, or <a href="
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,313,"* ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,314,"* p-value</a>, associated with a one-sample, two-tailed t-test"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,315,* comparing the mean of the input array with the constant <code>mu</code>.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,316,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,317,* The number returned is the smallest significance level
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,318,* at which one can reject the null hypothesis that the mean equals
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,319,* <code>mu</code> in favor of the two-sided alternative that the mean
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,320,"* is different from <code>mu</code>. For a one-sided test, divide the"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,321,* returned value by 2.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,322,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,323,* <strong>Usage Note:</strong><br>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,324,* The validity of the test depends on the assumptions of the parametric
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,325,"* t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,326,"* statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,327,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,328,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,329,* <li>The observed array length must be at least 5.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,330,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,332,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,333,* @param sample array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,334,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,335,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,337,"double tTest(double mu, double[] sample)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,338,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,341,"* Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,342,"* section2/prc22.htm#formula""> t statistic </a> to use in comparing"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,343,* the dataset described by <code>sampleStats</code> to <code>mu</code>.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,344,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,345,* This statistic can be used to perform a one sample t-test for the mean.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,346,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,347,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,348,* <li><code>observed.getN() > = 2</code>.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,349,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,351,* @param mu comparison constant
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,352,* @param sampleStats Univariate holding sample summary statitstics
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,353,* @return t statistic
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,354,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,356,"double t(double mu, Univariate sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,357,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,360,"* Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,361,"* /prc31.htm"">2-sample t statistic </a>, comparing the datasets described"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,362,* by two Univariates without the assumption of equal sample variances.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,363,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,364,* This statistic can be used to perform a two-sample t-test to compare
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,365,* sample means.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,366,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,367,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,368,* <li>The datasets described by the two Univariates must each contain
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,369,* at least 5 observations.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,370,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,372,* @param sampleStats1 Univariate describing data from the first sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,373,* @param sampleStats2 Univariate describing data from the second sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,374,* @return t statistic
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,375,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,377,"double t(Univariate sampleStats1, Univariate sampleStats2)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,378,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,381,"* Returns the <i>observed significance level</i>, or <a href="
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,382,"* ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,383,"* p-value</a>, associated with a two-sample, two-tailed t-test"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,384,* comparing the means of the datasets described by two Univariates.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,385,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,386,* The number returned is the smallest significance level
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,387,* at which one can reject the null hypothesis that the two means are
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,388,* equal in favor of the two-sided alternative that they are different.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,389,"* For a one-sided test, divide the returned value by 2."
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,390,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,391,* The test does not assume that the underlying popuation variances are
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,392,* equal and it uses approximated degrees of freedom computed from the
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,393,"* sample data as described <a href=""http://www.itl.nist.gov/div898/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,394,"* handbook/prc/section3/prc31.htm"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,395,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,396,* <strong>Usage Note:</strong><br>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,397,* The validity of the p-value depends on the assumptions of the parametric
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,398,"* t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,399,"* statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,400,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,401,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,402,* <li>The datasets described by the two Univariates must each contain
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,403,* at least 5 observations.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,404,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,406,* @param sampleStats1 Univariate describing data from the first sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,407,* @param sampleStats2 Univariate describing data from the second sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,408,* @return p-value for t-test
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,409,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,411,"double tTest(Univariate sampleStats1, Univariate sampleStats2)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,412,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,415,"* Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,416,"* section3/eda353.htm"">two-sided t-test</a> evaluating the null"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,417,* hypothesis that <code>sampleStats1</code> and <code>sampleStats2</code>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,418,"* describe datasets drawn from populations with the same mean, with"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,419,* significance level <code>alpha</code>.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,420,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,421,* Returns <code>true</code> iff the null hypothesis that the means are
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,422,* equal can be rejected with confidence <code>1 - alpha</code>.  To
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,423,"* perform a 1-sided test, use <code>alpha / 2</code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,424,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,425,* <strong>Examples:</strong><br><ol>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,426,* <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,427,"* the 95% level, use"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,428,"* <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,429,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,430,* <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,431,"* at the 99% level, first verify that the measured mean of"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,432,* <code>sample 1</code> is less than the mean of <code>sample 2</code>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,433,"* and then use <br><code>tTest(sampleStats1, sampleStats2, 0.005) </code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,434,* </li></ol>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,435,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,436,* The test does not assume that the underlying popuation variances are
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,437,* equal and it uses approximated degrees of freedom computed from the
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,438,"* sample data as described <a href=""http://www.itl.nist.gov/div898/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,439,"* handbook/prc/section3/prc31.htm"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,440,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,441,* <strong>Usage Note:</strong><br>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,442,* The validity of the test depends on the assumptions of the parametric
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,443,"* t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,444,"* statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,445,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,446,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,447,* <li>The datasets described by the two Univariates must each contain
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,448,* at least 5 observations.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,449,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,450,* <li> <code> 0 < alpha < 0.5 </code>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,451,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,453,* @param sampleStats1 Univariate describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,454,* @param sampleStats2 Univariate describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,455,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,456,* @return true if the null hypothesis can be rejected with
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,457,* confidence 1 - alpha
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,458,* @throws IllegalArgumentException if the preconditions are not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,460,"boolean tTest(Univariate sampleStats1, Univariate sampleStats2,"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,461,double alpha)
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,462,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,465,"* Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,466,"* section3/eda353.htm"">two-sided t-test</a> evaluating the null"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,467,* hypothesis that the mean of the population from which the dataset
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,468,* described by <code>stats</code> is drawn equals <code>mu</code>.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,469,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,470,* Returns <code>true</code> iff the null hypothesis can be
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,471,* rejected with confidence <code>1 - alpha</code>.  To
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,472,"* perform a 1-sided test, use <code>alpha / 2</code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,473,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,474,* <strong>Examples:</strong><br><ol>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,475,* <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,476,"* the 95% level, use <br><code>tTest(mu, sampleStats, 0.05) </code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,477,* </li>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,478,* <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,479,"* at the 99% level, first verify that the measured sample mean is less"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,480,* than <code>mu</code> and then use
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,481,"* <br><code>tTest(mu, sampleStats, 0.005) </code>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,482,* </li></ol>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,483,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,484,* <strong>Usage Note:</strong><br>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,485,* The validity of the test depends on the assumptions of the one-sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,486,"* parametric t-test procedure, as discussed"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,487,"* <a href=""http://www.basic.nwu.edu/statguidefiles/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,488,"* sg_glos.html#one-sample"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,489,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,490,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,491,* <li>The sample must include at least 5 observations.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,492,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,494,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,495,* @param sampleStats Univariate describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,496,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,497,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,498,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,500,"boolean tTest(double mu, Univariate sampleStats, double alpha)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,501,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,504,"* Returns the <i>observed significance level</i>, or <a href="
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,505,"* ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,506,"* p-value</a>, associated with a one-sample, two-tailed t-test"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,507,* comparing the mean of the dataset described by <code>sampleStats</code>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,508,* with the constant <code>mu</code>.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,509,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,510,* The number returned is the smallest significance level
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,511,* at which one can reject the null hypothesis that the mean equals
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,512,* <code>mu</code> in favor of the two-sided alternative that the mean
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,513,"* is different from <code>mu</code>. For a one-sided test, divide the"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,514,* returned value by 2.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,515,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,516,* <strong>Usage Note:</strong><br>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,517,* The validity of the test depends on the assumptions of the parametric
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,518,"* t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,519,"* statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,520,* <p>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,521,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,522,* <li>The sample must contain at least 5 observations.
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,523,* </li></ul>
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,525,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,526,* @param sampleStats Univariate describing sample data
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,527,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,528,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,530,"double tTest(double mu, Univariate sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,531,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,9,* are met:
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,55,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,57,import org.apache.commons.math.stat.distribution.DistributionFactory;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,58,import org.apache.commons.math.stat.distribution.TDistribution;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,59,import org.apache.commons.math.stat.distribution.ChiSquaredDistribution;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,62,* Implements test statistics defined in the TestStatistic interface.
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,66,public class TestStatisticImpl implements TestStatistic {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,69,* Default constructor
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,71,public TestStatisticImpl() {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,75,* @param observed array of observed frequency counts
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,76,* @param expected array of expected frequency counts
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,77,* @return chi-square test statistic
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,78,* @throws IllegalArgumentException if preconditions are not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,79,* or length is less than 2
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,81,"public double chiSquare(double[] expected, double[] observed)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,82,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,83,double sumSq = 0.0d;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,84,double dev = 0.0d;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,85,if ((expected.length < 2) || (expected.length != observed.length)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,86,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,87,"(""observed, expected array lengths incorrect"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,89,if ((StatUtils.min(expected) <= 0) || (StatUtils.min(observed) < 0)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,90,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,91,"(""observed counts must be non-negative,"" +"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,92,""" expected counts must be postive"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,94,for (int i = 0; i < observed.length; i++) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,95,dev = (observed[i] - expected[i]);
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,96,sumSq += dev * dev / expected[i];
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,99,return sumSq;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,103,* @param observed array of observed frequency counts
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,104,* @param expected array of exptected frequency counts
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,105,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,106,* @throws IllegalArgumentException if preconditions are not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,108,"public double chiSquareTest(double[] expected, double[] observed)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,109,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,110,ChiSquaredDistribution chiSquaredDistribution =
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,111,DistributionFactory.newInstance().createChiSquareDistribution
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,112,((double) expected.length - 1);
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,113,return 1 - chiSquaredDistribution.cummulativeProbability(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,114,"chiSquare(expected, observed));"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,118,* @param observed array of observed frequency counts
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,119,* @param expected array of exptected frequency counts
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,120,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,121,* @return true iff null hypothesis can be rejected with confidence
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,122,* 1 - alpha
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,123,* @throws IllegalArgumentException if preconditions are not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,125,"public boolean chiSquareTest(double[] expected, double[] observed,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,126,double alpha)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,127,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,128,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,129,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,130,"(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,132,"return (chiSquareTest(expected, observed) < alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,136,* @param mu comparison constant
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,137,* @param observed array of values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,138,* @return t statistic
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,139,* @throws IllegalArgumentException if input array length is less than 5
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,141,"public double t(double mu, double[] observed)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,142,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,143,if ((observed == null) || (observed.length < 5)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,144,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,145,"(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,147,"return t(StatUtils.mean(observed), mu, StatUtils.variance(observed),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,148,observed.length);
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,152,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,153,* @param sample array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,154,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,155,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,156,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,158,"public boolean tTest(double mu, double[] sample, double alpha)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,159,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,160,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,161,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,162,"(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,164,"return (tTest(mu, sample) < alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,168,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,169,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,170,* @return t-statistic
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,171,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,173,"public double t(double[] sample1, double[] sample2)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,174,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,175,if ((sample1 == null) || (sample2 == null ||
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,176,"Math.min(sample1.length, sample2.length) < 5)) {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,177,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,178,"(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,180,"return t(StatUtils.mean(sample1), StatUtils.mean(sample2),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,181,"StatUtils.variance(sample1), StatUtils.variance(sample2),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,182,"(double) sample1.length, (double) sample2.length);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,187,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,188,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,189,* @return tTest p-value
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,190,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,192,"public double tTest(double[] sample1, double[] sample2)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,193,throws IllegalArgumentException  {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,194,if ((sample1 == null) || (sample2 == null ||
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,195,"Math.min(sample1.length, sample2.length) < 5)) {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,196,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,197,"(""insufficient data"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,199,"return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,200,"StatUtils.variance(sample1), StatUtils.variance(sample2),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,201,"(double) sample1.length, (double) sample2.length);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,205,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,206,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,207,* @param alpha significance level
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,208,* @return true if the null hypothesis can be rejected with
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,209,* confidence 1 - alpha
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,210,* @throws IllegalArgumentException if the preconditions are not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,212,"public boolean tTest(double[] sample1, double[] sample2, double alpha)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,213,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,214,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,215,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,216,"(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,218,"return (tTest(sample1, sample2) < alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,222,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,223,* @param sample array of sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,224,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,225,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,227,"public double tTest(double mu, double[] sample)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,228,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,229,if ((sample == null) || (sample.length < 5)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,230,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,231,"(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,233,"return tTest(StatUtils.mean(sample), mu, StatUtils.variance(sample),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,234,sample.length);
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,238,* @param mu comparison constant
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,239,* @param sampleStats Univariate holding sample summary statitstics
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,240,* @return t statistic
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,241,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,243,"public double t(double mu, Univariate sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,244,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,245,if ((sampleStats == null) || (sampleStats.getN() < 5)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,246,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,247,"(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,249,"return t(sampleStats.getMean(), mu, sampleStats.getVariance(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,250,sampleStats.getN());
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,254,* @param sampleStats1 Univariate describing data from the first sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,255,* @param sampleStats2 Univariate describing data from the second sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,256,* @return t statistic
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,257,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,259,"public double t(Univariate sampleStats1, Univariate sampleStats2)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,260,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,261,if ((sampleStats1 == null) || (sampleStats2 == null ||
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,262,"Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,263,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,264,"(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,266,"return t(sampleStats1.getMean(), sampleStats2.getMean(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,267,"sampleStats1.getVariance(), sampleStats2.getVariance(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,268,"(double) sampleStats1.getN(), (double) sampleStats2.getN());"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,272,* @param sampleStats1 Univariate describing data from the first sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,273,* @param sampleStats2 Univariate describing data from the second sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,274,* @return p-value for t-test
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,275,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,277,"public double tTest(Univariate sampleStats1, Univariate sampleStats2)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,278,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,279,if ((sampleStats1 == null) || (sampleStats2 == null ||
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,280,"Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,281,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,282,"(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,284,"return tTest(sampleStats1.getMean(), sampleStats2.getMean(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,285,"sampleStats1.getVariance(), sampleStats2.getVariance(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,286,"(double) sampleStats1.getN(), (double) sampleStats2.getN());"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,290,* @param sampleStats1 Univariate describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,291,* @param sampleStats2 Univariate describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,292,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,293,* @return true if the null hypothesis can be rejected with
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,294,* confidence 1 - alpha
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,295,* @throws IllegalArgumentException if the preconditions are not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,297,"public boolean tTest(Univariate sampleStats1, Univariate sampleStats2,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,298,double alpha) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,299,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,300,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,301,"(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,303,"return (tTest(sampleStats1, sampleStats2) < alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,307,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,308,* @param sampleStats Univariate describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,309,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,310,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,311,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,313,"public boolean tTest(double mu, Univariate sampleStats, double alpha)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,314,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,315,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,316,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,317,"(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,319,"return (tTest(mu, sampleStats) < alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,323,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,324,* @param sampleStats Univariate describing sample data
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,325,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,326,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,328,"public double tTest(double mu, Univariate sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,329,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,330,if ((sampleStats == null) || (sampleStats.getN() < 5)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,331,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,332,"(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,334,"return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,335,sampleStats.getN());
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,338,//----------------------------------------------- Private methods
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,341,* Computes approximate degrees of freedom for 2-sample t-test.
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,343,* @param v1 first sample variance
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,344,* @param v2 second sample variance
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,345,* @param n1 first sample n
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,346,* @param n2 second sample n
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,347,* @return approximate degrees of freedom
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,349,"private double df(double v1, double v2, double n1, double n2) {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,350,return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,351,((v1 * v1) / (n1 * n1 * (n1 - 1d)) +
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,352,(v2 * v2) / (n2 * n2 * (n2 - 1d)));
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,356,* Computes t test statistic for 2-sample t-test.
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,358,* @param m1 first sample mean
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,359,* @param m2 second sample mean
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,360,* @param v1 first sample variance
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,361,* @param v2 second sample variance
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,362,* @param n1 first sample n
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,363,* @param n2 second sample n
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,364,* @return t test statistic
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,366,"private double t(double m1, double m2, double v1, double v2, double n1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,367,double n2) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,368,return (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,372,* Computes t test statistic for 1-sample t-test.
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,374,* @param m sample mean
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,375,* @param mu constant to test against
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,376,* @param v sample variance
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,377,* @param n sample n
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,378,* @return t test statistic
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,380,"private double t(double m, double mu, double v, double n) {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,381,return (m - mu) / Math.sqrt(v / n);
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,385,"* Computes p-value for 2-sided, 2-sample t-test."
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,387,* @param m1 first sample mean
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,388,* @param m2 second sample mean
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,389,* @param v1 first sample variance
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,390,* @param v2 second sample variance
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,391,* @param n1 first sample n
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,392,* @param n2 second sample n
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,393,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,395,"private double tTest(double m1, double m2, double v1, double v2, double n1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,396,double n2) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,397,"double t = Math.abs(t(m1, m2, v1, v2, n1, n2));"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,398,TDistribution tDistribution =
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,399,DistributionFactory.newInstance().createTDistribution
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,400,"(df(v1, v2, n1, n2));"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,401,"return 1.0 - tDistribution.cummulativeProbability(-t, t);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,405,"* Computes p-value for 2-sided, 1-sample t-test."
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,407,* @param m sample mean
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,408,* @param mu constant to test against
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,409,* @param v sample variance
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,410,* @param n sample n
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,411,* @return p-value
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,413,"private double tTest(double m, double mu, double v, double n) {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,414,"double t = Math.abs(t(m, mu, v, n));"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,415,TDistribution tDistribution =
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,416,DistributionFactory.newInstance().createTDistribution
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,417,(n - 1);
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,418,"return 1.0 - tDistribution.cummulativeProbability(-t, t);"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,9,* are met:
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,58,* Accumulates univariate statistics for values fed in
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,59,* through the addValue() method. This interface defines the LCD interface
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,60,* which all Univariate implementations must implement. <p>
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,61,"* A ""rolling"" capability is supported by all implementations with the following"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,62,* contract: <p>
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,63,* <i> Setting the windowSize property limits the domain of all statistics to
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,64,* the last <code>windowSize</code> values added.</i><p>
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,65,* We use the term <i>available values</i> throughout the API documentation
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,66,"* to refer to these values when the windowSize is set. For example, if the"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,67,"* windowSize is set to 3 and the values {1,2,3,4,5} have been added <strong>"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,68,"* in that order</strong> then the <i>available values</i> are {3,4,5} and all"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,69,* reported statistics will be based on these values<p>
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,70,"* The default windowSize is ""infinite"" -- i.e., all values added are included"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,71,* in all computations.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,72,* @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,74,public interface Univariate extends Applyable{
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,76,* A LEPTOKURTIC set has a positive kurtosis (a high peak)
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,78,public static int LEPTOKURTIC = 1;
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,80,* A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,82,public static int MESOKURTIC = 0;
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,84,"* A PLATYKURTIC set has a negative kurtosis (a flat ""peak"")"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,86,public static int PLATYKURTIC = -1;
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,89,* Adds the value to the set of numbers
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,90,* @param v the value to be added
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,92,void addValue(double v);
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,95,"* Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,96,* arithmetic mean </a> of the available values
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,97,* @return The mean or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,99,double getMean();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,102,"* Returns the <a href=""http://www.xycoon.com/geometric_mean.htm"">"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,103,* geometric mean </a> of the available values
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,104,"* @return The geometricMean, Double.NaN if no values have been added,"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,105,* or if the productof the available values is less than or equal to 0.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,107,double getGeometricMean();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,110,* Returns the variance of the available values.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,111,"* @return The variance, Double.NaN if no values have been added"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,112,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,114,double getVariance();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,117,* Returns the standard deviation of the available values.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,118,"* @return The standard deviation, Double.NaN if no values have been added"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,119,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,121,double getStandardDeviation();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,124,* Returns the skewness of the available values. Skewness is a
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,125,* measure of the assymetry of a given distribution.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,126,"* @return The skewness, Double.NaN if no values have been added"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,127,* or 0.0 for a value set &lt;=2.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,129,double getSkewness();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,132,* Returns the Kurtosis of the available values. Kurtosis is a
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,133,"* measure of the ""peakedness"" of a distribution"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,134,"* @return The kurtosis, Double.NaN if no values have been added, or 0.0"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,135,* for a value set &lt;=3.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,137,double getKurtosis();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,140,"* Returns the Kurtosis ""classification"" a distribution can be"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,141,"* leptokurtic (high peak), platykurtic (flat peak),"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,142,* or mesokurtic (zero kurtosis).
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,144,"* @return A static constant defined in this interface,"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,145,"*         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,146,*         StoredDeviation.MESOKURTIC
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,148,int getKurtosisClass();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,151,* Returns the maximum of the available values
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,152,* @return The max or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,154,double getMax();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,157,* Returns the minimum of the available values
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,158,* @return The min or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,160,double getMin();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,163,* Returns the number of available values
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,164,* @return The number of available values
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,166,int getN();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,169,* Returns the sum of the values that have been added to Univariate.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,170,* @return The sum or Double.NaN if no values have been added
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,172,double getSum();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,175,* Returns the sum of the squares of the available values.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,176,* @return The sum of the squares or Double.NaN if no
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,177,* values have been added.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,179,double getSumsq();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,182,* Resets all statistics and storage
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,184,void clear();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,187,* This constant signals that a Univariate implementation
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,188,* takes into account the contributions of an infinite number of
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,189,"* elements.  In other words, if getWindow returns this"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,190,"* constant, there is, in effect, no ""window""."
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,192,static final int INFINITE_WINDOW = -1;
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,195,* Univariate has the ability to return only measures for the
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,196,* last N elements added to the set of values.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,197,* @return The current window size or -1 if its Infinite.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,200,int getWindowSize();
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,203,* WindowSize controls the number of values which contribute
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,204,"* to the values returned by Univariate.  For example, if"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,205,"* windowSize is set to 3 and the values {1,2,3,4,5}"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,206,* have been added <strong> in that order</strong>
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,207,"* then the <i>available values</i> are {3,4,5} and all"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,208,* reported statistics will be based on these values
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,209,* @param windowSize sets the size of the window.
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,211,void setWindowSize(int windowSize);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,9,* are met:
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,58,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,59,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,60,import org.apache.commons.math.util.FixedDoubleArray;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,64,* Accumulates univariate statistics for values fed in
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,65,* through the addValue() method.  Does not store raw data values.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,66,* All data are represented internally as doubles.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,67,"* Integers, floats and longs can be added, but they will be converted"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,68,* to doubles by addValue().
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,70,* @version $Revision: 1.25 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,72,public class UnivariateImpl
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,73,extends AbstractUnivariate
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,74,"implements Univariate, Serializable {"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,76,/** fixed storage */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,77,private FixedDoubleArray storage = null;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,79,/** Creates new univariate with an infinite window */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,80,public UnivariateImpl() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,81,super();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,85,* Creates a new univariate with a fixed window
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,86,* @param window Window Size
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,88,public UnivariateImpl(int window) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,89,super(window);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,90,storage = new FixedDoubleArray(window);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,94,"*  If windowSize is set to Infinite, moments"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,95,*  are calculated using the following
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,96,"* <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,97,* recursive strategy
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,98,* </a>.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,99,"* Otherwise, stat methods delegate to StatUtils."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,100,* @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,102,public void addValue(double value) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,104,if (storage != null) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,105,/* then all getters deligate to StatUtils
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,106,* and this clause simply adds/rolls a value in the storage array
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,108,if (getWindowSize() == n) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,109,storage.addElementRolling(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,110,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,111,n++;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,112,storage.addElement(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,115,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,116,/* If the windowSize is infinite don't store any values and there
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,117,* is no need to discard the influence of any single item.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,119,n++;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,120,min.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,121,max.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,122,sum.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,123,sumsq.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,124,sumLog.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,125,geoMean.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,127,moment.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,128,//mean.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,129,//variance.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,130,//skewness.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,131,//kurtosis.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,136,* Generates a text report displaying
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,137,* univariate statistics from values that
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,138,* have been added.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,139,* @return String with line feeds displaying statistics
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,141,public String toString() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,142,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,143,"outBuffer.append(""UnivariateImpl:\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,144,"outBuffer.append(""n: "" + getN() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,145,"outBuffer.append(""min: "" + getMin() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,146,"outBuffer.append(""max: "" + getMax() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,147,"outBuffer.append(""mean: "" + getMean() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,148,"outBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,149,"outBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,150,"outBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,151,return outBuffer.toString();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,155,* @see org.apache.commons.math.stat.Univariate#clear()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,157,public void clear() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,158,super.clear();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,159,if (getWindowSize() != INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,160,storage = new FixedDoubleArray(getWindowSize());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,165,* Apply the given statistic to this univariate collection.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,166,* @param stat the statistic to apply
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,167,* @return the computed value of the statistic.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,169,public double apply(UnivariateStatistic stat) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,171,if (storage != null) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,172,"return stat.evaluate(storage.getValues(), storage.start(), storage.getNumElements());"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,173,} else if (stat instanceof StorelessUnivariateStatistic) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,174,return ((StorelessUnivariateStatistic) stat).getResult();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,177,return Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,54,package org.apache.commons.math.stat.univariate;
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,58,* Abstract Implementation for StorelessUnivariateStatistics.
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,59,* Provides the ability to extend polymophically so that
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,60,* indiviual statistics do not need to implement these methods unless
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,61,* there are better algorithms for handling the calculation.
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,62,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,64,public abstract class AbstractStorelessUnivariateStatistic
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,65,extends AbstractUnivariateStatistic
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,66,implements StorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,69,* This implements the AbstractUnivariateStatistic impl to funnel
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,70,* calculation off to the instantanious increment method. In most cases of
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,71,* StorelessUnivariateStatistic this is never really used because more
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,72,* efficient algorithms are available for that statistic.
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,73,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,75,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,76,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,77,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,78,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,79,"if (this.test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,80,this.clear();
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,81,int l = begin + length;
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,82,for (int i = begin; i < l; i++) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,83,increment(values[i]);
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,86,return getResult();
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,90,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,92,public abstract void clear();
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,95,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,97,public abstract double getResult();
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,100,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,102,public abstract void increment(final double d);
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,54,package org.apache.commons.math.stat.univariate;
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,57,* Abstract Implementation for UnivariateStatistics.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,58,* Provides the ability to extend polymophically so that
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,59,* indiviual statistics do not need to implement these methods.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,60,* @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,62,public abstract class AbstractUnivariateStatistic
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,63,implements UnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,66,* This implementation provides a simple wrapper around the double[]
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,67,* and passes the request onto the evaluate(DoubleArray da) method.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,68,* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[])
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,70,public double evaluate(final double[] values) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,71,"return evaluate(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,75,* Subclasses of AbstractUnivariateStatistc need to implement this method.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,76,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,78,public abstract double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,79,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,80,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,81,final int length);
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,84,* this protected test method used by all methods to verify the content
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,85,* of the array and indicies are correct.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,86,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,87,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,88,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,89,"* @return this is used to determine if the array is of 0 length or not,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,90,* it is used by an individual statistic to determine if continuation
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,91,* of a statistical calculation should continue or return NaN.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,93,protected boolean test(
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,94,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,95,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,96,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,98,if (length > values.length) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,99,"throw new IllegalArgumentException(""length > values.length"");"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,102,if (begin + length > values.length) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,103,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,104,"""begin + length > values.length"");"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,107,if (values == null) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,108,"throw new IllegalArgumentException(""input value array is null"");"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,111,if (values.length == 0 || length == 0) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,112,return false;
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,115,return true;
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,54,package org.apache.commons.math.stat.univariate;
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,57,* Extends the capabilities of UnivariateStatistic with a statefull incremental
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,58,* strategy through three methods for calculating a statistic without having to
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,59,* maintain a double[] of the values. Because a StorelessUnivariateStatistic
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,60,* does not require that a double[] storage structure be maintained with the
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,61,"* values in it, there are only a subset of known statistics can actually be"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,62,* implemented using it. If a Statistic cannot be implemented in a Storeless
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,63,* approach it should implement the UnivariateStatistic interface directly
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,64,* instead.
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,65,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,67,public interface StorelessUnivariateStatistic extends UnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,70,* Increments the internal state of the Storagless
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,71,* Implementation.
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,72,* @param d is the value to increment the state by.
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,74,void increment(double d);
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,77,* Returns the current state of the statistic after the
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,78,* last increment.
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,79,"* @return value of the statistic, Double.NaN if it"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,80,* has been cleared or just instantiated.
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,82,double getResult();
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,86,* Clears all the internal state of the Statistic
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,88,void clear();
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,54,package org.apache.commons.math.stat.univariate;
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,57,* UnivariateStatistic interface provides methods to evaluate
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,58,* double[] based content using an implemented statistical approach.
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,59,"* The interface provides two ""stateless"" simple methods to calculate"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,60,* a statistic from a double[] based parameter.
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,61,* @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,63,public interface UnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,66,* Evaluates the double[] returning the result of the evaluation.
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,67,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,68,* @return the result of the evaluation or Double.NaN
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,69,* if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,71,double evaluate(double[] values);
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,74,* Evaluates part of a double[] returning the result
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,75,* of the evaluation.
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,76,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,77,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,78,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,79,* @return the result of the evaluation or Double.NaN
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,80,* if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,82,"double evaluate(double[] values, int begin, int length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,56,import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,59,* FirstMoment.java
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,61,* The FirstMoment (arithmentic mean) is calculated using the following
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,62,"* <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,63,* recursive strategy
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,64,* </a>. Both incremental and evaluation strategies currently use this approach.
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,65,* @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:20 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,67,public class FirstMoment extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,69,/** count of values that have been added */
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,70,protected int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,72,/** first moment of values that have been added */
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,73,protected double m1 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,76,* temporary internal state made available for
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,77,* higher order moments
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,79,protected double dev = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,82,* temporary internal state made available for
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,83,* higher order moments
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,85,protected double v = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,88,* temporary internal state made available for
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,89,* higher order moments
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,91,protected double n0 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,94,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,96,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,97,if (n < 1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,98,m1 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,101,n++;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,102,dev = d - m1;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,103,n0 = (double) n;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,104,v = dev / n0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,106,m1 += v;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,110,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,112,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,113,m1 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,114,n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,115,dev = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,116,v = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,117,n0 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,121,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,123,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,124,return m1;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,57,* The FourthMoment is calculated using the following
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,58,"* <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,59,* recursive strategy
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,60,* </a>. Both incremental and evaluation strategies currently use this approach.
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,61,* @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:20 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,63,public class FourthMoment extends ThirdMoment {
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,65,/** fourth moment of values that have been added */
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,66,protected double m4 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,68,/** temporary internal state made available for higher order moments */
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,69,protected double prevM3 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,71,/** temporary internal state made available for higher order moments */
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,72,protected double n3 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,76,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,78,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,79,if (n < 1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,80,m4 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,81,m3 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,82,m2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,83,m1 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,86,/* retain previous m3 */
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,87,prevM3 = m3;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,89,"/* increment m1, m2 and m3 (and prevM2, _n0, _n1, _n2, _v, _v2) */"
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,90,super.increment(d);
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,92,n3 = (double) (n - 3);
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,94,m4 = m4 - (4.0 * v * prevM3) + (6.0 * v2 * prevM2) +
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,95,((n0 * n0) - 3 * n1) * (v2 * v2 * n1 * n0);
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,99,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,101,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,102,return m4;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,106,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,108,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,109,super.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,110,m4 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,111,prevM3 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,112,n3 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,56,import org.apache.commons.math.stat.univariate.summary.SumOfLogs;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,59,"* Returns the <a href=""http://www.xycoon.com/geometric_mean.htm"">"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,60,* geometric mean </a> of the available values
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,61,* @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,63,public class GeometricMean extends SumOfLogs {
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,66,protected int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,69,private double geoMean = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,72,private double lastSum = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,75,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,77,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,78,n++;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,79,super.increment(d);
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,83,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,85,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,86,if (lastSum != super.getResult() || n == 1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,87,lastSum = super.getResult();
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,88,geoMean = Math.exp(lastSum / (double) n);
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,90,return geoMean;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,94,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,96,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,97,super.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,98,lastSum = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,99,geoMean = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,100,n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,104,* Returns the geometric mean for this collection of values
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,105,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,106,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,107,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,108,* @return the geometric mean or Double.NaN if the array is empty or
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,109,* any of the values are &lt;= 0.
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,110,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,112,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,113,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,114,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,115,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,116,return Math.exp(
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,117,"super.evaluate(values, begin, length) / (double) length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,62,.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,65,* @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,67,public class Kurtosis extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,70,protected FourthMoment moment = null;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,73,protected boolean incMoment = true;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,76,private double kurtosis = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,79,private int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,82,* Construct a Kurtosis
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,84,public Kurtosis() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,85,moment = new FourthMoment();
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,89,* Construct a Kurtosis with an external moment
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,90,* @param m4 external Moment
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,92,public Kurtosis(final FourthMoment m4) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,93,incMoment = false;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,94,this.moment = m4;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,98,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,100,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,101,if (incMoment) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,102,moment.increment(d);
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,107,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,109,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,110,if (n < moment.n) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,111,if (moment.n <= 0) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,112,kurtosis = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,115,double variance =
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,116,(moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,118,if (moment.n <= 3 || variance < 10E-20) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,119,kurtosis = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,120,} else {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,121,kurtosis =
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,122,(moment.n0 * (moment.n0 + 1) * moment.m4 -
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,123,3 * moment.m2 * moment.m2 * moment.n1) /
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,124,(moment.n1 * moment.n2 * moment.n3 * variance * variance);
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,126,n = moment.n;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,129,return kurtosis;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,133,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,135,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,136,if (incMoment) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,137,moment.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,139,kurtosis = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,140,n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,143,/*UnvariateStatistic Approach */
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,146,Mean mean = new Mean();
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,149,* Returns the kurtosis for this collection of values. Kurtosis is a
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,150,"* measure of the ""peakedness"" of a distribution.  This algorithm uses a"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,151,* corrected two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,152,"* <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,153,"* corrected two pass formula (14.1.8)</a>, and also referenced in:"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,154,* <p>
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,155,"* ""Algorithms for Computing the Sample Variance: Analysis and"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,156,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,157,"* 1983, American Statistician, vol. 37, pp. 242?247."
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,158,* </p>
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,159,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,160,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,161,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,162,* @return the kurtosis of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,164,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,165,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,166,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,167,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,169,// Initialize the kurtosis
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,170,double kurt = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,172,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,173,if (length <= 3) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,174,kurt = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,175,} else {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,177,// Get the mean and the standard deviation
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,178,"double m = mean.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,180,"// Calc the std, this is implemented here instead"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,181,// of using the standardDeviation method eliminate
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,182,// a duplicate pass to get the mean
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,183,double accum = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,184,double accum2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,185,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,186,"accum += Math.pow((values[i] - m), 2.0);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,187,accum2 += (values[i] - m);
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,190,double stdDev =
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,191,Math.sqrt(
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,192,"(accum - (Math.pow(accum2, 2) / ((double) length))) /"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,193,(double) (length - 1));
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,195,// Sum the ^4 of the distance from the mean divided by the
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,196,// standard deviation
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,197,double accum3 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,198,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,199,"accum3 += Math.pow((values[i] - m) / stdDev, 4.0);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,202,// Get N
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,203,double n0 = length;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,205,double coefficientOne =
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,206,(n0 * (n0 + 1)) / ((n0 - 1) * (n0 - 2) * (n0 - 3));
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,207,double termTwo =
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,208,"((3 * Math.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3)));"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,210,// Calculate kurtosis
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,211,kurt = (coefficientOne * accum3) - termTwo;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,215,return kurt;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,62,.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,63,import org.apache.commons.math.stat.univariate.summary.Sum;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,66,"* Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,67,* arithmetic mean </a> of the available values.
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,68,* @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:20 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,70,public class Mean extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,72,/** first moment of values that have been added */
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,73,protected FirstMoment moment = null;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,76,protected boolean incMoment = true;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,79,public Mean() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,80,moment = new FirstMoment();
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,84,* Constructs a Mean with an External Moment.
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,85,* @param m1 the moment
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,87,public Mean(final FirstMoment m1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,88,this.moment = m1;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,89,incMoment = false;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,93,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,95,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,96,if (incMoment) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,97,moment.increment(d);
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,102,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,104,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,105,if (incMoment) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,106,moment.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,111,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,113,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,114,return moment.m1;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,117,/*UnvariateStatistic Approach */
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,120,protected Sum sum = new Sum();
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,123,"* Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,124,* arithmetic mean </a> of a double[] of the available values.
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,125,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,126,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,127,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,128,* @return the mean of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,129,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,131,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,132,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,133,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,134,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,135,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,136,return sum.evaluate(values) / ((double) length);
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,138,return Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,57,* The SecondMoment is calculated using the following
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,58,"* <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,59,* recursive strategy
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,60,* </a>. Both incremental and evaluation strategies currently use this approach.
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,61,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,63,public class SecondMoment extends FirstMoment {
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,65,/** second moment of values that have been added */
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,66,protected double m2 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,68,/** temporary internal state made availabel for higher order moments */
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,69,protected double n1 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,72,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,74,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,75,if (n < 1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,76,m1 = m2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,79,"/* increment m1 and _n0, _dev,  _v) */"
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,80,super.increment(d);
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,82,n1 = n0 - 1;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,84,/* increment and return m2 */
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,85,m2 += n1 * dev * v;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,90,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,92,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,93,super.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,94,m2 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,95,n1 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,99,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,101,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,102,return m2;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,56,import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,59,* @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,61,public class Skewness extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,64,protected ThirdMoment moment = null;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,67,protected boolean incMoment = true;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,70,protected double skewness = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,73,private int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,76,* Constructs a Skewness
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,78,public Skewness() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,79,moment = new ThirdMoment();
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,83,* Constructs a Skewness with an external moment
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,84,* @param m3 external moment
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,86,public Skewness(final ThirdMoment m3) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,87,incMoment = false;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,88,this.moment = m3;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,92,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,94,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,95,if (incMoment) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,96,moment.increment(d);
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,101,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,103,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,104,if (n < moment.n) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,105,if (moment.n <= 0) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,106,skewness = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,109,double variance =
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,110,(moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,112,if (moment.n <= 2 || variance < 10E-20) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,113,skewness = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,114,} else {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,115,skewness = (moment.n0 * moment.m3) /
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,116,(moment.n1 * moment.n2 * Math.sqrt(variance) * variance);
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,118,n = moment.n;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,120,return skewness;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,124,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,126,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,127,if (incMoment) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,128,moment.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,130,skewness = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,131,n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,134,/*UnvariateStatistic Approach */
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,137,Mean mean = new Mean();
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,140,* Returns the skewness of a collection of values.  Skewness is a
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,141,* measure of the assymetry of a given distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,142,* This algorithm uses a corrected two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,143,"* <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,144,"* corrected two pass formula (14.1.8)</a>, and also referenced in"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,145,* <p>
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,146,"* ""Algorithms for Computing the Sample Variance: Analysis and"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,147,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,148,"* 1983, American Statistician, vol. 37, pp. 242?247."
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,149,* </p>
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,150,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,151,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,152,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,153,* @return the skewness of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,154,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,156,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,157,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,158,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,159,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,161,// Initialize the skewness
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,162,double skew = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,164,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,166,if (length <= 2) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,167,skew = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,168,} else {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,169,// Get the mean and the standard deviation
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,170,"double m = mean.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,172,"// Calc the std, this is implemented here instead"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,173,// of using the standardDeviation method eliminate
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,174,// a duplicate pass to get the mean
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,175,double accum = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,176,double accum2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,177,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,178,"accum += Math.pow((values[i] - m), 2.0);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,179,accum2 += (values[i] - m);
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,181,double stdDev =
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,182,Math.sqrt(
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,183,"(accum - (Math.pow(accum2, 2) / ((double) length))) /"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,184,(double) (length - 1));
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,186,// Calculate the skew as the sum the cubes of the distance
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,187,// from the mean divided by the standard deviation.
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,188,double accum3 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,189,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,190,"accum3 += Math.pow((values[i] - m) / stdDev, 3.0);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,193,// Get N
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,194,double n0 = length;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,196,// Calculate skewness
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,197,skew = (n0 / ((n0 - 1) * (n0 - 2))) * accum3;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,201,return skew;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,58,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,60,public class StandardDeviation extends Variance {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,63,protected double std = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,66,private double lastVar = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,69,* Constructs a StandardDeviation
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,71,public StandardDeviation() {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,72,super();
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,76,* Constructs a StandardDeviation with an external moment
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,77,* @param m2 the external moment
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,79,public StandardDeviation(final SecondMoment m2) {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,80,super(m2);
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,84,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,86,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,87,super.increment(d);
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,91,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,93,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,94,if (lastVar != super.getResult()) {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,95,lastVar = super.getResult();
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,96,if (Double.isNaN(lastVar)) {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,97,std = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,98,} else if (lastVar == 0.0) {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,99,std = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,100,} else {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,101,std = Math.sqrt(lastVar);
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,104,return std;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,108,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,110,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,111,super.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,112,lastVar = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,116,* Returns the Standard Deviation on an array of values.
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,117,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,118,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,119,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,120,"* @return the result, Double.NaN if no values for an empty array"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,121,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,122,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,124,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,125,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,126,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,127,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,129,"double var = super.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,131,if (Double.isNaN(var)) {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,132,return Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,135,return var != 0.0 ? Math.sqrt(var) : 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,57,* The ThirdMoment (arithmentic mean) is calculated using the following
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,58,"* <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,59,* recursive strategy
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,60,* </a>. Both incremental and evaluation strategies currently use this approach.
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,61,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,63,public class ThirdMoment extends SecondMoment {
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,65,/** third moment of values that have been added */
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,66,protected double m3 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,68,/** temporary internal state made availabel for higher order moments */
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,69,protected double v2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,71,/** temporary internal state made availabel for higher order moments */
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,72,protected double n2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,74,/** temporary internal state made availabel for higher order moments */
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,75,protected double prevM2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,78,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,80,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,81,if (n < 1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,82,m3 = m2 = m1 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,85,/* retain a reference to the last m2*/
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,86,prevM2 = m2;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,88,"/* increment m1 and m2 (and _n0, _n1, _v) */"
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,89,super.increment(d);
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,91,v2 = v * v;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,92,n2 = (double) (n - 2);
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,94,m3 = m3 - (3.0 * v * prevM2) + (n0 * n1 * n2 * v2 * v);
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,99,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,101,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,102,return m3;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,106,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,108,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,109,super.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,110,m3 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,111,v2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,112,n2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,113,prevM2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,56,import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,60,* @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,62,public class Variance extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,64,/** SecondMoment is used in incremental calculation of Variance*/
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,65,protected SecondMoment moment = null;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,68,* Boolean test to determine if this Variance should also increment
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,69,"* the second moment, this evaluates to false when this Variance is"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,70,* constructed with an external SecondMoment as a parameter.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,72,protected boolean incMoment = true;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,75,* This property maintains the latest calculated
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,76,* variance for efficiency when getResult() is called
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,77,* many times between increments.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,79,protected double variance = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,82,* Maintains the current count of inrementations that have occured.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,83,"* If the external SecondMoment is used, the this is updated from"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,84,* that moments counter
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,86,protected int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,89,* Constructs a Variance.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,91,public Variance() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,92,moment = new SecondMoment();
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,96,* Constructs a Variance based on an externalized second moment.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,97,* @param m2 the SecondMoment (Thrid or Fourth moments work
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,98,* here as well.)
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,100,public Variance(final SecondMoment m2) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,101,incMoment = false;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,102,this.moment = m2;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,105,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,107,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,108,if (incMoment) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,109,moment.increment(d);
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,114,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,116,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,117,if (n < moment.n) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,118,if (moment.n <= 0) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,119,variance = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,120,} else if (moment.n <= 1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,121,variance = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,122,} else {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,123,variance = moment.m2 / (moment.n0 - 1);
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,125,n = moment.n;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,128,return variance;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,132,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,134,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,135,if (incMoment) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,136,moment.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,138,variance = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,139,n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,142,/** Mean to be used in UnvariateStatistic evaluation approach. */
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,143,protected Mean mean = new Mean();
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,146,* Returns the variance of the available values. This uses a corrected
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,147,* two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,148,"* <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,149,"* corrected two pass formula (14.1.8)</a>, and also referenced in:"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,150,* <p>
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,151,"* ""Algorithms for Computing the Sample Variance: Analysis and"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,152,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,153,"* 1983, American Statistician, vol. 37, pp. 242?247."
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,154,* </p>
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,155,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,156,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,157,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,158,"* @return the result, Double.NaN if no values for an empty array"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,159,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,160,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,162,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,163,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,164,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,165,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,167,double var = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,169,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,170,if (length == 1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,171,var = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,172,} else if (length > 1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,173,"double m = mean.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,174,double accum = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,175,double accum2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,176,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,177,"accum += Math.pow((values[i] - m), 2.0);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,178,accum2 += (values[i] - m);
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,180,"var = (accum - (Math.pow(accum2, 2) / ((double) length))) /"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,181,(double) (length - 1);
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,184,return var;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,54,package org.apache.commons.math.stat.univariate.rank;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,62,.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,65,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,67,public class Max extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,70,private double value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,73,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,75,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,76,"value = Double.isNaN(value) ? d : Math.max(value, d);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,80,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,82,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,83,value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,87,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,89,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,90,return value;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,94,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,96,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,97,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,98,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,99,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,100,double max = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,101,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,102,max = values[begin];
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,103,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,104,max = (max > values[i]) ? max : values[i];
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,107,return max;
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,54,package org.apache.commons.math.stat.univariate.rank;
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,58,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,60,public class Median extends Percentile {
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,65,public Median() {
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,66,super(50.0);
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,54,package org.apache.commons.math.stat.univariate.rank;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,62,.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,65,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,67,public class Min extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,70,private double value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,73,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,75,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,76,"value = Double.isNaN(value) ? d : Math.min(value, d);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,80,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,82,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,83,value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,87,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,89,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,90,return value;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,94,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,96,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,97,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,98,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,99,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,100,double min = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,101,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,102,min = values[begin];
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,103,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,104,min = (min < values[i]) ? min : values[i];
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,107,return min;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,54,package org.apache.commons.math.stat.univariate.rank;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,56,import java.util.Arrays;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,57,import org.apache.commons.math.stat.univariate.AbstractUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,60,* @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,62,public class Percentile extends AbstractUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,65,private double percentile = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,68,* Constructs a Percentile with a default percentile
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,69,* value of 50.0.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,71,public Percentile() {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,72,super();
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,73,percentile = 50.0;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,77,* Constructs a Percentile with the specific percentile value.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,78,* @param p the percentile
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,80,public Percentile(final double p) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,81,this.percentile = p;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,85,* Evaluates the double[] top the specified percentile.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,86,* This does not alter the interal percentile state of the
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,87,* statistic.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,88,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,89,* @param p Is the percentile to evaluate to.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,90,* @return the result of the evaluation or Double.NaN
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,91,* if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,93,"public double evaluate(final double[] values, final double p) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,94,"return evaluate(values, 0, values.length, p);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,98,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,100,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,101,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,102,"final int start,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,103,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,105,"return evaluate(values, start, length, percentile);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,109,* Evaluates the double[] top the specified percentile.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,110,* This does not alter the interal percentile state of the
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,111,* statistic.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,112,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,113,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,114,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,115,* @param p Is the percentile to evaluate to.*
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,116,* @return the result of the evaluation or Double.NaN
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,117,* if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,119,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,120,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,121,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,122,"final int length,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,123,final double p) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,125,"test(values, begin, length);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,127,if ((p > 100) || (p <= 0)) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,128,"throw new IllegalArgumentException(""invalid percentile value"");"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,130,double n = (double) length;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,131,if (n == 0) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,132,return Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,134,if (n == 1) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,135,return values[begin]; // always return single value for n = 1
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,137,double pos = p * (n + 1) / 100;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,138,double fpos = Math.floor(pos);
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,139,int intPos = (int) fpos;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,140,double dif = pos - fpos;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,141,double[] sorted = new double[length];
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,142,"System.arraycopy(values, begin, sorted, 0, length);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,143,Arrays.sort(sorted);
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,145,if (pos < 1) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,146,return sorted[0];
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,148,if (pos >= n) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,149,return sorted[length - 1];
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,151,double lower = sorted[intPos - 1];
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,152,double upper = sorted[intPos];
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,153,return lower + dif * (upper - lower);
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,157,* The default internal state of this percentile can be set.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,158,* This will return that value.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,159,* @return percentile
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,161,public double getPercentile() {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,162,return percentile;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,166,* The default internal state of this percentile can be set.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,167,* This will setthat value.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,168,* @param p a value between 0 <= p <= 100
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,170,public void setPercentile(final double p) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,171,percentile = p;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,54,package org.apache.commons.math.stat.univariate.summary;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,62,.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,65,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,67,public class Product extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,70,* The current Running Product.
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,72,private double value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,75,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,77,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,78,if (Double.isNaN(value)) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,79,value = d;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,80,} else {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,81,value *= d;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,86,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,88,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,89,return value;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,93,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,95,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,96,value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,100,* Returns the product for this collection of values
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,101,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,102,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,103,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,104,* @return the product values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,105,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,107,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,108,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,109,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,110,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,111,double product = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,112,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,113,product = 1.0;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,114,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,115,product *= values[i];
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,118,return product;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,54,package org.apache.commons.math.stat.univariate.summary;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,56,import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,59,* @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:23 $
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,61,public class Sum extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,64,* The currently running sum.
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,66,private double value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,69,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,71,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,72,if (Double.isNaN(value)) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,73,value = d;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,74,} else {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,75,value += d;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,80,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,82,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,83,return value;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,87,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,89,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,90,value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,94,* The sum of the values that have been added to Univariate.
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,95,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,96,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,97,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,98,* @return the sum of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,99,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,101,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,102,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,103,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,104,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,105,double sum = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,106,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,107,sum = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,108,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,109,sum += values[i];
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,112,return sum;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,54,package org.apache.commons.math.stat.univariate.summary;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,62,.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,65,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,67,public class SumOfLogs extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,70,* The currently running value
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,72,private double value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,75,private boolean init = true;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,78,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,80,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,81,if (init) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,82,value = Math.log(d);
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,83,init = false;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,84,} else {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,85,value += Math.log(d);
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,90,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,92,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,93,return value;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,97,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,99,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,100,value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,101,init = true;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,105,* Returns the sum of the natural logs for this collection of values
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,106,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,107,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,108,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,109,* @return the sumLog value or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,110,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,112,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,113,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,114,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,115,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,116,double sumLog = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,117,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,118,sumLog = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,119,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,120,sumLog += Math.log(values[i]);
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,123,return sumLog;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,9,* are met:
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,54,package org.apache.commons.math.stat.univariate.summary;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,62,.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,65,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,67,public class SumOfSquares extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,70,* The currently running sumSq
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,72,private double value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,75,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,77,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,78,if (Double.isNaN(value)) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,79,value = d * d;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,80,} else {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,81,value += d * d;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,86,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,88,public double getResult() {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,89,return value;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,93,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,95,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,96,value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,100,* Returns the sum of the squares of the available values.
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,101,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,102,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,103,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,104,* @return the sum of the squared values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,105,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,107,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,108,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,109,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,110,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,111,double sumSq = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,112,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,113,sumSq = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,114,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,115,"sumSq += Math.pow(values[i], 2.0);"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,118,return sumSq;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,5,* reserved.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,9,* are met:
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,56,import java.lang.reflect.InvocationTargetException;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,57,import org.apache.commons.beanutils.PropertyUtils;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,58,import org.apache.commons.logging.LogFactory;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,61,* Uses PropertyUtils to map a Bean getter to a double value.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,62,* @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,64,public class BeanTransformer implements NumberTransformer {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,67,* The propertyName for this Transformer
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,69,private String propertyName;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,72,* Create a BeanTransformer
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,74,public BeanTransformer() {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,75,this(null);
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,79,* Create a BeanTransformer with a specific PropertyName.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,80,* @param property The property.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,82,public BeanTransformer(final String property) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,83,super();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,84,setPropertyName(property);
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,88,* Get the property String
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,89,* @return the Property Name String
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,91,public String getPropertyName() {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,92,return propertyName;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,96,* Set the propertyString
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,97,* @param string The string to set the property to.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,99,public void setPropertyName(final String string) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,100,propertyName = string;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,104,* @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,106,public double transform(final Object o) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,107,double d = Double.NaN;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,108,try {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,109,d =
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,110,"((Number) PropertyUtils.getProperty(o, getPropertyName()))"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,111,.doubleValue();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,112,} catch (IllegalAccessException e) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,113,LogFactory.getLog(getClass()).error(
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,114,"""Property can not be accessed.  Using NaN."", e);"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,115,} catch (InvocationTargetException e) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,116,LogFactory.getLog(getClass()).error(
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,117,"""Property accessor method threw an exception.  Using NaN."", e);"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,118,e.printStackTrace();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,119,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,120,LogFactory.getLog(getClass()).error(
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,121,"""Property accessor method does not exist.  Using NaN."", e);"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,123,return d;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,5,* reserved.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,9,* are met:
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,56,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,57,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,60,* Provides a generic means to evaluate continued fractions.  Subclasses simply
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,61,* provided the a and b coefficients to evaluate the continued fraction.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,63,* References:
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,64,* <ul>
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,65,"* <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,66,* Continued Fraction</a></li>
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,67,* </ul>
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,68,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,70,public abstract class ContinuedFraction {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,71,/** Maximum allowed numerical error. */
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,72,private static final double DEFAULT_EPSILON = 10e-9;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,75,* Default constructor.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,77,protected ContinuedFraction() {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,78,super();
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,82,* Access the n-th a coefficient of the continued fraction.  Since a can be
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,83,"* a function of the evaluation point, x, that is passed in as well."
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,84,* @param n the coefficient index to retrieve.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,85,* @param x the evaluation point.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,86,* @return the n-th a coefficient.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,88,"protected abstract double getA(int n, double x);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,91,* Access the n-th b coefficient of the continued fraction.  Since b can be
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,92,"* a function of the evaluation point, x, that is passed in as well."
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,93,* @param n the coefficient index to retrieve.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,94,* @param x the evaluation point.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,95,* @return the n-th b coefficient.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,97,"protected abstract double getB(int n, double x);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,100,* Evaluates the continued fraction at the value x.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,101,* @param x the evaluation point.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,102,* @return the value of the continued fraction evaluated at x.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,103,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,105,public double evaluate(double x) throws MathException {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,106,"return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,110,* Evaluates the continued fraction at the value x.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,111,* @param x the evaluation point.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,112,* @param epsilon maximum error allowed.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,113,* @return the value of the continued fraction evaluated at x.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,114,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,116,"public double evaluate(double x, double epsilon) throws MathException {"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,117,"return evaluate(x, epsilon, Integer.MAX_VALUE);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,121,* Evaluates the continued fraction at the value x.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,122,* @param x the evaluation point.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,123,* @param maxIterations maximum number of convergents
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,124,* @return the value of the continued fraction evaluated at x.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,125,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,127,"public double evaluate(double x, int maxIterations) throws MathException {"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,128,"return evaluate(x, DEFAULT_EPSILON, maxIterations);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,132,* Evaluates the continued fraction at the value x.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,134,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,135,* <ul>
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,136,"* <li>O. E-gecio-glu, C . K. Koc, J. Rifa i Coma,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,137,"* <a href=""http://citeseer.nj.nec.com/egecioglu91fast.html"">"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,138,"* Fast Computation of Continued Fractions</a>, Computers Math. Applic.,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,139,"* 21(2--3), 1991, 167--169.</li>"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,140,* </ul>
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,142,* @param x the evaluation point.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,143,* @param epsilon maximum error allowed.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,144,* @param maxIterations maximum number of convergents
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,145,* @return the value of the continued fraction evaluated at x.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,146,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,148,"public double evaluate(double x, double epsilon, int maxIterations)"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,149,throws MathException
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,151,double[][] f = new double[2][2];
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,152,double[][] a = new double[2][2];
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,153,double[][] an = new double[2][2];
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,155,"a[0][0] = getA(0, x);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,156,a[0][1] = 1.0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,157,a[1][0] = 1.0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,158,a[1][1] = 0.0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,160,"return evaluate(1, x, a, an, f, epsilon, maxIterations);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,164,"* Evaluates the n-th convergent, fn = pn / qn, for this continued fraction"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,165,* at the value x.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,166,* @param n the convergent to compute.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,167,* @param x the evaluation point.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,168,* @param a (n-1)-th convergent matrix.  (Input)
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,169,* @param an the n-th coefficient matrix. (Output)
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,170,* @param f the n-th convergent matrix. (Output)
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,171,* @param epsilon maximum error allowed.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,172,* @param maxIterations maximum number of convergents
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,173,* @return the value of the the n-th convergent for this continued fraction
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,174,*         evaluated at x.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,175,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,177,private double evaluate(
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,178,"int n,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,179,"double x,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,180,"double[][] a,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,181,"double[][] an,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,182,"double[][] f,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,183,"double epsilon,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,184,int maxIterations) throws MathException
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,186,double ret;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,188,// create next matrix
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,189,"an[0][0] = getA(n, x);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,190,an[0][1] = 1.0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,191,"an[1][0] = getB(n, x);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,192,an[1][1] = 0.0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,194,"// multiply a and an, save as f"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,195,f[0][0] = (a[0][0] * an[0][0]) + (a[0][1] * an[1][0]);
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,196,f[0][1] = (a[0][0] * an[0][1]) + (a[0][1] * an[1][1]);
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,197,f[1][0] = (a[1][0] * an[0][0]) + (a[1][1] * an[1][0]);
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,198,f[1][1] = (a[1][0] * an[0][1]) + (a[1][1] * an[1][1]);
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,200,// determine if we're close enough
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,201,if (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) <
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,202,Math.abs(epsilon * f[1][0] * f[1][1]))
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,204,ret = f[0][0] / f[1][0];
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,205,} else {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,206,if (n >= maxIterations) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,207,throw new ConvergenceException(
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,208,"""Continued fraction convergents failed to converge."");"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,210,// compute next
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,211,"ret = evaluate(n + 1, x, f /* new a */"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,212,", an /* reuse an */"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,213,", a /* new f */"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,214,", epsilon, maxIterations);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,217,return ret;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,5,* reserved.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,9,* are met:
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,59,* <p>
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,60,* A variable length double array implementation and extension of
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,61,* ExpandableDoubleArray which automatically handles expanding and
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,62,* contracting double arrays.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,63,* </p>
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,65,* <p>
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,66,* This class extends the functionality of ExpandableDoubleArray and
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,67,* inherits the expansion parameters from that class.  If a developer
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,68,* instantiates a ContractableDoubleArray and only adds values to
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,69,"* that instance, the behavior of this class is no different from"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,70,"* the behavior of the super-class ExpandableDoubleArray.  If, on the"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,71,"* other hand, elements are removed from the array, this implementation"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,72,* tests an additional parameter <code>contractionCriteria</code>.  The
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,73,* <code>contractionCriteria</code> dictates when this implementation
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,74,* will contract the size of the internal storage array to
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,75,* the number of elements + 1.  This check is performed after every
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,76,* operation that alters the number of elements in the array.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,77,* </p>
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,79,* <p>
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,80,* Note that the contractionCriteria must always be greater than the
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,81,* expansionFactor.  If this were not the case (assume a
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,82,* contractionCriteria of 1.5f and a expansionFactor of 2.0f) an
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,83,* endless series of expansions and contractions would occur.  If the
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,84,* length of this array is highly varied over time it is a good idea
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,85,* to trade efficient memory usage for performance.  Each time an array
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,86,* is expanded or contracted the meaningful portions of the internal
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,87,* storage array are copied to a new array and the reference to the
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,88,* internal storage array is swapped.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,89,* </p>
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,91,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,93,public class ContractableDoubleArray
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,94,extends ExpandableDoubleArray
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,95,implements Serializable {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,97,/** The contraction criteria defines the conditions under which this
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,98,"* object will ""resize"" the internal array to the number of elements"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,99,* contained in the element array + 1
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,101,private float contractionCriteria = 2.5f;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,104,* Create an expandable double array with the default initial capacity of
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,105,"* 16, an expansion factor of 2.00, and a contractionCriteria of 2.5"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,107,public ContractableDoubleArray() {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,108,super();
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,112,"* Create an expandable double array with the specified initial capacity,"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,113,"* the defult expansion factor of 2.00, and a contractionCriteria of 2.5"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,115,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,117,public ContractableDoubleArray(int initialCapacity) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,118,super(initialCapacity);
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,122,* Create an expandable double array with the specificed initial capacity
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,123,"* and expand factor, with a contractionCriteria of 2.5"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,125,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,126,* @param expansionFactor the array will be expanded based on this
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,127,*                        parameter
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,129,public ContractableDoubleArray(
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,130,"int initialCapacity,"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,131,float expansionFactor) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,132,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,133,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,134,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,135,"checkContractExpand(getContractionCriteria(), expansionFactor);"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,139,* Create an expandable double array with the
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,140,"* specificed initial capacity, expand factor, and contractionCriteria"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,142,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,143,* @param expansionFactor the array will be expanded based on this
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,144,*                        parameter
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,145,* @param contractionCriteria The contraction Criteria.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,147,public ContractableDoubleArray(
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,148,"int initialCapacity,"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,149,"float expansionFactor,"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,150,float contractionCriteria) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,151,this.contractionCriteria = contractionCriteria;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,152,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,153,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,154,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,155,"checkContractExpand(contractionCriteria, expansionFactor);"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,159,* Contracts the storage array to the (size of the element set) + 1 - to
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,160,* avoid a zero length array. This function also resets the startIndex to
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,161,* zero.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,163,public synchronized void contract() {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,164,double[] tempArray = new double[numElements + 1];
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,166,// Copy and swap - copy only the element array from the src array.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,167,"System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,168,internalArray = tempArray;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,170,// Reset the start index to zero
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,171,startIndex = 0;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,175,* Adds an element to the end of this expandable array
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,177,* @param value to be added to end of array
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,179,public synchronized void addElement(double value) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,180,super.addElement(value);
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,181,if (shouldContract()) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,182,contract();
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,187,* <p>
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,188,* Adds an element to the end of this expandable array and
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,189,* discards a value from the front of the array.  This method
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,190,* has the effect of adding a value to the end of the list
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,191,* and discarded an element from the front of the list.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,192,* </p>
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,194,* <p>
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,195,"* When an array rolls it actually ""scrolls"" the element array in"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,196,* the internal storage array.  An element is added to the end of the
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,197,"* array, and the first element of the array is discard by incrementing"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,198,* the starting index of the element array within the internal
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,199,* storage array.  Over time this will create an orphaned prefix
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,200,* to the element array within the internal storage array.  If this
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,201,"* function is called frequently, this orphaned prefix list will"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,202,* gradually push the internal storage vs. element storage to
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,203,* the contractionCriteria.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,204,* </p>
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,205,* @param value to be added to end of array
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,206,* @return value added
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,208,public synchronized double addElementRolling(double value) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,209,double discarded = super.addElementRolling(value);
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,210,// Check the contraction criteria
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,211,if (shouldContract()) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,212,contract();
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,214,return discarded;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,218,* Should contract returns true if the ratio of (internal storage length)
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,219,* to (number of elements) is larger than the contractionCriteria value.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,220,"* In other words, using the default value of 2.5, if the internal storage"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,221,"* array provides more than 2.5x the space needed to store numElements,"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,222,* then this function returns true
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,224,* @return true if array satisfies the contraction criteria
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,226,private synchronized boolean shouldContract() {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,227,boolean shouldContract = false;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,228,if ((internalArray.length / numElements) > contractionCriteria) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,229,shouldContract = true;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,231,return shouldContract;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,235,"* @see org.apache.commons.math.util.DoubleArray#setElement(int, double)"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,237,"public synchronized void setElement(int index, double value) {"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,238,"super.setElement(index, value);"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,239,if (shouldContract()) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,240,contract();
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,245,* Method invokes the super class' setExpansionFactor but first it
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,246,* must validate the combination of expansionFactor and
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,247,* contractionCriteria.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,249,* @see org.apache.commons.math.util.ExpandableDoubleArray#setExpansionFactor(float)
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,251,public void setExpansionFactor(float expansionFactor) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,252,"checkContractExpand(getContractionCriteria(), expansionFactor);"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,253,super.setExpansionFactor(expansionFactor);
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,257,* The contraction criteria defines when the internal array will contract
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,258,* to store only the number of elements in the element array.  This
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,259,* contractionCriteria gaurantees that the internal storage array will
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,260,* never exceed this factor more than the space needed to store
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,261,* numElements.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,263,* @return the contraction criteria used to reclaim memory when array is
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,264,*         empty
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,266,public float getContractionCriteria() {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,267,return contractionCriteria;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,271,* Sets the contraction criteria for this ExpandContractDoubleArray.
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,273,* @param contractionCriteria contraction criteria
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,275,public void setContractionCriteria(float contractionCriteria) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,276,"checkContractExpand(contractionCriteria, getExpansionFactor());"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,278,this.contractionCriteria = contractionCriteria;
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,282,* Checks the expansion factor and the contraction criteria and throws an
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,283,* IllegalArgumentException if the contractionCriteria is less than the
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,284,* expansionCriteria
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,286,* @param expansionFactor factor to be checked
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,287,* @param contractionCritera critera to be checked
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,289,protected void checkContractExpand(
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,290,"float contractionCritera,"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,291,float expansionFactor) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,293,if (contractionCritera < expansionFactor) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,294,String msg =
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,295,"""Contraction criteria can never be smaller than "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,296,"""the expansion factor.  This would lead to a never "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,297,"""ending loop of expansion and contraction as a newly "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,298,"""expanded internal storage array would immediately "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,299,"""satisfy the criteria for contraction"";"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,300,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,303,if (contractionCriteria <= 1.0) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,304,String msg =
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,305,"""The contraction criteria must be a number larger "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,306,"""than one.  If the contractionCriteria is less than or "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,307,"""equal to one an endless loop of contraction and "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,308,"""expansion would ensue as an internalArray.length "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,309,"""== numElements would satisfy the contraction criteria"";"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,310,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,313,if (expansionFactor < 1.0) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,314,String msg =
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,315,"""The expansion factor must be a number greater than 1.0"";"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,316,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,321,* @see org.apache.commons.math.util.ExpandableDoubleArray#discardFrontElements(int)
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,323,public synchronized void discardFrontElements(int i) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,324,super.discardFrontElements(i);
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,325,if (shouldContract()) {
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,326,contract();
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,5,* reserved.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,9,* are met:
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,55,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,57,import org.apache.commons.beanutils.ConversionException;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,58,import org.apache.commons.beanutils.converters.DoubleConverter;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,61,* A Default NumberTransformer for java.lang.Numbers and Numeric Strings.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,62,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,64,public class DefaultTransformer implements NumberTransformer {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,65,/** Converter used to transform objects. */
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,66,private static final DoubleConverter converter =
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,67,new DoubleConverter(new Double(Double.NaN));
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,70,* @see org.apache.commons.collections.Transformer#transform(java.lang.Object)
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,72,public double transform(Object o) {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,73,double d;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,74,try {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,75,"d = ((Double)converter.convert(Double.class, o)).doubleValue();"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,76,} catch(ConversionException ex){
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,77,d = Double.NaN;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,79,return d;
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,5,* reserved.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,9,* are met:
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,58,* Provides a single interface for dealing with various flavors
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,59,* of double arrays.  This arrays framework follows the model of the
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,60,* Collections API by allowing a user to select from a number of
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,61,* array implementations with support for various storage mechanisms
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,62,"* such as automatic expansion, contraction, and array ""rolling""."
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,63,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,65,public interface DoubleArray {
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,68,* Returns the number of elements currently in the array.  Please note
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,69,* that this is different from the length of the internal storage array.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,70,* @return number of elements
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,72,int getNumElements();
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,75,* Returns the element at the specified index.  Note that if an
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,76,* out of bounds index is supplied a ArrayIndexOutOfBoundsException
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,77,* will be thrown.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,79,* @param index index to fetch a value from
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,80,* @return value stored at the specified index
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,83,double getElement(int index);
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,86,* Sets the element at the specified index.  This method will expand the
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,87,* internal storage array to accomodate the insertion of a value at an
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,88,* index beyond the current capacity.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,89,* @param index index to store a value in
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,90,* @param value value to store at the specified index
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,92,"void setElement(int index, double value);"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,95,* Adds an element to the end of this expandable array
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,97,* @param value to be added to end of array
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,99,void addElement(double value);
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,102,* Adds an element and moves the window of elements up one.  This
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,103,"* has the effect of a FIFO.  when you ""roll"" the array an element is"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,104,* removed from the array.  The return value of this function is the
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,105,* discarded double.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,107,* @param value the value to be added to the array
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,108,"* @return the value which has been discarded or ""pushed"" out of the array"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,109,*         by this rolling insert.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,111,double addElementRolling(double value);
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,114,* Returns a double[] of elements
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,116,* @return all elements added to the array
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,118,double[] getElements();
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,121,* Clear the double array
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,123,void clear();
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,5,* reserved.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,9,* are met:
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,59,* <p>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,60,* A DoubleArray implementation which automatically expands
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,61,* an internal double array to handle an array of arbitrary length.  This
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,62,* implementation of DoubleArray is provided to support scenarios in
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,63,"* which the ultimate length of an array is unknown, and the"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,64,* developer can control the expansion process through the
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,65,* <code>initialCapacity</code> and <code>expansionFactor</code>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,66,* parameters.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,67,* </p>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,69,* <p>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,70,* This implementation also allows a developer to:
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,71,* <ul>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,72,*  <li>Resize an array via <code>setNumElements(int)</code></li>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,73,*  <li>Discard elements from the front of an array via
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,74,*      <code>discardFrontElements(int)</code></li>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,75,*  <li>Find the minimum and maximum values stored in this array</li>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,76,* </ul>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,77,* </p>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,79,* <p>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,80,* The initialCapacity parameter sets the capacity of the initial
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,81,"* storage array, and the expansionFactor is the factor by which"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,82,* the current storage capacity is multiplied each time the internal
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,83,* array needs to be expanded.  <b>Please note</b> that the length of the
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,84,* internal storage array has nothing to do with the number of elements
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,85,* currently stored in this array.  If one creates an instance of this
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,86,"* class with an initialCapacity of ""2"" and an expansion factor of ""2"", and"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,87,"* then adds 3546 elements to the array, this implementation will need to"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,88,"* expand the array 10 times - first from 2 -> 4. then 4 -> 8, 8 -> 16,"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,89,* and so on until we reach 4096 which is sufficient to hold 3546 elements.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,90,* </p>
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,91,* @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,93,"public class ExpandableDoubleArray implements Serializable, DoubleArray {"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,95,"// TODO: expansionFactor is valuable, by if I only need storage"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,96,"// for 1025 items and I use the default settings, I'll end up"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,97,// with enough storage for 2048 elements.  Maybe this implementation
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,98,"// should have flags for incremental growth - (i.e. when expanding, only"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,99,"// increase storage by a constant size - 100, 200 ) ?"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,102,* This is the internal storage array.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,104,protected double[] internalArray;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,107,* Number of elements in the array
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,109,protected int numElements = 0;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,112,* Keeps track of a starting index
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,114,protected int startIndex = 0;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,116,/**The initial capacity of the array.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,117,* Initial capacity is not exposed as a property as it is only meaningful
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,118,* when passed to a constructor.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,120,protected int initialCapacity = 16;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,122,"/** The expand factor of the array.  When the array need to be expanded,"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,123,* the new array size will be internalArray.length * expandFactor
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,125,protected float expansionFactor = 2.0f;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,128,* Create an expandable double array with the
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,129,* default initial capactiy of 16 and an expansion factor of 2.00
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,131,public ExpandableDoubleArray() {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,132,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,136,* Create an expandable double array with the
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,137,* specified initial capacity and the defult expansion factor of 2.00
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,139,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,141,public ExpandableDoubleArray(int initialCapacity) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,142,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,143,internalArray = new double[this.initialCapacity];
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,147,* Create an expandable double array with the
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,148,* specificed initial capacity and expand factor.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,150,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,151,* @param expansionFactor the array will be expanded based on this
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,152,*                        parameter
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,154,"public ExpandableDoubleArray(int initialCapacity, float expansionFactor) {"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,155,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,156,setExpansionFactor(expansionFactor);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,157,this.initialCapacity = initialCapacity;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,158,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,162,* The expansion factor controls the size of a new aray when an array
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,163,"* needs to be expanded. When a value is inserted into a full array, the"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,164,* new array size is calculated as the current array size times this
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,165,* expansion factor.  The default expansion factor is 2.0
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,167,* @return the expansion factor of this expandable double array
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,169,public float getExpansionFactor() {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,170,return expansionFactor;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,174,* Sets the expansion factor for this expandable double array.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,175,* The expansion factor will affect the next expansion of this array.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,177,* @param expansionFactor the expansion factor of this array
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,179,public void setExpansionFactor(float expansionFactor) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,181,"// The expansion factor *must* be larger than 1.0, otherwise we'll"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,182,// have an inconsistency upon expansion we'll start shrinking which
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,183,// will lead to ArrayIndexOutOfBound exceptions.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,184,if (expansionFactor > 1.0) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,185,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,186,} else {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,187,String msg =
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,188,"""The expansion factor must be a number greater "" + ""than 1.0"";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,189,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,194,* Sets the initial capacity
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,195,* @param initialCapacity of the array
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,197,public void setInitialCapacity(int initialCapacity) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,198,if (initialCapacity > 0) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,199,this.initialCapacity = initialCapacity;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,200,} else {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,201,String msg =
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,202,"""The initial capacity supplied: "" + initialCapacity +"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,203,"""must be a positive integer"";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,204,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,209,* Returns the internal storage array
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,211,* @return the internal storage array used by this object
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,213,public double[] getValues() {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,214,return (internalArray);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,218,* Returns the starting index of the internal array.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,219,* @return starting index
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,221,public int start() {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,222,return startIndex;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,226,* Returns the number of elements currently in the array.  Please note
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,227,* that this is different from the length of the internal storage array.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,228,* @return number of elements
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,230,public int getNumElements() {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,231,return (numElements);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,235,* This function allows you to control the number of elements contained
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,236,"* in this array, and can be used to ""throw"" out the last n values in an"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,237,* array.  This feature is mainly targetted at the subclasses of this
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,238,* array class.  Note that this function will also expand the internal
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,239,* array as needed.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,241,* @param i a new number of elements
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,243,public synchronized void setNumElements(int i) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,245,// If index is negative thrown an error
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,246,if (i < 0) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,247,String msg =
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,248,"""Number of elements must be zero or a positive "" + ""integer"";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,249,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,252,"// Test the new num elements, check to see if the array needs to be"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,253,// expanded to accomodate this new number of elements
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,254,if ((startIndex + i) > internalArray.length) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,255,expandTo(startIndex + i);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,258,// Set the new number of elements to new value
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,259,numElements = i;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,263,* Returns the element at the specified index
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,265,* @param index index to fetch a value from
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,266,* @return value stored at the specified index
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,268,public double getElement(int index) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,269,double value = Double.NaN;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,270,if (index >= numElements) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,271,String msg =
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,272,"""The index specified: "" + index +"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,273,""" is larger than the current number of elements"";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,274,throw new ArrayIndexOutOfBoundsException(msg);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,275,} else if (index >= 0) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,276,value = internalArray[startIndex + index];
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,277,} else {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,278,String msg =
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,279,"""Elements cannot be retrieved from a negative array index"";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,280,throw new ArrayIndexOutOfBoundsException(msg);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,282,return value;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,286,* Sets the element at the specified index.  This method will expand the
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,287,* internal storage array to accomodate the insertion of a value at an
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,288,* index beyond the current capacity.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,290,* @param index index to store a value in
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,291,* @param value value to store at the specified index
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,293,"public synchronized void setElement(int index, double value) {"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,295,if (index < 0) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,296,"String msg = ""Cannot set an element at a negative index"";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,297,throw new ArrayIndexOutOfBoundsException(msg);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,300,if ((startIndex + index) >= internalArray.length) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,301,expandTo(startIndex + (index + 1));
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,302,numElements = index + 1;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,304,internalArray[startIndex + index] = value;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,308,* Expands the internal storage array to the specified size.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,310,* @param size Size of the new internal storage array
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,312,private synchronized void expandTo(int size) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,313,double[] tempArray = new double[size];
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,314,// Copy and swap
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,315,"System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,316,internalArray = tempArray;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,320,* Expands the internal storage array using the expansion factor
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,322,protected synchronized void expand() {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,324,"// notice the use of Math.ceil(), this gaurantees that we will always"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,325,// have an array of at least currentSize + 1.   Assume that the
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,326,// current initial capacity is 1 and the expansion factor
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,327,// is 1.000000000000000001.  The newly calculated size will be
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,328,// rounded up to 2 after the multiplication is performed.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,329,int newSize = (int) Math.ceil(internalArray.length * expansionFactor);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,330,double[] tempArray = new double[newSize];
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,332,// Copy and swap
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,333,"System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,334,internalArray = tempArray;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,338,* Adds an element to the end of this expandable array
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,340,* @param value value to be added to end of array
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,342,public synchronized void addElement(double value) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,343,numElements++;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,344,if ((startIndex + numElements) > internalArray.length) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,345,expand();
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,347,internalArray[startIndex + (numElements - 1)] = value;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,351,* Adds an element and moves the window of elements up one.  This
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,352,"* has the effect of a FIFO.  when you ""roll"" the array an element is"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,353,* removed from the array.  The return value of this function is the
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,354,* discarded double.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,355,* @param value the value to add
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,356,"* @return the value which has been discarded or ""pushed"" out of the array"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,357,* by this rolling insert.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,359,public synchronized double addElementRolling(double value) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,360,double discarded = internalArray[startIndex];
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,362,if ((startIndex + (numElements + 1)) > internalArray.length) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,363,expand();
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,365,// Increment the start index
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,366,startIndex += 1;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,368,// Add the new value
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,369,internalArray[startIndex + (numElements - 1)] = value;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,371,return discarded;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,375,* Notice the package scope on this method.   This method is simply here
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,376,"* for the JUnit test, it allows us check if the expansion is working"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,377,* properly after a number of expansions.  This is not meant to be a part
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,378,* of the public interface of this class.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,380,* @return the length of the internal storage array.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,382,int getInternalLength() {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,383,return (internalArray.length);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,387,"* Clear the array, reset the size to the initialCapacity and the number"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,388,* of elements to zero.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,390,public synchronized void clear() {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,391,numElements = 0;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,392,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,396,* Discards values from the front of the list.  This function removes n
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,397,* elements from the front of the array.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,399,* @param i number of elements to discard from the front of the array.
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,401,public synchronized void discardFrontElements(int i) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,403,if (i > numElements) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,404,"String msg = ""Cannot discard more elements than are"" +"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,405,"""contained in this array."";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,406,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,407,} else if (i < 0) {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,408,"String msg = ""Cannot discard a negative number of elements."";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,409,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,410,} else {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,411,"// ""Subtract"" this number of discarded from numElements"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,412,numElements -= i;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,413,startIndex += i;
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,418,* @see org.apache.commons.math.util.DoubleArray#getElements()
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,420,public double[] getElements() {
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,421,double[] elementArray = new double[numElements];
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,422,System.arraycopy(
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,423,"internalArray,"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,424,"startIndex,"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,425,"elementArray,"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,426,"0,"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,427,numElements);
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,428,return elementArray;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,5,* reserved.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,9,* are met:
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,57,* <p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,58,* Provides an implementation of the DoubleArray with a maximum number of
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,59,* elements.  Creating an array implementation with an upper limit on the
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,60,"* number of elements allows us to support a more efficient ""rolling"""
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,61,* mechanism to support addElementRoling(double). Please note that this
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,62,* implementation will not preserve the order of the values supplied to
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,63,"* this array, calling getValues() will return an array of indeterminate"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,64,* order.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,65,* </p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,67,* <p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,68,* Values are added to this array by calling addElement(double) or
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,69,* addElementRolling(double).  If addElement(double) is called on
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,70,"* an array that already contains the maximum number of elements, an"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,71,* ArrayIndexOutOfBoundsException will be thrown to reflect an attempt to
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,72,* add a value beyond the boundaries of the fixed length array - in this
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,73,"* respect a FixedDoubleArray can be considered ""full"".  Calling"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,74,* addElementRolling(double) on an array which contains the maximum
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,75,"* number of elements will cause the array to overwrite the ""oldest"""
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,76,* value in the array.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,77,* </p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,79,* <p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,80,* This class is called FixedDoubleArray not because it is of a fixed size.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,81,* The name is appropriate because the internal storage array remains
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,82,"* ""fixed"" in memory, this implementation will never allocate, or copy"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,83,* the internal storage array to a new array instance.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,84,* </p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,85,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,87,public class FixedDoubleArray implements DoubleArray {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,90,* This is the internal storage array.  This array is assigned
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,91,* a known fixed size in the constructor
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,93,private double[] internalArray;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,96,* Size determined the number of elements in the array at
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,97,* any given time. When an array is created is maxElements
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,98,"* of 100, it is of size 0, and size increases as values are"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,99,* added.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,101,private int size = 0;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,104,* This index points to the location of the next update.  Next
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,105,"* add, cycles from 0 to (maxElement-1)"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,107,private int nextAdd = 0;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,110,* The maximum number of elements in the FixedDoubleArray
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,112,private int maxElements = 0;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,115,* Create a fixed array for double primitives which can hold up to
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,116,* <code>maxElements</codec> doubles.  This implementation of
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,117,"* DoubleArray was created to provide a more ""performance-oriented"""
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,118,* in-place rolling mechanism for calculations which need to
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,119,* operate on a rolling window of values.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,121,* @param maxElements the maximum number of elements this
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,122,*        FixeddoubleArray may contain.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,124,public FixedDoubleArray(int maxElements) {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,125,this.maxElements = maxElements;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,126,internalArray = new double[maxElements];
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,130,* Create a fixed array backed by the provided double[] implementation.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,131,* the array should have all the elements occupied. the size and maxElements
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,132,* are drawn from the array's length.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,134,* This implementation of DoubleArray was created to provide a more
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,135,"* ""performance-oriented"" in-place rolling mechanism for calculations"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,136,* which need to operate on a rolling window of values.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,137,* @param array the backing array
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,139,public FixedDoubleArray(double[] array) {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,140,this.maxElements = array.length;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,141,this.size = array.length;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,142,internalArray = array;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,146,* Retrieves the current size of the array.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,147,* @see org.apache.commons.math.util.DoubleArray#getNumElements()
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,149,public int getNumElements() {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,150,return size;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,154,* Returns the element value at the specified index.  Please note that
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,155,* the size of the element array is not directly related to the
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,156,* maximum number of elements which this array can contain.  One can
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,157,* create an instance of FixedDoubleArray with a maximum of
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,158,"* ten elements, add three items, and get any items from index 0 to index"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,159,* 2 - trying to retrieve an element outside of the current element
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,160,* array will throw an ArrayIndexOutOfBoundsException.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,162,* @see org.apache.commons.math.util.DoubleArray#getElement(int)
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,164,public double getElement(int index) {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,165,if (index > (size - 1)) {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,166,String msg =
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,167,"""Attempted to retrieve an element outside of "" +"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,168,"""the element array"";"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,169,throw new ArrayIndexOutOfBoundsException(msg);
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,170,} else {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,171,"// Return the element requested, if the index supplied"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,172,// is negative this statement may also throw an
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,173,// ArrayIndexOutOfBoundException.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,174,return internalArray[index];
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,179,* <p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,180,* Sets the element at the specified index to the value supplied.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,181,* </p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,183,* <p>Implementation Notes:
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,184,* <ul>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,185,*  This implementation will not expand the array to the specified
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,186,*  size.  Unlike the expandable double array implementation calling
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,187,"*  setElement(10, 3.0) on an array with 5 elements will throw an"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,188,*  ArrayIndexOutOfBoundsException.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,189,* </ul>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,190,* <ul>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,191,*  The number of elements in an array corresponds to the number
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,192,*  of elements that have been added to this FixedDoubleArray.  This
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,193,*  is not the same as the maximum number of elements which can be
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,194,*  contained in this array.  A FixedDoubleArray instance can be
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,195,"*  created with a maximum upper limit of 10 elements, until 10"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,196,"*  elements have been added to this array, the size of the array"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,197,*  reflects the number of elements added.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,198,* </ul>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,199,* </p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,201,"* @see org.apache.commons.math.util.DoubleArray#setElement(int, double)"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,203,"public void setElement(int index, double value) {"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,204,if (index > (size - 1)) {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,205,String msg =
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,206,"""Attempted to set an element outside of"" + ""the element array"";"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,207,throw new ArrayIndexOutOfBoundsException(msg);
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,208,} else {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,209,internalArray[index] = value;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,214,"* Add an element to the current array, testing to see if"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,215,* this array has already met or exceeded the maximum number
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,216,* of elements
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,218,* @see org.apache.commons.math.util.DoubleArray#addElement(double)
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,220,public void addElement(double value) {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,221,if (size < internalArray.length) {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,222,size++;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,224,internalArray[nextAdd] = value;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,226,// Incremenet nextAdd and then modulo it against maxElements
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,227,"// this has the effect of repeatedly ""cycling"" nextAdd"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,228,// between 0 and (maxElements-1) endlessly.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,229,nextAdd++;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,230,nextAdd = nextAdd % (maxElements);
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,232,} else {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,233,"// If the array has ALREADY reached the maximum size allowable,"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,234,// we throw an ArrayIndexOutOfBoundsException - the end-user
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,235,// is trying to add an element beyond the boundaries of the
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,236,// fixed array.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,237,String msg =
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,238,"""Attempted to add a value to an array of fixed "" +"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,239,"""size, please use addElementRolling "" +"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,240,"""to avoid this exception"";"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,241,throw new ArrayIndexOutOfBoundsException(msg);
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,246,* <p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,247,"* Adds an element by ""rolling"" the new value into the current array"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,248,* while discarding the element which was added <code>maxElement</code>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,249,* add operations ago.  The value replaced is returned from this
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,250,"* method.  Until an array contains the maximum number of element, this"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,251,* method has the same result as the addElement(double) operation.  Once
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,252,* the maximum number of elements has been reached this implementation
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,253,* inserts the new values starting at index 0 of the internal storage
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,254,"* array.  This allows for efficient rolling, but prevents us from"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,255,* preserving the order of the added values.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,256,* </p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,258,* <p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,259,* <b>Note:</b> This function will return <code>Double.NaN</code> if
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,260,* no value has been discarded in this roll.  This can happen when
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,261,* the array has not met the size limitation introduced in the
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,262,* constructor.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,263,* </p>
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,264,* @param value the value to be added to the array
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,265,"* @return Returns the value which a has been ""removed"" from the"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,266,*         database.  <b>Important:</b> If the element array has
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,267,"*         not reached the maximum size, then it is possible that"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,268,*         no element will be discarded from a given roll.  In this
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,269,*         case this method will return a <code>Double.NaN</code> value.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,271,* @see org.apache.commons.math.util.DoubleArray#addElementRolling(double)
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,273,public double addElementRolling(double value) {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,275,// Create the discarded primitive.  If no element is
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,276,"// discarded by this roll, this method will return a"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,277,// Double.NaN value.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,278,double discarded = Double.NaN;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,280,if (size < internalArray.length) {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,281,size++;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,282,} else {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,283,// If we've reached the length of the internal
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,284,"// storage array, we have to start ""discarding"""
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,285,// values from the original array.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,287,// Obtain the value discarded by this overwrite
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,288,discarded = internalArray[nextAdd];
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,291,internalArray[nextAdd] = value;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,293,// nextAdd cycles between 0 and (maxElements-1).
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,294,nextAdd++;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,295,nextAdd = nextAdd % maxElements;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,297,"// but we return the value which was ""replaced"""
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,298,return (discarded);
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,302,* Provides an array of double[] which contain the
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,303,* number of elements added to this array.  This
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,304,* method will return an array from zero to maxElements in length.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,306,* @return The array of elements added to this DoubleArray
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,307,*         implementation.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,308,* @see org.apache.commons.math.util.DoubleArray#getElements()
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,310,public double[] getElements() {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,311,double[] copy = new double[size];
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,312,"System.arraycopy(internalArray, 0, copy, 0, size);"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,313,return copy;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,317,* Returns the internal storage array
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,319,* @return the internal storage array used by this object
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,321,public double[] getValues() {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,322,return (internalArray);
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,326,* The starting index in the InternalArray.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,327,* @return starting index.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,329,public int start() {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,330,return 0;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,334,* Clear the array - drop all the data and start with a blank
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,335,* internal array.  This implementation takes care of
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,336,"* setting the size of the array back to zero, and reinitializing"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,337,* the internal storage array.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,339,* @see org.apache.commons.math.util.DoubleArray#clear()
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,341,public void clear() {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,342,size = 0;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,343,nextAdd = 0;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,344,internalArray = new double[maxElements];
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,5,* reserved.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,9,* are met:
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,55,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,58,* Some useful additions to the built-in functions in {@link Math}.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,60,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,62,public final class MathUtils {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,65,* Private Constructor
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,67,private MathUtils() {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,71,"* For a double precision value x, this method returns +1.0 if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,72,* and -1.0 if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,73,"* @param x the value, a double"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,74,"* @return +1.0 or -1.0, depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,76,public static double sign(final double x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,77,if (x >= 0.0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,78,return 1.0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,79,} else {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,80,return -1.0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,85,"* For a float value x, this method returns +1.0F if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,86,* and -1.0F if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,87,"* @param x the value, a float"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,88,"* @return +1.0F or -1.0F, depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,90,public static float sign(final float x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,91,if (x >= 0.0F) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,92,return 1.0F;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,93,} else {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,94,return -1.0F;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,99,"* For a byte value x, this method returns (byte)(+1) if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,100,* and (byte)(-1) if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,101,"* @param x the value, a byte"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,102,"* @return (byte)(+1) or (byte)(-1), depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,104,public static byte sign(final byte x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,105,if (x >= (byte) 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,106,return (byte) 1;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,107,} else {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,108,return (byte) (-1);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,113,"* For a short value x, this method returns (short)(+1) if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,114,* and (short)(-1) if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,116,"* @param x the value, a short"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,117,"* @return (short)(+1) or (short)(-1), depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,119,public static short sign(final short x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,120,if (x >= (short) 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,121,return (short) 1;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,122,} else {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,123,return (short) (-1);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,128,"* For an int value x, this method returns +1 if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,129,* and -1 if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,131,"* @param x the value, an int"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,132,"* @return +1 or -1, depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,134,public static int sign(final int x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,135,if (x >= 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,136,return 1;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,137,} else {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,138,return -1;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,143,"* For a long value x, this method returns +1L if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,144,* and -1L if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,146,"* @param x the value, a long"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,147,"* @return +1L or -1L, depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,149,public static long sign(final long x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,150,if (x >= 0L) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,151,return 1L;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,152,} else {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,153,return -1L;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,157,* Returns an exact representation of the
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,158,"* <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,159,"* Binomial Coefficient</a>,  ""<code>n choose k</code>"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,160,* the number of <code>k</code>-element subsets that can be selected from
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,161,* an <code>n</code>-element set.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,162,* <p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,163,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,164,* <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,165,* <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,166,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,167,* <li> The result is small enough to fit into a <code>long</code>. The
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,168,*      largest value of <code>n</code> for which all coefficients are
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,169,*      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,170,* <li> The result is small enough to fit into a <code>long</code>.  The
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,171,*      largest value of <code>n</code> for which all coefficients are
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,172,*      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,173,*      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,174,*      </code> is thrown.</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,175,* </ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,178,* @param n the size of the set
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,179,* @param k the size of the subsets to be counted
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,180,* @return <code>n choose k</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,182,"public static long binomialCoefficient(final int n, final int k) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,183,if (n < k) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,184,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,185,"""must have n >= k for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,187,if (n <= 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,188,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,189,"""must have n > 0 for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,191,if ((n == k) || (k == 0)) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,192,return 1;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,194,if ((k == 1) || (k == n - 1)) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,195,return n;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,198,"long result = Math.round(binomialCoefficientDouble(n, k));"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,199,if (result == Long.MAX_VALUE) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,200,throw new ArithmeticException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,201,"""result too large to represent in a long integer"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,203,return result;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,207,* Returns a <code>double</code> representation of the
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,208,"* <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,209,"* Binomial Coefficient</a>,  ""<code>n choose k</code>"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,210,* the number of <code>k</code>-element subsets that can be selected from
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,211,* an <code>n</code>-element set.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,212,* <p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,213,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,214,* <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,215,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,216,* <li> The result is small enough to fit into a <code>double</code>.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,217,*      The largest value of <code>n</code> for which all coefficients are
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,218,*      < Double.MAX_VALUE is 1029.  If the computed value exceeds
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,219,"*      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,220,* </ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,222,* @param n the size of the set
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,223,* @param k the size of the subsets to be counted
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,224,* @return <code>n choose k</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,226,"public static double binomialCoefficientDouble(final int n, final int k) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,227,"return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,231,* Returns the natural <code>log</code> of the
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,232,"* <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,233,"* Binomial Coefficient</a>,  ""<code>n choose k</code>"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,234,* the number of <code>k</code>-element subsets that can be selected from
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,235,* an <code>n</code>-element set.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,236,* <p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,237,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,238,* <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,239,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,240,* </ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,242,* @param n the size of the set
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,243,* @param k the size of the subsets to be counted
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,244,* @return <code>n choose k</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,246,"public static double binomialCoefficientLog(final int n, final int k) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,247,if (n < k) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,248,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,249,"""must have n >= k for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,251,if (n <= 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,252,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,253,"""must have n > 0 for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,255,if ((n == k) || (k == 0)) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,256,return 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,258,if ((k == 1) || (k == n - 1)) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,259,return Math.log((double) n);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,261,double logSum = 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,263,// n!/k!
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,264,for (int i = k + 1; i <= n; i++) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,265,logSum += Math.log((double) i);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,268,// divide by (n-k)!
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,269,for (int i = 2; i <= n - k; i++) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,270,logSum -= Math.log((double) i);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,273,return logSum;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,277,* Returns n!.  Shorthand for <code>n</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,278,"* <a href=""http://mathworld.wolfram.com/Factorial.html"">"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,279,"* Factorial</a>, the product of the numbers <code>1,...,n</code>."
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,281,* <p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,282,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,283,* <li> <code>n > 0</code> (otherwise
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,284,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,285,* <li> The result is small enough to fit into a <code>long</code>.  The
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,286,*      largest value of <code>n</code> for which <code>n!</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,287,*      < Long.MAX_VALUE</code> is 20.  If the computed value
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,288,*      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,289,*      </code> is thrown.</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,290,* </ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,291,* </p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,293,* @param n argument
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,294,* @return <code>n!</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,296,public static long factorial(final int n) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,297,long result = Math.round(factorialDouble(n));
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,298,if (result == Long.MAX_VALUE) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,299,throw new ArithmeticException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,300,"""result too large to represent in a long integer"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,302,return result;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,306,* Returns n!.  Shorthand for <code>n</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,307,"* <a href=""http://mathworld.wolfram.com/Factorial.html"">"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,308,"* Factorial</a>, the product of the numbers <code>1,...,n</code> as a"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,309,* <code>double</code>.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,311,* <p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,312,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,313,* <li> <code>n > 0</code> (otherwise
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,314,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,315,* <li> The result is small enough to fit into a <code>double</code>.  The
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,316,*      largest value of <code>n</code> for which <code>n!</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,317,*      < Double.MAX_VALUE</code> is 170.  If the computed value exceeds
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,318,"*      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,319,* </ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,320,* </p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,322,* @param n argument
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,323,* @return <code>n!</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,325,public static double factorialDouble(final int n) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,326,if (n <= 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,327,"throw new IllegalArgumentException(""must have n > 0 for n!"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,329,return Math.floor(Math.exp(factorialLog(n)) + 0.5);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,333,* Returns the natural logarithm of n!.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,334,* <p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,335,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,336,* <li> <code>n > 0</code> (otherwise
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,337,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,338,* </ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,340,* @param n argument
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,341,* @return <code>n!</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,343,public static double factorialLog(final int n) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,344,if (n <= 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,345,"throw new IllegalArgumentException(""must have n > 0 for n!"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,347,double logSum = 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,348,for (int i = 2; i <= n; i++) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,349,logSum += Math.log((double) i);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,351,return logSum;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,357,public static double cosh(double x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,358,return (Math.exp(x) + Math.exp(-x)) / 2.0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,364,public static double sinh(double x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,365,return (Math.exp(x) - Math.exp(-x)) / 2.0;
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,5,* reserved.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,9,* are met:
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,59,* Subclasses implementing this interface can transform Objects to doubles.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,60,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,62,public interface NumberTransformer {
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,65,* Implementing this interface provides a facility to transform
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,66,* from Object to Double.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,68,* @param o the Object to be transformed.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,69,* @return the double value of the Object.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,70,* @throws MathException if the Object can not be transformed into a Double.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,72,double transform(Object o) throws MathException;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,5,* reserved.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,9,* are met:
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,56,import java.util.Collection;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,57,import java.util.HashMap;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,58,import java.util.Map;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,59,import java.util.Set;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,62,* This TansformerMap automates the transformation of of mixed object types.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,63,* It provides a means to set NumberTransformers that will be selected
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,64,* based on the Class of the object handed to the Maps
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,65,* <code>double transform(Object o)</code> method.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,66,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,68,public class TransformerMap implements NumberTransformer {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,71,* A default Number Transformer for Numbers and numeric Strings.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,73,private NumberTransformer defaultTransformer = null;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,76,* The internal Map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,78,private Map map = null;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,83,public TransformerMap() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,84,map = new HashMap();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,85,defaultTransformer = new DefaultTransformer();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,89,* Tests if a Class is present in the TransformerMap.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,90,* @param key Class to check
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,91,* @return true|false
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,93,public boolean containsClass(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,94,return map.containsKey(key);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,98,* Tests if a NumberTransformer is present in the TransformerMap.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,99,* @param value NumberTransformer to check
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,100,* @return true|false
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,102,public boolean containsTransformer(NumberTransformer value) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,103,return map.containsValue(value);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,107,* Returns the Transformer that is mapped to a class
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,108,"* if mapping is not present, this returns null."
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,109,* @param key The Class of the object
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,110,* @return the mapped NumberTransformer or null.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,112,public NumberTransformer getTransformer(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,113,return (NumberTransformer) map.get(key);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,117,* Sets a Class to Transformer Mapping in the Map. If
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,118,"* the Class is already present, this overwrites that"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,119,* mapping.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,120,* @param key The Class
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,121,* @param transformer The NumberTransformer
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,122,* @return the replaced transformer if one is present
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,124,"public Object putTransformer(Class key, NumberTransformer transformer) {"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,125,"return map.put(key, transformer);"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,129,* Removes a Class to Transformer Mapping in the Map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,130,* @param key The Class
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,131,* @return the removed transformer if one is present or
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,132,* null if none was present.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,134,public Object removeTransformer(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,135,return map.remove(key);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,139,* Clears all the Class to Transformer mappings.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,141,public void clear() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,142,map.clear();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,146,* Returns the Set of Classes used as keys in the map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,147,* @return Set of Classes
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,149,public Set classes() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,150,return map.keySet();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,154,* Returns the Set of NumberTransformers used as values
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,155,* in the map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,156,* @return Set of NumberTransformers
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,158,public Collection transformers() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,159,return map.values();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,163,* Attempts to transform the Object against the map of
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,164,* NumberTransformers. Otherwise it returns Double.NaN.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,166,* @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,168,public double transform(Object o) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,169,double value = Double.NaN;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,171,try {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,172,if (o instanceof Number || o instanceof String) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,173,value = defaultTransformer.transform(o);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,174,} else {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,175,NumberTransformer trans =
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,176,(NumberTransformer) this.getTransformer(o.getClass());
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,177,if (trans != null) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,178,value = trans.transform(o);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,181,} catch (Exception e) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,182,e.printStackTrace();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,185,return value;
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,9,* are met:
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,55,package org.apache.commons.math;
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,60,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,62,public class MathConfigurationExceptionTest extends TestCase {
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,66,public void testConstructor(){
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,67,MathConfigurationException ex = new MathConfigurationException();
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,68,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,69,assertNull(ex.getMessage());
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,75,public void testConstructorMessage(){
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,76,"String msg = ""message"";"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,77,MathConfigurationException ex = new MathConfigurationException(msg);
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,78,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,79,"assertEquals(msg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,85,public void testConstructorMessageCause(){
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,86,"String outMsg = ""outer message"";"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,87,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,88,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,89,"MathConfigurationException ex = new MathConfigurationException(outMsg, cause);"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,90,"assertEquals(outMsg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,91,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,97,public void testConstructorCause(){
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,98,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,99,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,100,MathConfigurationException ex = new MathConfigurationException(cause);
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,101,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,9,* are met:
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,55,package org.apache.commons.math;
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,60,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,62,public class MathExceptionTest extends TestCase {
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,66,public void testConstructor(){
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,67,MathException ex = new MathException();
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,68,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,69,assertNull(ex.getMessage());
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,75,public void testConstructorMessage(){
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,76,"String msg = ""message"";"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,77,MathException ex = new MathException(msg);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,78,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,79,"assertEquals(msg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,85,public void testConstructorMessageCause(){
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,86,"String outMsg = ""outer message"";"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,87,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,88,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,89,"MathException ex = new MathException(outMsg, cause);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,90,"assertEquals(outMsg, ex.getMessage());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,91,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,97,public void testConstructorCause(){
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,98,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,99,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,100,MathException ex = new MathException(cause);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,101,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,5,* reserved.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,9,* are met:
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,17,*    distribution.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,55,package org.apache.commons.math;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,57,import junit.framework.Assert;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,60,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,62,public class TestUtils {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,66,private TestUtils() {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,67,super();
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,70,"public static void assertEquals(double expected, double actual, double delta) {"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,71,// check for NaN
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,72,if(Double.isNaN(expected)){
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,73,Assert.assertTrue(Double.isNaN(actual));
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,74,} else {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,75,"Assert.assertEquals(expected, actual, delta);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,5,* reserved.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,9,* are met:
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,54,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,56,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,58,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,61,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,63,public final class BisectionSolverTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,67,public void testSinZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,68,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,69,double result;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,71,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,72,"result = solver.solve(3, 4);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,73,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,75,"result = solver.solve(1, 4);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,76,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,82,public void testQuinticZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,83,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,84,double result;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,86,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,87,"result = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,88,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,90,"result = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,91,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,93,"result = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,94,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,96,"result = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,97,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,99,"result = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,100,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,102,"result = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,103,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,105,"result = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,106,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,108,"result = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,109,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,111,"result = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,112,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,114,"result = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,115,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,117,"result = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,118,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,124,public void testSetFunctionValueAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,125,double expected = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,127,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,128,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,129,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,130,solver.setFunctionValueAccuracy(expected);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,131,"assertEquals(expected, solver.getFunctionValueAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,132,} catch (MathException ex) {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,133,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,140,public void testResetFunctionValueAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,141,double newValue = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,143,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,144,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,145,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,146,double oldValue = solver.getFunctionValueAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,147,solver.setFunctionValueAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,148,solver.resetFunctionValueAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,149,"assertEquals(oldValue, solver.getFunctionValueAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,150,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,151,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,158,public void testSetAbsoluteAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,159,double expected = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,161,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,162,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,163,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,164,solver.setAbsoluteAccuracy(expected);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,165,"assertEquals(expected, solver.getAbsoluteAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,166,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,167,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,174,public void testResetAbsoluteAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,175,double newValue = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,177,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,178,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,179,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,180,double oldValue = solver.getAbsoluteAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,181,solver.setAbsoluteAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,182,solver.resetAbsoluteAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,183,"assertEquals(oldValue, solver.getAbsoluteAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,184,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,185,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,192,public void testSetMaximalIterationCount(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,193,int expected = 100;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,195,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,196,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,197,solver.setMaximalIterationCount(expected);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,198,"assertEquals(expected, solver.getMaximalIterationCount());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,204,public void testResetMaximalIterationCount(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,205,int newValue = 10000;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,207,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,208,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,209,int oldValue = solver.getMaximalIterationCount();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,210,solver.setMaximalIterationCount(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,211,solver.resetMaximalIterationCount();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,212,"assertEquals(oldValue, solver.getMaximalIterationCount());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,218,public void testSetRelativeAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,219,double expected = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,221,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,222,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,223,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,224,solver.setRelativeAccuracy(expected);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,225,"assertEquals(expected, solver.getRelativeAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,226,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,227,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,234,public void testResetRelativeAccuracy(){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,235,double newValue = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,237,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,238,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,239,try {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,240,double oldValue = solver.getRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,241,solver.setRelativeAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,242,solver.resetRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,243,"assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,244,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,245,fail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,9,* are met:
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,55,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,57,import org.apache.commons.math.ConvergenceException;
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,59,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,62,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:17 $
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,64,public class ConvergenceExceptionTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,68,public void testConstructor(){
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,69,ConvergenceException ex = new ConvergenceException();
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,70,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,71,assertNull(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,77,public void testConstructorMessage(){
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,78,"String msg = ""message"";"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,79,ConvergenceException ex = new ConvergenceException(msg);
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,80,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,81,"assertEquals(msg, ex.getMessage());"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,87,public void testConstructorMessageCause(){
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,88,"String outMsg = ""outer message"";"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,89,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,90,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,91,"ConvergenceException ex = new ConvergenceException(outMsg, cause);"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,92,"assertEquals(outMsg, ex.getMessage());"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,93,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,99,public void testConstructorCause(){
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,100,"String inMsg = ""inner message"";"
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,101,Exception cause = new Exception(inMsg);
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,102,ConvergenceException ex = new ConvergenceException(cause);
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,103,"assertEquals(cause, ex.getCause());"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,5,* reserved.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,9,* are met:
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,54,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,56,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,58,import junit.framework.Test;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,59,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,60,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,63,* Test the interpolation framework.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,65,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:16 $
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,67,public class InterpolatorTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,69,public InterpolatorTest(String name) {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,70,super(name);
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,73,public static Test suite() {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,74,TestSuite suite = new TestSuite(InterpolatorTest.class);
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,75,"suite.setName(""UnivariateRealInterpolator Tests"");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,76,return suite;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,79,public void testInterpolateLinearDegenerateTwoSegment()
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,80,throws MathException {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,81,"System.out.println("" deg 2 seg"");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,82,"double xval[] = { 0.0, 0.5, 1.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,83,"double yval[] = { 0.0, 0.5, 1.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,84,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,85,"UnivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,86,double x;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,87,x = 0.0;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,88,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,89,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,90,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,91,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,92,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,93,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,94,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,95,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,96,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,97,x = 0.5;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,98,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,99,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,100,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,101,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,102,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,103,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,104,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,105,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,106,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,107,x = 1 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,108,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,109,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,110,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,111,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,112,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,113,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,114,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,115,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,116,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,119,public void testInterpolateLinearDegenerateThreeSegment()
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,120,throws MathException {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,121,"System.out.println("" deg 3 seg"");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,122,"double xval[] = { 0.0, 0.5, 1.0, 1.5 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,123,"double yval[] = { 0.0, 0.5, 1.0, 1.5 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,124,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,125,"UnivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,126,double x;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,127,x = 0.0;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,128,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,129,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,130,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,131,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,132,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,133,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,134,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,135,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,136,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,137,x = 0.5 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,138,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,139,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,140,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,141,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,142,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,143,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,144,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,145,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,146,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,147,x = 0.5;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,148,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,149,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,150,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,151,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,152,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,153,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,154,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,155,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,156,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,157,x = 1 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,158,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,159,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,160,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,161,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,162,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,163,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,164,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,165,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,166,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,167,x = 1;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,168,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,169,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,170,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,171,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,172,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,173,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,174,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,175,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,176,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,177,x = 1.5 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,178,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,179,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,180,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,181,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,182,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,183,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,184,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,185,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,186,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,189,public void testInterpolateLinear() throws MathException {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,190,"System.out.println("" triang 2 seg"");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,191,"double xval[] = { 0.0, 0.5, 1.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,192,"double yval[] = { 0.0, 0.5, 0.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,193,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,194,"UnivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,195,double x;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,196,x = 0.0;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,197,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,198,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,199,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,200,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,201,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,202,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,203,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,204,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,205,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,206,x = 0.5 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,207,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,208,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,209,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,210,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,211,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,212,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,213,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,214,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,215,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,216,x = 0.5;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,217,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,218,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,219,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,220,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,221,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,222,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,223,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,224,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,225,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,226,x = 1 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,227,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,228,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,229,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,230,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,231,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,232,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,233,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,234,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,235,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,238,public void testInterpolateSin() throws MathException {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,239,"System.out.println("" sin"");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,240,double xval[] =
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,242,"0.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,243,"Math.PI / 6.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,244,"Math.PI / 2.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,245,"5.0 * Math.PI / 6.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,246,"Math.PI,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,247,"7.0 * Math.PI / 6.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,248,"3.0 * Math.PI / 2.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,249,"11.0 * Math.PI / 6.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,250,2.0 * Math.PI };
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,251,"double yval[] = { 0.0, 0.5, 1.0, 0.5, 0.0, -0.5, -1.0, -0.5, 0.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,253,"System.out.println(""n="" + xval.length);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,254,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,255,"UnivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,256,double x;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,257,x = 0.0;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,258,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,259,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,260,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,261,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,262,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,263,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,264,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,265,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,266,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,267,x = Math.PI / 6.0 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,268,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,269,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,270,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,271,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,272,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,273,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,274,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,275,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,276,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,277,x = Math.PI / 6.0 + 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,278,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,279,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,280,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,281,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,282,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,283,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,284,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,285,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,286,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,287,x = Math.PI / 2 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,288,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,289,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,290,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,291,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,292,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,293,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,294,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,295,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,296,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,297,x = Math.PI / 2 + 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,298,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,299,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,300,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,301,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,302,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,303,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,304,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,305,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,306,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,307,x = Math.PI - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,308,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,309,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,310,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,311,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,312,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,313,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,314,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,315,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,316,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,317,x = Math.PI + 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,318,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,319,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,320,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,321,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,322,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,323,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,324,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,325,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,326,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,327,x = 2.0 * Math.PI - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,328,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,329,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,330,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,331,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,332,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,333,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,334,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,335,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,336,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,337,"//assertEquals(0.5,f.value(Math.PI/6.0),)"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,340,public void testIllegalArguments() throws MathException {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,341,// Data set arrays of different size.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,342,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,343,try {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,344,"double xval[] = { 0.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,345,"double yval[] = { 0.0, 1.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,346,"i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,347,"fail(""Failed to detect data set array with different sizes."");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,348,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,350,// X values not sorted.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,351,try {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,352,"double xval[] = { 0.0, 1.0, 0.5 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,353,"double yval[] = { 0.0, 1.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,354,"i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,355,"fail(""Failed to detect unsorted arguments."");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,356,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,5,* reserved.
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,9,* are met:
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,17,*    distribution.
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,54,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,56,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,59,* Auxillary class for testing solvers.
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,61,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,63,public class QuinticFunction implements UnivariateRealFunction {
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,65,/* Evaluate quintic.
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,66,* @see org.apache.commons.math.UnivariateRealFunction#value(double)
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,68,public double value(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,69,return (x-1)*(x-0.5)*x*(x+0.5)*(x+1);
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,72,/* First derivative of quintic.
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,73,* @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,75,public double firstDerivative(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,76,return (5*x*x-3.75)*x*x+0.25;
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,79,/* Second order derivative of quintic.
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,80,* Unsupported.
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,81,* @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,83,public double secondDerivative(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,84,throw new UnsupportedOperationException();
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,5,* reserved.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,9,* are met:
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,54,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,56,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,58,import junit.framework.Assert;
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,59,import junit.framework.Test;
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,60,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,61,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,64,* Testcase for UnivariateRealSolver.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,65,* Because Brent-Dekker is guaranteed to converge in less than the default
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,66,"* maximum iteration count due to bisection fallback, it is quite hard to"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,67,* debug. I include measured iteration counts plus one in order to detect
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,68,* regressions. On average Brent-Dekker should use 4..5 iterations for the
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,69,* default absolute accuracy of 10E-8 for sinus and the quintic function around
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,70,"* zero, and 5..10 iterations for the other zeros."
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,72,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:16 $
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,74,public final class RealSolverTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,76,public RealSolverTest(String name) {
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,77,super(name);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,80,public static Test suite() {
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,81,TestSuite suite = new TestSuite(RealSolverTest.class);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,82,"suite.setName(""UnivariateRealSolver Tests"");"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,83,return suite;
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,86,public void testSinZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,87,// The sinus function is behaved well around the root at #pi. The second
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,88,"// order derivative is zero, which means linar approximating methods will"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,89,// still converge quadratically.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,90,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,91,double result;
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,92,UnivariateRealSolver solver = new BrentSolver(f);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,93,// Somewhat benign interval. The function is monotonous.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,94,"result = solver.solve(3, 4);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,95,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,96,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,97,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,98,// 4 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,99,assertTrue(solver.getIterationCount() <= 5);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,100,// Larger and somewhat less benign interval. The function is grows first.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,101,"result = solver.solve(1, 4);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,102,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,103,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,104,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,105,// 5 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,106,assertTrue(solver.getIterationCount() <= 6);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,107,solver = new SecantSolver(f);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,108,"result = solver.solve(3, 4);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,109,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,110,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,111,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,112,// 4 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,113,assertTrue(solver.getIterationCount() <= 5);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,114,"result = solver.solve(1, 4);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,115,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,116,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,117,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,118,// 5 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,119,assertTrue(solver.getIterationCount() <= 6);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,122,public void testQuinticZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,123,"// The quintic function has zeroes at 0, +-0.5 and +-1."
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,124,"// Around the root of 0 the function is well behaved, with a second derivative"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,125,// of zero a 0.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,126,"// The other roots are less well to find, in particular the root at 1, because"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,127,// the function grows fast for x>1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,128,"// The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,129,// intervals containing these values are harder for the solvers.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,130,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,131,double result;
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,132,// Brent-Dekker solver.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,133,UnivariateRealSolver solver = new BrentSolver(f);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,134,// Symmetric bracket around 0. Test whether solvers can handle hitting
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,135,// the root in the first iteration.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,136,"result = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,137,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,138,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,139,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,140,assertTrue(solver.getIterationCount() <= 2);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,141,// 1 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,142,"// Asymmetric bracket around 0, just for fun. Contains extremum."
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,143,"result = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,144,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,145,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,146,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,147,// 5 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,148,assertTrue(solver.getIterationCount() <= 6);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,149,// Large bracket around 0. Contains two extrema.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,150,"result = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,151,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,152,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,153,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,154,// 6 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,155,assertTrue(solver.getIterationCount() <= 7);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,156,"// Benign bracket around 0.5, function is monotonous."
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,157,"result = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,158,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,159,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,160,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,161,// 6 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,162,assertTrue(solver.getIterationCount() <= 7);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,163,"// Less benign bracket around 0.5, contains one extremum."
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,164,"result = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,165,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,166,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,167,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,168,// 6 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,169,assertTrue(solver.getIterationCount() <= 7);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,170,"// Large, less benign bracket around 0.5, contains both extrema."
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,171,"result = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,172,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,173,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,174,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,175,// 8 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,176,assertTrue(solver.getIterationCount() <= 9);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,177,"// Relatively benign bracket around 1, function is monotonous. Fast growth for x>1"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,178,// is still a problem.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,179,"result = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,180,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,181,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,182,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,183,// 8 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,184,assertTrue(solver.getIterationCount() <= 9);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,185,// Less benign bracket around 1 with extremum.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,186,"result = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,187,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,188,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,189,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,190,// 8 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,191,assertTrue(solver.getIterationCount() <= 9);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,192,// Large bracket around 1. Monotonous.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,193,"result = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,194,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,195,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,196,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,197,// 10 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,198,assertTrue(solver.getIterationCount() <= 11);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,199,// Large bracket around 1. Interval contains extremum.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,200,"result = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,201,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,202,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,203,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,204,// 7 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,205,assertTrue(solver.getIterationCount() <= 8);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,206,// Very large bracket around 1 for testing fast growth behaviour.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,207,"result = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,208,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,209,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,210,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,211,// 12 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,212,assertTrue(solver.getIterationCount() <= 13);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,213,// Secant solver.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,214,solver = new SecantSolver(f);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,215,"result = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,216,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,217,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,218,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,219,// 1 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,220,assertTrue(solver.getIterationCount() <= 2);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,221,"result = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,222,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,223,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,224,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,225,// 5 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,226,assertTrue(solver.getIterationCount() <= 6);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,227,"result = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,228,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,229,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,230,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,231,// 6 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,232,assertTrue(solver.getIterationCount() <= 7);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,233,"result = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,234,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,235,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,236,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,237,// 7 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,238,assertTrue(solver.getIterationCount() <= 8);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,239,"result = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,240,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,241,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,242,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,243,// 6 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,244,assertTrue(solver.getIterationCount() <= 7);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,245,"result = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,246,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,247,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,248,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,249,// 8 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,250,assertTrue(solver.getIterationCount() <= 9);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,251,"result = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,252,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,253,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,254,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,255,// 10 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,256,assertTrue(solver.getIterationCount() <= 11);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,257,"result = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,258,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,259,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,260,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,261,// 8 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,262,assertTrue(solver.getIterationCount() <= 9);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,263,"result = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,264,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,265,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,266,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,267,// 14 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,268,assertTrue(solver.getIterationCount() <= 15);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,269,// The followig is especially slow because the solver first has to reduce
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,270,"// the bracket to exclude the extremum. After that, convergence is rapide."
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,271,"result = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,272,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,273,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,274,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,275,// 7 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,276,assertTrue(solver.getIterationCount() <= 8);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,277,"result = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,278,System.out.println(
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,279,"""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,280,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,281,// 14 iterations on i586 JDK 1.4.1.
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,282,assertTrue(solver.getIterationCount() <= 15);
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,283,// Static solve method
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,284,"result = UnivariateRealSolverUtils.solve(f, -0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,285,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,286,"result = UnivariateRealSolverUtils.solve(f, -0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,287,"Assert.assertEquals(result, 0, 1E-8);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,288,"result = UnivariateRealSolverUtils.solve(f, -0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,289,"Assert.assertEquals(result, 0, 1E-6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,290,"result = UnivariateRealSolverUtils.solve(f, 0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,291,"Assert.assertEquals(result, 0.5, 1E-6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,292,"result = UnivariateRealSolverUtils.solve(f, 0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,293,"Assert.assertEquals(result, 0.5, 1E-6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,294,"result = UnivariateRealSolverUtils.solve(f, 0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,295,"Assert.assertEquals(result, 0.5, 1E-6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,296,"result = UnivariateRealSolverUtils.solve(f, 0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,297,"Assert.assertEquals(result, 1.0, 1E-6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,298,"result = UnivariateRealSolverUtils.solve(f, 0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,299,"Assert.assertEquals(result, 1.0, 1E-6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,300,"result = UnivariateRealSolverUtils.solve(f, 0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,301,"Assert.assertEquals(result, 1.0, 1E-6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,302,"result = UnivariateRealSolverUtils.solve(f, 0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,303,"Assert.assertEquals(result, 1.0, 1E-6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,304,"result = UnivariateRealSolverUtils.solve(f, 0.85, 5);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,305,"Assert.assertEquals(result, 1.0, 1E-6);"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,5,* reserved.
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,9,* are met:
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,17,*    distribution.
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,54,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,56,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,59,* Auxillary class for testing solvers.
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,61,* The function is extraordinarily well behaved around zero roots: it
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,62,"* has an inflection point there (second order derivative is zero),"
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,63,* which means linear approximation (Regula Falsi) will converge
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,64,* quadratically.
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,66,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,68,public class SinFunction implements UnivariateRealFunction {
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,70,/* Evaluate sinus fuction.
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,71,* @see org.apache.commons.math.UnivariateRealFunction#value(double)
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,73,public double value(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,74,return Math.sin(x);
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,77,/* First derivative of sinus function
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,78,* @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,80,public double firstDerivative(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,81,return Math.cos(x);
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,84,/* Second derivative of sinus function.
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,85,* Unsupported.
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,86,* @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,88,public double secondDerivative(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,89,throw new UnsupportedOperationException();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,5,* reserved.
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,9,* are met:
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,55,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,57,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,59,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,62,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:17 $
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,64,public class UnivariateRealSolverUtilsTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,68,public void testSolveNull(){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,69,try {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,70,"UnivariateRealSolverUtils.solve(null, 0.0, 4.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,71,fail();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,72,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,73,"fail(""math exception should no be thrown."");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,74,} catch(IllegalArgumentException ex){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,75,// success
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,82,public void testSolveSin(){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,83,try {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,84,"double x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,85,4.0);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,86,"assertEquals(Math.PI, x, 1.0e-4);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,87,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,88,"fail(""math exception should no be thrown."");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,95,public void testSolveAccuracyNull(){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,96,try {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,97,double accuracy = 1.0e-6;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,98,"UnivariateRealSolverUtils.solve(null, 0.0, 4.0, accuracy);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,99,fail();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,100,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,101,"fail(""math exception should no be thrown."");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,102,} catch(IllegalArgumentException ex){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,103,// success
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,110,public void testSolveAccuracySin(){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,111,try {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,112,double accuracy = 1.0e-6;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,113,"double x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,114,"4.0, accuracy);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,115,"assertEquals(Math.PI, x, accuracy);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,116,} catch(MathException ex){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,117,"fail(""math exception should no be thrown."");"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,5,* reserved.
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,9,* are met:
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,17,*    distribution.
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,54,package org.apache.commons.math.beans;
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,57,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,59,public class Patient {
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,61,private VitalStats vitalStats;
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,62,private Integer age;
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,64,public Patient() {
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,67,"public Patient(VitalStats vitalStats, Integer age) {"
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,68,setVitalStats( vitalStats );
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,69,setAge( age );
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,72,public VitalStats getVitalStats() {
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,73,return( vitalStats );
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,76,public void setVitalStats(VitalStats vitalStats) {
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,77,this.vitalStats = vitalStats;
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,80,public Integer getAge() {
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,81,return age;
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,84,public void setAge(Integer age) {
True,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,85,this.age = age;
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,5,* reserved.
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,9,* are met:
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,17,*    distribution.
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,54,package org.apache.commons.math.beans;
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,57,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,59,public class VitalStats {
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,61,private Double heartrate;
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,62,private Double temperature;
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,64,public VitalStats() {
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,67,"public VitalStats(Double heartrate, Double temperature) {"
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,68,setHeartRate( heartrate );
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,69,setTemperature( temperature );
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,72,public Double getHeartRate() {
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,73,return heartrate;
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,76,public void setHeartRate(Double heartrate) {
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,77,this.heartrate = heartrate;
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,80,public Double getTemperature() {
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,81,return temperature;
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,84,public void setTemperature(Double temperature) {
True,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,85,this.temperature = temperature;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,5,* reserved.
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,9,* are met:
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,19,"* 3. The end-user documentation included with the redistribution,"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,20,"*    if any, must include the following acknowledgment:"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,23,"*    Alternately, this acknowledgment may appear in the software itself,"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,24,*    if and wherever such third-party acknowledgments normally appear.
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,26,"* 4. The names ""Apache"" and ""Apache Software Foundation"" and"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,27,"*    ""Apache Geronimo"" must not be used to endorse or promote products"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,28,*    derived from this software without prior written permission. For
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,29,"*    written permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,31,"* 5. Products derived from this software may not be called ""Apache"","
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,32,"*    ""Apache Geronimo"", nor may ""Apache"" appear in their name, without"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,33,*    prior written permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,57,package org.apache.commons.math.complex;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,59,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,62,* @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:24 $
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,64,public class ComplexTest extends TestCase {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,66,public void testConstructor() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,67,"Complex z = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,68,"assertEquals(3.0, z.getReal(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,69,"assertEquals(4.0, z.getImaginary(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,72,public void testConstructorNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,73,"Complex z = new Complex(3.0, Double.NaN);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,74,assertTrue(z.isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,76,"z = new Complex(Double.NaN, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,77,assertTrue(z.isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,79,"z = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,80,assertFalse(z.isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,83,public void testAbs() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,84,"Complex z = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,85,"assertEquals(5.0, z.abs(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,88,public void testAdd() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,89,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,90,"Complex y = new Complex(5.0, 6.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,91,Complex z = x.add(y);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,92,"assertEquals(8.0, z.getReal(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,93,"assertEquals(10.0, z.getImaginary(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,96,public void testAddNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,97,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,98,Complex z = x.add(Complex.NaN);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,99,assertTrue(z.isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,102,public void testConjugate() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,103,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,104,Complex z = x.conjugate();
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,105,"assertEquals(3.0, z.getReal(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,106,"assertEquals(-4.0, z.getImaginary(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,109,public void testConjugateNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,110,Complex z = Complex.NaN.conjugate();
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,111,assertTrue(z.isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,114,public void testDivide() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,115,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,116,"Complex y = new Complex(5.0, 6.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,117,Complex z = x.divide(y);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,118,"assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,119,"assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,122,public void testDivideNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,123,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,124,Complex z = x.divide(Complex.NaN);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,125,assertTrue(z.isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,128,public void testMultiply() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,129,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,130,"Complex y = new Complex(5.0, 6.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,131,Complex z = x.multiply(y);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,132,"assertEquals(-9.0, z.getReal(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,133,"assertEquals(38.0, z.getImaginary(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,136,public void testMultiplyNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,137,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,138,Complex z = x.multiply(Complex.NaN);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,139,assertTrue(z.isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,142,public void testNegate() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,143,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,144,Complex z = x.negate();
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,145,"assertEquals(-3.0, z.getReal(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,146,"assertEquals(-4.0, z.getImaginary(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,149,public void testNegateNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,150,Complex z = Complex.NaN.negate();
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,151,assertTrue(z.isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,154,public void testSubtract() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,155,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,156,"Complex y = new Complex(5.0, 6.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,157,Complex z = x.subtract(y);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,158,"assertEquals(-2.0, z.getReal(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,159,"assertEquals(-2.0, z.getImaginary(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,162,public void testSubtractNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,163,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,164,Complex z = x.subtract(Complex.NaN);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,165,assertTrue(z.isNaN());
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,9,* are met:
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,54,package org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,56,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,59,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,61,public class BinomialDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,62,private BinomialDistribution b;
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,65,* Constructor for ChiSquareDistributionTest.
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,66,* @param name
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,68,public BinomialDistributionTest(String name) {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,69,super(name);
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,73,* @see TestCase#setUp()
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,75,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,76,super.setUp();
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,77,"b = DistributionFactory.newInstance().createBinomialDistribution(10, 0.70);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,81,* @see TestCase#tearDown()
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,83,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,84,b = null;
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,85,super.tearDown();
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,88,public void testInverseCummulativeProbability001() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,89,"testValue(1, .001);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,92,public void testInverseCumulativeProbability010() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,93,"testValue(2, .010);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,96,public void testInverseCumulativeProbability025() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,97,"testValue(3, .025);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,100,public void testInverseCumulativeProbability050() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,101,"testValue(4, .050);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,104,public void testInverseCumulativeProbability100() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,105,"testValue(4, .100);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,108,public void testInverseCummulativeProbability999() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,109,"testValue(9, .999);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,112,public void testInverseCumulativeProbability990() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,113,"testValue(9, .990);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,116,public void testInverseCumulativeProbability975() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,117,"testValue(9, .975);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,120,public void testInverseCumulativeProbability950() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,121,"testValue(8, .950);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,124,public void testInverseCumulativeProbability900() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,125,"testValue(8, .900);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,128,public void testCummulativeProbability1() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,129,"testProbability(1, .00014);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,132,public void testCumulativeProbability2() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,133,"testProbability(2, .00159);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,136,public void testCumulativeProbability3() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,137,"testProbability(3, .01059);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,140,public void testCumulativeProbability4() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,141,"testProbability(4, .04735);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,144,public void testCumulativeProbability9() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,145,"testProbability(9, .97175);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,148,public void testCummulativeProbability8() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,149,"testProbability(8, .85069);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,152,"private void testProbability(int x, double expected){"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,153,double actual = b.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,154,"assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,157,"private void testValue(int expected, double p){"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,158,int actual = b.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,159,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,160,assertTrue(b.cummulativeProbability(actual) <= p);
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,161,assertTrue(b.cummulativeProbability(actual + 1) >= p);
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,9,* are met:
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,55,package org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,60,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,62,public class ChiSquareDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,63,private ChiSquaredDistribution chiSquare;
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,66,* Constructor for ChiSquareDistributionTest.
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,67,* @param name
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,69,public ChiSquareDistributionTest(String name) {
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,70,super(name);
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,74,* @see TestCase#setUp()
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,76,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,77,super.setUp();
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,78,chiSquare = DistributionFactory.newInstance().createChiSquareDistribution(5.0);
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,82,* @see TestCase#tearDown()
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,84,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,85,chiSquare = null;
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,86,super.tearDown();
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,89,public void testLowerTailProbability(){
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,90,"testProbability( .210, .001);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,91,"testProbability( .554, .010);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,92,"testProbability( .831, .025);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,93,"testProbability(1.145, .050);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,94,"testProbability(1.610, .100);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,97,public void testUpperTailProbability(){
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,98,"testProbability(20.515, .999);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,99,"testProbability(15.086, .990);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,100,"testProbability(12.833, .975);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,101,"testProbability(11.070, .950);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,102,"testProbability( 9.236, .900);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,105,public void testLowerTailValues(){
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,106,"testValue(.001,  .210);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,107,"testValue(.010,  .554);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,108,"testValue(.025,  .831);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,109,"testValue(.050, 1.145);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,110,"testValue(.100, 1.610);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,113,public void testUpperTailValues(){
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,114,"testValue(.999, 20.515);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,115,"testValue(.990, 15.086);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,116,"testValue(.975, 12.833);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,117,"testValue(.950, 11.070);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,118,"testValue(.900,  9.236);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,121,"private void testProbability(double x, double expected){"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,122,double actual = chiSquare.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,123,"assertEquals(""probability for "" + x, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,126,"private void testValue(double p, double expected){"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,127,double actual = chiSquare.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,128,"assertEquals(""value for "" + p, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,55,package org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,60,* @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,62,public class DistributionFactoryImplTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,64,private DistributionFactory factory;
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,67,* Constructor for DistributionFactoryImplTest.
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,68,* @param name
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,70,public DistributionFactoryImplTest(String name) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,71,super(name);
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,74,* @throws java.lang.Exception
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,76,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,77,super.setUp();
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,78,factory = new DistributionFactoryImpl();
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,82,* @throws java.lang.Exception
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,84,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,85,factory = null;
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,86,super.tearDown();
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,89,public void testCreateChiSquareDistributionNegative(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,90,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,91,factory.createChiSquareDistribution(-1.0);
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,92,"fail(""negative degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,93,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,98,public void testCreateChiSquareDistributionZero(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,99,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,100,factory.createChiSquareDistribution(0.0);
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,101,"fail(""zero degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,102,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,107,public void testCreateChiSquareDistributionPositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,108,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,109,factory.createChiSquareDistribution(1.0);
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,110,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,111,"fail(""positive degrees of freedom.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,115,public void testCreateFDistributionNegativePositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,116,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,117,"factory.createFDistribution(-1.0, 1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,118,"fail(""negative degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,119,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,124,public void testCreateFDistributionZeroPositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,125,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,126,"factory.createFDistribution(0.0, 1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,127,"fail(""zero degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,128,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,133,public void testCreateFDistributionPositiveNegative(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,134,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,135,"factory.createFDistribution(1.0, -1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,136,"fail(""negative degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,137,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,142,public void testCreateFDistributionPositiveZero(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,143,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,144,"factory.createFDistribution(1.0, 0.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,145,"fail(""zero degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,146,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,151,public void testCreateFDistributionPositivePositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,152,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,153,"factory.createFDistribution(1.0, 1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,154,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,155,"fail(""positive degrees of freedom.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,159,public void testCreateExponentialDistributionNegative(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,160,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,161,factory.createExponentialDistribution(-1.0);
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,162,"fail(""negative mean.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,163,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,168,public void testCreateExponentialDistributionZero(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,169,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,170,factory.createExponentialDistribution(0.0);
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,171,"fail(""zero mean.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,172,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,177,public void testCreateExponentialDistributionPositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,178,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,179,factory.createExponentialDistribution(1.0);
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,180,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,181,"fail(""positive mean.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,185,public void testCreateGammaDistributionNegativePositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,186,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,187,"factory.createGammaDistribution(-1.0, 1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,188,"fail(""negative alpha.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,189,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,194,public void testCreateGammaDistributionZeroPositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,195,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,196,"factory.createGammaDistribution(0.0, 1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,197,"fail(""zero alpha.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,198,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,203,public void testCreateGammaDistributionPositiveNegative(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,204,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,205,"factory.createGammaDistribution(1.0, -1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,206,"fail(""negative beta.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,207,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,212,public void testCreateGammaDistributionPositiveZero(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,213,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,214,"factory.createGammaDistribution(1.0, 0.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,215,"fail(""zero beta.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,216,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,221,public void testCreateGammaDistributionPositivePositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,222,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,223,"factory.createGammaDistribution(1.0, 1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,224,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,225,"fail(""positive alpah and beta.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,229,public void testCreateTDistributionNegative(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,230,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,231,factory.createTDistribution(-1.0);
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,232,"fail(""negative degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,233,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,238,public void testCreateTDistributionZero(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,239,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,240,factory.createTDistribution(0.0);
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,241,"fail(""zero degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,242,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,247,public void testCreateTDistributionPositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,248,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,249,factory.createTDistribution(1.0);
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,250,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,251,"fail(""positive degrees of freedom.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,255,public void testBinomialDistributionNegativePositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,256,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,257,"factory.createBinomialDistribution(-1, 0.5);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,258,"fail(""negative number of trials.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,259,} catch (IllegalArgumentException ex ) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,263,public void testBinomialDistributionZeroPositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,264,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,265,"factory.createBinomialDistribution(0, 0.5);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,266,} catch (IllegalArgumentException ex ) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,267,"fail(""zero number of trials.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,271,public void testBinomialDistributionPositivePositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,272,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,273,"factory.createBinomialDistribution(10, 0.5);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,274,} catch (IllegalArgumentException ex ) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,275,"fail(""positive number of trials.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,279,public void testBinomialDistributionPositiveNegative(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,280,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,281,"factory.createBinomialDistribution(10, -0.5);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,282,"fail(""negative probability of success.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,283,} catch (IllegalArgumentException ex ) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,287,public void testBinomialDistributionPositiveZero(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,288,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,289,"factory.createBinomialDistribution(10, 0.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,290,} catch (IllegalArgumentException ex ) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,291,"fail(""zero probability of success.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,295,public void testBinomialDistributionPositiveOne(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,296,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,297,"factory.createBinomialDistribution(10, 1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,298,} catch (IllegalArgumentException ex ) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,299,"fail(""valid probability of success.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,303,public void testBinomialDistributionPositiveTwo(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,304,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,305,"factory.createBinomialDistribution(10, 2.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,306,"fail(""high probability of success.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,307,} catch (IllegalArgumentException ex ) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,311,public void testHypergeometricDistributionNegativePositivePositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,312,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,313,"factory.createHypergeometricDistribution(-1, 10, 10);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,314,"fail(""negative population size.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,315,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,319,public void testHypergeometricDistributionZeroPositivePositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,320,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,321,"factory.createHypergeometricDistribution(0, 10, 10);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,322,"fail(""zero population size.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,323,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,327,public void testHypergeometricDistributionPositiveNegativePositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,328,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,329,"factory.createHypergeometricDistribution(20, -1, 10);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,330,"fail(""negative number of successes.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,331,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,335,public void testHypergeometricDistributionPositiveZeroPositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,336,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,337,"factory.createHypergeometricDistribution(20, 0, 10);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,338,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,339,"fail(""valid number of successes.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,343,public void testHypergeometricDistributionPositivePositiveNegative(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,344,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,345,"factory.createHypergeometricDistribution(20, 10, -1);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,346,"fail(""negative sample size.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,347,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,351,public void testHypergeometricDistributionPositivePositiveZero(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,352,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,353,"factory.createHypergeometricDistribution(20, 10, 0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,354,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,355,"fail(""valid sample size.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,9,* are met:
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,54,package org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,56,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,58,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,61,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,63,public class ExponentialDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,64,private ExponentialDistribution exp;
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,67,* Constructor for ChiSquareDistributionTest.
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,68,* @param name
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,70,public ExponentialDistributionTest(String name) {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,71,super(name);
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,75,* @see TestCase#setUp()
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,77,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,78,super.setUp();
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,79,exp = DistributionFactory.newInstance().createExponentialDistribution(5.0);
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,83,* @see TestCase#tearDown()
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,85,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,86,exp = null;
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,87,super.tearDown();
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,90,public void testInverseCummulativeProbability001() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,91,"testValue(.005003, .001);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,94,public void testInverseCummulativeProbability010() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,95,"testValue(0.050252, .010);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,98,public void testInverseCummulativeProbability025() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,99,"testValue(0.126589, .025);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,102,public void testInverseCummulativeProbability050() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,103,"testValue(0.256566, .050);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,106,public void testInverseCummulativeProbability100() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,107,"testValue(0.526803, .100);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,110,public void testInverseCummulativeProbability999() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,111,"testValue(34.5388, .999);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,114,public void testInverseCummulativeProbability990() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,115,"testValue(23.0259, .990);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,118,public void testInverseCummulativeProbability975() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,119,"testValue(18.4444, .975);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,122,public void testInverseCummulativeProbability950() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,123,"testValue(14.9787, .950);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,126,public void testInverseCummulativeProbability900() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,127,"testValue(11.5129, .900);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,130,public void testCummulativeProbability001() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,131,"testProbability(0.005003, .001);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,134,public void testCummulativeProbability010() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,135,"testProbability(0.050252, .010);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,138,public void testCummulativeProbability025() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,139,"testProbability(0.126589, .025);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,142,public void testCummulativeProbability050() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,143,"testProbability(0.256566, .050);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,146,public void testCummulativeProbability100() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,147,"testProbability(0.526803, .100);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,150,public void testCummulativeProbability999() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,151,"testProbability(34.5388, .999);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,154,public void testCummulativeProbability990() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,155,"testProbability(23.0259, .990);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,158,public void testCummulativeProbability975() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,159,"testProbability(18.4444, .975);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,162,public void testCummulativeProbability950() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,163,"testProbability(14.9787, .950);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,166,public void testCummulativeProbability900() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,167,"testProbability(11.5129, .900);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,170,public void testCummulativeProbabilityNegative() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,171,"testProbability(-1.0, 0.0);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,174,public void testCummulativeProbabilityZero() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,175,"testProbability(0.0, 0.0);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,178,public void testInverseCummulativeProbabilityNegative() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,179,"testValue(Double.NaN, -1.0);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,182,public void testInverseCummulativeProbabilityZero() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,183,"testValue(0.0, 0.0);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,186,public void testInverseCummulativeProbabilityOne() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,187,"testValue(Double.POSITIVE_INFINITY, 1.0);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,190,public void testInverseCummulativeProbabilityPositive() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,191,"testValue(Double.NaN, 2.0);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,194,public void testCummulativeProbability2() {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,195,"double actual = exp.cummulativeProbability(0.25, 0.75);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,196,"assertEquals(0.0905214, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,199,"private void testProbability(double x, double expected){"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,200,double actual = exp.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,201,"TestUtils.assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,204,"private void testValue(double expected, double p){"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,205,double actual = exp.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,206,"TestUtils.assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,9,* are met:
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,54,package org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,56,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,59,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,61,public class FDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,62,private FDistribution f;
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,65,* Constructor for ChiSquareDistributionTest.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,66,* @param name
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,68,public FDistributionTest(String name) {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,69,super(name);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,73,* @see TestCase#setUp()
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,75,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,76,super.setUp();
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,77,"f = DistributionFactory.newInstance().createFDistribution(5.0, 6.0);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,81,* @see TestCase#tearDown()
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,83,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,84,f = null;
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,85,super.tearDown();
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,88,public void testLowerTailProbability(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,89,"testProbability(1.0 / 10.67, .010);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,90,"testProbability(1.0 /  6.98, .025);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,91,"testProbability(1.0 /  4.95, .050);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,92,"testProbability(1.0 /  3.40, .100);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,95,public void testUpperTailProbability(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,96,"testProbability(8.75, .990);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,97,"testProbability(5.99, .975);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,98,"testProbability(4.39, .950);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,99,"testProbability(3.11, .900);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,102,public void testLowerTailValues(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,103,"testValue(1.0 / 10.67, .010);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,104,"testValue(1.0 /  6.98, .025);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,105,"testValue(1.0 /  4.95, .050);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,106,"testValue(1.0 /  3.40, .100);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,109,public void testUpperTailValues(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,110,"testValue(8.75, .990);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,111,"testValue(5.99, .975);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,112,"testValue(4.39, .950);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,113,"testValue(3.11, .900);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,116,"private void testProbability(double x, double expected){"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,117,double actual = f.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,118,"assertEquals(""probability for "" + x, expected, actual, 1e-3);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,121,"private void testValue(double expected, double p){"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,122,double actual = f.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,123,"assertEquals(""value for "" + p, expected, actual, 1e-2);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,9,* are met:
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,55,package org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,60,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,62,public class GammaDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,63,public void testProbabilities(){
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,64,"testProbability(-1.000, 4.0, 2.0, .0000);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,65,"testProbability(15.501, 4.0, 2.0, .9499);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,66,"testProbability( 0.504, 4.0, 1.0, .0018);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,67,"testProbability(10.011, 1.0, 2.0, .9933);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,68,"testProbability( 5.000, 2.0, 2.0, .7127);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,71,public void testValues(){
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,72,"testValue(15.501, 4.0, 2.0, .9499);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,73,"testValue( 0.504, 4.0, 1.0, .0018);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,74,"testValue(10.011, 1.0, 2.0, .9933);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,75,"testValue( 5.000, 2.0, 2.0, .7127);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,78,"private void testProbability(double x, double a, double b, double expected){"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,79,"double actual = DistributionFactory.newInstance().createGammaDistribution(a, b).cummulativeProbability(x);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,80,"assertEquals(""probability for "" + x, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,83,"private void testValue(double expected, double a, double b, double p){"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,84,"double actual = DistributionFactory.newInstance().createGammaDistribution(a, b).inverseCummulativeProbability(p);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,85,"assertEquals(""critical value for "" + p, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,9,* are met:
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,55,package org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,60,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,62,public class HypergeometricDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,63,private HypergeometricDistribution h;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,66,* Constructor for ChiSquareDistributionTest.
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,67,* @param name
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,69,public HypergeometricDistributionTest(String name) {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,70,super(name);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,74,* @see TestCase#setUp()
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,76,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,77,super.setUp();
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,78,"h = DistributionFactory.newInstance().createHypergeometricDistribution(10, 5, 5);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,82,* @see TestCase#tearDown()
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,84,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,85,h = null;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,86,super.tearDown();
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,89,public void testInverseCummulativeProbability001() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,90,"testValue(-1, .001);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,93,public void testInverseCumulativeProbability010() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,94,"testValue(0, .010);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,97,public void testInverseCumulativeProbability025() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,98,"testValue(0, .025);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,101,public void testInverseCumulativeProbability050() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,102,"testValue(0, .050);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,105,public void testInverseCumulativeProbability100() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,106,"testValue(0, .100);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,109,public void testInverseCummulativeProbability999() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,110,"testValue(4, .999);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,113,public void testInverseCumulativeProbability990() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,114,"testValue(3, .990);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,117,public void testInverseCumulativeProbability975() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,118,"testValue(3, .975);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,121,public void testInverseCumulativeProbability950() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,122,"testValue(3, .950);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,125,public void testInverseCumulativeProbability900() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,126,"testValue(3, .900);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,129,public void testCummulativeProbability0() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,130,"testProbability(0, .00400);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,133,public void testCummulativeProbability1() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,134,"testProbability(1, .10318);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,137,public void testCumulativeProbability2() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,138,"testProbability(2, .50000);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,141,public void testCumulativeProbability3() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,142,"testProbability(3, .89683);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,145,public void testCumulativeProbability4() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,146,"testProbability(4, .99603);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,149,public void testCumulativeProbability5() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,150,"testProbability(5, 1.00000);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,153,"private void testProbability(int x, double expected){"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,154,double actual = h.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,155,"assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,158,"private void testValue(int expected, double p){"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,159,int actual = h.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,160,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,161,assertTrue(h.cummulativeProbability(actual) <= p);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,162,assertTrue(h.cummulativeProbability(actual + 1) >= p);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,9,* are met:
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,54,package org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,56,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,59,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,61,public class TDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,62,private TDistribution t;
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,65,* Constructor for ChiSquareDistributionTest.
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,66,* @param name
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,68,public TDistributionTest(String name) {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,69,super(name);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,73,* @see TestCase#setUp()
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,75,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,76,super.setUp();
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,77,t = DistributionFactory.newInstance().createTDistribution(5.0);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,81,* @see TestCase#tearDown()
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,83,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,84,t = null;
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,85,super.tearDown();
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,88,public void testInverseCummulativeProbability001() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,89,"testValue(-5.893, .001);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,92,public void testInverseCumulativeProbability010() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,93,"testValue(-3.365, .010);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,96,public void testInverseCumulativeProbability025() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,97,"testValue(-2.571, .025);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,100,public void testInverseCumulativeProbability050() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,101,"testValue(-2.015, .050);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,104,public void testInverseCumulativeProbability100() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,105,"testValue(-1.476, .100);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,108,public void testInverseCummulativeProbability999() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,109,"testValue(5.893, .999);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,112,public void testInverseCumulativeProbability990() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,113,"testValue(3.365, .990);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,116,public void testInverseCumulativeProbability975() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,117,"testValue(2.571, .975);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,120,public void testInverseCumulativeProbability950() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,121,"testValue(2.015, .950);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,124,public void testInverseCumulativeProbability900() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,125,"testValue(1.476, .900);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,128,public void testCummulativeProbability001() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,129,"testProbability(-5.893, .001);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,132,public void testCumulativeProbability010() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,133,"testProbability(-3.365, .010);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,136,public void testCumulativeProbability025() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,137,"testProbability(-2.571, .025);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,140,public void testCumulativeProbability050() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,141,"testProbability(-2.015, .050);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,144,public void testCumulativeProbability100() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,145,"testProbability(-1.476, .100);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,148,public void testCummulativeProbability999() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,149,"testProbability(5.893, .999);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,152,public void testCumulativeProbability990() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,153,"testProbability(3.365, .990);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,156,public void testCumulativeProbability975() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,157,"testProbability(2.571, .975);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,160,public void testCumulativeProbability950() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,161,"testProbability(2.015, .950);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,164,public void testCumulativeProbability900() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,165,"testProbability(1.476, .900);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,168,"private void testProbability(double x, double expected){"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,169,double actual = t.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,170,"assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,173,"private void testValue(double expected, double p){"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,174,double actual = t.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,175,"assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,54,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,61,* Test cases for the {@link RealMatrixImpl} class.
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,63,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,66,public final class RealMatrixImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,68,"private double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,69,"private double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,70,"private double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,71,"{-1d,0d,-8d} };"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,72,"private double[] testDataRow1 = {1d,2d,3d};"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,73,"private double[] testDataCol3 = {3d,3d,8d};"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,74,private double[][] testDataInv =
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,75,"{ {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,76,"private double[][] preMultTest = {{8,12,33}};"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,77,"private double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,78,"private double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,79,private double[][] testDataPlusInv =
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,80,"{ {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,81,"private double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,82,"private double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,83,"private double[][] singular = { {2d,3d}, {2d,3d} };"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,84,"private double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,85,"{7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,86,"private double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,87,"private double[] testVector = {1,2,3};"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,88,"private double[] testVector2 = {1,2,3,4};"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,89,private double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,90,private double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,92,public RealMatrixImplTest(String name) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,93,super(name);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,96,public void setUp() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,100,public static Test suite() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,101,TestSuite suite = new TestSuite(RealMatrixImplTest.class);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,102,"suite.setName(""RealMatrixImpl Tests"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,103,return suite;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,106,/** test dimensions */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,107,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,108,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,109,RealMatrixImpl m2 = new RealMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,110,"assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,111,"assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,112,"assertTrue(""testData is square"",m.isSquare());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,113,"assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,114,"assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,115,"assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,116,RealMatrixImpl m3 = new RealMatrixImpl();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,117,m3.setData(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,120,/** test copy functions */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,121,public void testCopyFunctions() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,122,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,123,RealMatrixImpl m2 = new RealMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,124,m2.setData(m.getData());
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,125,"assertClose(""getData"",m2,m,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,126,// no dangling reference...
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,127,"m2.setEntry(1,1,2000d);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,128,RealMatrixImpl m3 = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,129,"assertClose(""no getData side effect"",m,m3,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,130,m3 = (RealMatrixImpl) m.copy();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,131,"double[][] stompMe = {{1d,2d,3d}};"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,132,m3.setDataRef(stompMe);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,133,"assertClose(""no copy side effect"",m,new RealMatrixImpl(testData),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,134,entryTolerance);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,137,/** test add */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,138,public void testAdd() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,139,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,140,RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,141,RealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(mInv);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,142,double[][] sumEntries = mPlusMInv.getData();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,143,for (int row = 0; row < m.getRowDimension(); row++) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,144,for (int col = 0; col < m.getColumnDimension(); col++) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,145,"assertEquals(""sum entry entry"","
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,146,"testDataPlusInv[row][col],sumEntries[row][col],"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,147,entryTolerance);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,152,/** test add failure */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,153,public void testAddFail() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,154,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,155,RealMatrixImpl m2 = new RealMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,156,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,157,RealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(m2);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,158,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,159,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,164,/** test norm */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,165,public void testNorm() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,166,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,167,RealMatrixImpl m2 = new RealMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,168,"assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,169,"assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,172,/** test m-n = m + -n */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,173,public void testPlusMinus() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,174,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,175,RealMatrixImpl m2 = new RealMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,176,"assertClose(""m-n = m + -n"",m.subtract(m2),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,177,"m2.scalarMultiply(-1d).add(m),entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,178,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,179,RealMatrix a = m.subtract(new RealMatrixImpl(testData2));
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,180,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,181,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,186,/** test multiply */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,187,public void testMultiply() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,188,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,189,RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,190,RealMatrixImpl identity = new RealMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,191,RealMatrixImpl m2 = new RealMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,192,"assertClose(""inverse multiply"",m.multiply(mInv),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,193,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,194,"assertClose(""inverse multiply"",mInv.multiply(m),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,195,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,196,"assertClose(""identity multiply"",m.multiply(identity),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,197,"m,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,198,"assertClose(""identity multiply"",identity.multiply(mInv),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,199,"mInv,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,200,"assertClose(""identity multiply"",m2.multiply(identity),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,201,"m2,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,202,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,203,RealMatrix a = m.multiply(new RealMatrixImpl(bigSingular));
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,204,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,205,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,210,/** test isSingular */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,211,public void testIsSingular() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,212,RealMatrixImpl m = new RealMatrixImpl(singular);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,213,"assertTrue(""singular"",m.isSingular());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,214,m = new RealMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,215,"assertTrue(""big singular"",m.isSingular());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,216,m = new RealMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,217,"assertTrue(""identity nonsingular"",!m.isSingular());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,218,m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,219,"assertTrue(""testData nonsingular"",!m.isSingular());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,222,/** test inverse */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,223,public void testInverse() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,224,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,225,RealMatrix mInv = new RealMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,226,"assertClose(""inverse"",mInv,m.inverse(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,227,"assertClose(""inverse^2"",m,m.inverse().inverse(),10E-12);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,230,/** test solve */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,231,public void testSolve() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,232,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,233,RealMatrix mInv = new RealMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,234,// being a bit slothful here -- actually testing that X = A^-1 * B
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,235,"assertClose(""inverse-operate"",mInv.operate(testVector),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,236,"m.solve(testVector),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,237,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,238,double[] x = m.solve(testVector2);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,239,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,240,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,243,RealMatrix bs = new RealMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,244,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,245,RealMatrix a = bs.solve(bs);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,246,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,247,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,250,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,251,RealMatrix a = m.solve(bs);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,252,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,253,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,256,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,257,RealMatrix a = (new RealMatrixImpl(testData2)).solve(bs);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,258,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,259,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,262,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,263,(new RealMatrixImpl(testData2)).LUDecompose();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,264,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,265,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,270,/** test determinant */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,271,public void testDeterminant() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,272,RealMatrix m = new RealMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,273,"assertEquals(""singular determinant"",0,m.getDeterminant(),0);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,274,m = new RealMatrixImpl(detData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,275,"assertEquals(""nonsingular test"",-3d,m.getDeterminant(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,276,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,277,double a = new RealMatrixImpl(testData2).getDeterminant();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,278,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,279,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,284,/** test trace */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,285,public void testTrace() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,286,RealMatrix m = new RealMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,287,"assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,288,m = new RealMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,289,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,290,double x = m.getTrace();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,291,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,292,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,297,/** test sclarAdd */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,298,public void testScalarAdd() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,299,RealMatrix m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,300,"assertClose(""scalar add"",new RealMatrixImpl(testDataPlus2),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,301,"m.scalarAdd(2d),entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,304,/** test operate */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,305,public void testOperate() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,306,RealMatrix m = new RealMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,307,double[] x = m.operate(testVector);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,308,"assertClose(""identity operate"",testVector,x,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,309,m = new RealMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,310,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,311,x = m.operate(testVector);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,312,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,313,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,318,/** test transpose */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,319,public void testTranspose() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,320,RealMatrix m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,321,"assertClose(""inverse-transpose"",m.inverse().transpose(),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,322,"m.transpose().inverse(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,323,m = new RealMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,324,RealMatrix mt = new RealMatrixImpl(testData2T);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,325,"assertClose(""transpose"",mt,m.transpose(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,328,/** test preMultiply */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,329,public void testPremultiply() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,330,RealMatrix m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,331,RealMatrix mp = new RealMatrixImpl(preMultTest);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,332,"assertClose(""premultiply"",m.preMultiply(testVector),mp,normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,333,m = new RealMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,334,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,335,RealMatrix x = m.preMultiply(testVector);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,336,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,337,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,342,public void testGetVectors() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,343,RealMatrix m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,344,"assertClose(""get row"",m.getRow(1),testDataRow1,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,345,"assertClose(""get col"",m.getColumn(3),testDataCol3,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,346,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,347,double[] x = m.getRow(10);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,348,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,349,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,352,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,353,double[] x = m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,354,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,355,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,360,public void testEntryMutators() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,361,RealMatrix m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,362,"assertEquals(""get entry"",m.getEntry(1,2),2d,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,363,"m.setEntry(1,2,100d);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,364,"assertEquals(""get entry"",m.getEntry(1,2),100d,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,365,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,366,"double x = m.getEntry(0,2);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,367,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,368,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,371,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,372,"m.setEntry(1,4,200d);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,373,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,374,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,380,//--------------- -----------------Private methods
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,382,/** verifies that two matrices are close (1-norm) */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,383,"private void assertClose(String msg, RealMatrix m, RealMatrix n,"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,384,double tolerance) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,385,"assertTrue(msg,m.subtract(n).getNorm() < tolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,388,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,389,"private void assertClose(String msg, double[] m, double[] n,"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,390,double tolerance) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,391,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,392,"fail(""vectors not same length"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,394,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,395,"assertEquals(msg + "" "" +  i + "" elements differ"","
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,396,"m[i],n[i],tolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,400,/** Useful for debugging */
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,401,private void dumpMatrix(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,402,for (int i = 0; i < m.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,403,"String os = """";"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,404,for (int j = 0; j < m.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,405,"os += m.getEntry(i+1, j+1) + "" "";"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,407,System.out.println(os);
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,9,* are met:
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,54,package org.apache.commons.math.random;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,59,import java.io.File;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,60,import java.net.URL;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,62,import org.apache.commons.math.stat.Univariate;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,63,import org.apache.commons.math.stat.UnivariateImpl;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,66,* Test cases for the EmpiricalDistribution class
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,68,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,71,public final class EmpiricalDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,73,private EmpiricalDistribution empiricalDistribution = null;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,74,private File file = null;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,76,public EmpiricalDistributionTest(String name) {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,77,super(name);
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,80,public void setUp() {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,81,empiricalDistribution = new EmpiricalDistributionImpl(100);
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,82,"URL url = getClass().getResource(""testData.txt"");"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,83,file = new File(url.getFile());
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,86,public static Test suite() {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,87,TestSuite suite = new TestSuite(EmpiricalDistributionTest.class);
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,88,"suite.setName(""EmpiricalDistribution Tests"");"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,89,return suite;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,93,* Test EmpiricalDistrbution.load() using sample data file.<br>
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,94,"* Check that the sampleCount, mu and sigma match data in"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,95,* the sample data file.
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,97,public void testLoad() throws Exception {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,98,empiricalDistribution.load(file);
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,99,"// testData File has 10000 values, with mean ~ 5.0, std dev ~ 1"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,100,// Make sure that loaded distribution matches this
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,101,"assertEquals(empiricalDistribution.getSampleStats().getN(),1000,10E-7);"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,102,//TODO: replace with statistical tests
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,103,assertEquals
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,104,"(empiricalDistribution.getSampleStats().getMean(),"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,105,"5.069831575018909,10E-7);"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,106,assertEquals
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,107,"(empiricalDistribution.getSampleStats().getStandardDeviation(),"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,108,"1.0173699343977738,10E-7);"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,112,* Generate 1000 random values and make sure they look OK.<br>
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,113,* Note that there is a non-zero (but very small) probability that
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,114,* these tests will fail even if the code is working as designed.
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,116,public void testNext() throws Exception {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,117,tstGen(0.1);
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,121,* Make sure exception thrown if digest getNext is attempted
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,122,* before loading empiricalDistribution.
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,124,public void testNexFail() {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,125,try {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,126,empiricalDistribution.getNextValue();
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,127,"fail(""Expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,128,} catch (IllegalStateException ex) {;}
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,132,* Make sure we can handle a grid size that is too fine
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,134,public void testGridTooFine() throws Exception {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,135,empiricalDistribution = new EmpiricalDistributionImpl(10000);
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,136,tstGen(0.1);
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,140,* How about too fat?
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,142,public void testGridTooFat() throws Exception {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,143,empiricalDistribution = new EmpiricalDistributionImpl(1);
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,144,tstGen(5); // ridiculous tolerance; but ridiculous grid size
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,145,// really just checking to make sure we do not bomb
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,148,private void tstGen(double tolerance)throws Exception {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,149,empiricalDistribution.load(file);
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,150,Univariate stats = new UnivariateImpl();
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,151,for (int i = 1; i < 1000; i++) {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,152,stats.addValue(empiricalDistribution.getNextValue());
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,154,//TODO: replace these with statistical tests -- refactor as necessary
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,155,"assertEquals(""mean"", stats.getMean(),5.069831575018909,tolerance);"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,156,assertEquals
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,157,"(""std dev"", stats.getStandardDeviation(),1.0173699343977738,tolerance);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,5,* reserved.
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,9,* are met:
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,54,package org.apache.commons.math.random;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,59,import java.security.NoSuchProviderException;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,60,import java.security.NoSuchAlgorithmException;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,61,import java.util.HashSet;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,63,import org.apache.commons.math.stat.Frequency;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,64,import org.apache.commons.math.stat.TestStatisticImpl;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,65,import org.apache.commons.math.stat.Univariate;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,66,import org.apache.commons.math.stat.UnivariateImpl;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,69,* Test cases for the RandomData class.
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,71,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,74,public final class RandomDataTest extends TestCase {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,76,public RandomDataTest(String name) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,77,super(name);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,80,private long smallSampleSize = 1000;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,81,"private double[] expected = {250,250,250,250};"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,82,private int largeSampleSize = 10000;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,83,private int tolerance = 50;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,84,private String[] hex =
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,85,"{""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""a"",""b"",""c"",""d"",""e"",""f""};"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,86,private RandomDataImpl randomData = new RandomDataImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,87,private TestStatisticImpl testStatistic = new TestStatisticImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,90,public void setUp() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,93,public static Test suite() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,94,TestSuite suite = new TestSuite(RandomDataTest.class);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,95,"suite.setName(""RandomData Tests"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,96,return suite;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,99,/** test dispersion and failure modes for nextInt() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,100,public void testNextInt() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,101,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,102,"int x = randomData.nextInt(4,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,103,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,104,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,107,Frequency freq = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,108,int value = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,109,for (int i=0;i<smallSampleSize;i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,110,"value = randomData.nextInt(0,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,111,"assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,112,freq.addValue(value);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,114,double[] observed = new double[4];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,115,for (int i=0; i<4; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,116,String iString = new Integer(i).toString();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,117,observed[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,120,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,121,* Change to 11.34 for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,123,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,124,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,127,/** test dispersion and failure modes for nextLong() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,128,public void testNextLong() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,129,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,130,"long x = randomData.nextLong(4,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,131,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,132,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,135,Frequency freq = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,136,long value = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,137,for (int i=0;i<smallSampleSize;i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,138,"value = randomData.nextLong(0,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,139,"assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,140,freq.addValue(value);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,142,double[] observed = new double[4];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,143,for (int i=0; i<4; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,144,String iString = new Integer(i).toString();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,145,observed[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,148,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,149,* Change to 11.34 for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,151,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,152,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,155,/** test dispersion and failure modes for nextSecureLong() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,156,public void testNextSecureLong() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,157,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,158,"long x = randomData.nextSecureLong(4,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,159,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,160,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,163,Frequency freq = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,164,long value = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,165,for (int i=0;i<smallSampleSize;i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,166,"value = randomData.nextSecureLong(0,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,167,"assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,168,freq.addValue(value);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,170,double[] observed = new double[4];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,171,for (int i=0; i<4; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,172,String iString = new Integer(i).toString();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,173,observed[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,176,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,177,* Change to 11.34 for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,179,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,180,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,183,/** test dispersion and failure modes for nextSecureInt() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,184,public void testNextSecureInt() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,185,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,186,"long x = randomData.nextSecureInt(4,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,187,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,188,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,191,Frequency freq = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,192,int value = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,193,for (int i=0;i<smallSampleSize;i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,194,"value = randomData.nextSecureInt(0,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,195,"assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,196,freq.addValue(value);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,198,double[] observed = new double[4];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,199,for (int i=0; i<4; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,200,String iString = new Integer(i).toString();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,201,observed[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,204,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,205,* Change to 11.34 for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,207,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,208,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,212,* Make sure that empirical distribution of random Poisson(4)'s
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,213,* has P(X <= 5) close to actual cumulative Poisson probablity
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,214,* and that nextPoisson fails when mean is non-positive
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,215,"* TODO: replace with statistical test, adding test stat to TestStatistic"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,217,public void testNextPoisson() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,218,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,219,long x = randomData.nextPoisson(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,220,"fail(""zero mean -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,221,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,224,Frequency f = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,225,long v = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,226,for (int i = 0; i<largeSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,227,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,228,f.addValue(randomData.nextPoisson(4.0d));
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,229,} catch (Exception ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,230,fail(ex.getMessage());
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,233,"long cumFreq = f.getCount(""0"") + f.getCount(""1"") + f.getCount(""2"") +"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,234,"f.getCount(""3"") + f.getCount(""4"") + f.getCount(""5"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,235,long sumFreq = f.getSumFreq();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,236,double cumPct =
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,237,new Double(cumFreq).doubleValue()/new Double(sumFreq).doubleValue();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,238,"assertEquals(""cum Poisson(4)"",cumPct,0.7851,0.2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,239,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,240,long x = randomData.nextPoisson(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,241,"fail(""negative mean supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,242,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,245,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,246,long x = randomData.nextPoisson(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,247,"fail(""0 mean supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,248,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,254,/** test dispersion and failute modes for nextHex() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,255,public void testNextHex() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,256,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,257,String x = randomData.nextHexString(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,258,"fail(""negative length supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,259,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,262,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,263,String x = randomData.nextHexString(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,264,"fail(""zero length supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,265,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,268,String hexString = randomData.nextHexString(3);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,269,if (hexString.length() != 3) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,270,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,272,hexString = randomData.nextHexString(1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,273,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,274,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,276,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,277,hexString = randomData.nextHexString(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,278,"fail(""zero length requested -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,279,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,282,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,283,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,285,Frequency f = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,286,for (int i = 0; i < smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,287,hexString = randomData.nextHexString(100);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,288,if (hexString.length() != 100) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,289,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,291,for (int j = 0; j < hexString.length(); j++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,292,"f.addValue(hexString.substring(j,j+1));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,295,double[] expected = new double[16];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,296,double[] observed = new double[16];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,297,for (int i = 0; i < 16; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,298,expected[i] = (double)smallSampleSize*100/(double)16;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,299,observed[i] = f.getCount(hex[i]);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,301,"/* Use ChiSquare dist with df = 16-1 = 15, alpha = .001"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,302,* Change to 30.58 for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,304,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,305,"testStatistic.chiSquare(expected,observed) < 37.70);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,308,/** test dispersion and failute modes for nextHex() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,309,public void testNextSecureHex() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,310,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,311,String x = randomData.nextSecureHexString(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,312,"fail(""negative length -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,313,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,316,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,317,String x = randomData.nextSecureHexString(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,318,"fail(""zero length -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,319,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,322,String hexString = randomData.nextSecureHexString(3);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,323,if (hexString.length() != 3) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,324,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,326,hexString = randomData.nextSecureHexString(1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,327,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,328,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,330,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,331,hexString = randomData.nextSecureHexString(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,332,"fail(""zero length requested -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,333,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,336,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,337,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,339,Frequency f = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,340,for (int i = 0; i < smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,341,hexString = randomData.nextSecureHexString(100);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,342,if (hexString.length() != 100) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,343,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,345,for (int j = 0; j < hexString.length(); j++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,346,"f.addValue(hexString.substring(j,j+1));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,349,double[] expected = new double[16];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,350,double[] observed = new double[16];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,351,for (int i = 0; i < 16; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,352,expected[i] = (double)smallSampleSize*100/(double)16;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,353,observed[i] = f.getCount(hex[i]);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,355,"/* Use ChiSquare dist with df = 16-1 = 15, alpha = .001"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,356,* Change to 30.58 for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,358,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,359,"testStatistic.chiSquare(expected,observed) < 37.70);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,362,/** test failure modes and dispersion of nextUniform() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,363,public void testNextUniform() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,364,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,365,"double x = randomData.nextUniform(4,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,366,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,367,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,370,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,371,"double x = randomData.nextUniform(3,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,372,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,373,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,376,"double[] expected = new double[] {500,500};"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,377,"double[] observed = new double[] {0,0};"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,378,double lower = -1d;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,379,double upper = 20d;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,380,double midpoint = (lower + upper)/2d;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,381,double result = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,382,for (int i = 0; i < 1000; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,383,"result = randomData.nextUniform(lower,upper);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,384,if ((result == lower) || (result == upper)) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,385,"fail(""generated value equal to an endpoint: "" + result);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,387,if (result < midpoint) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,388,observed[0]++;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,389,} else {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,390,observed[1]++;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,393,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,394,* Change to 6.64 for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,396,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,397,"testStatistic.chiSquare(expected,observed) < 10.83);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,400,/** test failure modes and distribution of nextGaussian() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,401,public void testNextGaussian() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,402,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,403,"double x = randomData.nextGaussian(0,0);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,404,"fail(""zero sigma -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,405,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,408,Univariate u = new UnivariateImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,409,for (int i = 0; i<largeSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,410,"u.addValue(randomData.nextGaussian(0,1));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,412,double xbar = u.getMean();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,413,double s = u.getStandardDeviation();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,414,double n = (double) u.getN();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,415,"/* t-test at .001-level TODO: replace with externalized t-test, with"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,416,* test statistic defined in TestStatistic
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,418,assertTrue(Math.abs(xbar)/(s/Math.sqrt(n))< 3.29);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,421,/** test failure modes and distribution of nextExponential() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,422,public void testNextExponential() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,423,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,424,double x = randomData.nextExponential(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,425,"fail(""negative mean -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,426,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,429,"assertEquals(""0 mean"", 0,randomData.nextExponential(0),10E-8);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,430,long cumFreq = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,431,double v = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,432,for (int i = 0; i < largeSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,433,v = randomData.nextExponential(1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,434,"assertTrue(""exponential deviate postive"", v > 0);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,435,if (v < 2) cumFreq++;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,437,"/* TODO: Replace with a statistical test, with statistic added to"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,438,* TestStatistic.  Check below compares observed cumulative distribution
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,439,* evaluated at 2 with exponential CDF
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,441,"assertEquals(""exponential cumulative distribution"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,442,"(double)cumFreq/(double)largeSampleSize,0.8646647167633873,.2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,445,"/** test reseeding, algorithm/provider games */"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,446,"public void testConfig() throws NoSuchProviderException,"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,447,NoSuchAlgorithmException{
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,448,randomData.reSeed(1000);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,449,"double v = randomData.nextUniform(0,1);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,450,randomData.reSeed();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,451,"assertTrue(""different seeds"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,452,"Math.abs(v - randomData.nextUniform(0,1)) > 10E-12);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,453,randomData.reSeed(1000);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,454,"assertEquals(""same seeds"",v,randomData.nextUniform(0,1),10E-12);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,455,randomData.reSeedSecure(1000);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,456,String hex = randomData.nextSecureHexString(40);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,457,randomData.reSeedSecure();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,458,"assertTrue(""different seeds"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,459,!hex.equals(randomData.nextSecureHexString(40)));
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,460,randomData.reSeedSecure(1000);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,461,"assertTrue(""same seeds"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,462,!hex.equals(randomData.nextSecureHexString(40)));
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,464,"/* remove this test back soon,"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,465,* since it takes about 4 seconds */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,467,"randomData.setSecureAlgorithm(""SHA1PRNG"",""SUN"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,468,"assertTrue(""different seeds"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,469,!hex.equals(randomData.nextSecureHexString(40)));
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,470,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,471,"randomData.setSecureAlgorithm(""NOSUCHTHING"",""SUN"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,472,"fail(""expecting NoSuchAlgorithmException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,473,} catch (NoSuchAlgorithmException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,477,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,478,"randomData.setSecureAlgorithm(""SHA1PRNG"",""NOSUCHPROVIDER"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,479,"fail(""expecting NoSuchProviderException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,480,} catch (NoSuchProviderException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,484,// test reseeding without first using the generators
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,485,RandomDataImpl rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,486,rd.reSeed(100);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,487,"double ret = rd.nextLong(1,2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,488,RandomDataImpl rd2 = new RandomDataImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,489,rd2.reSeedSecure(2000);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,490,"ret = rd2.nextSecureLong(1,2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,491,rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,492,rd.reSeed();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,493,"ret = rd.nextLong(1,2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,494,rd2 = new RandomDataImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,495,rd2.reSeedSecure();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,496,"ret = rd2.nextSecureLong(1,2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,499,/** tests for nextSample() sampling from Collection */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,500,public void testNextSample() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,501,"Object[][] c = {{""0"",""1""},{""0"",""2""},{""0"",""3""},{""0"",""4""},{""1"",""2""},"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,502,"{""1"",""3""},{""1"",""4""},{""2"",""3""},{""2"",""4""},{""3"",""4""}};"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,503,"double[] observed = {0,0,0,0,0,0,0,0,0,0};"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,504,"double[] expected = {100,100,100,100,100,100,100,100,100,100};"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,506,"HashSet cPop = new HashSet();  //{0,1,2,3,4}"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,507,for (int i = 0; i < 5; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,508,cPop.add(Integer.toString(i));
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,511,Object[] sets = new Object[10]; // 2-sets from 5
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,512,for (int i = 0; i < 10; i ++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,513,HashSet hs = new HashSet();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,514,hs.add(c[i][0]);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,515,hs.add(c[i][1]);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,516,sets[i] = hs;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,519,for (int i = 0; i < 1000; i ++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,520,"Object[] cSamp = randomData.nextSample(cPop,2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,521,"observed[findSample(sets,cSamp)]++;"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,524,"/* Use ChiSquare dist with df = 10-1 = 9, alpha = .001"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,525,* Change to 21.67 for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,527,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,528,"testStatistic.chiSquare(expected,observed) < 27.88);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,530,// Make sure sample of size = size of collection returns same collection
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,531,HashSet hs = new HashSet();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,532,"hs.add(""one"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,533,"Object[] one = randomData.nextSample(hs,1);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,534,String oneString = (String) one[0];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,535,"if ((one.length != 1) || !oneString.equals(""one"")){"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,536,"fail(""bad sample for set size = 1, sample size = 1"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,539,// Make sure we fail for sample size > collection size
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,540,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,541,"one = randomData.nextSample(hs,2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,542,"fail(""sample size > set size, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,543,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,547,// Make sure we fail for empty collection
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,548,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,549,hs = new HashSet();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,550,"one = randomData.nextSample(hs,0);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,551,"fail(""n = k = 0, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,552,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,557,"private int findSample(Object[] u, Object[] samp) {"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,558,int result = -1;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,559,for (int i = 0; i < u.length; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,560,HashSet set = (HashSet) u[i];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,561,HashSet sampSet = new HashSet();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,562,for (int j = 0; j < samp.length; j++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,563,sampSet.add(samp[j]);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,565,if (set.equals(sampSet)) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,566,return i;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,569,"fail(""sample not found:{"" + samp[0] + "","" + samp[1] + ""}"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,570,return -1;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,573,/** tests for nextPermutation */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,574,public void testNextPermutation() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,575,"int[][] p = {{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0}};"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,576,"double[] observed = {0,0,0,0,0,0,};"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,577,"double[] expected = {100,100,100,100,100,100};"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,579,for (int i = 0; i < 600; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,580,"int[] perm = randomData.nextPermutation(3,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,581,"observed[findPerm(p,perm)]++;"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,584,"/* Use ChiSquare dist with df = 6-1 = 5, alpha = .001"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,585,* Change to 15.09 for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,587,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,588,"testStatistic.chiSquare(expected,observed) < 20.52);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,590,// Check size = 1 boundary case
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,591,"int[] perm = randomData.nextPermutation(1,1);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,592,if ((perm.length != 1) || (perm[0] != 0)){
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,593,"fail(""bad permutation for n = 1, sample k = 1"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,595,// Make sure we fail for k size > n
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,596,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,597,"perm = randomData.nextPermutation(2,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,598,"fail(""permutation k > n, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,599,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,603,// Make sure we fail for n = 0
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,604,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,605,"perm = randomData.nextPermutation(0,0);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,606,"fail(""permutation k = n = 0, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,607,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,616,"private int findPerm(int[][] p, int[] samp) {"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,617,int result = -1;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,618,for (int i = 0; i < p.length; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,619,boolean good = true;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,620,for (int j = 0; j < samp.length; j++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,621,if (samp[j] != p[i][j]) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,622,good = false;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,625,if (good)  {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,626,return i;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,629,"fail(""permutation not found"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,630,return -1;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,5,* reserved.
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,9,* are met:
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,54,package org.apache.commons.math.random;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,59,import java.net.URL;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,61,import org.apache.commons.math.stat.Univariate;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,62,import org.apache.commons.math.stat.UnivariateImpl;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,65,* Test cases for the ValueServer class.
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,67,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,70,public final class ValueServerTest extends TestCase {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,72,private ValueServer vs = new ValueServer();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,74,public ValueServerTest(String name) {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,75,super(name);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,78,public void setUp() {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,79,vs.setMode(ValueServer.DIGEST_MODE);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,80,try {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,81,"URL url = getClass().getResource(""testData.txt"");"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,82,vs.setValuesFileURL(url.toExternalForm());
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,83,} catch (Exception ex) {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,84,"fail(""malformed test URL"");"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,88,public static Test suite() {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,89,TestSuite suite = new TestSuite(ValueServerTest.class);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,90,"suite.setName(""ValueServer Tests"");"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,91,return suite;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,96,* Generate 1000 random values and make sure they look OK.<br>
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,97,* Note that there is a non-zero (but very small) probability that
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,98,* these tests will fail even if the code is working as designed.
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,100,public void testNextDigest() throws Exception{
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,101,double next = 0.0;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,102,double tolerance = 0.1;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,103,vs.computeDistribution();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,104,"assertTrue(""empirical distribution property"","
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,105,vs.getEmpiricalDistribution() != null);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,106,Univariate stats = new UnivariateImpl();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,107,for (int i = 1; i < 1000; i++) {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,108,next = vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,109,stats.addValue(next);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,111,"assertEquals(""mean"", 5.069831575018909, stats.getMean(), tolerance);"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,112,assertEquals
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,113,"(""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,114,tolerance);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,116,vs.computeDistribution(500);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,117,stats = new UnivariateImpl();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,118,for (int i = 1; i < 1000; i++) {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,119,next = vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,120,stats.addValue(next);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,122,"assertEquals(""mean"", 5.069831575018909, stats.getMean(), tolerance);"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,123,assertEquals
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,124,"(""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,125,tolerance);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,130,* Make sure exception thrown if digest getNext is attempted
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,131,* before loading empiricalDistribution.
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,133,public void testNextDigestFail() throws Exception {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,134,try {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,135,vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,136,"fail(""Expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,137,} catch (IllegalStateException ex) {;}
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,141,* Make sure exception thrown if nextReplay() is attempted
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,142,* before opening replay file.
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,144,public void testNextReplayFail() throws Exception {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,145,try {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,146,vs.setMode(ValueServer.REPLAY_MODE);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,147,vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,148,"fail(""Expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,149,} catch (IllegalStateException ex) {;}
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,153,* Test ValueServer REPLAY_MODE using values in testData file.<br>
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,154,"* Check that the values 1,2,1001,1002 match data file values 1 and 2."
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,155,* the sample data file.
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,157,public void testReplay() throws Exception {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,158,double firstDataValue = 4.038625496201205;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,159,double secondDataValue = 3.6485326248346936;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,160,double tolerance = 10E-15;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,161,double compareValue = 0.0d;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,162,vs.setMode(ValueServer.REPLAY_MODE);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,163,vs.openReplayFile();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,164,compareValue = vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,165,"assertEquals(compareValue,firstDataValue,tolerance);"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,166,compareValue = vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,167,"assertEquals(compareValue,secondDataValue,tolerance);"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,168,for (int i = 3; i < 1001; i++) {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,169,compareValue = vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,171,compareValue = vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,172,"assertEquals(compareValue,firstDataValue,tolerance);"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,173,compareValue = vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,174,"assertEquals(compareValue,secondDataValue,tolerance);"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,175,vs.closeReplayFile();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,176,// make sure no NPE
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,177,vs.closeReplayFile();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,181,* Test other ValueServer modes
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,183,public void testModes() throws Exception {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,184,vs.setMode(ValueServer.CONSTANT_MODE);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,185,vs.setMu(0);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,186,"assertEquals(""constant mode test"",vs.getMu(),vs.getNext(),Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,187,vs.setMode(ValueServer.UNIFORM_MODE);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,188,vs.setMu(2);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,189,double val = vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,190,assertTrue(val > 0 && val < 4);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,191,vs.setSigma(1);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,192,vs.setMode(ValueServer.GAUSSIAN_MODE);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,193,val = vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,194,"assertTrue(""gaussian value close enough to mean"","
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,195,val < vs.getMu() + 100*vs.getSigma());
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,196,vs.setMode(ValueServer.EXPONENTIAL_MODE);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,197,val = vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,198,assertTrue(val > 0);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,199,try {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,200,vs.setMode(1000);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,201,vs.getNext();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,202,"fail(""bad mode, expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,203,} catch (IllegalStateException ex) {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,209,* Test fill
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,211,public void testFill() throws Exception {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,212,vs.setMode(ValueServer.CONSTANT_MODE);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,213,vs.setMu(2);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,214,double[] val = new double[5];
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,215,vs.fill(val);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,216,for (int i = 0; i < 5; i++) {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,217,"assertEquals(""fill test in place"",2,val[i],Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,219,double v2[] = vs.fill(3);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,220,for (int i = 0; i < 3; i++) {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,221,"assertEquals(""fill test in place"",2,v2[i],Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,226,* Test getters to make Clover happy
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,228,public void testProperties() throws Exception {
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,229,vs.setMode(ValueServer.CONSTANT_MODE);
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,230,"assertEquals(""mode test"",ValueServer.CONSTANT_MODE,vs.getMode());"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,231,"vs.setValuesFileURL(""http://www.apache.org"");"
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,232,String s = vs.getValuesFileURL();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,233,"assertEquals(""valuesFileURL test"",""http://www.apache.org"",s);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,5,* reserved.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,9,* are met:
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,54,package org.apache.commons.math.special;
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,56,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,57,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,59,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,62,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,64,public class BetaTest extends TestCase {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,66,* Constructor for BetaTest.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,67,* @param name
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,69,public BetaTest(String name) {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,70,super(name);
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,73,"private void testRegularizedBeta(double expected, double x, double a,"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,74,double b)
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,76,try {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,77,"double actual = Beta.regularizedBeta(x, a, b);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,78,"TestUtils.assertEquals(expected, actual, 10e-5);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,79,} catch(MathException ex){
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,80,fail(ex.getMessage());
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,84,"private void testLogBeta(double expected, double a, double b) {"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,85,"double actual = Beta.logBeta(a, b);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,86,"TestUtils.assertEquals(expected, actual, 10e-5);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,89,public void testRegularizedBetaNanPositivePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,90,"testRegularizedBeta(Double.NaN, Double.NaN, 1.0, 1.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,93,public void testRegularizedBetaPositiveNanPositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,94,"testRegularizedBeta(Double.NaN, 0.5, Double.NaN, 1.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,97,public void testRegularizedBetaPositivePositiveNan() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,98,"testRegularizedBeta(Double.NaN, 0.5, 1.0, Double.NaN);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,101,public void testRegularizedBetaNegativePositivePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,102,"testRegularizedBeta(Double.NaN, -0.5, 1.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,105,public void testRegularizedBetaPositiveNegativePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,106,"testRegularizedBeta(Double.NaN, 0.5, -1.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,109,public void testRegularizedBetaPositivePositiveNegative() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,110,"testRegularizedBeta(Double.NaN, 0.5, 1.0, -2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,113,public void testRegularizedBetaZeroPositivePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,114,"testRegularizedBeta(0.0, 0.0, 1.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,117,public void testRegularizedBetaPositiveZeroPositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,118,"testRegularizedBeta(Double.NaN, 0.5, 0.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,121,public void testRegularizedBetaPositivePositiveZero() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,122,"testRegularizedBeta(Double.NaN, 0.5, 1.0, 0.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,125,public void testRegularizedBetaPositivePositivePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,126,"testRegularizedBeta(0.75, 0.5, 1.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,129,public void testLogBetaNanPositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,130,"testLogBeta(Double.NaN, Double.NaN, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,133,public void testLogBetaPositiveNan() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,134,"testLogBeta(Double.NaN, 1.0, Double.NaN);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,137,public void testLogBetaNegativePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,138,"testLogBeta(Double.NaN, -1.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,141,public void testLogBetaPositiveNegative() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,142,"testLogBeta(Double.NaN, 1.0, -2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,145,public void testLogBetaZeroPositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,146,"testLogBeta(Double.NaN, 0.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,149,public void testLogBetaPositiveZero() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,150,"testLogBeta(Double.NaN, 1.0, 0.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,153,public void testLogBetaPositivePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,154,"testLogBeta(-0.693147, 1.0, 2.0);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,5,* reserved.
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,9,* are met:
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,54,package org.apache.commons.math.special;
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,56,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,57,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,59,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,62,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,64,public class GammaTest extends TestCase {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,66,* Constructor for BetaTest.
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,67,* @param name
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,69,public GammaTest(String name) {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,70,super(name);
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,73,"private void testRegularizedGamma(double expected, double a, double x) {"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,74,try {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,75,"double actual = Gamma.regularizedGammaP(a, x);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,76,"TestUtils.assertEquals(expected, actual, 10e-5);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,77,} catch(MathException ex){
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,78,fail(ex.getMessage());
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,82,"private void testLogGamma(double expected, double x) {"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,83,double actual = Gamma.logGamma(x);
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,84,"TestUtils.assertEquals(expected, actual, 10e-5);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,87,public void testRegularizedGammaNanPositive() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,88,"testRegularizedGamma(Double.NaN, Double.NaN, 1.0);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,91,public void testRegularizedGammaPositiveNan() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,92,"testRegularizedGamma(Double.NaN, 1.0, Double.NaN);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,95,public void testRegularizedGammaNegativePositive() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,96,"testRegularizedGamma(Double.NaN, -1.5, 1.0);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,99,public void testRegularizedGammaPositiveNegative() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,100,"testRegularizedGamma(Double.NaN, 1.0, -1.0);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,103,public void testRegularizedGammaZeroPositive() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,104,"testRegularizedGamma(Double.NaN, 0.0, 1.0);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,107,public void testRegularizedGammaPositiveZero() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,108,"testRegularizedGamma(0.0, 1.0, 0.0);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,111,public void testRegularizedGammaPositivePositive() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,112,"testRegularizedGamma(0.632121, 1.0, 1.0);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,115,public void testLogGammaNan() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,116,"testLogGamma(Double.NaN, Double.NaN);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,119,public void testLogGammaNegative() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,120,"testLogGamma(Double.NaN, -1.0);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,123,public void testLogGammaZero() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,124,"testLogGamma(Double.NaN, 0.0);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,127,public void testLogGammaPositive() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,128,"testLogGamma(0.693147, 3.0);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,56,import java.util.ArrayList;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,57,import java.util.List;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,59,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,60,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,61,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,63,import org.apache.commons.math.beans.*;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,66,* Test cases for the {@link BeanListUnivariateImpl} class.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,68,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,71,public final class BeanListUnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,73,private List patientList = null;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,74,private double tolerance = Double.MIN_VALUE;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,76,public BeanListUnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,77,super(name);
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,80,public void setUp() {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,81,patientList = new ArrayList();
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,83,// Create and add patient bean 1
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,84,"VitalStats vs1 = new VitalStats( new Double(120.0),"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,85,new Double(96.4) );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,86,"Patient p1 = new Patient( vs1, new Integer( 35 ) );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,87,patientList.add( p1 );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,89,// Create and add patient bean 2
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,90,"VitalStats vs2 = new VitalStats( new Double(70.0),"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,91,new Double(97.4) );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,92,"Patient p2 = new Patient( vs2, new Integer( 23 ) );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,93,patientList.add( p2 );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,95,// Create and add patient bean 3
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,96,"VitalStats vs3 = new VitalStats( new Double(90.0),"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,97,new Double(98.6) );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,98,"Patient p3 = new Patient( vs3, new Integer( 42 ) );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,99,patientList.add( p3 );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,102,public static Test suite() {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,103,TestSuite suite = new TestSuite(BeanListUnivariateImplTest.class);
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,104,"suite.setName(""Frequency Tests"");"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,105,return suite;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,108,/** test stats */
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,109,public void testStats() {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,111,StoreUnivariate u = new BeanListUnivariateImpl( patientList );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,113,"assertEquals(""total count"",3,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,115,u.clear();
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,116,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,119,public void testPropStats() {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,121,"StoreUnivariate heartU = new BeanListUnivariateImpl( patientList,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,122,"""vitalStats.heartRate"" );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,126,"assertEquals( ""Mean heart rate unexpected"", 93.333,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,127,"heartU.getMean(), 0.001 );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,128,"assertEquals( ""Max heart rate unexpected"", 120.0,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,129,"heartU.getMax(), 0.001 );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,131,"StoreUnivariate ageU = new BeanListUnivariateImpl( patientList,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,132,"""age"" );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,134,"assertEquals( ""Mean age unexpected"", 33.333,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,135,"ageU.getMean(), 0.001 );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,136,"assertEquals( ""Max age unexpected"", 42.0,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,137,"ageU.getMax(), 0.001 );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,141,public void testSetPropertyName(){
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,142,BeanListUnivariateImpl u = new BeanListUnivariateImpl(null);
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,143,"String expected = ""property"";"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,144,u.setPropertyName(expected);
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,145,"assertEquals(expected, u.getPropertyName());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,60,* Test cases for the TestStatistic class.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,62,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,65,public final class BivariateRegressionTest extends TestCase {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,68,"* NIST ""Norris"" refernce data set from"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,69,* http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Norris.dat
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,70,"* Strangely, order is {y,x}"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,72,"private double[][] data = {{0.1,0.2},{338.8,337.4},{118.1,118.2},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,73,"{888.0,884.6},{9.2,10.1},{228.1,226.5},{668.5,666.3},{998.5,996.3},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,74,"{449.1,448.6},{778.9,777.0},{559.2,558.2},{0.3,0.4},{0.1,0.6},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,75,"{778.1,775.5},{668.8,666.9},{339.3,338.0},{448.9,447.5},{10.8,11.6},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,76,"{557.7,556.0},{228.3,228.1},{998.0,995.8},{888.8,887.6},{119.6,120.2},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,77,"{0.3,0.3},{0.6,0.3},{557.6,556.8},{339.3,339.1},{888.0,887.2},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,78,"{998.5,999.0},{778.9,779.0},{10.2,11.1},{117.6,118.3},{228.9,229.2},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,79,"{668.4,669.1},{449.2,448.9},{0.2,0.5}};"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,82,* Correlation example from
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,83,* http://www.xycoon.com/correlation.htm
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,85,"private double[][] corrData = {{101.0,99.2},{100.1,99.0},{100.0,100.0},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,86,"{90.6,111.6},{86.5,122.2},{89.7,117.6},{90.6,121.1},{82.8,136.0},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,87,"{70.1,154.2},{65.4,153.6},{61.3,158.5},{62.5,140.6},{63.6,136.2},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,88,"{52.6,168.0},{59.7,154.3},{59.5,149.0},{61.3,165.5}};"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,91,"* From Moore and Mcabe, ""Introduction to the Practice of Statistics"""
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,92,* Example 10.3
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,94,"private double[][] infData = {{15.6,5.2},{26.8,6.1},{37.8,8.7},{36.4,8.5},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,95,"{35.5,8.8},{18.6,4.9},{15.3,4.5},{7.9,2.5},{0.0,1.1}};"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,98,* From http://www.xycoon.com/simple_linear_regression.htm
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,100,"private double[][] infData2 = {{1,3},{2,5},{3,7},{4,14},{5,11}};"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,102,public BivariateRegressionTest(String name) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,103,super(name);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,106,public void setUp() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,109,public static Test suite() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,110,TestSuite suite = new TestSuite(BivariateRegressionTest.class);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,111,"suite.setName(""BivariateRegression Tests"");"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,112,return suite;
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,115,public void testNorris() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,116,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,117,for (int i = 0; i < data.length; i++) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,118,"regression.addData(data[i][1],data[i][0]);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,120,"assertEquals(""slope"",1.00211681802045,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,121,"regression.getSlope(),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,122,"assertEquals(""slope std err"",0.429796848199937E-03,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,123,"regression.getSlopeStdErr(),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,124,"assertEquals(""number of observations"",36,regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,125,"assertEquals(""intercept"", -0.262323073774029,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,126,"regression.getIntercept(),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,127,"assertEquals(""std err intercept"", 0.232818234301152,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,128,"regression.getInterceptStdErr(),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,129,"assertEquals(""r-square"",0.999993745883712,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,130,"regression.getRSquare(),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,131,"assertEquals(""SSR"",4255954.13232369,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,132,"regression.getRegressionSumSquares(),10E-9);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,133,"assertEquals(""MSE"",0.782864662630069,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,134,"regression.getMeanSquareError(),10E-10);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,135,"assertEquals(""SSE"",26.6173985294224,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,136,"regression.getSumSquaredErrors(),10E-9);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,137,"assertEquals(""predict(0)"",-0.262323073774029,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,138,"regression.predict(0),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,139,"assertEquals(""predict(1)"",1.00211681802045-0.262323073774029,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,140,"regression.predict(1),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,143,public void testCorr() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,144,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,145,regression.addData(corrData);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,146,"assertEquals(""number of observations"",17,regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,147,"assertEquals(""r-square"",.896123,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,148,"regression.getRSquare(),10E-6);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,149,"assertEquals(""r"",-.946638,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,150,"regression.getR(),10E-6);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,153,public void testNaNs() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,155,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,157,"assertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,158,"assertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,159,"assertTrue(""slope std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,160,Double.isNaN(regression.getSlopeStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,161,"assertTrue(""intercept std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,162,Double.isNaN(regression.getInterceptStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,163,"assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,164,"assertTrue(""e not NaN"",Double.isNaN(regression.getR()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,165,"assertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,166,"assertTrue(""RSS not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,167,Double.isNaN(regression.getRegressionSumSquares()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,168,"assertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,169,"assertTrue(""SSTO not NaN"",Double.isNaN(regression.getTotalSumSquares()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,170,"assertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,172,"regression.addData(1,2);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,173,"regression.addData(1,3);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,175,"// No x variation, so these should still blow..."
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,176,"assertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,177,"assertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,178,"assertTrue(""slope std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,179,Double.isNaN(regression.getSlopeStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,180,"assertTrue(""intercept std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,181,Double.isNaN(regression.getInterceptStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,182,"assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,183,"assertTrue(""e not NaN"",Double.isNaN(regression.getR()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,184,"assertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,185,"assertTrue(""RSS not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,186,Double.isNaN(regression.getRegressionSumSquares()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,187,"assertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,188,"assertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,190,// but SSTO should be OK
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,191,"assertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,193,regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,195,"regression.addData(1,2);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,196,"regression.addData(3,3);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,198,"// All should be OK except MSE, s(b0), s(b1) which need one more df"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,199,"assertTrue(""interceptNaN"",!Double.isNaN(regression.getIntercept()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,200,"assertTrue(""slope NaN"",!Double.isNaN(regression.getSlope()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,201,"assertTrue(""slope std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,202,Double.isNaN(regression.getSlopeStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,203,"assertTrue(""intercept std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,204,Double.isNaN(regression.getInterceptStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,205,"assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,206,"assertTrue(""r NaN"",!Double.isNaN(regression.getR()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,207,"assertTrue(""r-square NaN"",!Double.isNaN(regression.getRSquare()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,208,"assertTrue(""RSS NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,209,!Double.isNaN(regression.getRegressionSumSquares()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,210,"assertTrue(""SSE NaN"",!Double.isNaN(regression.getSumSquaredErrors()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,211,"assertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,212,"assertTrue(""predict NaN"",!Double.isNaN(regression.predict(0)));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,214,"regression.addData(1,4);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,216,"// MSE, MSE, s(b0), s(b1) should all be OK now"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,217,"assertTrue(""MSE NaN"",!Double.isNaN(regression.getMeanSquareError()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,218,"assertTrue(""slope std err NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,219,!Double.isNaN(regression.getSlopeStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,220,"assertTrue(""intercept std err NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,221,!Double.isNaN(regression.getInterceptStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,224,public void testClear() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,225,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,226,regression.addData(corrData);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,227,"assertEquals(""number of observations"",17,regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,228,regression.clear();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,229,"assertEquals(""number of observations"",0,regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,230,regression.addData(corrData);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,231,"assertEquals(""r-square"",.896123,regression.getRSquare(),10E-6);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,232,regression.addData(data);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,233,"assertEquals(""number of observations"",53,regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,236,public void testInference() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,237,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,238,regression.addData(infData);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,239,"assertEquals(""slope confidence interval"", 0.0271,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,240,"regression.getSlopeConfidenceInterval(),0.0001);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,241,"assertEquals(""slope std err"",0.01146,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,242,"regression.getSlopeStdErr(),0.0001);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,244,regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,245,regression.addData(infData2);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,246,"assertEquals(""significance"", 0.023331,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,247,"regression.getSignificance(),0.0001);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,249,//FIXME: get a real example to test against with alpha = .01
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,250,"assertTrue(""tighter means wider"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,251,regression.getSlopeConfidenceInterval() <
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,252,regression.getSlopeConfidenceInterval(0.01));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,254,try {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,255,double x = regression.getSlopeConfidenceInterval(1);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,256,"fail(""expecting IllegalArgumentException for alpha = 1"");"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,257,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,60,import java.io.BufferedReader;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,61,import java.io.FileNotFoundException;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,62,import java.io.IOException;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,63,import java.io.InputStreamReader;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,64,import org.apache.commons.logging.*;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,66,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,67,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,69,public class CertifiedDataTest extends TestCase {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,71,protected Univariate u = null;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,73,protected double mean = Double.NaN;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,75,protected double std = Double.NaN;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,77,protected Log log = LogFactory.getLog(this.getClass());
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,80,* Certified Data Test Constructor
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,81,* @param name
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,83,public CertifiedDataTest(String name) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,84,super(name);
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,87,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,88,* @see junit.framework.TestCase#setUp()
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,90,public void setUp() {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,94,* @return The test suite
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,96,public static Test suite() {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,97,TestSuite suite = new TestSuite(CertifiedDataTest.class);
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,98,"suite.setName(""Certified Tests"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,99,return suite;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,103,* Test UnivariateImpl
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,105,public void testUnivariateImpl() {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,107,u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,109,"loadStats(""data/Lew.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,110,"assertEquals(""Lew: std"", std, u.getStandardDeviation(), .000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,111,"assertEquals(""Lew: mean"", mean, u.getMean(), .000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,113,"loadStats(""data/Lottery.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,114,"assertEquals(""Lottery: std"", std, u.getStandardDeviation(), .000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,115,"assertEquals(""Lottery: mean"", mean, u.getMean(), .000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,117,"loadStats(""data/PiDigits.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,118,"assertEquals(""PiDigits: std"", std, u.getStandardDeviation(), .0000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,119,"assertEquals(""PiDigits: mean"", mean, u.getMean(), .0000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,121,"loadStats(""data/Mavro.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,122,"assertEquals(""Mavro: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,123,"assertEquals(""Mavro: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,125,"//loadStats(""data/Michelso.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,126,"//assertEquals(""Michelso: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,127,"//assertEquals(""Michelso: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,129,"loadStats(""data/NumAcc1.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,130,"assertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,131,"assertEquals(""NumAcc1: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,133,"//loadStats(""data/NumAcc2.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,134,"//assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), .000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,135,"//assertEquals(""NumAcc2: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,139,* Test UnivariateImpl
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,141,public void testStoredUnivariateImpl() {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,143,u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,145,"loadStats(""data/Lew.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,146,"assertEquals(""Lew: std"", std, u.getStandardDeviation(), .000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,147,"assertEquals(""Lew: mean"", mean, u.getMean(), .000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,149,"loadStats(""data/Lottery.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,150,"assertEquals(""Lottery: std"", std, u.getStandardDeviation(), .000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,151,"assertEquals(""Lottery: mean"", mean, u.getMean(), .000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,153,"loadStats(""data/PiDigits.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,154,"assertEquals(""PiDigits: std"", std, u.getStandardDeviation(), .0000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,155,"assertEquals(""PiDigits: mean"", mean, u.getMean(), .0000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,157,"loadStats(""data/Mavro.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,158,"assertEquals(""Mavro: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,159,"assertEquals(""Mavro: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,161,"//loadStats(""data/Michelso.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,162,"//assertEquals(""Michelso: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,163,"//assertEquals(""Michelso: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,165,"loadStats(""data/NumAcc1.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,166,"assertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,167,"assertEquals(""NumAcc1: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,169,"//loadStats(""data/NumAcc2.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,170,"//assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), .000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,171,"//assertEquals(""NumAcc2: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,175,* loads a Univariate off of a test file
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,176,* @param file
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,178,private void loadStats(String resource) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,180,try {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,182,u.clear();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,183,mean = Double.NaN;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,184,std = Double.NaN;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,186,BufferedReader in =
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,187,new BufferedReader(
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,188,new InputStreamReader(
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,189,getClass().getResourceAsStream(resource)));
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,191,String line = null;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,193,for (int j = 0; j < 60; j++) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,194,line = in.readLine();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,195,if (j == 40) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,196,mean =
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,197,Double.parseDouble(
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,198,"line.substring(line.lastIndexOf("":"") + 1).trim());"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,200,if (j == 41) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,201,std =
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,202,Double.parseDouble(
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,203,"line.substring(line.lastIndexOf("":"") + 1).trim());"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,207,line = in.readLine();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,209,while (line != null) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,211,u.addValue(Double.parseDouble(line.trim()));
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,212,line = in.readLine();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,215,in.close();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,217,} catch (FileNotFoundException fnfe) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,218,"log.error(fnfe.getMessage(), fnfe);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,219,} catch (IOException ioe) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,220,"log.error(ioe.getMessage(), ioe);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,56,import java.io.BufferedReader;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,57,import java.io.IOException;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,58,import java.io.StringReader;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,60,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,61,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,62,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,65,* Test cases for the {@link Frequency} class.
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,67,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,70,public final class FrequencyTest extends TestCase {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,71,private long oneL = 1;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,72,private long twoL = 2;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,73,private int oneI = 1;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,74,private int twoI = 2;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,75,"private String oneS = ""1"";"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,76,"private String twoS = ""2"";"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,77,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,79,public FrequencyTest(String name) {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,80,super(name);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,83,public void setUp() {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,86,public static Test suite() {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,87,TestSuite suite = new TestSuite(FrequencyTest.class);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,88,"suite.setName(""Frequency Tests"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,89,return suite;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,92,/** test freq counts */
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,93,public void testCounts() {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,94,"Frequency f = new Frequency(""test counts"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,95,"assertEquals(""total count"",0,f.getSumFreq());"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,96,f.addValue(oneL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,97,f.addValue(twoL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,98,f.addValue(oneS);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,99,f.addValue(oneI);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,100,"assertEquals(""one frequency count"",3,f.getCount(""1""));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,101,"assertEquals(""two frequency count"",1,f.getCount(""2""));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,102,"assertEquals(""foo frequency count"",0,f.getCount(""foo""));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,103,"assertEquals(""total count"",4,f.getSumFreq());"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,104,f.clear();
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,105,"assertEquals(""total count"",0,f.getSumFreq());"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,108,/** test pcts */
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,109,public void testPcts() {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,110,"Frequency f = new Frequency(""test pcts"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,111,f.addValue(oneL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,112,f.addValue(twoL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,113,f.addValue(oneI);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,114,f.addValue(twoI);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,115,"f.addValue(""foo"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,116,"f.addValue(""foo"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,117,"f.addValue(""foo"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,118,"f.addValue(""foo"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,119,"assertEquals(""one pct"",0.25,f.getPct(""1""),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,120,"assertEquals(""two pct"",0.25,f.getPct(""2""),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,121,"assertEquals(""foo pct"",0.5,f.getPct(""foo""),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,122,"assertEquals(""bar pct"",0,f.getPct(""bar""),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,128,public void testToString(){
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,129,"Frequency f = new Frequency(""test toString"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,130,f.addValue(oneL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,131,f.addValue(twoL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,132,f.addValue(oneI);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,133,f.addValue(twoI);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,135,String s = f.toString();
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,136,assertNotNull(s);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,137,BufferedReader reader = new BufferedReader(new StringReader(s));
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,138,try {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,139,String line = reader.readLine(); // header line
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,140,assertNotNull(line);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,142,line = reader.readLine(); // one's or two's line
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,143,assertNotNull(line);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,145,line = reader.readLine(); // one's or two's line
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,146,assertNotNull(line);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,148,line = reader.readLine(); // no more elements
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,149,assertNull(line);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,150,} catch(IOException ex){
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,151,fail(ex.getMessage());
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,158,public void testSetName(){
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,159,"String name = ""name"";"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,160,Frequency f = new Frequency();
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,161,f.setName(name);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,162,"assertEquals(name, f.getName());"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,56,import java.util.ArrayList;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,57,import java.util.List;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,59,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,60,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,61,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,64,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,66,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,69,public final class ListUnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,70,private double one = 1;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,71,private float two = 2;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,72,private int three = 3;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,74,private double mean = 2;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,75,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,76,private double sum = 8;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,77,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,78,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,79,private double n = 4;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,80,private double min = 1;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,81,private double max = 3;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,82,private double skewness = 0;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,83,private double kurtosis = 0.5;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,84,private int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,85,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,87,public ListUnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,88,super(name);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,91,public void setUp() {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,94,public static Test suite() {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,95,TestSuite suite = new TestSuite(ListUnivariateImplTest.class);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,96,"suite.setName(""Frequency Tests"");"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,97,return suite;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,100,/** test stats */
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,101,public void testStats() {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,102,List externalList = new ArrayList();
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,104,StoreUnivariate u = new ListUnivariateImpl( externalList );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,106,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,107,u.addValue(one);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,108,u.addValue(two);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,109,u.addValue(two);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,110,u.addValue(three);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,111,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,112,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,113,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,114,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,115,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,116,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,117,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,118,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,119,u.clear();
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,120,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,123,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,124,List list = new ArrayList();
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,126,StoreUnivariate u = new ListUnivariateImpl( list );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,128,"assertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,129,"assertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,130,"assertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,132,list.add( new Double(one));
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,134,"assertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,135,"assertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,136,"assertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,139,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,140,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,142,"double[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,143,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,144,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,145,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,148,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,149,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,150,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,151,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,154,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,155,ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,156,u.setWindowSize(10);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,158,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,159,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,160,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,161,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,163,"assertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,165,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,166,// of a discarded element
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,167,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,168,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,170,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,172,"assertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,56,import java.util.ArrayList;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,57,import java.util.List;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,58,import org.apache.commons.math.util.NumberTransformer;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,59,import org.apache.commons.math.util.TransformerMap;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,60,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,61,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,62,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,65,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,67,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,70,public final class MixedListUnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,71,private double one = 1;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,72,private float two = 2;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,73,private int three = 3;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,75,private double mean = 2;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,76,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,77,private double sum = 8;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,78,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,79,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,80,private double n = 4;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,81,private double min = 1;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,82,private double max = 3;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,83,private double skewness = 0;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,84,private double kurtosis = 0.5;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,85,private int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,86,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,88,private TransformerMap transformers = new TransformerMap();
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,90,public MixedListUnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,91,super(name);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,92,transformers = new TransformerMap();
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,94,"transformers.putTransformer(Foo.class, new NumberTransformer() {"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,95,public double transform(Object o) {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,96,return Double.parseDouble(((Foo) o).heresFoo());
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,100,"transformers.putTransformer(Bar.class, new NumberTransformer() {"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,101,public double transform(Object o) {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,102,return Double.parseDouble(((Bar) o).heresBar());
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,109,public void setUp() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,112,public static Test suite() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,113,TestSuite suite = new TestSuite(MixedListUnivariateImplTest.class);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,114,"suite.setName(""Mixed List Tests"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,115,return suite;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,118,/** test stats */
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,119,public void testStats() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,120,List externalList = new ArrayList();
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,122,"StoreUnivariate u = new ListUnivariateImpl(externalList,transformers);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,124,"assertEquals(""total count"", 0, u.getN(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,125,u.addValue(one);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,126,u.addValue(two);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,127,u.addValue(two);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,128,u.addValue(three);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,129,"assertEquals(""N"", n, u.getN(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,130,"assertEquals(""sum"", sum, u.getSum(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,131,"assertEquals(""sumsq"", sumSq, u.getSumsq(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,132,"assertEquals(""var"", var, u.getVariance(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,133,"assertEquals(""std"", std, u.getStandardDeviation(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,134,"assertEquals(""mean"", mean, u.getMean(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,135,"assertEquals(""min"", min, u.getMin(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,136,"assertEquals(""max"", max, u.getMax(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,137,u.clear();
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,138,"assertEquals(""total count"", 0, u.getN(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,141,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,142,List list = new ArrayList();
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,144,"StoreUnivariate u = new ListUnivariateImpl(new ArrayList(),transformers);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,146,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,147,"""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,148,Double.isNaN(u.getMean()));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,149,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,150,"""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,151,Double.isNaN(u.getStandardDeviation()));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,152,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,153,"""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,154,Double.isNaN(u.getVariance()));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,156,u.addValue(one);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,158,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,159,"""Mean of n = 1 set should be value of single item n1, instead it is "" + u.getMean() ,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,160,u.getMean() == one);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,162,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,163,"""StdDev of n = 1 set should be zero, instead it is: """
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,164,"+ u.getStandardDeviation(),"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,165,u.getStandardDeviation() == 0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,166,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,167,"""Variance of n = 1 set should be zero"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,168,u.getVariance() == 0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,171,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,172,ListUnivariateImpl u =
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,173,"new ListUnivariateImpl(new ArrayList(), transformers);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,175,"u.addObject(""12.5"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,176,u.addObject(new Integer(12));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,177,"u.addObject(""11.8"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,178,"u.addObject(""14.2"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,179,u.addObject(new Foo());
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,180,"u.addObject(""14.5"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,181,u.addObject(new Long(21));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,182,"u.addObject(""8.2"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,183,"u.addObject(""10.3"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,184,"u.addObject(""11.3"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,185,u.addObject(new Float(14.1));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,186,"u.addObject(""9.9"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,187,"u.addObject(""12.2"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,188,u.addObject(new Bar());
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,189,"u.addObject(""12.1"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,190,"u.addObject(""11"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,191,u.addObject(new Double(19.8));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,192,"u.addObject(""11"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,193,"u.addObject(""10"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,194,"u.addObject(""8.8"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,195,"u.addObject(""9"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,196,"u.addObject(""12.3"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,199,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,200,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,201,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,202,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,205,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,206,"ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList(),transformers);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,207,u.setWindowSize(10);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,209,u.addValue(1.0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,210,u.addValue(2.0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,211,u.addValue(3.0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,212,u.addValue(4.0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,214,assertEquals(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,215,"""Geometric mean not expected"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,216,"2.213364,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,217,"u.getGeometricMean(),"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,218,0.00001);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,220,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,221,// of a discarded element
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,222,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,223,u.addValue(i + 2);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,225,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,226,assertEquals(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,227,"""Geometric mean not expected"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,228,"5.755931,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,229,"u.getGeometricMean(),"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,230,0.00001);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,234,public final class Foo {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,235,public String heresFoo() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,236,"return ""14.9"";"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,240,public final class Bar {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,241,public String heresBar() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,242,"return ""12.0"";"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,61,* Test cases for the {@link StatUtils} class.
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,62,* @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,65,public final class StatUtilsTest extends TestCase {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,67,private double one = 1;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,68,private float two = 2;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,69,private int three = 3;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,70,private double mean = 2;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,71,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,72,private double sum = 8;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,73,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,74,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,75,private double n = 4;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,76,private double min = 1;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,77,private double max = 3;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,78,private double skewness = 0;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,79,private double kurtosis = 0.5;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,80,private int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,81,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,83,public StatUtilsTest(String name) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,84,super(name);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,87,public void setUp() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,90,public static Test suite() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,91,TestSuite suite = new TestSuite(StatUtilsTest.class);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,92,"suite.setName(""StatUtil Tests"");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,93,return suite;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,96,/** test stats */
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,97,public void testStats() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,98,"double[] values = new double[] { one, two, two, three };"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,99,"assertEquals(""sum"", sum, StatUtils.sum(values), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,100,"assertEquals(""sumsq"", sumSq, StatUtils.sumSq(values), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,101,"assertEquals(""var"", var, StatUtils.variance(values), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,102,"assertEquals(""mean"", mean, StatUtils.mean(values), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,103,"assertEquals(""min"", min, StatUtils.min(values), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,104,"assertEquals(""max"", max, StatUtils.max(values), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,107,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,108,double[] values = new double[0];
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,110,assertTrue(
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,111,"""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,112,Double.isNaN(StatUtils.mean(values)));
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,113,assertTrue(
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,114,"""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,115,Double.isNaN(StatUtils.variance(values)));
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,117,values = new double[] { one };
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,119,assertTrue(
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,120,"""Mean of n = 1 set should be value of single item n1"","
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,121,StatUtils.mean(values) == one);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,122,assertTrue(
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,123,"""Variance of n = 1 set should be zero"","
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,124,StatUtils.variance(values) == 0);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,127,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,129,double[] values =
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,131,"12.5,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,132,"12,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,133,"11.8,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,134,"14.2,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,135,"14.9,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,136,"14.5,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,137,"21,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,138,"8.2,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,139,"10.3,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,140,"11.3,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,141,"14.1,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,142,"9.9,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,143,"12.2,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,144,"12,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,145,"12.1,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,146,"11,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,147,"19.8,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,148,"11,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,149,"10,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,150,"8.8,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,151,"9,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,152,12.3 };
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,154,"assertEquals(""mean"", 12.40455, StatUtils.mean(values), 0.0001);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,155,"assertEquals(""variance"", 10.00236, StatUtils.variance(values), 0.0001);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,158,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,159,"double[] values = { 1.0, 2.0, 3.0, 4.0 };"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,161,assertEquals(
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,162,"""Product not expected"","
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,163,"24.0,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,164,"StatUtils.product(values),"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,165,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,168,public void testArrayIndexConditions() throws Exception {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,169,"double[] values = { 1.0, 2.0, 3.0, 4.0 };"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,171,assertEquals(
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,172,"""Sum not expected"","
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,173,"5.0,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,174,"StatUtils.sum(values, 1, 2),"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,175,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,176,assertEquals(
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,177,"""Sum not expected"","
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,178,"3.0,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,179,"StatUtils.sum(values, 0, 2),"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,180,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,181,assertEquals(
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,182,"""Sum not expected"","
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,183,"7.0,"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,184,"StatUtils.sum(values, 2, 2),"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,185,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,187,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,188,"StatUtils.sum(values, 2, 3);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,189,"assertTrue(""Didn't throw exception"", false);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,190,} catch (Exception e) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,191,assertTrue(true);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,194,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,195,"StatUtils.sum(values, -1, 2);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,196,"assertTrue(""Didn't throw exception"", false);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,197,} catch (Exception e) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,198,assertTrue(true);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,60,import org.apache.commons.math.random.RandomData;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,61,import org.apache.commons.math.random.RandomDataImpl;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,64,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,66,* @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,69,public final class StoreUnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,70,private double one = 1;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,71,private float two = 2;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,72,private int three = 3;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,73,private double mean = 2;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,74,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,75,private double sum = 8;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,76,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,77,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,78,private double n = 4;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,79,private double min = 1;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,80,private double max = 3;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,81,private double skewness = 0;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,82,private double kurtosis = 0.5;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,83,private int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,84,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,86,public StoreUnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,87,super(name);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,90,public void setUp() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,93,public static Test suite() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,94,TestSuite suite = new TestSuite(StoreUnivariateImplTest.class);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,95,"suite.setName(""Frequency Tests"");"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,96,return suite;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,99,/** test stats */
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,100,public void testStats() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,101,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,102,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,103,u.addValue(one);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,104,u.addValue(two);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,105,u.addValue(two);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,106,u.addValue(three);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,107,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,108,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,109,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,110,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,111,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,112,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,113,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,114,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,115,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,116,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,119,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,120,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,122,"assertTrue(""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,123,Double.isNaN( u.getMean() ) );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,124,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,125,Double.isNaN( u.getStandardDeviation() ) );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,126,"assertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,127,Double.isNaN(u.getVariance() ) );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,129,u.addValue(one);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,131,"assertTrue( ""Mean of n = 1 set should be value of single item n1"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,132,u.getMean() == one);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,133,"assertTrue( ""StdDev of n = 1 set should be zero, instead it is: """
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,134,"+ u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,135,"assertTrue( ""Variance of n = 1 set should be zero"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,136,u.getVariance() == 0);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,139,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,140,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,142,double[] testArray =
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,143,"{ 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,144,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,145,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,146,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,149,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,150,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,151,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,152,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,155,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,156,StoreUnivariateImpl u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,157,u.setWindowSize(10);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,159,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,160,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,161,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,162,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,164,"//assertEquals( ""Product not expected"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,165,"//    24.0, u.getProduct(), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,166,"assertEquals( ""Geometric mean not expected"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,167,"2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,169,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,170,// of a discarded element
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,171,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,172,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,174,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,176,"//assertEquals( ""Product not expected"", 39916800.0,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,177,"//    u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,178,"assertEquals( ""Geometric mean not expected"", 5.755931,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,179,"u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,182,public void testGetSortedValues() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,183,"double[] test1 = {5,4,3,2,1};"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,184,"double[] test2 = {5,2,1,3,4,0};"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,185,double[] test3 = {1};
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,186,int[] testi = null;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,187,double[] test4 = null;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,188,RandomData rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,189,tstGetSortedValues(test1);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,190,tstGetSortedValues(test2);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,191,tstGetSortedValues(test3);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,192,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,193,"testi = rd.nextPermutation(10,6);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,194,test4 = new double[6];
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,195,for (int j = 0; j < testi.length; j++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,196,test4[j] = (double) testi[j];
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,198,tstGetSortedValues(test4);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,200,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,201,"testi = rd.nextPermutation(10,5);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,202,test4 = new double[5];
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,203,for (int j = 0; j < testi.length; j++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,204,test4[j] = (double) testi[j];
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,206,tstGetSortedValues(test4);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,211,private void tstGetSortedValues(double[] test) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,212,StoreUnivariateImpl u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,213,for (int i = 0; i < test.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,214,u.addValue(test[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,216,double[] sorted = u.getSortedValues();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,217,if (sorted.length != test.length) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,218,"fail(""wrong length for sorted values array"");"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,220,for (int i = 0; i < sorted.length-1; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,221,if (sorted[i] > sorted[i+1]) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,222,"fail(""sorted values out of sequence"");"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,227,public void testPercentiles() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,228,"double[] test = {5,4,3,2,1};"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,229,StoreUnivariateImpl u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,230,for (int i = 0; i < test.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,231,u.addValue(test[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,233,"assertEquals(""expecting min"",1,u.getPercentile(5),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,234,"assertEquals(""expecting max"",5,u.getPercentile(99),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,235,"assertEquals(""expecting middle"",3,u.getPercentile(50),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,236,try {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,237,double x = u.getPercentile(0);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,238,"fail(""expecting IllegalArgumentException for getPercentile(0)"");"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,239,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,242,try {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,243,double x = u.getPercentile(120);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,244,"fail(""expecting IllegalArgumentException for getPercentile(120)"");"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,245,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,249,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,250,"double[] test2 = {1,2,3,4};"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,251,for (int i = 0; i < test2.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,252,u.addValue(test2[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,254,"assertEquals(""Q1"",1.25,u.getPercentile(25),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,255,"assertEquals(""Q3"",3.75,u.getPercentile(75),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,256,"assertEquals(""Q2"",2.5,u.getPercentile(50),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,258,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,259,double[] test3 = {1};
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,260,for (int i = 0; i < test3.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,261,u.addValue(test3[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,263,"assertEquals(""Q1"",1,u.getPercentile(25),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,264,"assertEquals(""Q3"",1,u.getPercentile(75),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,265,"assertEquals(""Q2"",1,u.getPercentile(50),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,267,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,268,RandomData rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,269,"int[] testi = rd.nextPermutation(100,100); // will contain 0-99"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,270,for (int j = 0; j < testi.length; j++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,271,"u.addValue((double) testi[j]);  //OK, laugh at me for the cast"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,273,for (int i = 1; i < 100; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,274,"assertEquals(""percentile "" + i,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,275,"(double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,278,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,279,"double[] test4 = {1,2,3,4,100};"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,280,for (int i = 0; i < test4.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,281,u.addValue(test4[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,283,"assertEquals(""80th"",80.8,u.getPercentile(80),10E-12);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,285,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,286,"assertTrue(""empty value set should return NaN"","
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,287,Double.isNaN(u.getPercentile(50)));
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,60,* Test cases for the TestStatistic class.
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,62,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,65,public final class TestStatisticTest extends TestCase {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,67,private TestStatisticImpl testStatistic = new TestStatisticImpl();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,69,public TestStatisticTest(String name) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,70,super(name);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,74,public void setUp() {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,78,TestSuite suite = new TestSuite(TestStatisticTest.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,79,"suite.setName(""TestStatistic Tests"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,83,public void testChiSquare() {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,84,"double[] observed = {11,24,69,96};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,85,"double[] expected = {8.2,25.2,65.8,100.8};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,86,"assertEquals(""chi-square statistic"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,87,"1.39743495,testStatistic.chiSquare(expected,observed),10E-5);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,89,double[] tooShortObs = {0};
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,90,double[] tooShortEx = {1};
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,91,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,92,"testStatistic.chiSquare(tooShortObs,tooShortEx);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,93,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,94,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,98,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,99,"testStatistic.chiSquareTest(tooShortObs,tooShortEx);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,100,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,101,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,105,"double[] unMatchedObs = {0,1,2,3};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,106,"double[] unMatchedEx = {1,1,2};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,107,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,108,"testStatistic.chiSquare(unMatchedEx,unMatchedObs);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,109,"fail(""arrays have different lengths,"" +"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,110,""" IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,111,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,114,expected[0] = 0;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,115,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,116,"testStatistic.chiSquareTest(expected, observed, .01);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,117,"fail(""bad expected count, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,118,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,121,/** from http://www.vsenvirginia.org/stat/classpractice/Voter_Preferences_CP.pdf */
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,122,"double[] observed1 = {504, 523, 72, 70, 31};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,123,"double[] expected1 = {480, 540, 84, 60, 36};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,124,"assertEquals(""chi-square test statistic"", 5.81,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,125,"testStatistic.chiSquare(expected1,observed1),10E-2);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,126,"assertEquals(""chi-square p-value"", 0.21,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,127,"testStatistic.chiSquareTest(expected1, observed1),10E-2);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,128,"assertTrue(""chi-square test reject"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,129,"testStatistic.chiSquareTest(expected1, observed1, 0.3));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,130,"assertTrue(""chi-square test accept"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,131,"!testStatistic.chiSquareTest(expected1, observed1, 0.1));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,132,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,133,"testStatistic.chiSquareTest(expected1, observed1, 95);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,134,"fail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,135,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,140,public void testT(){
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,141,"double[] observed = {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,142,"94.0, 101.0, 88.0, 98.0, 94.0, 101.0, 92.0, 95.0};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,143,double mu = 100.0;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,144,Univariate sampleStats = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,145,for (int i = 0; i < observed.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,146,sampleStats.addValue(observed[i]);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,149,"assertEquals(""t statistic"", -2.82, testStatistic.t(mu, observed),"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,150,10E-3);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,151,"assertEquals(""t statistic"", -2.82, testStatistic.t(mu, sampleStats),"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,152,10E-3);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,154,double[] nullObserved = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,155,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,156,"testStatistic.t(mu, nullObserved);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,157,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,158,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,162,UnivariateImpl nullStats = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,163,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,164,"testStatistic.t(mu, nullStats);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,165,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,166,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,170,double[] emptyObs = {};
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,171,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,172,"testStatistic.t(mu, emptyObs);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,173,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,174,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,178,Univariate emptyStats = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,179,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,180,"testStatistic.t(mu, emptyStats);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,181,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,182,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,186,double[] tooShortObs = {1.0};
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,187,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,188,"testStatistic.t(mu, tooShortObs);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,189,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,190,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,193,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,194,"testStatistic.tTest(mu, tooShortObs);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,195,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,196,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,200,Univariate tooShortStats = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,201,tooShortStats.addValue(0d);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,202,tooShortStats.addValue(2d);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,203,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,204,"testStatistic.t(mu, tooShortStats);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,205,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,206,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,209,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,210,"testStatistic.tTest(mu, tooShortStats);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,211,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,212,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,216,"/** Moore and McCabe Example 8.3, p 516 */"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,217,"double[] oneSidedP = {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,218,"6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,219,Univariate oneSidedPStats = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,220,for (int i = 0; i < oneSidedP.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,221,oneSidedPStats.addValue(oneSidedP[i]);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,223,"assertEquals(""one sample t stat"",3.86,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,224,"testStatistic.t(0d,oneSidedP),0.01);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,225,"assertEquals(""one sample t stat"",3.86,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,226,"testStatistic.t(0d,oneSidedPStats),0.01);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,227,"assertEquals(""one sample p value"",0.00052,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,228,"testStatistic.tTest(0d,oneSidedP)/2d,10E-5);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,229,"assertEquals(""one sample p value"",0.00052,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,230,"testStatistic.tTest(0d,oneSidedPStats)/2d,10E-5);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,231,"assertTrue(""one sample t-test reject"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,232,"testStatistic.tTest(0d,oneSidedP,0.01));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,233,"assertTrue(""one sample t-test reject"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,234,"testStatistic.tTest(0d,oneSidedPStats,0.01));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,235,"assertTrue(""one sample t-test accept"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,236,"!testStatistic.tTest(0d,oneSidedP,0.0001));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,237,"assertTrue(""one sample t-test accept"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,238,"!testStatistic.tTest(0d,oneSidedPStats,0.0001));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,239,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,240,"testStatistic.tTest(0d,oneSidedP, 95);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,241,"fail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,242,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,245,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,246,"testStatistic.tTest(0d,oneSidedPStats, 95);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,247,"fail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,248,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,252,"/** Moore and McCabe Example 8.12, p 552 */"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,253,"double[] sample1 = {7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,254,"double[] sample2 = {-1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,255,Univariate sampleStats1 = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,256,for (int i = 0; i < sample1.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,257,sampleStats1.addValue(sample1[i]);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,259,Univariate sampleStats2 = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,260,for (int i = 0; i < sample2.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,261,sampleStats2.addValue(sample2[i]);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,263,//FIXME: textbook example reported t stat uses pooled variance
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,264,// should replace with R-verified example
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,265,"assertEquals(""two sample t stat"",1.634,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,266,"testStatistic.t(sample1, sample2), 0.1);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,267,"assertEquals(""two sample t stat"",1.634,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,268,"testStatistic.t(sampleStats1, sampleStats2), 0.1);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,269,"// This test is OK, since book reports non-pooled exact p-value"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,270,"assertEquals(""two sample p value"",0.059,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,271,"testStatistic.tTest(sample1, sample2)/2d, 10E-3);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,272,"assertEquals(""two sample p value"",0.059,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,273,"testStatistic.tTest(sampleStats1, sampleStats2)/2d, 10E-3);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,274,"assertTrue(""two sample t-test reject"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,275,"testStatistic.tTest(sample1, sample2, 0.2));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,276,"assertTrue(""two sample t-test reject"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,277,"testStatistic.tTest(sampleStats1, sampleStats2, 0.2));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,278,"assertTrue(""two sample t-test accept"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,279,"!testStatistic.tTest(sample1, sample2,0.1));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,280,"assertTrue(""two sample t-test accept"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,281,"!testStatistic.tTest(sampleStats1, sampleStats2,0.1));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,282,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,283,"testStatistic.tTest(sample1, sample2, 95);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,284,"fail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,285,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,288,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,289,"testStatistic.tTest(sampleStats1, sampleStats2, 95);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,290,"fail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,291,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,294,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,295,"testStatistic.tTest(sample1, tooShortObs, .01);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,296,"fail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,297,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,300,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,301,"testStatistic.tTest(sampleStats1, tooShortStats, .01);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,302,"fail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,303,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,306,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,307,"testStatistic.tTest(sample1, tooShortObs);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,308,"fail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,309,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,312,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,313,"testStatistic.tTest(sampleStats1, tooShortStats);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,314,"fail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,315,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,318,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,319,"testStatistic.t(sample1, tooShortObs);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,320,"fail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,321,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,324,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,325,"testStatistic.t(sampleStats1, tooShortStats);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,326,"fail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,327,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,61,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,63,* @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,66,public final class UnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,67,private double one = 1;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,68,private float twoF = 2;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,69,private long twoL = 2;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,70,private int three = 3;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,71,private double mean = 2;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,72,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,73,private double sum = 8;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,74,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,75,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,76,private double n = 4;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,77,private double min = 1;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,78,private double max = 3;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,79,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,81,public UnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,82,super(name);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,85,public void setUp() {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,88,public static Test suite() {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,89,TestSuite suite = new TestSuite(UnivariateImplTest.class);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,90,"suite.setName(""Frequency Tests"");"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,91,return suite;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,94,/** test stats */
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,95,public void testStats() {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,96,UnivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,97,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,98,u.addValue(one);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,99,u.addValue(twoF);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,100,u.addValue(twoL);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,101,u.addValue(three);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,102,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,103,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,104,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,105,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,106,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,107,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,108,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,109,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,110,u.clear();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,111,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,114,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,115,UnivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,116,"assertTrue(""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,117,Double.isNaN( u.getMean() ) );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,118,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,119,Double.isNaN( u.getStandardDeviation() ) );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,120,"assertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,121,Double.isNaN(u.getVariance() ) );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,122,"assertTrue(""skew of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,123,Double.isNaN(u.getSkewness() ) );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,124,"assertTrue(""kurtosis of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,125,Double.isNaN(u.getKurtosis() ) );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,128,/* n=1 */
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,129,u.addValue(one);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,130,"assertTrue(""mean should be one (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,131,u.getMean() == one);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,132,"assertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,133,u.getGeometricMean() == one);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,134,"assertTrue(""Std should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,135,u.getStandardDeviation() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,136,"assertTrue(""variance should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,137,u.getVariance() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,138,"assertTrue(""skew should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,139,u.getSkewness() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,140,"assertTrue(""kurtosis should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,141,u.getKurtosis() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,143,/* n=2 */
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,144,u.addValue(twoF);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,145,"assertTrue(""Std should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,146,u.getStandardDeviation() != 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,147,"assertTrue(""variance should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,148,u.getVariance() != 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,149,"assertTrue(""skew should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,150,u.getSkewness() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,151,"assertTrue(""kurtosis should be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,152,u.getKurtosis() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,154,/* n=3 */
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,155,u.addValue(twoL);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,156,"assertTrue(""skew should not be zero (n = 3)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,157,u.getSkewness() != 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,158,"assertTrue(""kurtosis should be zero (n = 3)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,159,u.getKurtosis() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,161,/* n=4 */
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,162,u.addValue(three);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,163,"assertTrue(""kurtosis should not be zero (n = 4)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,164,u.getKurtosis() != 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,168,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,169,UnivariateImpl u = new UnivariateImpl(10);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,171,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,172,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,173,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,174,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,176,"assertEquals( ""Geometric mean not expected"", 2.213364,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,177,"u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,179,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,180,// of a discarded element
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,181,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,182,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,184,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,186,"assertEquals( ""Geometric mean not expected"", 5.755931,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,187,"u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,190,public void testRollingMinMax() {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,191,UnivariateImpl u = new UnivariateImpl(3);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,192,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,193,u.addValue( 5.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,194,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,195,u.addValue( 4.0 ); // discarding min
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,196,"assertEquals( ""min not expected"", 3.0,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,197,"u.getMin(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,198,u.addValue(1.0);  // discarding max
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,199,"assertEquals( ""max not expected"", 4.0,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,200,"u.getMax(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,203,public void testNaNContracts() {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,204,UnivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,205,double nan = Double.NaN;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,206,"assertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,207,"assertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,208,"assertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,209,"assertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,210,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,212,u.addValue(1.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,214,"assertEquals( ""mean not expected"", 1.0,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,215,"u.getMean(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,216,"assertEquals( ""variance not expected"", 0.0,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,217,"u.getVariance(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,218,"assertEquals( ""geometric mean not expected"", 1.0,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,219,"u.getGeometricMean(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,221,u.addValue(-1.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,223,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,225,u.addValue(0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,227,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,229,//FiXME: test all other NaN contract specs
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,232,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,233,Univariate u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,235,double[] testArray =
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,236,"{ 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,237,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,238,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,239,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,242,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,243,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,244,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,245,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,54,package org.apache.commons.math.stat.univariate;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,56,import org.apache.commons.math.stat.univariate.moment.FourthMoment;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,57,import org.apache.commons.math.stat.univariate.moment.Kurtosis;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,58,import org.apache.commons.math.stat.univariate.moment.Mean;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,59,import org.apache.commons.math.stat.univariate.moment.Skewness;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,60,import org.apache.commons.math.stat.univariate.moment.Variance;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,62,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,65,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,67,public class InteractionTest extends TestCase {
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,69,protected double mean = 12.40454545454550;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,70,protected double var = 10.00235930735930;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,71,protected double skew = 1.437423729196190;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,72,protected double kurt = 2.377191264804700;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,74,protected double tolerance = 10E-12;
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,76,protected double[] testArray =
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,78,"12.5,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,79,"12,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,80,"11.8,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,81,"14.2,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,82,"14.9,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,83,"14.5,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,84,"21,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,85,"8.2,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,86,"10.3,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,87,"11.3,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,88,"14.1,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,89,"9.9,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,90,"12.2,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,91,"12,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,92,"12.1,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,93,"11,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,94,"19.8,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,95,"11,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,96,"10,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,97,"8.8,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,98,"9,"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,99,12.3 };
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,101,public InteractionTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,102,super(name);
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,106,public void testInteraction() {
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,108,FourthMoment m4 = new FourthMoment();
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,109,Mean m = new Mean(m4);
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,110,Variance v = new Variance(m4);
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,111,Skewness s= new Skewness(m4);
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,112,Kurtosis k = new Kurtosis(m4);
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,114,for (int i = 0; i < testArray.length; i++){
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,115,m4.increment(testArray[i]);
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,116,m.increment(testArray[i]);
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,117,v.increment(testArray[i]);
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,118,s.increment(testArray[i]);
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,119,k.increment(testArray[i]);
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,122,"assertEquals(mean,m.getResult(),tolerance);"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,123,"assertEquals(var,v.getResult(),tolerance);"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,124,"assertEquals(skew ,s.getResult(),tolerance);"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,125,"assertEquals(kurt,k.getResult(),tolerance);"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,54,package org.apache.commons.math.stat.univariate;
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,58,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,59,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,61,public abstract class StorelessUnivariateStatisticAbstractTest
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,62,extends UnivariateStatisticAbstractTest {
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,64,public StorelessUnivariateStatisticAbstractTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,65,super(name);
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,68,public abstract UnivariateStatistic getUnivariateStatistic();
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,70,public abstract double expectedValue();
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,72,public void testIncrementation() throws Exception {
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,74,StorelessUnivariateStatistic statistic =
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,75,(StorelessUnivariateStatistic) getUnivariateStatistic();
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,77,statistic.clear();
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,79,for (int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,80,statistic.increment(testArray[i]);
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,83,"assertEquals(expectedValue(), statistic.getResult(), getTolerance());"
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,85,statistic.clear();
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,87,assertTrue(Double.isNaN(statistic.getResult()));
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,54,package org.apache.commons.math.stat.univariate;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,56,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,59,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,60,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,62,public abstract class UnivariateStatisticAbstractTest extends TestCase {
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,64,protected double mean = 12.40454545454550;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,65,protected double geoMean = 12.070589161633011;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,67,protected double var = 10.00235930735930;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,68,protected double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,69,protected double skew = 1.437423729196190;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,70,protected double kurt = 2.377191264804700;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,72,protected double min = 8.2;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,73,protected double max = 21;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,74,protected double median = 12;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,75,protected double percentile5 = 8.81;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,76,protected double percentile95 = 19.555;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,78,protected double product = 628096400563833200000000.0;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,79,protected double sumLog = 54.79698061164520;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,80,protected double sumSq = 3595.250;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,81,protected double sum = 272.90;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,83,protected double tolerance = 10E-12;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,85,protected double[] testArray =
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,87,"12.5,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,88,"12,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,89,"11.8,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,90,"14.2,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,91,"14.9,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,92,"14.5,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,93,"21,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,94,"8.2,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,95,"10.3,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,96,"11.3,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,97,"14.1,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,98,"9.9,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,99,"12.2,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,100,"12,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,101,"12.1,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,102,"11,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,103,"19.8,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,104,"11,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,105,"10,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,106,"8.8,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,107,"9,"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,108,12.3 };
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,110,public UnivariateStatisticAbstractTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,111,super(name);
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,114,public abstract UnivariateStatistic getUnivariateStatistic();
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,116,public abstract double expectedValue();
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,118,public double getTolerance() {
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,119,return tolerance;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,122,public void testEvaluation() throws Exception {
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,123,assertEquals(
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,124,"expectedValue(),"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,125,"getUnivariateStatistic().evaluate(testArray),"
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,126,getTolerance());
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,64,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:21 $
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,66,public class GeometricMeanTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,68,protected GeometricMean stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,71,* @param name
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,73,public GeometricMeanTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,74,super(name);
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,78,TestSuite suite = new TestSuite(GeometricMeanTest.class);
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,79,"suite.setName(""Mean  Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,83,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,84,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,86,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,88,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,89,stat = new GeometricMean();
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,91,return stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,94,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,95,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,97,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,98,return this.geoMean;
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,66,public class KurtosisTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,68,protected Kurtosis stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,71,* @param name
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,73,public KurtosisTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,74,super(name);
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,78,TestSuite suite = new TestSuite(KurtosisTest.class);
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,79,"suite.setName(""Kurtosis  Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,83,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,84,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,86,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,88,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,89,stat = new Kurtosis();
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,91,return stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,94,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,95,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,97,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,98,return this.kurt;
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,66,public class MeanTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,68,protected Mean stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,71,* @param name
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,73,public MeanTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,74,super(name);
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,78,TestSuite suite = new TestSuite(MeanTest.class);
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,79,"suite.setName(""Mean  Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,83,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,84,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,86,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,88,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,89,stat = new Mean();
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,91,return stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,94,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,95,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,97,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,98,return this.mean;
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,65,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,67,public class SkewnessTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,69,protected Skewness stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,72,* @param name
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,74,public SkewnessTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,75,super(name);
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,78,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,79,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,81,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,83,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,84,stat = new Skewness();
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,86,return stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,89,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,90,TestSuite suite = new TestSuite(SkewnessTest.class);
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,91,"suite.setName(""Skewness Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,92,return suite;
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,95,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,96,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,98,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,99,return this.skew;
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,65,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,67,public class StandardDeviationTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,69,protected StandardDeviation stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,72,* @param name
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,74,public StandardDeviationTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,75,super(name);
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,78,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,79,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,81,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,83,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,84,stat = new StandardDeviation();
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,86,return stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,89,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,90,TestSuite suite = new TestSuite(StandardDeviationTest.class);
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,91,"suite.setName(""StandardDeviation Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,92,return suite;
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,95,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,96,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,98,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,99,return this.std;
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,54,package org.apache.commons.math.stat.univariate.moment;
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,65,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,67,public class VarianceTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,69,protected Variance stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,72,* @param name
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,74,public VarianceTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,75,super(name);
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,78,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,79,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,81,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,83,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,84,stat = new Variance();
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,86,return stat;
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,89,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,90,TestSuite suite = new TestSuite(VarianceTest.class);
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,91,"suite.setName(""Variance Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,92,return suite;
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,95,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,96,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,98,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,99,return this.var;
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,54,package org.apache.commons.math.stat.univariate.rank;
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,66,public class MaxTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,68,protected Max stat;
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,71,* @param name
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,73,public MaxTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,74,super(name);
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,78,TestSuite suite = new TestSuite(MaxTest.class);
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,79,"suite.setName(""Max  Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,83,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,84,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,86,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,88,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,89,stat = new Max();
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,91,return stat;
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,94,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,95,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,97,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,98,return this.max;
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,54,package org.apache.commons.math.stat.univariate.rank;
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,59,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,64,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:21 $
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,66,public class MedianTest extends UnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,68,protected Median stat;
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,71,* @param name
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,73,public MedianTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,74,super(name);
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,78,TestSuite suite = new TestSuite(MedianTest.class);
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,79,"suite.setName(""Median  Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,83,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,84,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,86,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,88,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,89,stat = new Median();
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,91,return stat;
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,94,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,95,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,97,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,98,return this.median;
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,54,package org.apache.commons.math.stat.univariate.rank;
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,66,public class MinTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,68,protected Min stat;
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,71,* @param name
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,73,public MinTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,74,super(name);
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,78,TestSuite suite = new TestSuite(MinTest.class);
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,79,"suite.setName(""Min  Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,83,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,84,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,86,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,88,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,89,stat = new Min();
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,91,return stat;
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,94,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,95,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,97,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,98,return this.min;
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,54,package org.apache.commons.math.stat.univariate.rank;
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,59,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,66,public class PercentileTest extends UnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,68,protected Percentile stat;
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,71,* @param name
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,73,public PercentileTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,74,super(name);
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,78,TestSuite suite = new TestSuite(PercentileTest.class);
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,79,"suite.setName(""Percentile Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,83,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,84,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,86,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,88,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,89,stat = new Percentile(95.0);
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,91,return stat;
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,94,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,95,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,97,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,98,// TODO: fix this bad calculation in Percentile
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,99,return 20.82;
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,102,public void testHighPercentile(){
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,103,"double[] d = new double[]{1, 2, 3};"
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,104,Percentile p = new Percentile(75);
True,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,105,"assertEquals(3.0, p.evaluate(d), 1.0e-5);"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,54,package org.apache.commons.math.stat.univariate.summary;
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,66,public class ProductTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,68,protected Product stat;
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,71,* @param name
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,73,public ProductTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,74,super(name);
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,78,TestSuite suite = new TestSuite(ProductTest.class);
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,79,"suite.setName(""Product Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,83,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,84,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,86,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,88,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,89,stat = new Product();
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,91,return stat;
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,94,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,95,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,97,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,98,return this.product;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,54,package org.apache.commons.math.stat.univariate.summary;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,66,public class SumLogTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,68,protected SumOfLogs stat;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,71,* @param name
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,73,public SumLogTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,74,super(name);
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,78,TestSuite suite = new TestSuite(SumLogTest.class);
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,79,"suite.setName(""SumLog Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,83,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,84,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,86,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,88,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,89,stat = new SumOfLogs();
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,91,return stat;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,94,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,95,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,97,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,98,return this.sumLog;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,54,package org.apache.commons.math.stat.univariate.summary;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,66,public class SumSqTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,68,protected SumOfSquares stat;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,71,* @param name
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,73,public SumSqTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,74,super(name);
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,78,TestSuite suite = new TestSuite(SumSqTest.class);
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,79,"suite.setName(""SumSq Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,83,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,84,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,86,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,88,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,89,stat = new SumOfSquares();
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,91,return stat;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,94,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,95,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,97,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,98,return this.sumSq;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,54,package org.apache.commons.math.stat.univariate.summary;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,57,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,59,import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,63,* Test cases for the {@link UnivariateStatistic} class.
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,66,public class SumTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,68,protected Sum stat;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,71,* @param name
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,73,public SumTest(String name) {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,74,super(name);
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,78,TestSuite suite = new TestSuite(SumTest.class);
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,79,"suite.setName(""Sum Tests"");"
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,80,return suite;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,83,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,84,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,86,public UnivariateStatistic getUnivariateStatistic() {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,88,if(stat == null)
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,89,stat = new Sum();
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,91,return stat;
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,94,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,95,* @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,97,public double expectedValue() {
True,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,98,return this.sum;
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,55,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,57,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,59,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,62,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,64,public class BeanTransformerTest extends TestCase {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,69,public void testConstructor(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,70,BeanTransformer b = new BeanTransformer();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,71,assertNull(b.getPropertyName());
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,77,public void testConstructorString(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,78,"String name = ""property"";"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,79,BeanTransformer b = new BeanTransformer(name);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,80,"assertEquals(name, b.getPropertyName());"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,86,public void testSetPropertyName(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,87,"String name = ""property"";"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,88,BeanTransformer b = new BeanTransformer();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,89,b.setPropertyName(name);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,90,"assertEquals(name, b.getPropertyName());"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,96,public void testTransformNoSuchMethod(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,97,"BeanTransformer b = new BeanTransformer(""z"");"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,98,TestBean target = new TestBean();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,99,double value = b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,100,"TestUtils.assertEquals(Double.NaN, value, 1.0e-2);"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,106,public void testTransform(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,107,"BeanTransformer b = new BeanTransformer(""x"");"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,108,TestBean target = new TestBean();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,109,double value = b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,110,"TestUtils.assertEquals(1.0, value, 1.0e-2);"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,116,public void testTransformInvocationError(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,117,"BeanTransformer b = new BeanTransformer(""z"");"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,118,TestBean target = new TestBean();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,119,double value = b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,120,"TestUtils.assertEquals(Double.NaN, value, 1.0e-2);"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,126,public void testTransformInvalidType(){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,127,"BeanTransformer b = new BeanTransformer(""y"");"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,128,TestBean target = new TestBean();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,129,try {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,130,b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,131,fail();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,132,} catch(ClassCastException ex){
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,133,// success
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,54,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,56,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,58,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,61,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,63,public class ContinuedFractionTest extends TestCase {
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,65,* Constructor for ContinuedFractionTest.
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,66,* @param name
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,68,public ContinuedFractionTest(String name) {
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,69,super(name);
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,72,public void testGoldenRation(){
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,73,ContinuedFraction cf = new ContinuedFraction() {
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,74,"public double getA(int n, double x) {"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,75,return 1.0;
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,78,"public double getB(int n, double x) {"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,79,return 1.0;
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,83,try {
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,84,"double gr = cf.evaluate(0.0, 10e-9);"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,85,"assertEquals(1.61803399, gr, 10e-9);"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,86,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,87,fail(e.getMessage());
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,54,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,58,* This class contains test cases for the ExpandableDoubleArray.
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,60,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,62,public class ContractableDoubleArrayTest extends ExpandableDoubleArrayTest {
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,64,public ContractableDoubleArrayTest(String name) {
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,65,super( name );
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,68,/* (non-Javadoc)
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,69,* @see junit.framework.TestCase#setUp()
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,71,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,72,da = new ContractableDoubleArray();
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,73,ra = new ContractableDoubleArray();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,55,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,57,import java.math.BigDecimal;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,59,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,61,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,64,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,66,public class DefaultTransformerTest extends TestCase {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,70,public void testTransformDouble(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,71,double expected = 1.0;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,72,Double input = new Double(expected);
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,73,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,74,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,80,public void testTransformNull(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,81,double expected = Double.NaN;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,82,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,83,"TestUtils.assertEquals(expected, t.transform(null), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,89,public void testTransformInteger(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,90,double expected = 1.0;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,91,Integer input = new Integer(1);
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,92,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,93,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,99,public void testTransformBigDecimal(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,100,double expected = 1.0;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,101,"BigDecimal input = new BigDecimal(""1.0"");"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,102,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,103,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,109,public void testTransformString(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,110,double expected = 1.0;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,111,"String input = ""1.0"";"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,112,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,113,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,119,public void testTransformObject(){
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,120,double expected = Double.NaN;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,121,Boolean input = Boolean.TRUE;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,122,DefaultTransformer t = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,123,"TestUtils.assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,54,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,56,import org.apache.commons.math.stat.StatUtils;
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,58,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,61,* This class contains test cases for the ExpandableDoubleArray.
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,63,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,65,public abstract class DoubleArrayAbstractTest extends TestCase {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,67,protected DoubleArray da = null;
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,69,// Array used to test rolling
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,70,protected DoubleArray ra = null;
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,72,public DoubleArrayAbstractTest(String name) {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,73,super(name);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,76,public void testAdd1000() {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,78,for (int i = 0; i < 1000; i++) {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,79,da.addElement(i);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,82,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,83,"""Number of elements should be equal to 1000 after adding 1000 values"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,84,"1000,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,85,da.getNumElements());
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,87,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,88,"""The element at the 56th index should be 56"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,89,"56.0,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,90,"da.getElement(56),"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,91,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,95,public void testGetValues() {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,96,"double[] controlArray = { 2.0, 4.0, 6.0 };"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,98,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,99,da.addElement(4.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,100,da.addElement(6.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,101,double[] testArray = da.getElements();
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,103,for (int i = 0; i < da.getNumElements(); i++) {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,104,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,105,"""The testArray values should equal the controlArray values, index i: """
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,106,+ i
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,107,"+ "" does not match"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,108,"testArray[i],"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,109,"controlArray[i],"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,110,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,115,public void testAddElementRolling() {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,116,ra.addElement(0.5);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,117,ra.addElement(1.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,118,ra.addElement(1.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,119,ra.addElement(1.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,120,ra.addElement(1.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,121,ra.addElement(1.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,122,ra.addElementRolling(2.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,124,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,125,"""There should be 6 elements in the eda"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,126,"6,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,127,ra.getNumElements());
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,128,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,129,"""The max element should be 2.0"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,130,"2.0,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,131,"StatUtils.max(ra.getElements()),"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,132,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,133,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,134,"""The min element should be 1.0"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,135,"1.0,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,136,"StatUtils.min(ra.getElements()),"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,137,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,139,for (int i = 0; i < 1024; i++) {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,140,ra.addElementRolling(i);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,143,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,144,"""We just inserted 1024 rolling elements, num elements should still be 6"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,145,"6,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,146,ra.getNumElements());
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,149,public void testMinMax() {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,150,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,151,da.addElement(22.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,152,da.addElement(-2.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,153,da.addElement(21.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,154,da.addElement(22.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,155,da.addElement(42.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,156,da.addElement(62.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,157,da.addElement(22.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,158,da.addElement(122.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,159,da.addElement(1212.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,161,"assertEquals(""Min should be -2.0"", -2.0, StatUtils.min(da.getElements()), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,162,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,163,"""Max should be 1212.0"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,164,"1212.0,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,165,"StatUtils.max(da.getElements()),"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,166,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,54,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,58,* This class contains test cases for the ExpandableDoubleArray.
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,60,* @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,62,public class ExpandableDoubleArrayTest extends DoubleArrayAbstractTest {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,64,public ExpandableDoubleArrayTest(String name) {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,65,super( name );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,68,/* (non-Javadoc)
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,69,* @see junit.framework.TestCase#setUp()
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,71,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,72,da = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,73,ra = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,76,/* (non-Javadoc)
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,77,* @see junit.framework.TestCase#tearDown()
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,79,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,80,da = null;
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,81,ra = null;
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,85,/** TEST NORMAL OPERATIONS - calling super class test and then checking internal
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,86,*   storage **/
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,89,public void testSetElementArbitraryExpansion() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,90,"double[] controlArray = {2.0, 4.0, 6.0};"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,92,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,93,da.addElement(4.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,94,da.addElement(6.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,95,"da.setElement(1, 3.0);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,97,// Expand the array arbitrarily to 1000 items
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,98,"da.setElement(1000, 3.4);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,100,"assertEquals( ""The number of elements should now be 1001, it isn't"", da.getNumElements(), 1001);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,102,"assertEquals( ""Uninitialized Elements are default value of 0.0, index 766 wasn't"", 0.0,"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,103,"da.getElement( 760 ), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,105,"assertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, da.getElement(1000), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,106,"assertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, da.getElement(0), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,110,public void testAdd1000() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,111,super.testAdd1000();
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,112,"assertEquals(""Internal Storage length should be 1024 if we started out with initial capacity of "" +"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,113,"""16 and an expansion factor of 2.0"","
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,114,"1024, ((ExpandableDoubleArray) da).getInternalLength());"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,117,public void testAddElementRolling() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,118,super.testAddElementRolling();
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,121,public void testSetNumberOfElements() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,122,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,123,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,124,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,125,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,126,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,127,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,128,"assertEquals( ""Number of elements should equal 6"", da.getNumElements(), 6);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,130,((ExpandableDoubleArray) da).setNumElements( 3 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,131,"assertEquals( ""Number of elements should equal 3"", da.getNumElements(), 3);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,133,try {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,134,((ExpandableDoubleArray) da).setNumElements( -3 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,135,"fail( ""Setting number of elements to negative should've thrown an exception"");"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,136,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,139,((ExpandableDoubleArray) da).setNumElements(1024);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,140,"assertEquals( ""Number of elements should now be 1024"", da.getNumElements(), 1024);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,141,"assertEquals( ""Element 453 should be a default double"", da.getElement( 453 ), 0.0, Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,145,/** TESTS WHICH FOCUS ON ExpandableSpecific internal storage */
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,147,public void testWithInitialCapacity() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,149,ExpandableDoubleArray eDA2 = new ExpandableDoubleArray(2);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,150,"assertEquals(""Initial number of elements should be 0"", 0, eDA2.getNumElements());"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,152,"int iterations = (int) Math.pow(2.0, 15.0);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,154,for( int i = 0; i < iterations; i++) {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,155,eDA2.addElement( i );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,158,"assertEquals(""Number of elements should be equal to 2^15"", (int) Math.pow(2.0, 15.0), eDA2.getNumElements());"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,160,eDA2.addElement( 2.0 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,162,"assertEquals(""Number of elements should be equals to 2^15 + 1"","
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,163,"( (int) Math.pow(2.0, 15.0) + 1 ), eDA2.getNumElements() );"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,166,public void testWithInitialCapacityAndExpansionFactor() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,168,"ExpandableDoubleArray eDA3 = new ExpandableDoubleArray(3, 3.0f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,169,"assertEquals(""Initial number of elements should be 0"", 0, eDA3.getNumElements() );"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,171,"int iterations = (int) Math.pow(3.0, 7.0);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,173,for( int i = 0; i < iterations; i++) {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,174,eDA3.addElement( i );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,177,"assertEquals(""Number of elements should be equal to 3^7"", (int) Math.pow(3.0, 7.0), eDA3.getNumElements());"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,179,eDA3.addElement( 2.0 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,181,"assertEquals(""Number of elements should be equals to 3^7 + 1"","
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,182,"( (int) Math.pow(3.0, 7.0) + 1 ), eDA3.getNumElements() );"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,184,"assertEquals(""Expansion factor should equal 3.0"", 3.0f, eDA3.getExpansionFactor(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,187,public void testDiscard() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,188,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,189,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,190,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,191,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,192,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,193,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,194,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,195,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,196,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,197,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,198,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,199,"assertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,201,((ExpandableDoubleArray)da).discardFrontElements(5);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,202,"assertEquals( ""Number of elements should be 6"", 6, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,204,try {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,205,((ExpandableDoubleArray)da).discardFrontElements(-1);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,206,"fail( ""Trying to discard a negative number of element is not allowed"");"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,207,} catch( Exception e ){
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,210,try {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,211,((ExpandableDoubleArray)da).discardFrontElements( 10000 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,212,"fail( ""You can't discard more elements than the array contains"");"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,213,} catch( Exception e ){
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,218,/** TEST ERROR CONDITIONS **/
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,220,public void testIllegalInitialCapacity() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,221,try {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,222,"ExpandableDoubleArray eDA = new ExpandableDoubleArray(-3, 2.0f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,223,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,226,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,228,try {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,229,"ExpandableDoubleArray eDA = new ExpandableDoubleArray(0, 2.0f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,230,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,231,"""the initialCapacity was ZERO if it didn't then"" +"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,232,""" the range checking of initialCapacity is not working properly"" );"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,233,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,237,public void testIllegalExpansionFactor() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,238,try {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,239,"ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.66f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,240,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,242,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,244,try {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,245,"ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.0f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,246,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,247,"""the expansionFactor for 0.0"");"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,248,} catch( IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,251,try {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,252,"ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, -4.35f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,253,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,254,"""the expansionFactor for -4.35"");"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,255,} catch( IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,259,public void testSetOutOfBounds() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,260,try {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,261,"da.setElement( -1, 2.0);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,262,"fail( ""Cannot set a negative index"");"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,263,} catch( Exception e ){
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,267,public void testGetOutOfBounds() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,268,try {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,269,da.getElement(10000);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,270,"fail( ""Cannot get an element that is larger than the number of elements"");"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,271,} catch( Exception e ) {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,274,try {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,275,da.getElement(-3);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,276,"fail(""Cannot get a negative index"");"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,277,} catch( Exception e ){
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,54,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,58,* This class contains test cases for the ExpandableDoubleArray.
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,60,* @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,62,public class FixedDoubleArrayTest extends DoubleArrayAbstractTest {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,64,public FixedDoubleArrayTest(String name) {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,65,super( name );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,68,/* (non-Javadoc)
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,69,* @see junit.framework.TestCase#setUp()
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,71,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,72,da = new FixedDoubleArray(4000);
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,75,/* (non-Javadoc)
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,76,* @see junit.framework.TestCase#tearDown()
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,78,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,79,da = null;
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,83,/** TEST NORMAL OPERATIONS - calling super class test and then checking internal
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,84,*   storage **/
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,86,public void testAddElementRolling() {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,87,ra = new FixedDoubleArray(6);
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,89,super.testAddElementRolling();
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,91,"assertEquals( ""FixedDoubleArray should have 6 size internal storage"","
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,92,"6, ((FixedDoubleArray) ra).getValues().length);"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,95,public void testExceedingElements() {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,97,for( int i = 0; i < 3999; i++) {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,98,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,101,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,103,try {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,104,da.addElement( 2.0 );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,105,"fail( "" Adding more than 4000 elements should cause an exception "");"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,106,} catch( Exception e ) {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,109,da.addElementRolling(2.0);
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,110,"assertEquals( ""This is the first rolling add, the first element should be 2.0"","
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,111,"2.0, da.getElement(0), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,114,public void testGetExceeding() {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,115,try {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,116,da.getElement(100);
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,117,"fail( ""I haven't added 100 elements to the list yet, trying to getElement(100) should "" +"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,119,} catch (Exception e ){
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,124,public void testSetElement() {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,125,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,126,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,127,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,128,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,129,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,130,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,131,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,133,"da.setElement( 2, 4.0 );"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,134,"assertEquals( ""Index 2 should be 4.0"", 4.0, da.getElement(2), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,136,try {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,137,"da.setElement(2000, 45.0);"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,138,"fail( ""The array does not contain 2000 elements yet, setting this element should"" +"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,140,} catch(Exception e) {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,145,public void testOnlyRolling() {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,146,for( int i = 0; i < 8000; i++) {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,147,da.addElementRolling( i );
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,150,"assertEquals( ""The 2000th element should equal 6000"","
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,151,"6000.0, da.getElement(2000), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,154,public void testClear() {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,155,for( int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,156,da.addElementRolling(1.0);
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,159,"assertEquals( ""There should be ten elements in the array"","
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,160,"10, da.getNumElements() );"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,162,da.clear();
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,164,"assertEquals( ""There should be zero elements in the array"","
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,165,"0, da.getNumElements() );"
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,167,for( int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,168,da.addElementRolling(1.0);
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,171,"assertEquals( ""There should be ten elements in the array"","
True,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,172,"10, da.getNumElements() );"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,54,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,61,* Test cases for the MathUtils class.
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,63,* @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,66,public final class MathUtilsTest extends TestCase {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,68,public MathUtilsTest(String name) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,69,super(name);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,72,public void setUp() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,75,public static Test suite() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,76,TestSuite suite = new TestSuite(MathUtilsTest.class);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,77,"suite.setName(""MathUtils Tests"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,78,return suite;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,81,public void testBinomialCoefficient() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,82,"long[] bcoef5 = {1,5,10,10,5,1};"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,83,"long[] bcoef6 = {1,6,15,20,15,6,1};"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,84,for (int i = 0; i < 6; i++) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,85,"assertEquals(""5 choose "" + i, bcoef5[i],"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,86,"MathUtils.binomialCoefficient(5,i));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,88,for (int i = 0; i < 7; i++) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,89,"assertEquals(""6 choose "" + i, bcoef6[i],"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,90,"MathUtils.binomialCoefficient(6,i));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,93,for (int n = 1; n < 10; n++) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,94,for (int k = 0; k <= n; k++) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,95,"assertEquals(n + "" choose "" + k, binomialCoefficient(n, k),"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,96,"MathUtils.binomialCoefficient(n, k));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,97,"assertEquals(n + "" choose "" + k,(double) binomialCoefficient(n, k),"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,98,"MathUtils.binomialCoefficientDouble(n, k),Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,99,"assertEquals(n + "" choose "" + k,"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,100,"Math.log((double) binomialCoefficient(n, k)),"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,101,"MathUtils.binomialCoefficientLog(n, k),10E-12);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,106,"* Takes a long time for recursion to unwind, but succeeds"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,107,"* and yields exact value = 2,333,606,220"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,109,"assertEquals(MathUtils.binomialCoefficient(34,17),"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,110,"binomialCoefficient(34,17));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,114,public void testBinomialCoefficientFail() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,115,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,116,"long x = MathUtils.binomialCoefficient(0,0);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,117,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,118,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,121,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,122,"long x = MathUtils.binomialCoefficient(4,5);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,123,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,124,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,127,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,128,"double x = MathUtils.binomialCoefficientDouble(0,0);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,129,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,130,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,133,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,134,"double x = MathUtils.binomialCoefficientDouble(4,5);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,135,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,136,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,139,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,140,"double x = MathUtils.binomialCoefficientLog(0,0);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,141,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,142,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,145,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,146,"double x = MathUtils.binomialCoefficientLog(4,5);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,147,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,148,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,151,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,152,"long x = MathUtils.binomialCoefficient(67,34);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,153,"fail (""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,154,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,157,"double x = MathUtils.binomialCoefficientDouble(1030,515);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,158,"assertTrue(""expecting infinite binomial coefficient"","
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,159,Double.isInfinite(x));
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,162,public void testFactorial() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,163,for (int i = 1; i < 10; i++) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,164,"assertEquals(i + ""! "",factorial(i),MathUtils.factorial(i));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,165,"assertEquals(i + ""! "",(double)factorial(i),"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,166,"MathUtils.factorialDouble(i),Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,167,"assertEquals(i + ""! "",Math.log((double)factorial(i)),"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,168,"MathUtils.factorialLog(i),10E-12);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,172,public void testFactorialFail() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,173,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,174,long x = MathUtils.factorial(0);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,175,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,176,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,179,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,180,double x = MathUtils.factorialDouble(0);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,181,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,182,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,185,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,186,double x = MathUtils.factorialLog(0);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,187,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,188,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,191,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,192,double x = MathUtils.factorial(21);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,193,"fail (""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,194,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,197,"assertTrue(""expecting infinite factorial value"","
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,198,Double.isInfinite(MathUtils.factorialDouble(171)));
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,204,* Exact recursive implementation to test against
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,206,"private long binomialCoefficient(int n, int k) {"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,207,if ((n == k) || (k == 0)) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,208,return 1;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,210,if ((k == 1) || (k == n - 1)) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,211,return n;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,213,"return binomialCoefficient(n - 1, k - 1) +"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,214,"binomialCoefficient(n - 1, k);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,218,* Finds the largest values of n for which binomialCoefficient and
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,219,"* binomialCoefficientDouble will return values that fit in a long, double,"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,220,* resp.  Remove comments around test below to get this in test-report
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,222,public void testLimits() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,223,findBinomialLimits();
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,227,private void findBinomialLimits() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,229,* will kick out 66 as the limit for long
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,231,boolean foundLimit = false;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,232,int test = 10;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,233,while (!foundLimit) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,234,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,235,"double x = MathUtils.binomialCoefficient(test, test / 2);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,236,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,237,foundLimit = true;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,238,System.out.println
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,239,"(""largest n for binomialCoefficient = "" + (test - 1) );"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,241,test++;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,245,* will kick out 1029 as the limit for double
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,247,foundLimit = false;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,248,test = 10;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,249,while (!foundLimit) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,250,"double x = MathUtils.binomialCoefficientDouble(test, test / 2);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,251,if (Double.isInfinite(x)) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,252,foundLimit = true;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,253,System.out.println
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,254,"(""largest n for binomialCoefficientD = "" + (test - 1) );"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,256,test++;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,261,* Finds the largest values of n for which factiorial and
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,262,"* factorialDouble will return values that fit in a long, double,"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,263,* resp.  Remove comments around test below to get this in test-report
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,265,public void testFactiorialLimits() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,266,findFactorialLimits();
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,270,private void findFactorialLimits() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,272,* will kick out 20 as the limit for long
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,274,boolean foundLimit = false;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,275,int test = 10;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,276,while (!foundLimit) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,277,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,278,double x = MathUtils.factorial(test);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,279,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,280,foundLimit = true;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,281,System.out.println
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,282,"(""largest n for factorial = "" + (test - 1) );"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,284,test++;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,288,* will kick out 170 as the limit for double
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,290,foundLimit = false;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,291,test = 10;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,292,while (!foundLimit) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,293,double x = MathUtils.factorialDouble(test);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,294,if (Double.isInfinite(x)) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,295,foundLimit = true;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,296,System.out.println
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,297,"(""largest n for factorialDouble = "" + (test - 1) );"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,299,test++;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,305,* Exact direct multiplication implementation to test against
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,307,private long factorial(int n) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,308,long result = 1;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,309,for (int i = 2; i <= n; i++) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,310,result *= i;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,312,return result;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,316,public void testSignDouble() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,317,double delta = 0.0 ;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,318,"assertEquals( 1.0, MathUtils.sign( 2.0 ), delta ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,319,"assertEquals( -1.0, MathUtils.sign( -2.0 ), delta ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,323,public void testSignFloat() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,324,float delta = 0.0F ;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,325,"assertEquals( 1.0F, MathUtils.sign( 2.0F ), delta ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,326,"assertEquals( -1.0F, MathUtils.sign( -2.0F ), delta ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,330,public void testSignByte() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,331,"assertEquals( (byte)1, MathUtils.sign( (byte)2 ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,332,"assertEquals( (byte)(-1), MathUtils.sign( (byte)(-2) ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,336,public void testSignShort() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,337,"assertEquals( (short)1, MathUtils.sign( (short)2 ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,338,"assertEquals( (short)(-1), MathUtils.sign( (short)(-2) ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,342,public void testSignInt() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,343,"assertEquals( (int)1, MathUtils.sign( (int)(2) ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,344,"assertEquals( (int)(-1), MathUtils.sign( (int)(-2) ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,348,public void testSignLong() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,349,"assertEquals( 1L, MathUtils.sign( 2L ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,350,"assertEquals( -1L, MathUtils.sign( -2L ) ) ;"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,5,* reserved.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,9,* are met:
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,55,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,58,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,60,public class TestBean {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,61,private Double x = new Double(1.0);
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,63,"private String y = ""1.0"";"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,65,private Double z = new Double(2.0);
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,70,public Double getX() {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,71,return x;
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,77,public String getY() {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,78,return y;
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,84,public void setX(Double double1) {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,85,x = double1;
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,91,public void setY(String string) {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,92,y = string;
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,98,public Double getZ() {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,99,throw new RuntimeException();
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,105,public void setZ(Double double1) {
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,106,z = double1;
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,5,* reserved.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,9,* are met:
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,55,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,60,* @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,62,public class TransformerMapTest extends TestCase {
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,66,public void testPutTransformer(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,67,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,69,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,70,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,71,"assertEquals(expected, map.getTransformer(TransformerMapTest.class));"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,77,public void testContainsClass(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,78,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,79,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,80,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,81,assertTrue(map.containsClass(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,87,public void testContainsTransformer(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,88,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,89,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,90,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,91,assertTrue(map.containsTransformer(expected));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,97,public void testRemoveTransformer(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,98,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,100,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,101,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,102,assertTrue(map.containsClass(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,103,assertTrue(map.containsTransformer(expected));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,104,map.removeTransformer(TransformerMapTest.class);
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,105,assertFalse(map.containsClass(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,106,assertFalse(map.containsTransformer(expected));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,112,public void testClear(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,113,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,115,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,116,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,117,assertTrue(map.containsClass(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,118,map.clear();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,119,assertFalse(map.containsClass(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,125,public void testClasses(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,126,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,127,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,128,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,129,assertTrue(map.classes().contains(TransformerMapTest.class));
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,135,public void testTransformers(){
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,136,NumberTransformer expected = new DefaultTransformer();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,137,TransformerMap map = new TransformerMap();
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,138,"map.putTransformer(TransformerMapTest.class, expected);"
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,139,assertTrue(map.transformers().contains(expected));

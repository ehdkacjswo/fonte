is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,23, Implementation of the chi-squared distribution.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,25," @see <a href=""http://en.wikipedia.org/wiki/Chi-squared_distribution"">Chi-squared distribution (Wikipedia)</a>"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,26," @see <a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">Chi-squared Distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,27, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,29,ublic class ChiSquaredDistribution
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,30,xtends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,31,mplements Serializable {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,33, Default inverse cumulative probability accuracy
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,34, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,36,ublic static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,37,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,38,rivate static final long serialVersionUID = -8352658048349159782L;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,39,** Internal Gamma distribution. */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,40,rivate final GammaDistribution gamma;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,41,** Inverse cumulative probability accuracy */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,42,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,45, Create a Chi-Squared distribution with the given degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,47, @param degreesOfFreedom Degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,49,ublic ChiSquaredDistribution(double degreesOfFreedom) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,50,"his(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,54, Create a Chi-Squared distribution with the given degrees of freedom and
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,55, inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,57, @param degreesOfFreedom Degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,58, @param inverseCumAccuracy the maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,59, cumulative probability estimates (defaults to
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,60, {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,61, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,63,"ublic ChiSquaredDistribution(double degreesOfFreedom,"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,64,ouble inverseCumAccuracy) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,65,"amma = new GammaDistributionImpl(degreesOfFreedom / 2, 2);"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,66,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,70, Access the number of degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,72, @return the degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,74,ublic double getDegreesOfFreedom() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,75,eturn gamma.getAlpha() * 2.0;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,78,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,79,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,80,eturn gamma.density(x);
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,83,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,84,ublic double cumulativeProbability(double x)  {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,85,eturn gamma.cumulativeProbability(x);
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,89, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,91, Returns {@code 0} when {@code p == 0} and
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,92, {@code Double.POSITIVE_INFINITY} when {@code p == 1}.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,94,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,95,ublic double inverseCumulativeProbability(final double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,96,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,97,eturn 0d;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,99,f (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,100,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,102,eturn super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,105,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,106,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,107,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,108,eturn Double.MIN_VALUE * gamma.getBeta();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,111,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,112,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,113,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,114,/ NOTE: chi squared is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,115,"/ NOTE: therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,117,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,119,f (p < .5) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,120,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,121,et = getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,122, else {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,123,/ use max
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,124,et = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,127,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,130,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,131,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,132,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,133,/ NOTE: chi squared is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,134,"/ NOTE: therefore, P(X < &mu;) > 0.5"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,136,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,138,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,139,/ use 1/2 mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,140,et = getDegreesOfFreedom() * 0.5;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,141, else {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,142,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,143,et = getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,146,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,149,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,150,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,151,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,152,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,156, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,158, The lower bound of the support is always 0 no matter the
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,159, degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,161, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,163,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,164,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,165,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,169, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,171, The upper bound of the support is always positive infinity no matter the
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,172, degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,174, @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,176,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,177,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,178,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,182, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,184," For {@code k} degrees of freedom, the mean is {@code k}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,186,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,187,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,188,eturn getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,192, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,194," For {@code k} degrees of freedom, the variance is {@code 2 * k}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,196, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,198,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,199,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,200,eturn 2*getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,203,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,204,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,205,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,206,eturn true;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,209,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,210,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,211,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,212,eturn false;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,17,package org.apache.commons.math.distribution;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,23,* Implementation of the chi-squared distribution.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,25,"* @see <a href=""http://en.wikipedia.org/wiki/Chi-squared_distribution"">Chi-squared distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,26,"* @see <a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">Chi-squared Distribution (MathWorld)</a>"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,27,* @version $Id: ChiSquaredDistribution.java 1206060 2011-11-25 05:16:56Z celestin $
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,29,public class ChiSquaredDistribution
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,30,extends AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,31,implements Serializable {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,33,* Default inverse cumulative probability accuracy
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,34,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,36,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,37,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,38,private static final long serialVersionUID = -8352658048349159782L;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,39,/** Internal Gamma distribution. */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,40,private final GammaDistribution gamma;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,41,/** Inverse cumulative probability accuracy */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,42,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,45,* Create a Chi-Squared distribution with the given degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,47,* @param degreesOfFreedom Degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,49,public ChiSquaredDistribution(double degreesOfFreedom) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,50,"this(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,54,* Create a Chi-Squared distribution with the given degrees of freedom and
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,55,* inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,57,* @param degreesOfFreedom Degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,58,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,59,* cumulative probability estimates (defaults to
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,60,* {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,61,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,63,"public ChiSquaredDistribution(double degreesOfFreedom,"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,64,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,65,"gamma = new GammaDistribution(degreesOfFreedom / 2, 2);"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,66,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,70,* Access the number of degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,72,* @return the degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,74,public double getDegreesOfFreedom() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,75,return gamma.getAlpha() * 2.0;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,78,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,79,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,80,return gamma.density(x);
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,83,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,84,public double cumulativeProbability(double x)  {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,85,return gamma.cumulativeProbability(x);
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,89,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,91,* Returns {@code 0} when {@code p == 0} and
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,92,* {@code Double.POSITIVE_INFINITY} when {@code p == 1}.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,94,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,95,public double inverseCumulativeProbability(final double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,96,if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,97,return 0d;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,99,if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,100,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,102,return super.inverseCumulativeProbability(p);
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,105,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,106,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,107,protected double getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,108,return Double.MIN_VALUE * gamma.getBeta();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,111,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,112,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,113,protected double getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,114,// NOTE: chi squared is skewed to the left
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,115,"// NOTE: therefore, P(X < &mu;) > .5"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,117,double ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,119,if (p < .5) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,120,// use mean
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,121,ret = getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,122,} else {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,123,// use max
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,124,ret = Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,127,return ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,130,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,131,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,132,protected double getInitialDomain(double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,133,// NOTE: chi squared is skewed to the left
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,134,"// NOTE: therefore, P(X < &mu;) > 0.5"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,136,double ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,138,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,139,// use 1/2 mean
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,140,ret = getDegreesOfFreedom() * 0.5;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,141,} else {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,142,// use mean
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,143,ret = getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,146,return ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,149,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,150,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,151,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,152,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,156,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,158,* The lower bound of the support is always 0 no matter the
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,159,* degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,161,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,163,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,164,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,165,return 0;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,169,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,171,* The upper bound of the support is always positive infinity no matter the
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,172,* degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,174,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,176,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,177,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,178,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,182,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,184,"* For {@code k} degrees of freedom, the mean is {@code k}."
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,186,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,187,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,188,return getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,192,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,194,"* For {@code k} degrees of freedom, the variance is {@code 2 * k}."
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,196,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,198,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,199,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,200,return 2*getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,203,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,204,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,205,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,206,return true;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,209,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,210,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,211,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,212,return false;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,21,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,22,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,20, The Exponential Distribution.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,22, <p>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,23, References:
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,24, <ul>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,25," <li><a href=""http://mathworld.wolfram.com/ExponentialDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,26, Exponential Distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,27, </ul>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,28, </p>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,27,* Implementation of the exponential distribution.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,29,"* @see <a href=""http://en.wikipedia.org/wiki/Exponential_distribution"">Exponential distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,30,"* @see <a href=""http://mathworld.wolfram.com/ExponentialDistribution.html"">Exponential distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,32,ublic interface ExponentialDistribution extends ContinuousDistribution {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,33,public class ExponentialDistribution extends AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,34,implements Serializable {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,36,* Default inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,37,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,39,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,40,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,41,private static final long serialVersionUID = 2401296428283614780L;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,42,/** The mean of this distribution. */
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,43,private final double mean;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,44,/** Inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,45,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,48,* Create a exponential distribution with the given mean.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,49,* @param mean mean of this distribution.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,51,public ExponentialDistribution(double mean) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,52,"this(mean, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,56,* Create a exponential distribution with the given mean.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,58,* @param mean Mean of this distribution.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,59,* @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,60,* cumulative probability estimates (defaults to
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,61,* {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,62,* @throws NotStrictlyPositiveException if {@code mean <= 0}.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,63,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,65,"public ExponentialDistribution(double mean, double inverseCumAccuracy)"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,66,throws NotStrictlyPositiveException{
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,67,if (mean <= 0) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,68,"throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,70,this.mean = mean;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,71,solverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,38,ouble getMean();
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,79,public double getMean() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,80,return mean;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,83,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,84,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,85,if (x < 0) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,86,return 0;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,88,return FastMath.exp(-x / mean) / mean;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,92,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,94,* The implementation of this method is based on:
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,95,* <ul>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,96,* <li>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,97,"* <a href=""http://mathworld.wolfram.com/ExponentialDistribution.html"">"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,98,"* Exponential Distribution</a>, equation (1).</li>"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,99,* </ul>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,101,public double cumulativeProbability(double x)  {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,102,double ret;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,103,if (x <= 0.0) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,104,ret = 0.0;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,105,} else {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,106,ret = 1.0 - FastMath.exp(-x / mean);
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,108,return ret;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,112,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,114,* Returns {@code 0} when {@code p= = 0} and
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,115,* {@code Double.POSITIVE_INFINITY} when {@code p == 1}.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,117,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,118,public double inverseCumulativeProbability(double p) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,119,double ret;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,121,if (p < 0.0 || p > 1.0) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,122,"throw new OutOfRangeException(p, 0.0, 1.0);"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,123,} else if (p == 1.0) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,124,ret = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,125,} else {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,126,ret = -mean * FastMath.log(1.0 - p);
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,129,return ret;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,133,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,135,* <p><strong>Algorithm Description</strong>: this implementation uses the
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,136,"* <a href=""http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html"">"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,137,* Inversion Method</a> to generate exponentially distributed random values
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,138,* from uniform deviates.</p>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,140,* @return a random value.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,141,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,143,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,144,public double sample() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,145,return randomData.nextExponential(mean);
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,148,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,149,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,150,protected double getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,151,return 0;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,154,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,155,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,156,protected double getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,157,// NOTE: exponential is skewed to the left
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,158,"// NOTE: therefore, P(X < &mu;) > .5"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,160,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,161,// use mean
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,162,return mean;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,163,} else {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,164,// use max
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,165,return Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,169,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,170,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,171,protected double getInitialDomain(double p) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,172,// TODO: try to improve on this estimate
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,173,// TODO: what should really happen here is not derive from
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,174,// AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,175,// TODO: because the inverse cumulative distribution is simple.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,176,"// Exponential is skewed to the left, therefore, P(X < &mu;) > .5"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,177,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,178,// use 1/2 mean
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,179,return mean * 0.5;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,180,} else {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,181,// use mean
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,182,return mean;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,186,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,187,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,188,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,189,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,193,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,195,* The lower bound of the support is always 0 no matter the mean parameter.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,197,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,199,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,200,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,201,return 0;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,205,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,207,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,208,* no matter the mean parameter.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,210,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,212,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,213,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,214,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,218,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,220,"* For mean parameter {@code k}, the mean is {@code k}."
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,222,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,223,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,224,return getMean();
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,228,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,230,"* For mean parameter {@code k}, the variance is {@code k^2}."
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,232,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,233,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,234,final double m = getMean();
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,235,return m * m;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,238,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,239,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,240,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,241,return true;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,244,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,245,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,246,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,247,return false;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,21,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,22,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,24,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,27, The default implementation of {@link ExponentialDistribution}.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,29, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,31,ublic class ExponentialDistributionImpl extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,32,"mplements ExponentialDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,34, Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,35, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,37,ublic static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,38,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,39,rivate static final long serialVersionUID = 2401296428283614780L;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,40,** The mean of this distribution. */
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,41,rivate final double mean;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,42,** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,43,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,46, Create a exponential distribution with the given mean.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,47, @param mean mean of this distribution.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,49,ublic ExponentialDistributionImpl(double mean) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,50,"his(mean, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,54, Create a exponential distribution with the given mean.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,56, @param mean Mean of this distribution.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,57, @param inverseCumAccuracy Maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,58, cumulative probability estimates (defaults to
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,59, {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,60, @throws NotStrictlyPositiveException if {@code mean <= 0}.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,61, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,63,"ublic ExponentialDistributionImpl(double mean, double inverseCumAccuracy) {"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,64,f (mean <= 0) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,65,"hrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,67,his.mean = mean;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,68,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,72, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,74,ublic double getMean() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,75,eturn mean;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,79, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,81,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,82,f (x < 0) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,83,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,85,eturn FastMath.exp(-x / mean) / mean;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,89, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,91, The implementation of this method is based on:
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,92, <ul>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,93, <li>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,94," <a href=""http://mathworld.wolfram.com/ExponentialDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,95," Exponential Distribution</a>, equation (1).</li>"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,96, </ul>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,98,ublic double cumulativeProbability(double x)  {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,99,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,100,f (x <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,101,et = 0.0;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,102, else {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,103,et = 1.0 - FastMath.exp(-x / mean);
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,105,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,109, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,111, It will return {@code 0} when {@code p = 0} and
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,112, {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,114,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,115,ublic double inverseCumulativeProbability(double p) throws OutOfRangeException {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,116,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,118,f (p < 0.0 || p > 1.0) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,119,"hrow new OutOfRangeException(p, 0.0, 1.0);"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,120, else if (p == 1.0) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,121,et = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,122, else {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,123,et = -mean * FastMath.log(1.0 - p);
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,126,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,130, Generates a random value sampled from this distribution.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,132, <p><strong>Algorithm Description</strong>: Uses the <a
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,133," href=""http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html""> Inversion"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,134, Method</a> to generate exponentially distributed random values from
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,135, uniform deviates.</p>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,137, @return a random value.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,138, @since 2.2
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,140,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,141,ublic double sample() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,142,eturn randomData.nextExponential(mean);
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,146," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,147, bracket a CDF root.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,149, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,150," @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,152,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,153,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,154,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,158," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,159, bracket a CDF root.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,161, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,162," @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,164,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,165,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,166,/ NOTE: exponential is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,167,"/ NOTE: therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,169,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,170,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,171,eturn mean;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,172, else {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,173,/ use max
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,174,eturn Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,179," Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,180, bracket a CDF root.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,182, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,183, @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,185,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,186,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,187,/ TODO: try to improve on this estimate
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,188,/ TODO: what should really happen here is not derive from AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,189,/ TODO: because the inverse cumulative distribution is simple.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,190,"/ Exponential is skewed to the left, therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,191,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,192,/ use 1/2 mean
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,193,eturn mean * 0.5;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,194, else {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,195,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,196,eturn mean;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,201, Return the absolute accuracy setting of the solver used to estimate
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,202, inverse cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,204, @return the solver absolute accuracy.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,205, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,207,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,208,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,209,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,213, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,215, The lower bound of the support is always 0 no matter the mean parameter.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,217, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,219,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,220,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,221,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,225, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,227, The upper bound of the support is always positive infinity
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,228, no matter the mean parameter.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,230, @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,232,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,233,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,234,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,238, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,240," For mean parameter <code>k</code>, the mean is"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,241, <code>k</code>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,243, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,245,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,246,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,247,eturn getMean();
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,251, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,253," For mean parameter <code>k</code>, the variance is"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,254, <code>k^2</code>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,256, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,258,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,259,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,260,inal double m = getMean();
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,261,eturn m * m;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,265, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,267,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,268,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,269,eturn true;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,273, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,275,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,276,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,277,eturn false;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,23,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,24,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,25,import org.apache.commons.math.special.Beta;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,20, F-Distribution.
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,22, <p>
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,23, References:
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,24, <ul>
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,25," <li><a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,26, F-Distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,27, </ul>
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,28, </p>
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,29,* Implementation of the F-distribution.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,31,"* @see <a href=""http://en.wikipedia.org/wiki/F-distribution"">F-distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,32,"* @see <a href=""http://mathworld.wolfram.com/F-Distribution.html"">F-distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,32,ublic interface FDistribution extends ContinuousDistribution {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,35,public class FDistribution
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,36,extends AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,37,implements Serializable  {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,39,* Default inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,40,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,42,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,43,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,44,private static final long serialVersionUID = -8516354193418641566L;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,45,/** The numerator degrees of freedom. */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,46,private final double numeratorDegreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,47,/** The numerator degrees of freedom. */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,48,private final double denominatorDegreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,49,/** Inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,50,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,53,* Create a F distribution using the given degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,54,* @param numeratorDegreesOfFreedom Numerator degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,55,* @param denominatorDegreesOfFreedom Denominator degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,56,* @throws NotStrictlyPositiveException if
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,57,* {@code numeratorDegreesOfFreedom <= 0} or
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,58,* {@code denominatorDegreesOfFreedom <= 0}.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,60,"public FDistribution(double numeratorDegreesOfFreedom,"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,61,double denominatorDegreesOfFreedom)
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,62,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,63,"this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,64,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,68,* Create an F distribution using the given degrees of freedom
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,69,* and inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,70,* @param numeratorDegreesOfFreedom Numerator degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,71,* @param denominatorDegreesOfFreedom Denominator degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,72,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,73,* cumulative probability estimates.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,74,* (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,75,* @throws NotStrictlyPositiveException if
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,76,* {@code numeratorDegreesOfFreedom <= 0} or
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,77,* {@code denominatorDegreesOfFreedom <= 0}.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,78,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,80,"public FDistribution(double numeratorDegreesOfFreedom,"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,81,"double denominatorDegreesOfFreedom,"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,82,double inverseCumAccuracy)
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,83,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,84,if (numeratorDegreesOfFreedom <= 0) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,85,"throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,86,numeratorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,88,if (denominatorDegreesOfFreedom <= 0) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,89,"throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,90,denominatorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,92,this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,93,this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,94,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,98,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,100,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,102,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,103,final double nhalf = numeratorDegreesOfFreedom / 2;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,104,final double mhalf = denominatorDegreesOfFreedom / 2;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,105,final double logx = FastMath.log(x);
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,106,final double logn = FastMath.log(numeratorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,107,final double logm = FastMath.log(denominatorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,108,final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,109,denominatorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,110,return FastMath.exp(nhalf * logn + nhalf * logx - logx +
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,111,mhalf * logm - nhalf * lognxm - mhalf * lognxm -
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,112,"Beta.logBeta(nhalf, mhalf));"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,116,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,118,* The implementation of this method is based on
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,119,* <ul>
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,120,*  <li>
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,121,"*   <a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,122,"*   F-Distribution</a>, equation (4)."
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,123,*  </li>
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,124,* </ul>
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,126,public double cumulativeProbability(double x)  {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,127,double ret;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,128,if (x <= 0) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,129,ret = 0;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,130,} else {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,131,double n = numeratorDegreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,132,double m = denominatorDegreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,134,"ret = Beta.regularizedBeta((n * x) / (m + n * x),"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,135,"0.5 * n,"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,136,0.5 * m);
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,138,return ret;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,142,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,144,* Returns {@code 0} when {@code p == 0} and
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,145,* {@code Double.POSITIVE_INFINITY} when {@code p == 1}.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,147,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,148,public double inverseCumulativeProbability(final double p) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,149,if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,150,return 0;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,152,if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,153,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,155,return super.inverseCumulativeProbability(p);
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,158,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,159,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,160,protected double getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,161,return 0;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,164,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,165,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,166,protected double getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,167,return Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,170,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,171,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,172,protected double getInitialDomain(double p) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,173,double ret = 1;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,174,double d = denominatorDegreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,175,if (d > 2) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,176,// use mean
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,177,ret = d / (d - 2);
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,179,return ret;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,38,ouble getNumeratorDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,187,public double getNumeratorDegreesOfFreedom() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,188,return numeratorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,45,ouble getDenominatorDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,196,public double getDenominatorDegreesOfFreedom() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,197,return denominatorDegreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,200,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,201,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,202,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,203,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,207,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,209,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,211,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,213,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,214,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,215,return 0;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,219,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,221,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,222,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,224,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,226,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,227,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,228,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,232,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,234,"* For denominator degrees of freedom parameter {@code b}, the mean is"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,235,* <ul>
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,236,"*  <li>if {@code b > 2} then {@code b / (b - 2)},</li>"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,237,*  <li>else undefined ({@code Double.NaN}).
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,238,* </ul>
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,240,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,241,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,242,final double denominatorDF = getDenominatorDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,244,if (denominatorDF > 2) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,245,return denominatorDF / (denominatorDF - 2);
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,248,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,252,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,254,* For numerator degrees of freedom parameter {@code a} and denominator
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,255,"* degrees of freedom parameter {@code b}, the variance is"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,256,* <ul>
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,257,*  <li>
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,258,*    if {@code b > 4} then
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,259,"*    {@code [2 * b^2 * (a + b - 2)] / [a * (b - 2)^2 * (b - 4)]},"
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,260,*  </li>
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,261,*  <li>else undefined ({@code Double.NaN}).
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,262,* </ul>
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,264,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,265,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,266,final double denominatorDF = getDenominatorDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,268,if (denominatorDF > 4) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,269,final double numeratorDF = getNumeratorDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,270,final double denomDFMinusTwo = denominatorDF - 2;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,272,return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,273,( (numeratorDF * (denomDFMinusTwo * denomDFMinusTwo) * (denominatorDF - 4)) );
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,276,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,279,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,280,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,281,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,282,return true;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,285,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,286,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,287,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,288,return false;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,18,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,22,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,23,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,24,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,25,mport org.apache.commons.math.special.Beta;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,26,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,29, Default implementation of
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,30, {@link org.apache.commons.math.distribution.FDistribution}.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,32, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,34,ublic class FDistributionImpl
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,35,xtends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,36,"mplements FDistribution, Serializable  {"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,38, Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,39, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,41,ublic static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,42,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,43,rivate static final long serialVersionUID = -8516354193418641566L;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,44,** The numerator degrees of freedom. */
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,45,rivate final double numeratorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,46,** The numerator degrees of freedom. */
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,47,rivate final double denominatorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,48,** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,49,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,52, Create a F distribution using the given degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,53, @param numeratorDegreesOfFreedom Numerator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,54, @param denominatorDegreesOfFreedom Denominator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,55, @throws NotStrictlyPositiveException if {@code numeratorDegreesOfFreedom <= 0}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,56, or {@code denominatorDegreesOfFreedom <= 0}.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,58,"ublic FDistributionImpl(double numeratorDegreesOfFreedom,"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,59,ouble denominatorDegreesOfFreedom) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,60,"his(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,61,EFAULT_INVERSE_ABSOLUTE_ACCURACY);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,65, Create an F distribution using the given degrees of freedom
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,66, and inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,67, @param numeratorDegreesOfFreedom Numerator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,68, @param denominatorDegreesOfFreedom Denominator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,69, @param inverseCumAccuracy the maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,70, cumulative probability estimates.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,71, (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,72, @throws NotStrictlyPositiveException if {@code numeratorDegreesOfFreedom <= 0}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,73, or {@code denominatorDegreesOfFreedom <= 0}.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,74, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,76,"ublic FDistributionImpl(double numeratorDegreesOfFreedom,"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,77,"ouble denominatorDegreesOfFreedom,"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,78,ouble inverseCumAccuracy) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,79,f (numeratorDegreesOfFreedom <= 0) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,80,"hrow new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,81,umeratorDegreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,83,f (denominatorDegreesOfFreedom <= 0) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,84,"hrow new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,85,enominatorDegreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,87,his.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,88,his.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,89,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,93, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,95, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,97,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,98,inal double nhalf = numeratorDegreesOfFreedom / 2;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,99,inal double mhalf = denominatorDegreesOfFreedom / 2;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,100,inal double logx = FastMath.log(x);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,101,inal double logn = FastMath.log(numeratorDegreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,102,inal double logm = FastMath.log(denominatorDegreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,103,inal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,104,enominatorDegreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,105,eturn FastMath.exp(nhalf * logn + nhalf * logx - logx +
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,106,half * logm - nhalf * lognxm - mhalf * lognxm -
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,107,"eta.logBeta(nhalf, mhalf));"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,111, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,113, The implementation of this method is based on
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,114, <ul>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,115,  <li>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,116,"   <a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,117,"   F-Distribution</a>, equation (4)."
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,118,  </li>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,119, </ul>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,121,ublic double cumulativeProbability(double x)  {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,122,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,123,f (x <= 0) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,124,et = 0;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,125, else {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,126,ouble n = numeratorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,127,ouble m = denominatorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,129,"et = Beta.regularizedBeta((n * x) / (m + n * x),"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,130,".5 * n,"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,131,.5 * m);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,133,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,137, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,139, It will return {@code 0} when {@code p = 0} and
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,140, {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,142,Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,143,ublic double inverseCumulativeProbability(final double p) throws OutOfRangeException {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,144,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,145,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,147,f (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,148,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,150,eturn super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,154," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,155, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,156, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,158, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,159," @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,161,Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,162,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,163,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,167," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,168, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,169, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,171, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,172," @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,174,Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,175,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,176,eturn Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,180," Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,181, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,182, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,184, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,185, @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,187,Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,188,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,189,ouble ret = 1;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,190,ouble d = denominatorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,191,f (d > 2) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,192,/ use mean
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,193,et = d / (d - 2);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,195,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,199, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,201,ublic double getNumeratorDegreesOfFreedom() {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,202,eturn numeratorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,206, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,208,ublic double getDenominatorDegreesOfFreedom() {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,209,eturn denominatorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,213, Return the absolute accuracy setting of the solver used to estimate
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,214, inverse cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,216, @return the solver absolute accuracy
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,217, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,219,Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,220,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,221,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,225, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,227, The lower bound of the support is always 0 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,229, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,231,Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,232,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,233,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,237, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,239, The upper bound of the support is always positive infinity
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,240, no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,242, @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,244,Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,245,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,246,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,250, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,252," For denominator degrees of freedom parameter <code>b</code>,"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,253, the mean is
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,254, <ul>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,255,  <li>if <code>b &gt; 2</code> then <code>b / (b - 2)</code></li>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,256,  <li>else <code>undefined</code>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,257, </ul>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,259, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,261,Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,262,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,263,inal double denominatorDF = getDenominatorDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,265,f (denominatorDF > 2) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,266,eturn denominatorDF / (denominatorDF - 2);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,269,eturn Double.NaN;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,273, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,275, For numerator degrees of freedom parameter <code>a</code>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,276," and denominator degrees of freedom parameter <code>b</code>,"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,277, the variance is
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,278, <ul>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,279,  <li>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,280,    if <code>b &gt; 4</code> then
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,281,    <code>[ 2 * b^2 * (a + b - 2) ] / [ a * (b - 2)^2 * (b - 4) ]</code>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,282,  </li>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,283,  <li>else <code>undefined</code>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,284, </ul>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,286, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,288,Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,289,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,290,inal double denominatorDF = getDenominatorDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,292,f (denominatorDF > 4) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,293,inal double numeratorDF = getNumeratorDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,294,inal double denomDFMinusTwo = denominatorDF - 2;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,296,eturn ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,297, (numeratorDF * (denomDFMinusTwo * denomDFMinusTwo) * (denominatorDF - 4)) );
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,300,eturn Double.NaN;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,304, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,306,Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,307,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,308,eturn true;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,312, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,314,Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,315,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,316,eturn false;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,21,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,22,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,23,import org.apache.commons.math.special.Gamma;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,20, The Gamma Distribution.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,22, <p>
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,23, References:
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,24, <ul>
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,25," <li><a href=""http://mathworld.wolfram.com/GammaDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,26, Gamma Distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,27, </ul>
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,28, </p>
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,27,* Implementation of the Gamma distribution.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,29,"* @see <a href=""http://en.wikipedia.org/wiki/Gamma_distribution"">Gamma distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,30,"* @see <a href=""http://mathworld.wolfram.com/GammaDistribution.html"">Gamma distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,32,ublic interface GammaDistribution extends ContinuousDistribution {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,33,public class GammaDistribution extends AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,34,implements Serializable  {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,36,* Default inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,37,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,39,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,40,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,41,private static final long serialVersionUID = -3239549463135430361L;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,42,/** The shape parameter. */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,43,private final double alpha;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,44,/** The scale parameter. */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,45,private final double beta;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,46,/** Inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,47,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,50,* Create a new gamma distribution with the given {@code alpha} and
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,51,* {@code beta} values.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,52,* @param alpha the shape parameter.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,53,* @param beta the scale parameter.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,55,"public GammaDistribution(double alpha, double beta) {"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,56,"this(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,60,* Create a new gamma distribution with the given {@code alpha} and
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,61,* {@code beta} values.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,63,* @param alpha Shape parameter.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,64,* @param beta Scale parameter.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,65,* @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,66,* cumulative probability estimates (defaults to
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,67,* {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,68,* @throws NotStrictlyPositiveException if {@code alpha <= 0} or
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,69,* {@code beta <= 0}.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,70,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,72,"public GammaDistribution(double alpha, double beta, double inverseCumAccuracy)"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,73,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,74,if (alpha <= 0) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,75,"throw new NotStrictlyPositiveException(LocalizedFormats.ALPHA, alpha);"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,77,if (beta <= 0) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,78,"throw new NotStrictlyPositiveException(LocalizedFormats.BETA, beta);"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,81,this.alpha = alpha;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,82,this.beta = beta;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,83,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,87,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,89,* The implementation of this method is based on:
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,90,* <ul>
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,91,*  <li>
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,92,"*   <a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,93,"*    Chi-Squared Distribution</a>, equation (9)."
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,94,*  </li>
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,95,"*  <li>Casella, G., & Berger, R. (1990). <i>Statistical Inference</i>."
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,96,"*    Belmont, CA: Duxbury Press."
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,97,*  </li>
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,98,* </ul>
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,100,public double cumulativeProbability(double x) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,101,double ret;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,103,if (x <= 0) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,104,ret = 0;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,105,} else {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,106,"ret = Gamma.regularizedGammaP(alpha, x / beta);"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,109,return ret;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,113,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,115,* Returns {@code 0} when {@code p == 0} and
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,116,* {@code Double.POSITIVE_INFINITY} when {@code p == 1}.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,118,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,119,public double inverseCumulativeProbability(final double p) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,120,if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,121,return 0;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,123,if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,124,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,126,return super.inverseCumulativeProbability(p);
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,130,* Access the {@code alpha} shape parameter.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,132,* @return {@code alpha}.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,134,public double getAlpha() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,135,return alpha;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,34, Access the alpha shape parameter.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,139,* Access the {@code beta} scale parameter.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,36, @return alpha.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,141,* @return {@code beta}.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,38,ouble getAlpha();
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,143,public double getBeta() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,144,return beta;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,147,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,148,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,149,if (x < 0) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,150,return 0;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,152,"return FastMath.pow(x / beta, alpha - 1) / beta *"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,153,FastMath.exp(-x / beta) / FastMath.exp(Gamma.logGamma(alpha));
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,156,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,157,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,158,protected double getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,159,// TODO: try to improve on this estimate
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,160,return Double.MIN_VALUE;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,163,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,164,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,165,protected double getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,166,// TODO: try to improve on this estimate
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,167,// NOTE: gamma is skewed to the left
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,168,"// NOTE: therefore, P(X < &mu;) > .5"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,170,double ret;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,172,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,173,// use mean
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,174,ret = alpha * beta;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,175,} else {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,176,// use max value
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,177,ret = Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,180,return ret;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,183,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,184,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,185,protected double getInitialDomain(double p) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,186,// TODO: try to improve on this estimate
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,187,"// Gamma is skewed to the left, therefore, P(X < &mu;) > .5"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,189,double ret;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,191,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,192,// use 1/2 mean
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,193,ret = alpha * beta * 0.5;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,194,} else {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,195,// use mean
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,196,ret = alpha * beta;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,199,return ret;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,202,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,203,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,204,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,205,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,209,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,211,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,213,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,215,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,216,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,217,return 0;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,221,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,223,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,224,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,226,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,228,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,229,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,230,return Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,41, Access the beta scale parameter.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,234,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,43, @return beta.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,236,"* For shape parameter {@code alpha} and scale parameter {@code beta}, the"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,237,* mean is {@code alpha * beta}.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,45,ouble getBeta();
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,239,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,240,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,241,return getAlpha() * getBeta();
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,245,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,247,"* For shape parameter {@code alpha} and scale parameter {@code beta}, the"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,248,* variance is {@code alpha * beta^2}.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,250,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,252,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,253,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,254,final double b = getBeta();
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,255,return getAlpha() * b * b;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,258,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,259,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,260,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,261,return true;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,264,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,265,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,266,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,267,return false;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,21,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,22,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,23,mport org.apache.commons.math.special.Gamma;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,24,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,27, The default implementation of {@link GammaDistribution}.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,29, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,31,ublic class GammaDistributionImpl extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,32,"mplements GammaDistribution, Serializable  {"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,34, Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,35, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,37,ublic static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,38,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,39,rivate static final long serialVersionUID = -3239549463135430361L;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,40,** The shape parameter. */
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,41,rivate final double alpha;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,42,** The scale parameter. */
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,43,rivate final double beta;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,44,** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,45,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,48, Create a new gamma distribution with the given alpha and beta values.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,49, @param alpha the shape parameter.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,50, @param beta the scale parameter.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,52,"ublic GammaDistributionImpl(double alpha, double beta) {"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,53,"his(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,57, Create a new gamma distribution with the given alpha and beta values.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,59, @param alpha Shape parameter.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,60, @param beta Scale parameter.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,61, @param inverseCumAccuracy Maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,62, cumulative probability estimates (defaults to
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,63, {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,64, @throws NotStrictlyPositiveException if {@code alpha <= 0} or
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,65, {@code beta <= 0}.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,66, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,68,"ublic GammaDistributionImpl(double alpha, double beta, double inverseCumAccuracy) {"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,69,f (alpha <= 0) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,70,"hrow new NotStrictlyPositiveException(LocalizedFormats.ALPHA, alpha);"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,72,f (beta <= 0) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,73,"hrow new NotStrictlyPositiveException(LocalizedFormats.BETA, beta);"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,76,his.alpha = alpha;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,77,his.beta = beta;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,78,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,82, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,84, The implementation of this method is based on:
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,85, <ul>
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,86,  <li>
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,87,"   <a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,88,"    Chi-Squared Distribution</a>, equation (9)."
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,89,  </li>
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,90,"  <li>Casella, G., & Berger, R. (1990). <i>Statistical Inference</i>."
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,91,"    Belmont, CA: Duxbury Press."
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,92,  </li>
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,93, </ul>
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,95,ublic double cumulativeProbability(double x) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,96,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,98,f (x <= 0) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,99,et = 0;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,100, else {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,101,"et = Gamma.regularizedGammaP(alpha, x / beta);"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,104,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,108, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,110, It will return {@code 0} when {@cod p = 0} and
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,111, {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,113,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,114,ublic double inverseCumulativeProbability(final double p) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,115,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,116,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,118,f (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,119,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,121,eturn super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,125, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,127,ublic double getAlpha() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,128,eturn alpha;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,132, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,134,ublic double getBeta() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,135,eturn beta;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,139, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,141,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,142,f (x < 0) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,143,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,145,"eturn FastMath.pow(x / beta, alpha - 1) / beta *"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,146,astMath.exp(-x / beta) / FastMath.exp(Gamma.logGamma(alpha));
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,150," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,151, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,152, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,154, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,155," @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,157,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,158,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,159,/ TODO: try to improve on this estimate
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,160,eturn Double.MIN_VALUE;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,164," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,165, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,166, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,168, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,169," @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,171,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,172,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,173,/ TODO: try to improve on this estimate
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,174,/ NOTE: gamma is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,175,"/ NOTE: therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,177,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,179,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,180,/ use mean
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,181,et = alpha * beta;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,182, else {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,183,/ use max value
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,184,et = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,187,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,191," Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,192, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,193, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,195, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,196, @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,198,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,199,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,200,/ TODO: try to improve on this estimate
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,201,"/ Gamma is skewed to the left, therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,203,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,205,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,206,/ use 1/2 mean
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,207,et = alpha * beta * 0.5;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,208, else {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,209,/ use mean
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,210,et = alpha * beta;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,213,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,217, Return the absolute accuracy setting of the solver used to estimate
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,218, inverse cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,220, @return the solver absolute accuracy.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,221, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,223,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,224,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,225,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,229, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,231, The lower bound of the support is always 0 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,233, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,235,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,236,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,237,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,241, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,243, The upper bound of the support is always positive infinity
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,244, no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,246, @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,248,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,249,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,250,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,254, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,256, For shape parameter <code>alpha</code> and scale
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,257," parameter <code>beta</code>, the mean is"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,258, <code>alpha * beta</code>
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,260, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,262,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,263,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,264,eturn getAlpha() * getBeta();
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,268, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,270, For shape parameter <code>alpha</code> and scale
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,271," parameter <code>beta</code>, the variance is"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,272, <code>alpha * beta^2</code>
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,274, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,276,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,277,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,278,inal double b = getBeta();
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,279,eturn getAlpha() * b * b;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,283, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,285,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,286,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,287,eturn true;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,291, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,293,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,294,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,295,eturn false;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,32,mport org.apache.commons.math.distribution.FDistributionImpl;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,32,import org.apache.commons.math.distribution.FDistribution;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,657, Generates a random value from the {@link FDistributionImpl F Distribution}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,657,* Generates a random value from the {@link FDistribution F Distribution}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,667,"eturn nextInversionDeviate(new FDistributionImpl(numeratorDf, denominatorDf));"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,667,"return nextInversionDeviate(new FDistribution(numeratorDf, denominatorDf));"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,672, {@link org.apache.commons.math.distribution.GammaDistributionImpl Gamma Distribution}.</p>
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,672,* {@link org.apache.commons.math.distribution.GammaDistribution Gamma Distribution}.</p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,24,mport org.apache.commons.math.distribution.FDistributionImpl;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,87,"Distribution fdist = new FDistributionImpl(a.dfbg, a.dfwg);"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,86,"FDistribution fdist = new FDistribution(a.dfbg, a.dfwg);"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,46,eturn new ExponentialDistributionImpl(5.0);
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,46,return new ExponentialDistribution(5.0);
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,95,xponentialDistribution d1 = new ExponentialDistributionImpl(1);
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,95,ExponentialDistribution d1 = new ExponentialDistribution(1);
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,102,xponentialDistribution d2 = new ExponentialDistributionImpl(3);
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,102,ExponentialDistribution d2 = new ExponentialDistribution(3);
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,119,ew ExponentialDistributionImpl(0);
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,119,new ExponentialDistribution(0);
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,127,ist = new ExponentialDistributionImpl(11d);
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,127,dist = new ExponentialDistribution(11d);
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,131,ist = new ExponentialDistributionImpl(10.5d);
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,131,dist = new ExponentialDistribution(10.5d);
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,37,"eturn new FDistributionImpl(5.0, 6.0);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,37,"return new FDistribution(5.0, 6.0);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,94,"ew FDistributionImpl(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,94,"new FDistribution(0, 1);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,100,"ew FDistributionImpl(1, 0);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,100,"new FDistribution(1, 0);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,109,"DistributionImpl fd = new FDistributionImpl(100000, 100000);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,109,"FDistribution fd = new FDistribution(100000, 100000);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,117,"DistributionImpl fd = new FDistributionImpl(1, 1);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,117,"FDistribution fd = new FDistribution(1, 1);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,122,"d = new FDistributionImpl(1, 2);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,122,"fd = new FDistribution(1, 2);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,133,"ist = new FDistributionImpl(1, 2);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,133,"dist = new FDistribution(1, 2);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,137,"ist = new FDistributionImpl(1, 3);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,137,"dist = new FDistribution(1, 3);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,141,"ist = new FDistributionImpl(1, 5);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,141,"dist = new FDistribution(1, 5);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,143,"ssert.assertEquals(dist.getNumericalVariance(), (2d * 5d * 5d * 4d) / 9d, tol);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,143,"Assert.assertEquals(dist.getNumericalVariance(), (2d * 5d * 5d * 4d) / 9d, tol);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,38,"eturn new GammaDistributionImpl(4d, 2d);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,38,"return new GammaDistribution(4d, 2d);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,80,"ew GammaDistributionImpl(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,80,"new GammaDistribution(0, 1);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,86,"ew GammaDistributionImpl(1, 0);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,86,"new GammaDistribution(1, 0);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,111,"ammaDistribution distribution = new GammaDistributionImpl( a, b );"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,111,"GammaDistribution distribution = new GammaDistribution( a, b );"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,117,"ammaDistribution distribution = new GammaDistributionImpl( a, b );"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,117,"GammaDistribution distribution = new GammaDistribution( a, b );"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,144,"ammaDistribution d = new GammaDistributionImpl(alpha, 1 / rate);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,144,"GammaDistribution d = new GammaDistribution(alpha, 1 / rate);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,162,"ist = new GammaDistributionImpl(1, 2);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,162,"dist = new GammaDistribution(1, 2);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,164,"ssert.assertEquals(dist.getNumericalVariance(), 4, tol);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,166,"ist = new GammaDistributionImpl(1.1, 4.2);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,164,"Assert.assertEquals(dist.getNumericalVariance(), 4, tol);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,166,"dist = new GammaDistribution(1.1, 4.2);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,33,mport org.apache.commons.math.distribution.ExponentialDistributionImpl;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,34,mport org.apache.commons.math.distribution.FDistributionImpl;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,35,mport org.apache.commons.math.distribution.GammaDistributionImpl;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,33,import org.apache.commons.math.distribution.ExponentialDistribution;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,34,import org.apache.commons.math.distribution.FDistribution;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,35,import org.apache.commons.math.distribution.GammaDistribution;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,619,uartiles = TestUtils.getDistributionQuartiles(new ExponentialDistributionImpl(1));
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,619,quartiles = TestUtils.getDistributionQuartiles(new ExponentialDistribution(1));
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,629,uartiles = TestUtils.getDistributionQuartiles(new ExponentialDistributionImpl(5));
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,629,quartiles = TestUtils.getDistributionQuartiles(new ExponentialDistribution(5));
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,899,"ouble[] quartiles = TestUtils.getDistributionQuartiles(new FDistributionImpl(12, 5));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,899,"double[] quartiles = TestUtils.getDistributionQuartiles(new FDistribution(12, 5));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,915,"uartiles = TestUtils.getDistributionQuartiles(new GammaDistributionImpl(4, 2));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,915,"quartiles = TestUtils.getDistributionQuartiles(new GammaDistribution(4, 2));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,925,"uartiles = TestUtils.getDistributionQuartiles(new GammaDistributionImpl(0.3, 3));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,925,"quartiles = TestUtils.getDistributionQuartiles(new GammaDistribution(0.3, 3));"

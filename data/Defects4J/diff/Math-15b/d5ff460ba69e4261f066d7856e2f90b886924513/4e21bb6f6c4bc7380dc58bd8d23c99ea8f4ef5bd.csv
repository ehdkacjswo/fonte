is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,88, The arguments are used implement the original stopping criterion
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,89,* The arguments are used for implementing the original stopping criterion
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,229,eturn current;
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,230,"return best(current, previous, isMinim);"
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,266,eturn current;
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,267,"return best(current, previous, isMinim);"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,274,* Selects the best of two points.
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,276,* @param a Point and value.
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,277,* @param b Point and value.
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,278,* @param isMinim {@code true} if the selected point must be the one with
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,279,* the lowest value.
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,280,"* @return the best point, or {@code null} if {@code a} and {@code b} are"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,281,* both {@code null}.
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,283,"private UnivariatePointValuePair best(UnivariatePointValuePair a,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,284,"UnivariatePointValuePair b,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,285,boolean isMinim) {
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,286,if (a == null) {
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,287,return b;
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,289,if (b == null) {
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,290,return a;
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,293,if (isMinim) {
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,294,return a.getValue() < b.getValue() ? a : b;
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,295,} else {
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,296,return a.getValue() > b.getValue() ? a : b;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,23,import org.apache.commons.math3.analysis.function.StepFunction;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,24,import org.apache.commons.math3.analysis.FunctionUtils;
False,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,42,"ssert.assertEquals(3 * Math.PI / 2, optimizer.optimize(200, f, GoalType.MINIMIZE, 4, 5).getPoint(),1e-8);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,44,"Assert.assertEquals(3 * Math.PI / 2, optimizer.optimize(200, f, GoalType.MINIMIZE, 4, 5).getPoint(), 1e-8);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,188,"* Contrived example showing that prior to the resolution of MATH-855,"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,189,"* the algorithm, by always returning the last evaluated point, would"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,190,* sometimes not report the best point it had found.
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,192,@Test
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,193,public void testMath855() {
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,194,final double minSin = 3 * Math.PI / 2;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,195,final double offset = 1e-8;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,196,final double delta = 1e-7;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,197,final UnivariateFunction f1 = new Sin();
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,198,"final UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 5 * offset },"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,199,"new double[] { 0, -1, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,200,"final UnivariateFunction f = FunctionUtils.add(f1, f2);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,201,"final UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-100);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,202,final UnivariatePointValuePair result
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,203,"= optimizer.optimize(200, f, GoalType.MINIMIZE, minSin - 6.789 * delta, minSin + 9.876 * delta);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,204,final int numEval = optimizer.getEvaluations();
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,206,final double sol = result.getPoint();
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,207,final double expected = 4.712389027602411;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,209,"// System.out.println(""min="" + (minSin + offset) + "" f="" + f.value(minSin + offset));"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,210,"// System.out.println(""sol="" + sol + "" f="" + f.value(sol));"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,211,"// System.out.println(""exp="" + expected + "" f="" + f.value(expected));"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,213,"Assert.assertTrue(""Best point not reported"", f.value(sol) <= f.value(expected));"

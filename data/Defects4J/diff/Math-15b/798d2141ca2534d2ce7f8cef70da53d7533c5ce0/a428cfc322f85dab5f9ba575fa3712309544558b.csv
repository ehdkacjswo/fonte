is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,17,package org.apache.commons.math3.analysis.interpolation;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,22,import org.apache.commons.math3.analysis.DifferentiableUnivariateVectorFunction;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,23,import org.apache.commons.math3.analysis.UnivariateVectorFunction;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,24,import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,25,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,26,import org.apache.commons.math3.exception.MathIllegalStateException;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,27,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,28,import org.apache.commons.math3.util.ArithmeticUtils;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,30,/** Polynomial interpolator using both sample values and sample derivatives.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,31,* <p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,32,"* The interpolation polynomials match all sample points, including both values"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,33,* and provided derivatives. There is one polynomial for each component of
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,34,* the values vector. All polynomial have the same degree. The degree of the
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,35,* polynomials depends on the number of points and number of derivatives at each
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,36,* point. For example the interpolation polynomials for n sample points without
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,37,* any derivatives all have degree n-1. The interpolation polynomials for n
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,38,* sample points with the two extreme points having value and first derivative
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,39,* and the remaining points having value only all have degree n+1. The
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,40,"* interpolation polynomial for n sample points with value, first and second"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,41,* derivative for all points all have degree 3n-1.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,42,* </p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,43,* <p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,44,* This class has been imported from the Orekit space flight dynamics library
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,45,* also distributed under the terms of the Apache License V2. Original copyright
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,46,* is: Copyright 2002-2012 CS Syst√®mes d'Information.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,47,* </p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,48,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,49,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,51,public class HermiteInterpolator implements DifferentiableUnivariateVectorFunction {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,53,/** Sample abscissae. */
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,54,private final List<Double> abscissae;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,56,/** Top diagonal of the divided differences array. */
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,57,private final List<double[]> topDiagonal;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,59,/** Bottom diagonal of the divided differences array. */
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,60,private final List<double[]> bottomDiagonal;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,62,/** Create an empty interpolator.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,64,public HermiteInterpolator() {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,65,this.abscissae      = new ArrayList<Double>();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,66,this.topDiagonal    = new ArrayList<double[]>();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,67,this.bottomDiagonal = new ArrayList<double[]>();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,70,/** Add a sample point.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,71,* <p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,72,* This method must be called once for each sample point. It is allowed to
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,73,* mix some calls with values only with calls with values and first
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,74,* derivatives.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,75,* </p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,76,* <p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,77,* The point abscissae for all calls <em>must</em> be different.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,78,* </p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,79,* @param x abscissa of the sample point
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,80,* @param value value and derivatives of the sample point
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,81,"* (if only one row is passed, it is the value, if two rows are"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,82,* passed the first one is the value and the second the derivative
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,83,* and so on)
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,84,* @exception MathIllegalArgumentException if the abscissa is equals to a previously
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,85,* added sample point
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,87,"public void addSamplePoint(final double x, final double[] ... value)"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,88,throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,90,for (int i = 0; i < value.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,92,final double[] y = value[i].clone();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,93,if (i > 1) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,94,double inv = 1.0 / ArithmeticUtils.factorial(i);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,95,for (int j = 0; j < y.length; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,96,y[j] *= inv;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,100,// update the bottom diagonal of the divided differences array
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,101,final int n = abscissae.size();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,102,"bottomDiagonal.add(n - i, y);"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,103,double[] bottom0 = y;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,104,for (int j = i; j < n; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,105,final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,106,final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,107,if (Double.isInfinite(inv)) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,108,"throw new MathIllegalArgumentException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO,"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,109,x);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,111,for (int k = 0; k < y.length; ++k) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,112,bottom1[k] = inv * (bottom0[k] - bottom1[k]);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,114,bottom0 = bottom1;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,117,// update the top diagonal of the divided differences array
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,118,topDiagonal.add(bottom0.clone());
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,120,// update the abscissae array
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,121,abscissae.add(x);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,127,/** Compute the interpolation polynomials.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,128,* @return interpolation polynomials array
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,129,* @exception MathIllegalStateException if sample is empty
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,131,public PolynomialFunction[] getPolynomials()
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,132,throws MathIllegalStateException {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,134,// safety check
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,135,checkInterpolation();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,137,// iteration initialization
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,138,final PolynomialFunction zero = polynomial(0);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,139,PolynomialFunction[] polynomials = new PolynomialFunction[topDiagonal.get(0).length];
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,140,for (int i = 0; i < polynomials.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,141,polynomials[i] = zero;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,143,PolynomialFunction coeff = polynomial(1);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,145,// build the polynomials by iterating on the top diagonal of the divided differences array
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,146,for (int i = 0; i < topDiagonal.size(); ++i) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,147,double[] tdi = topDiagonal.get(i);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,148,for (int k = 0; k < polynomials.length; ++k) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,149,polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,151,"coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0));"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,154,return polynomials;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,158,/** Interpolate value at a specified abscissa.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,159,* <p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,160,* Calling this method is equivalent to call the {@link PolynomialFunction#value(double)
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,161,"* value} methods of all polynomials returned by {@link #getPolynomials() getPolynomials},"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,162,"* except it does not build the intermediate polynomials, so this method is faster and"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,163,* numerically more stable.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,164,* </p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,165,* @param x interpolation abscissa
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,166,* @return interpolated value
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,167,* @exception MathIllegalStateException if sample is empty
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,169,public double[] value(double x)
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,170,throws MathIllegalStateException {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,172,// safety check
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,173,checkInterpolation();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,175,final double[] value = new double[topDiagonal.get(0).length];
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,176,double valueCoeff = 1;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,177,for (int i = 0; i < topDiagonal.size(); ++i) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,178,double[] dividedDifference = topDiagonal.get(i);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,179,for (int k = 0; k < value.length; ++k) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,180,value[k] += dividedDifference[k] * valueCoeff;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,182,final double deltaX = x - abscissae.get(i);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,183,valueCoeff *= deltaX;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,186,return value;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,190,/** Interpolate first derivative at a specified abscissa.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,191,* <p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,192,* Calling this method is equivalent to call the {@link PolynomialFunction#value(double)
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,193,* value} methods of the derivatives of all polynomials returned by {@link
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,194,"* #getPolynomials() getPolynomials}, except it builds neither the intermediate"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,195,"* polynomials nor their derivatives, so this method is faster and numerically more stable."
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,196,* </p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,197,* @param x interpolation abscissa
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,198,* @return interpolated derivative
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,199,* @exception MathIllegalStateException if sample is empty
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,201,public double[] derivative(double x)
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,202,throws MathIllegalStateException {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,204,// safety check
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,205,checkInterpolation();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,207,final double[] derivative = new double[topDiagonal.get(0).length];
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,208,double valueCoeff      = 1;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,209,double derivativeCoeff = 0;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,210,for (int i = 0; i < topDiagonal.size(); ++i) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,211,double[] dividedDifference = topDiagonal.get(i);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,212,for (int k = 0; k < derivative.length; ++k) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,213,derivative[k] += dividedDifference[k] * derivativeCoeff;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,215,final double deltaX = x - abscissae.get(i);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,216,derivativeCoeff = valueCoeff + derivativeCoeff * deltaX;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,217,valueCoeff *= deltaX;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,220,return derivative;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,224,/** {@inheritDoc}} */
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,225,public UnivariateVectorFunction derivative() {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,226,return new UnivariateVectorFunction() {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,228,/** {@inheritDoc}} */
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,229,public double[] value(double x) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,230,return derivative(x);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,236,/** Check interpolation can be performed.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,237,* @exception MathIllegalStateException if interpolation cannot be performed
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,238,* because sample is empty
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,240,private void checkInterpolation() throws MathIllegalStateException {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,241,if (abscissae.isEmpty()) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,242,throw new MathIllegalStateException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,246,/** Create a polynomial from its coefficients.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,247,* @param c polynomials coefficients
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,248,* @return polynomial
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,250,private PolynomialFunction polynomial(double ... c) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java,251,return new PolynomialFunction(c);
False,src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java,91,"UPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),"
True,src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java,91,"DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),"
True,src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java,94,"EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),"
False,src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java,115,"DENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,17,package org.apache.commons.math3.analysis.interpolation;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,19,import java.util.Random;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,21,import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,22,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,26,public class HermiteInterpolatorTest {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,28,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,29,public void testZero() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,30,HermiteInterpolator interpolator = new HermiteInterpolator();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,31,"interpolator.addSamplePoint(0.0, new double[] { 0.0 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,32,for (double x = -10; x < 10; x += 1.0) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,33,"Assert.assertEquals(0.0, interpolator.value(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,34,"Assert.assertEquals(0.0, interpolator.derivative(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,36,"checkPolynomial(new PolynomialFunction(new double[] { 0.0 }),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,37,interpolator.getPolynomials()[0]);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,40,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,41,public void testQuadratic() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,42,HermiteInterpolator interpolator = new HermiteInterpolator();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,43,"interpolator.addSamplePoint(0.0, new double[] { 2.0 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,44,"interpolator.addSamplePoint(1.0, new double[] { 0.0 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,45,"interpolator.addSamplePoint(2.0, new double[] { 0.0 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,46,for (double x = -10; x < 10; x += 1.0) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,47,"Assert.assertEquals((x - 1.0) * (x - 2.0), interpolator.value(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,48,"Assert.assertEquals(2 * x - 3.0, interpolator.derivative(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,50,"checkPolynomial(new PolynomialFunction(new double[] { 2.0, -3.0, 1.0 }),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,51,interpolator.getPolynomials()[0]);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,54,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,55,public void testMixedDerivatives() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,56,HermiteInterpolator interpolator = new HermiteInterpolator();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,57,"interpolator.addSamplePoint(0.0, new double[] { 1.0 }, new double[] { 2.0 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,58,"interpolator.addSamplePoint(1.0, new double[] { 4.0 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,59,"interpolator.addSamplePoint(2.0, new double[] { 5.0 }, new double[] { 2.0 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,60,"Assert.assertEquals(4, interpolator.getPolynomials()[0].degree());"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,61,"Assert.assertEquals(1.0, interpolator.value(0.0)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,62,"Assert.assertEquals(2.0, interpolator.derivative(0.0)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,63,"Assert.assertEquals(4.0, interpolator.value(1.0)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,64,"Assert.assertEquals(5.0, interpolator.value(2.0)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,65,"Assert.assertEquals(2.0, interpolator.derivative(2.0)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,66,"checkPolynomial(new PolynomialFunction(new double[] { 1.0, 2.0, 4.0, -4.0, 1.0 }),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,67,interpolator.getPolynomials()[0]);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,70,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,71,public void testRandomPolynomialsValuesOnly() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,73,Random random = new Random(0x42b1e7dbd361a932l);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,75,for (int i = 0; i < 100; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,77,int maxDegree = 0;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,78,PolynomialFunction[] p = new PolynomialFunction[5];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,79,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,80,int degree = random.nextInt(7);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,81,"p[k] = randomPolynomial(degree, random);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,82,"maxDegree = FastMath.max(maxDegree, degree);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,85,HermiteInterpolator interpolator = new HermiteInterpolator();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,86,for (int j = 0; j < 1 + maxDegree; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,87,double x = 0.1 * j;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,88,double[] values = new double[p.length];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,89,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,90,values[k] = p[k].value(x);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,92,"interpolator.addSamplePoint(x, values);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,95,for (double x = 0; x < 2; x += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,96,double[] values = interpolator.value(x);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,97,"Assert.assertEquals(p.length, values.length);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,98,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,99,"Assert.assertEquals(p[k].value(x), values[k], 1.0e-8 * FastMath.abs(p[k].value(x)));"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,103,PolynomialFunction[] result = interpolator.getPolynomials();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,104,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,105,"checkPolynomial(p[k], result[k]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,111,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,112,public void testRandomPolynomialsFirstDerivative() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,114,Random random = new Random(0x570803c982ca5d3bl);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,116,for (int i = 0; i < 100; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,118,int maxDegree = 0;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,119,PolynomialFunction[] p      = new PolynomialFunction[5];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,120,PolynomialFunction[] pPrime = new PolynomialFunction[5];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,121,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,122,int degree = random.nextInt(7);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,123,"p[k]      = randomPolynomial(degree, random);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,124,pPrime[k] = p[k].polynomialDerivative();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,125,"maxDegree = FastMath.max(maxDegree, degree);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,128,HermiteInterpolator interpolator = new HermiteInterpolator();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,129,for (int j = 0; j < 1 + maxDegree / 2; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,130,double x = 0.1 * j;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,131,double[] values      = new double[p.length];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,132,double[] derivatives = new double[p.length];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,133,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,134,values[k]      = p[k].value(x);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,135,derivatives[k] = pPrime[k].value(x);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,137,"interpolator.addSamplePoint(x, values, derivatives);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,140,for (double x = 0; x < 2; x += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,141,double[] values      = interpolator.value(x);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,142,double[] derivatives = interpolator.derivative(x);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,143,"Assert.assertEquals(p.length, values.length);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,144,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,145,"Assert.assertEquals(p[k].value(x), values[k], 1.0e-8 * FastMath.abs(p[k].value(x)));"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,146,"Assert.assertEquals(pPrime[k].value(x), derivatives[k], 4.0e-8 * FastMath.abs(p[k].value(x)));"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,150,PolynomialFunction[] result = interpolator.getPolynomials();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,151,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,152,"checkPolynomial(p[k], result[k]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,158,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,159,public void testSine() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,160,HermiteInterpolator interpolator = new HermiteInterpolator();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,161,for (double x = 0; x < FastMath.PI; x += 0.5) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,162,"interpolator.addSamplePoint(x, new double[] { FastMath.sin(x) });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,164,for (double x = 0.1; x <= 2.9; x += 0.01) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,165,"Assert.assertEquals(FastMath.sin(x), interpolator.value(x)[0], 3.5e-5);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,166,"Assert.assertEquals(FastMath.cos(x), interpolator.derivative(x)[0], 1.3e-4);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,170,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,171,public void testSquareRoot() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,172,HermiteInterpolator interpolator = new HermiteInterpolator();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,173,for (double x = 1.0; x < 3.6; x += 0.5) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,174,"interpolator.addSamplePoint(x, new double[] { FastMath.sqrt(x) });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,176,for (double x = 1.1; x < 3.5; x += 0.01) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,177,"Assert.assertEquals(FastMath.sqrt(x), interpolator.value(x)[0], 1.5e-4);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,178,"Assert.assertEquals(0.5 / FastMath.sqrt(x), interpolator.derivative(x)[0], 8.5e-4);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,182,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,183,public void testWikipedia() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,184,// this test corresponds to the example from Wikipedia page:
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,185,// http://en.wikipedia.org/wiki/Hermite_interpolation
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,186,HermiteInterpolator interpolator = new HermiteInterpolator();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,187,"interpolator.addSamplePoint(-1, new double[] { 2 }, new double[] { -8 }, new double[] { 56 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,188,"interpolator.addSamplePoint( 0, new double[] { 1 }, new double[] {  0 }, new double[] {  0 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,189,"interpolator.addSamplePoint( 1, new double[] { 2 }, new double[] {  8 }, new double[] { 56 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,190,for (double x = -1.0; x <= 1.0; x += 0.125) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,191,double x2 = x * x;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,192,double x4 = x2 * x2;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,193,double x8 = x4 * x4;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,194,"Assert.assertEquals(x8 + 1, interpolator.value(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,195,"Assert.assertEquals(8 * x4 * x2 * x, interpolator.derivative(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,197,"checkPolynomial(new PolynomialFunction(new double[] { 1, 0, 0, 0, 0, 0, 0, 0, 1 }),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,198,interpolator.getPolynomials()[0]);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,201,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,202,public void testOnePointParabola() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,203,HermiteInterpolator interpolator = new HermiteInterpolator();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,204,"interpolator.addSamplePoint(0, new double[] { 1 }, new double[] { 1 }, new double[] { 2 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,205,for (double x = -1.0; x <= 1.0; x += 0.125) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,206,"Assert.assertEquals(1 + x * (1 + x), interpolator.value(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,207,"Assert.assertEquals(1 + 2 * x, interpolator.derivative(x)[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,209,"checkPolynomial(new PolynomialFunction(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,210,interpolator.getPolynomials()[0]);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,213,"private PolynomialFunction randomPolynomial(int degree, Random random) {"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,214,double[] coeff = new double[ 1 + degree];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,215,for (int j = 0; j < degree; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,216,coeff[j] = random.nextDouble();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,218,return new PolynomialFunction(coeff);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,221,@Test(expected=IllegalStateException.class)
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,222,public void testEmptySample() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,223,new HermiteInterpolator().value(0.0);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,226,@Test(expected=IllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,227,public void testDuplicatedAbscissa() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,228,HermiteInterpolator interpolator = new HermiteInterpolator();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,229,"interpolator.addSamplePoint(1.0, new double[] { 0.0 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,230,"interpolator.addSamplePoint(1.0, new double[] { 1.0 });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,233,"private void checkPolynomial(PolynomialFunction expected, PolynomialFunction result) {"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,234,Assert.assertTrue(result.degree() >= expected.degree());
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,235,double[] cE = expected.getCoefficients();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,236,double[] cR = result.getCoefficients();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,237,for (int i = 0; i < cE.length; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,238,"Assert.assertEquals(cE[i], cR[i], 1.0e-8 * FastMath.abs(cE[i]));"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,240,for (int i = cE.length; i < cR.length; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java,241,"Assert.assertEquals(0.0, cR[i], 1.0e-9);"

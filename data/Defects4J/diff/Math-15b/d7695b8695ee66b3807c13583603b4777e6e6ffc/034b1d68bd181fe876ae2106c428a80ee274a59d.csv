is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,20,import org.apache.commons.math.fraction.Fraction;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,21,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,22,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,23,import org.apache.commons.math.ode.IntegratorException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,24,import org.apache.commons.math.ode.events.CombinedEventsManager;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,25,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,29,* This class implements explicit Adams-Bashforth integrators for Ordinary
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,30,* Differential Equations.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,32,* <p>Adams-Bashforth (in fact due to Adams alone) methods are explicit
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,33,* multistep ODE solvers witch fixed stepsize. The value of state vector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,34,* at step n+1 is a simple combination of the value at step n and of the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,35,"* derivatives at steps n, n-1, n-2 ... Depending on the number k of previous"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,36,"* steps one wants to use for computing the next value, different formulas"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,37,* are available:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,38,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,39,*   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + h f<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,40,*   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + h (3f<sub>n</sub>-f<sub>n-1</sub>)/2</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,41,*   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + h (23f<sub>n</sub>-16f<sub>n-1</sub>+5f<sub>n-2</sub>)/12</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,42,*   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + h (55f<sub>n</sub>-59f<sub>n-1</sub>+37f<sub>n-2</sub>-9f<sub>n-3)/24</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,43,*   <li>...</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,44,* </ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,46,* <p>A k-steps Adams-Bashforth method is of order k. There is no limit to the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,47,* value of k.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,49,* <p>These methods are explicit: f<sub>n+1</sub> is not used to compute
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,50,* y<sub>n+1</sub>. More accurate implicit Adams methods exist: the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,51,* Adams-Moulton methods (which are also due to Adams alone). They are
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,52,* provided by the {@link AdamsMoultonIntegrator AdamsMoultonIntegrator} class.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,54,* @see AdamsMoultonIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,55,* @see BDFIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,56,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,57,* @since 2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,59,public class AdamsBashforthIntegrator extends MultistepIntegrator {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,61,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,62,private static final long serialVersionUID = 1676381657635800870L;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,64,/** Integrator method name. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,65,"private static final String METHOD_NAME = ""Adams-Bashforth"";"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,67,/** Coefficients for the current method. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,68,private final double[] coeffs;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,70,/** Integration step. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,71,private final double step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,74,* Build an Adams-Bashforth integrator with the given order and step size.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,75,* @param order order of the method (must be strictly positive)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,76,* @param step integration step size
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,78,"public AdamsBashforthIntegrator(final int order, final double step) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,80,"super(METHOD_NAME, order, new AdamsBashforthStepInterpolator());"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,82,// compute the integration coefficients
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,83,int[][] bdArray = computeBackwardDifferencesArray(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,84,Fraction[] gamma = computeGammaArray(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,85,coeffs = new double[order];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,86,for (int i = 0; i < order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,87,Fraction f = Fraction.ZERO;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,88,for (int j = i; j < order; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,89,"f = f.add(gamma[j].multiply(new Fraction(bdArray[j][i], 1)));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,91,coeffs[i] = f.doubleValue();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,94,this.step = step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,98,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,99,"public double integrate(FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,100,"double t0, double[] y0, double t, double[] y)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,101,"throws DerivativeException, IntegratorException {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,103,"sanityChecks(equations, t0, y0, t, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,104,final boolean forward = (t > t0);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,106,// initialize working arrays
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,107,if (y != y0) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,108,"System.arraycopy(y0, 0, y, 0, y0.length);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,110,final double[] yTmp = new double[y0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,112,// set up an interpolator sharing the integrator arrays
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,113,final AdamsBashforthStepInterpolator interpolator =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,114,(AdamsBashforthStepInterpolator) prototype.copy();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,115,"interpolator.reinitialize(yTmp, previousT, previousF, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,117,// set up integration control objects
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,118,stepStart = t0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,119,stepSize  = step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,120,for (StepHandler handler : stepHandlers) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,121,handler.reset();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,123,"CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,125,// compute the first few steps using the configured starter integrator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,126,double stopTime =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,127,"start(previousF.length, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,128,if (Double.isNaN(previousT[0])) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,129,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,131,stepStart = previousT[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,132,interpolator.storeTime(stepStart);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,134,boolean lastStep = false;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,135,while (!lastStep) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,137,// shift all data
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,138,interpolator.shift();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,140,// estimate the state at the end of the step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,141,for (int j = 0; j < y0.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,142,double sum = 0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,143,for (int l = 0; l < coeffs.length; ++l) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,144,sum += coeffs[l] * previousF[l][j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,146,yTmp[j] = y[j] + stepSize * sum;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,149,// discrete events handling
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,150,interpolator.storeTime(stepStart + stepSize);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,151,final boolean truncated;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,152,if (manager.evaluateStep(interpolator)) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,153,truncated = true;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,154,interpolator.truncateStep(manager.getEventTime());
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,155,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,156,truncated = false;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,159,// the step has been accepted (may have been truncated)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,160,final double nextStep = interpolator.getCurrentTime();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,161,interpolator.setInterpolatedTime(nextStep);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,162,"System.arraycopy(interpolator.getInterpolatedState(), 0, y, 0, y0.length);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,163,"manager.stepAccepted(nextStep, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,164,lastStep = manager.stop();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,166,// provide the step data to the step handler
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,167,for (StepHandler handler : stepHandlers) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,168,"handler.handleStep(interpolator, lastStep);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,170,stepStart = nextStep;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,172,if (!lastStep) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,173,// prepare next step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,175,"if (manager.reset(stepStart, y)) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,177,// some events handler has triggered changes that
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,178,"// invalidate the derivatives, we need to restart from scratch"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,179,stopTime =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,180,"start(previousF.length, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,181,if (Double.isNaN(previousT[0])) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,182,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,184,stepStart = previousT[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,186,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,188,if (truncated) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,189,"// the step has been truncated, we need to adjust the previous steps"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,190,for (int i = 1; i < previousF.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,191,previousT[i] = stepStart - i * stepSize;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,192,interpolator.setInterpolatedTime(previousT[i]);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,193,"System.arraycopy(interpolator.getInterpolatedState(), 0,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,194,"previousF[i], 0, y0.length);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,196,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,197,rotatePreviousSteps();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,200,// evaluate differential equations for next step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,201,previousT[0] = stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,202,"equations.computeDerivatives(stepStart, y, previousF[0]);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,209,stopTime  = stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,210,stepStart = Double.NaN;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,211,stepSize  = Double.NaN;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,212,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,216,/** Get the coefficients of the method.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,217,* <p>The coefficients are the c<sub>i</sub> terms in the following formula:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,218,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,219,*   y<sub>n+1</sub> = y<sub>n</sub> + h &times; &sum;<sub>i=0</sub><sup>i=k-1</sup> c<sub>i</sub>f<sub>n-i</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,220,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,221,* @return a copy of the coefficients of the method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,223,public double[] getCoeffs() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,224,return coeffs.clone();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,227,/** Compute the backward differences coefficients array.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,228,"* <p>This is quite similar to the Pascal triangle, except for a"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,229,"* (-1)<sup>i</sup> sign. We use a straightforward approach here,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,230,* since we don't expect this to be run too many times with too
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,231,* high k. It is based on the recurrence relations:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,232,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,233,*   &nabla;<sup>0</sup> f<sub>n</sub> = f<sub>n</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,234,*   &nabla;<sup>i+1</sup> f<sub>n</sub> = &nabla;<sup>i</sup>f<sub>n</sub> - &nabla;<sup>i</sup>f<sub>n-1</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,235,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,236,* @param order order of the integration method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,238,static int[][] computeBackwardDifferencesArray(final int order) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,240,// create the array
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,241,int[][] bdArray = new int[order][];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,243,// recurrence initialization
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,244,bdArray[0] = new int[] { 1 };
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,246,// fill up array using recurrence relation
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,247,for (int i = 1; i < order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,248,bdArray[i] = new int[i + 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,249,bdArray[i][0] = 1;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,250,for (int j = 0; j < i - 1; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,251,bdArray[i][j + 1] = bdArray[i - 1][j + 1] - bdArray[i - 1][j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,253,bdArray[i][i] = -bdArray[i - 1][i - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,256,return bdArray;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,260,/** Compute the gamma coefficients.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,261,* @param order order of the integration method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,262,* @return gamma coefficients array
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,264,static Fraction[] computeGammaArray(final int order) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,266,// create the array
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,267,Fraction[] gammaArray = new Fraction[order];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,269,// recurrence initialization
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,270,gammaArray[0] = Fraction.ONE;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,272,// fill up array using recurrence relation
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,273,for (int i = 1; i < order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,274,Fraction gamma = Fraction.ONE;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,275,for (int j = 1; j <= i; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,276,"gamma = gamma.subtract(gammaArray[i - j].multiply(new Fraction(1, j + 1)));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,278,gammaArray[i] = gamma;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,281,return gammaArray;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,20,import java.io.IOException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,21,import java.io.ObjectInput;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,22,import java.io.ObjectOutput;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,24,import org.apache.commons.math.fraction.Fraction;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,25,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,26,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,27,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,30,* This class implements an interpolator for Adams-Bashforth multiple steps.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,32,* <p>This interpolator computes dense output inside the last few
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,33,* steps computed. The interpolation equation is consistent with the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,34,"* integration scheme, it is based on a kind of <em>rollback</em> of the"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,35,* integration from step end to interpolation date:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,36,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,37,*   y(t<sub>n</sub> + theta h) = y (t<sub>n</sub> + h) - &int;<sub>t<sub>n</sub> + theta h</sub><sup>t<sub>n</sub> + h</sup>p(t)dt
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,38,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,39,* where theta belongs to [0 ; 1] and p(t) is the interpolation polynomial based on
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,40,"* the derivatives at previous steps f<sub>n-k+1</sub>, f<sub>n-k+2</sub> ..."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,41,* f<sub>n</sub> and f<sub>n</sub>.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,43,* @see AdamsBashforthIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,44,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,45,* @since 2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,48,class AdamsBashforthStepInterpolator extends MultistepStepInterpolator {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,50,/** Serializable version identifier */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,51,private static final long serialVersionUID = -7179861704951334960L;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,53,/** Neville's interpolation array. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,54,private double[] neville;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,56,/** Integration rollback array. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,57,private double[] rollback;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,59,/** &gamma; array. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,60,private double[] gamma;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,62,/** Backward differences array. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,63,private int[][] bdArray;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,65,/** Original non-truncated step end time. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,66,private double nonTruncatedEnd;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,68,/** Original non-truncated step size. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,69,private double nonTruncatedH;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,71,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,72,"* This constructor builds an instance that is not usable yet, the"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,73,* {@link AbstractStepInterpolator#reinitialize} method should be called
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,74,* before using the instance in order to initialize the internal arrays. This
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,75,* constructor is used only in order to delay the initialization in
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,76,* some cases.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,78,public AdamsBashforthStepInterpolator() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,81,/** Copy constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,82,* @param interpolator interpolator to copy from. The copy is a deep
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,83,* copy: its arrays are separated from the original arrays of the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,84,* instance
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,86,public AdamsBashforthStepInterpolator(final AdamsBashforthStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,87,super(interpolator);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,88,nonTruncatedEnd = interpolator.nonTruncatedEnd;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,89,nonTruncatedH   = interpolator.nonTruncatedH;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,92,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,93,protected StepInterpolator doCopy() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,94,return new AdamsBashforthStepInterpolator(this);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,97,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,98,protected void initializeCoefficients() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,100,neville  = new double[previousF.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,101,rollback = new double[previousF.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,103,bdArray = AdamsBashforthIntegrator.computeBackwardDifferencesArray(previousF.length);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,105,Fraction[] fGamma = AdamsBashforthIntegrator.computeGammaArray(previousF.length);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,106,gamma = new double[fGamma.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,107,for (int i = 0; i < fGamma.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,108,gamma[i] = fGamma[i].doubleValue();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,113,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,114,public void storeTime(final double t) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,115,nonTruncatedEnd = t;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,116,nonTruncatedH   = nonTruncatedEnd - previousTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,117,super.storeTime(t);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,120,/** Truncate a step.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,121,* <p>Truncating a step is necessary when an event is triggered
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,122,* before the nominal end of the step.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,124,void truncateStep(final double truncatedEndTime) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,125,currentTime = truncatedEndTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,126,h = currentTime - previousTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,129,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,130,public void setInterpolatedTime(final double time)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,131,throws DerivativeException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,132,interpolatedTime = time;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,133,final double oneMinusThetaH = nonTruncatedEnd - interpolatedTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,134,final double theta = (nonTruncatedH == 0) ?
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,135,0 : (nonTruncatedH - oneMinusThetaH) / nonTruncatedH;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,136,"computeInterpolatedState(theta, oneMinusThetaH);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,139,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,140,"protected void computeInterpolatedState(final double theta, final double oneMinusThetaH) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,141,interpolateDerivatives();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,142,interpolateState(theta);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,145,/** Interpolate the derivatives.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,146,* <p>The Adams method is based on a polynomial interpolation of the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,147,* derivatives based on the preceding steps. So the interpolation of
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,148,* the derivatives here is strictly equivalent: it is a simple polynomial
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,149,* interpolation.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,151,private void interpolateDerivatives() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,153,for (int i = 0; i < interpolatedDerivatives.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,155,// initialize the Neville's interpolation algorithm
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,156,for (int k = 0; k < previousF.length; ++k) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,157,neville[k] = previousF[k][i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,160,// combine the contributions of each points
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,161,for (int l = 1; l < neville.length; ++l) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,162,for (int m = neville.length - 1; m >= l; --m) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,163,final double xm   = previousT[m];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,164,final double xmMl = previousT[m - l];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,165,neville[m] = ((interpolatedTime - xm) * neville[m-1] +
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,166,(xmMl - interpolatedTime) * neville[m]) / (xmMl - xm);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,170,// the interpolation polynomial value is in the array last element
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,171,interpolatedDerivatives[i] = neville[neville.length - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,177,/** Interpolate the state.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,178,* <p>The Adams method is based on a polynomial interpolation of the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,179,* derivatives based on the preceding steps. The polynomial model is
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,180,* integrated analytically throughout the last step. Using the notations
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,181,* found in the second edition of the first volume (Nonstiff Problems)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,182,"* of the reference book by Hairer, Norsett and Wanner: <i>Solving Ordinary"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,183,"* Differential Equations</i> (Springer-Verlag, ISBN 3-540-56670-8), this"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,184,* process leads to the following expression:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,185,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,186,* y<sub>n+1</sub> = y<sub>n</sub> +
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,187,* h &times; &sum;<sub>j=0</sub><sup>j=k-1</sup> &gamma;<sub>j</sub>&nabla;<sup>j</sup>f<sub>n</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,188,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,189,"* <p>In the previous expression, the &gamma;<sub>j</sub> terms are the"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,190,"* ones that result from the analytical integration, and can be computed form"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,191,* the binomial coefficients C<sub>j</sub><sup>-s</sup>:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,192,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,193,* &gamma;<sub>j</sub> = (-1)<sup>j</sup>&int;<sub>0</sub><sup>1</sup>C<sub>j</sub><sup>-s</sup>ds
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,194,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,195,* <p>In order to interpolate the state in a manner that is consistent with the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,196,"* integration scheme, we simply subtract from the current state (at the end of the step)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,197,* the integral computed from interpolation time to step end time.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,198,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,199,* &eta;<sub>j</sub>(&theta;)=
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,200,* (-1)<sup>j</sup>&int;<sub>&theta;</sub><sup>1</sup>C<sub>j</sub><sup>-s</sup>ds
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,201,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,202,"* The method described in the Hairer, Norsett and Wanner book to compute &gamma;<sub>j</sub>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,203,* is easily extended to compute &gamma;<sub>j</sub>(&theta;)=
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,204,"* (-1)<sup>j</sup>&int;<sub>0</sub><sup>&theta;</sup>C<sub>j</sub><sup>-s</sup>ds. From this,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,205,* we can compute &eta;<sub>j</sub>(&theta;) = &gamma;<sub>j</sub>-&gamma;<sub>j</sub>(&theta;).
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,206,* The first few values are:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,207,* <table>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,208,* <tr><td>j</td><td>&gamma;<sub>j</sub></td><td>&gamma;<sub>j</sub>(&theta;)</td><td>&eta;<sub>j</sub>(&theta;)</td></tr>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,209,* <tr><td>0</td><td>1</td><td></td>&theta;<td>1-&theta;</td></tr>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,210,* <tr><td>1</td><td>1/2</td><td></td>&theta;<sup>2</sup>/2<td>(1-&theta;<sup>2</sup>)/2</td></tr>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,211,* <tr><td>2</td><td>5/12</td><td></td>(3&theta;<sup>2</sup>+2&theta;<sup>3</sup>)/12<td>(5-3&theta;<sup>2</sup>-2&theta;<sup>3</sup>)/12</td></tr>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,212,* </table>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,213,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,214,"* The &eta;<sub>j</sub>(&theta;) functions appear to be polynomial ones. As expected,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,215,* we see that &eta;<sub>j</sub>(1)= 0. The recurrence relation derived for
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,216,* &gamma;<sub>j</sub>(&theta;) is:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,217,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,218,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,219,* &sum<sub>j=0</sub><sup>j=m</sup>&gamma;<sub>j</sub>(&theta;)/(m+1-j) =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,220,* 1/(m+1)! &prod;<sub>k=0</sub><sup>k=m</sup>(&theta;+k)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,221,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,222,* @param theta location of the interpolation point within the last step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,224,private void interpolateState(final double theta) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,226,// compute the integrals to remove from the final state
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,227,"computeRollback(previousT.length - 1, theta);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,229,// remove these integrals from the final state
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,230,for (int j = 0; j < interpolatedState.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,231,double sum = 0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,232,for (int l = 0; l < previousT.length; ++l) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,233,sum += rollback[l] * previousF[l][j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,235,interpolatedState[j] = currentState[j] - h * sum;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,240,/** Compute the rollback coefficients.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,241,* @param order order of the integration method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,242,* @param theta current value for theta
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,244,"private void computeRollback(final int order, final double theta) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,246,// compute the gamma(theta) values from the recurrence relation
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,247,double product = theta;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,248,rollback[0]  = theta;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,249,for (int i = 1; i < order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,250,product *= (i + theta) / (i + 1);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,251,double g = product;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,252,for (int j = 1; j <= i; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,253,g -= rollback[i - j] / (j + 1);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,255,rollback[i] = g;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,258,// subtract it from gamma to get eta(theta)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,259,for (int i = 0; i < order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,260,rollback[i] -= gamma[i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,263,// combine the eta integrals with the backward differences array
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,264,// to get the rollback coefficients
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,265,for (int i = 0; i < order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,266,double f = 0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,267,for (int j = i; j <= order; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,268,f -= rollback[j] * bdArray[j][i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,270,rollback[i] = f;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,275,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,276,public void writeExternal(final ObjectOutput out)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,277,throws IOException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,278,super.writeExternal(out);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,279,out.writeDouble(nonTruncatedEnd);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,282,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,283,public void readExternal(final ObjectInput in)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,284,throws IOException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,285,nonTruncatedEnd = in.readDouble();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,20,import org.apache.commons.math.fraction.Fraction;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,21,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,22,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,23,import org.apache.commons.math.ode.IntegratorException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,24,import org.apache.commons.math.ode.events.CombinedEventsManager;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,25,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,29,* This class implements implicit Adams-Moulton integrators for Ordinary
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,30,* Differential Equations.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,32,* <p>Adams-Moulton (in fact due to Adams alone) methods are implicit
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,33,* multistep ODE solvers witch fixed stepsize. The value of state vector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,34,* at step n+1 is a simple combination of the value at step n and of the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,35,"* derivatives at steps n+1, n, n-1 ... Depending on the number k of previous"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,36,"* steps one wants to use for computing the next value, different formulas"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,37,* are available:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,38,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,39,*   <li>k = 0: y<sub>n+1</sub> = y<sub>n</sub> + h f<sub>n+1</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,40,*   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + h (f<sub>n+1</sub>+f<sub>n</sub>)/2</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,41,*   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + h (5f<sub>n+1</sub>+8f<sub>n</sub>-f<sub>n-1</sub>)/12</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,42,*   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + h (9f<sub>n+1</sub>+19f<sub>n</sub>-5f<sub>n-1</sub>+f<sub>n-2)/24</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,43,*   <li>...</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,44,* </ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,46,"* <p>The coefficients are computed (and cached) as needed, so their are no"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,47,* theoretical limitations to the number of steps</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,49,* <p>A k-steps Adams-Moulton method is of order k+1. There is no limit to the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,50,* value of k.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,52,* <p>These methods are implicit: f<sub>n+1</sub> is used to compute
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,53,* y<sub>n+1</sub>. Simpler explicit Adams methods exist: the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,54,* Adams-Bashforth methods (which are also due to Adams alone). They are
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,55,* provided by the {@link AdamsBashforthIntegrator AdamsBashforthIntegrator} class.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,57,* @see AdamsBashforthIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,58,* @see BDFIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,59,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,60,* @since 2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,62,public class AdamsMoultonIntegrator extends MultistepIntegrator {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,64,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,65,private static final long serialVersionUID = 4990335331377040417L;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,67,/** Integrator method name. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,68,"private static final String METHOD_NAME = ""Adams-Moulton"";"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,70,/** Coefficients for the predictor phase of the method. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,71,private final double[] predictorCoeffs;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,73,/** Coefficients for the corrector phase of the method. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,74,private final double[] correctorCoeffs;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,76,/** Integration step. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,77,private final double step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,80,* Build an Adams-Moulton integrator with the given order and step size.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,81,* @param order order of the method (must be strictly positive)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,82,* @param step integration step size
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,84,"public AdamsMoultonIntegrator(final int order, final double step) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,86,"super(METHOD_NAME, order + 1, new AdamsMoultonStepInterpolator());"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,88,// compute the integration coefficients
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,89,int[][] bdArray      = AdamsBashforthIntegrator.computeBackwardDifferencesArray(order + 1);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,91,Fraction[] gamma     = AdamsBashforthIntegrator.computeGammaArray(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,92,predictorCoeffs = new double[order];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,93,for (int i = 0; i < order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,94,Fraction fPredictor = Fraction.ZERO;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,95,for (int j = i; j < order; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,96,"Fraction f = new Fraction(bdArray[j][i], 1);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,97,fPredictor = fPredictor.add(gamma[j].multiply(f));
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,99,predictorCoeffs[i] = fPredictor.doubleValue();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,102,Fraction[] gammaStar = computeGammaStarArray(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,103,correctorCoeffs = new double[order + 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,104,for (int i = 0; i <= order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,105,Fraction fCorrector = Fraction.ZERO;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,106,for (int j = i; j <= order; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,107,"Fraction f = new Fraction(bdArray[j][i], 1);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,108,fCorrector = fCorrector.add(gammaStar[j].multiply(f));
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,110,correctorCoeffs[i] = fCorrector.doubleValue();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,113,this.step = step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,117,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,118,"public double integrate(FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,119,"double t0, double[] y0, double t, double[] y)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,120,"throws DerivativeException, IntegratorException {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,122,"sanityChecks(equations, t0, y0, t, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,123,final boolean forward = (t > t0);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,125,// initialize working arrays
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,126,if (y != y0) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,127,"System.arraycopy(y0, 0, y, 0, y0.length);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,129,final double[] yTmp = new double[y0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,131,// set up an interpolator sharing the integrator arrays
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,132,final AdamsMoultonStepInterpolator interpolator =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,133,(AdamsMoultonStepInterpolator) prototype.copy();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,134,"interpolator.reinitialize(yTmp, previousT, previousF, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,136,// set up integration control objects
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,137,stepStart = t0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,138,stepSize  = step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,139,for (StepHandler handler : stepHandlers) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,140,handler.reset();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,142,"CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,144,// compute the first few steps using the configured starter integrator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,145,double stopTime =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,146,"start(previousF.length - 1, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,147,if (Double.isNaN(previousT[0])) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,148,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,150,stepStart = previousT[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,151,rotatePreviousSteps();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,152,previousF[0] = new double[y0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,153,interpolator.storeTime(stepStart);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,155,boolean lastStep = false;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,156,while (!lastStep) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,158,// shift all data
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,159,interpolator.shift();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,161,// predict state at end of step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,162,for (int j = 0; j < y0.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,163,double sum = 0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,164,for (int l = 0; l < predictorCoeffs.length; ++l) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,165,sum += predictorCoeffs[l] * previousF[l+1][j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,167,yTmp[j] = y[j] + stepSize * sum;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,170,// evaluate the derivatives
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,171,final double stepEnd = stepStart + stepSize;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,172,"equations.computeDerivatives(stepEnd, yTmp, previousF[0]);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,174,// apply corrector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,175,for (int j = 0; j < y0.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,176,double sum = 0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,177,for (int l = 0; l < correctorCoeffs.length; ++l) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,178,sum += correctorCoeffs[l] * previousF[l][j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,180,yTmp[j] = y[j] + stepSize * sum;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,183,// discrete events handling
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,184,interpolator.storeTime(stepEnd);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,185,final boolean truncated;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,186,if (manager.evaluateStep(interpolator)) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,187,truncated = true;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,188,interpolator.truncateStep(manager.getEventTime());
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,189,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,190,truncated = false;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,193,// the step has been accepted (may have been truncated)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,194,final double nextStep = interpolator.getCurrentTime();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,195,interpolator.setInterpolatedTime(nextStep);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,196,"System.arraycopy(interpolator.getInterpolatedState(), 0, y, 0, y0.length);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,197,"manager.stepAccepted(nextStep, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,198,lastStep = manager.stop();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,200,// provide the step data to the step handler
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,201,for (StepHandler handler : stepHandlers) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,202,"handler.handleStep(interpolator, lastStep);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,204,stepStart = nextStep;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,206,if (!lastStep) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,207,// prepare next step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,209,"if (manager.reset(stepStart, y)) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,211,// some events handler has triggered changes that
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,212,"// invalidate the derivatives, we need to restart from scratch"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,213,stopTime =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,214,"start(previousF.length - 1, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,215,if (Double.isNaN(previousT[0])) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,216,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,218,stepStart = previousT[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,219,rotatePreviousSteps();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,220,previousF[0] = new double[y0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,222,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,224,if (truncated) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,225,"// the step has been truncated, we need to adjust the previous steps"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,226,for (int i = 1; i < previousF.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,227,previousT[i] = stepStart - i * stepSize;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,228,interpolator.setInterpolatedTime(previousT[i]);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,229,"System.arraycopy(interpolator.getInterpolatedState(), 0,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,230,"previousF[i], 0, y0.length);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,232,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,233,rotatePreviousSteps();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,236,// evaluate differential equations for next step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,237,previousT[0] = stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,238,"equations.computeDerivatives(stepStart, y, previousF[0]);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,245,stopTime  = stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,246,stepStart = Double.NaN;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,247,stepSize  = Double.NaN;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,248,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,252,/** Get the coefficients of the prdictor phase of the method.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,253,* <p>The coefficients are the c<sub>i</sub> terms in the following formula:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,254,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,255,*   y<sub>n+1</sub> = y<sub>n</sub> + h &times; &sum;<sub>i=0</sub><sup>i=k-1</sup> c<sub>i</sub>f<sub>n-i</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,256,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,257,* @return a copy of the coefficients of the method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,259,public double[] getPredictorCoeffs() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,260,return predictorCoeffs.clone();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,263,/** Get the coefficients of the corrector phase of the method.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,264,* <p>The coefficients are the c<sub>i</sub> terms in the following formula:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,265,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,266,*   y<sub>n+1</sub> = y<sub>n</sub> + h &times; &sum;<sub>i=0</sub><sup>i=k</sup> c<sub>i</sub>f<sub>n-i</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,267,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,268,* @return a copy of the coefficients of the method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,270,public double[] getCorrectorCoeffs() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,271,return correctorCoeffs.clone();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,274,/** Compute the gamma star coefficients.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,275,* @param order order of the integration method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,276,* @return gamma star coefficients array
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,278,static Fraction[] computeGammaStarArray(final int order) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,280,// create the array
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,281,Fraction[] gammaStarArray = new Fraction[order + 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,283,// recurrence initialization
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,284,gammaStarArray[0] = Fraction.ONE;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,286,// fill up array using recurrence relation
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,287,for (int i = 1; i <= order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,288,Fraction gammaStar = Fraction.ZERO;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,289,for (int j = 1; j <= i; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,290,"gammaStar = gammaStar.subtract(gammaStarArray[i - j].multiply(new Fraction(1, j + 1)));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,292,gammaStarArray[i] = gammaStar;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,295,return gammaStarArray;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,20,import java.io.IOException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,21,import java.io.ObjectInput;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,22,import java.io.ObjectOutput;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,24,import org.apache.commons.math.fraction.Fraction;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,25,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,26,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,27,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,30,* This class implements an interpolator for Adams-Moulton multiple steps.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,32,* <p>This interpolator computes dense output inside the last few
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,33,* steps computed. The interpolation equation is consistent with the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,34,"* integration scheme, it is based on a kind of <em>rollback</em> of the"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,35,* integration from step end to interpolation date:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,36,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,37,*   y(t<sub>n</sub> + theta h) = y (t<sub>n</sub> + h) - &int;<sub>t<sub>n</sub> + theta h</sub><sup>t<sub>n</sub> + h</sup>p(t)dt
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,38,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,39,* where theta belongs to [0 ; 1] and p(t) is the interpolation polynomial based on
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,40,"* the derivatives at previous steps f<sub>n-k+1</sub>, f<sub>n-k+2</sub> ..."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,41,"* f<sub>n</sub>, f<sub>n</sub> and f<sub>n+1</sub>.</p>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,43,* @see AdamsMoultonIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,44,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,45,* @since 2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,48,class AdamsMoultonStepInterpolator extends MultistepStepInterpolator {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,50,/** Serializable version identifier */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,51,private static final long serialVersionUID = 735568489801241899L;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,53,/** Neville's interpolation array. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,54,private double[] neville;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,56,/** Integration rollback array. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,57,private double[] rollback;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,59,/** &gamma; star array. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,60,private double[] gammaStar;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,62,/** Backward differences array. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,63,private int[][] bdArray;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,65,/** Original non-truncated step end time. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,66,private double nonTruncatedEnd;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,68,/** Original non-truncated step size. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,69,private double nonTruncatedH;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,71,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,72,"* This constructor builds an instance that is not usable yet, the"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,73,* {@link AbstractStepInterpolator#reinitialize} method should be called
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,74,* before using the instance in order to initialize the internal arrays. This
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,75,* constructor is used only in order to delay the initialization in
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,76,* some cases.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,78,public AdamsMoultonStepInterpolator() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,81,/** Copy constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,82,* @param interpolator interpolator to copy from. The copy is a deep
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,83,* copy: its arrays are separated from the original arrays of the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,84,* instance
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,86,public AdamsMoultonStepInterpolator(final AdamsMoultonStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,87,super(interpolator);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,88,nonTruncatedEnd = interpolator.nonTruncatedEnd;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,89,nonTruncatedH   = interpolator.nonTruncatedH;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,92,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,93,protected StepInterpolator doCopy() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,94,return new AdamsMoultonStepInterpolator(this);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,97,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,98,protected void initializeCoefficients() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,100,neville  = new double[previousF.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,101,rollback = new double[previousF.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,103,bdArray = AdamsBashforthIntegrator.computeBackwardDifferencesArray(previousF.length);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,105,Fraction[] fGammaStar = AdamsMoultonIntegrator.computeGammaStarArray(previousF.length);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,106,gammaStar = new double[fGammaStar.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,107,for (int i = 0; i < fGammaStar.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,108,gammaStar[i] = fGammaStar[i].doubleValue();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,113,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,114,public void storeTime(final double t) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,115,nonTruncatedEnd = t;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,116,nonTruncatedH   = nonTruncatedEnd - previousTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,117,super.storeTime(t);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,120,/** Truncate a step.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,121,* <p>Truncating a step is necessary when an event is triggered
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,122,* before the nominal end of the step.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,124,void truncateStep(final double truncatedEndTime) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,125,currentTime = truncatedEndTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,126,h = currentTime - previousTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,129,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,130,public void setInterpolatedTime(final double time)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,131,throws DerivativeException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,132,interpolatedTime = time;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,133,final double oneMinusThetaH = nonTruncatedEnd - interpolatedTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,134,final double theta = (nonTruncatedH == 0) ?
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,135,0 : (nonTruncatedH - oneMinusThetaH) / nonTruncatedH;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,136,"computeInterpolatedState(theta, oneMinusThetaH);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,139,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,140,"protected void computeInterpolatedState(final double theta, final double oneMinusThetaH) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,141,interpolateDerivatives();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,142,interpolateState(theta);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,145,/** Interpolate the derivatives.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,146,* <p>The Adams method is based on a polynomial interpolation of the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,147,* derivatives based on the preceding steps. So the interpolation of
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,148,* the derivatives here is strictly equivalent: it is a simple polynomial
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,149,* interpolation.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,151,private void interpolateDerivatives() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,153,for (int i = 0; i < interpolatedDerivatives.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,155,// initialize the Neville's interpolation algorithm
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,156,for (int k = 0; k < previousF.length; ++k) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,157,neville[k] = previousF[k][i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,160,// combine the contributions of each points
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,161,for (int l = 1; l < neville.length; ++l) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,162,for (int m = neville.length - 1; m >= l; --m) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,163,final double xm   = previousT[m];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,164,final double xmMl = previousT[m - l];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,165,neville[m] = ((interpolatedTime - xm) * neville[m-1] +
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,166,(xmMl - interpolatedTime) * neville[m]) / (xmMl - xm);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,170,// the interpolation polynomial value is in the array last element
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,171,interpolatedDerivatives[i] = neville[neville.length - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,177,/** Interpolate the state.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,178,* <p>The Adams method is based on a polynomial interpolation of the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,179,* derivatives based on the preceding steps. The polynomial model is
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,180,* integrated analytically throughout the last step. Using the notations
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,181,* found in the second edition of the first volume (Nonstiff Problems)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,182,"* of the reference book by Hairer, Norsett and Wanner: <i>Solving Ordinary"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,183,"* Differential Equations</i> (Springer-Verlag, ISBN 3-540-56670-8), this"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,184,* process leads to the following expression:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,185,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,186,* y<sub>n+1</sub> = y<sub>n</sub> +
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,187,* h &times; &sum;<sub>j=0</sub><sup>j=k</sup> &gamma;<sub>j</sub><sup>*</sup>&nabla;<sup>j</sup>f<sub>n+1</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,188,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,189,"* <p>In the previous expression, the &gamma;<sub>j</sub><sup>*</sup> terms are the"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,190,"* ones that result from the analytical integration, and can be computed form"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,191,* the binomial coefficients C<sub>j</sub><sup>-s</sup>:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,192,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,193,* &gamma;<sub>j</sub><sup>*</sup> = (-1)<sup>j</sup>&int;<sub>0</sub><sup>1</sup>C<sub>j</sub><sup>1-s</sup>ds
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,194,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,195,* <p>In order to interpolate the state in a manner that is consistent with the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,196,"* integration scheme, we simply subtract from the current state (at the end of the step)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,197,* the integral computed from interpolation time to step end time.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,198,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,199,* &eta;<sub>j</sub><sup>*</sup>(&theta;)=
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,200,* (-1)<sup>j</sup>&int;<sub>&theta;</sub><sup>1</sup>C<sub>j</sub><sup>1-s</sup>ds
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,201,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,202,"* The method described in the Hairer, Norsett and Wanner book to compute &gamma;<sub>j</sub><sup>*</sup>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,203,* is easily extended to compute &gamma;<sub>j</sub><sup>*</sup>(&theta;)=
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,204,"* (-1)<sup>j</sup>&int;<sub>0</sub><sup>&theta;</sup>C<sub>j</sub><sup>1-s</sup>ds. From this,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,205,* we can compute &eta;<sub>j</sub><sup>*</sup>(&theta;) =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,206,* &gamma;<sub>j</sub><sup>*</sup>-&gamma;<sub>j</sub><sup>*</sup>(&theta;).
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,207,* The first few values are:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,208,* <table>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,209,* <tr><td>j</td><td>&gamma;<sub>j</sub><sup>*</sup></td><td>&gamma;<sub>j</sub><sup>*</sup>(&theta;)</td><td>&eta;<sub>j</sub><sup>*</sup>(&theta;)</td></tr>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,210,* <tr><td>0</td><td>1</td><td>&theta;</td><td>1-&theta;</td></tr>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,211,* <tr><td>1</td><td>-1/2</td><td>(&theta;<sup>2</sup>-2&theta;)/2</td><td>(-1+2&theta;-&theta;<sup>2</sup>)/2</td></tr>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,212,* <tr><td>2</td><td>-1/12</td><td>(2&theta;<sup>3</sup>-3&theta;<sup>2</sup>)/12</td><td>(-1+3&theta;<sup>2</sup>-2&theta;<sup>3</sup>)/12</td></tr>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,213,* </table>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,214,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,215,"* The &eta;<sub>j</sub>(&theta;) functions appear to be polynomial ones. As expected,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,216,* we see that &eta;<sub>j</sub>(1)= 0. The recurrence relation derived for
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,217,* &gamma;<sub>j</sub>(&theta;) is:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,218,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,219,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,220,* &sum<sub>j=0</sub><sup>j=m</sup>&gamma;<sub>j</sub><sup>*</sup>(&theta;)/(m+1-j) =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,221,* 1/(m+1)! &prod;<sub>k=0</sub><sup>k=m</sup>(&theta;+k-1)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,222,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,223,* @param theta location of the interpolation point within the last step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,225,private void interpolateState(final double theta) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,227,// compute the integrals to remove from the final state
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,228,"computeRollback(previousT.length - 1, theta);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,230,// remove these integrals from the final state
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,231,for (int j = 0; j < interpolatedState.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,232,double sum = 0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,233,for (int l = 0; l < previousT.length; ++l) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,234,sum += rollback[l] * previousF[l][j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,236,interpolatedState[j] = currentState[j] - h * sum;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,241,/** Compute the rollback coefficients.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,242,* @param order order of the integration method
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,243,* @param theta current value for theta
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,245,"private void computeRollback(final int order, final double theta) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,247,// compute the gamma star(theta) values from the recurrence relation
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,248,double product = theta - 1;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,249,rollback[0]  = theta;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,250,for (int i = 1; i <= order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,251,product *= (i - 1 + theta) / (i + 1);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,252,double gStar = product;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,253,for (int j = 1; j <= i; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,254,gStar -= rollback[i - j] / (j + 1);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,256,rollback[i] = gStar;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,259,// subtract it from gamma star to get eta star(theta)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,260,for (int i = 0; i <= order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,261,rollback[i] -= gammaStar[i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,264,// combine the eta star integrals with the backward differences array
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,265,// to get the rollback coefficients
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,266,for (int i = 0; i <= order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,267,double f = 0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,268,for (int j = i; j <= order; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,269,f -= rollback[j] * bdArray[j][i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,271,rollback[i] = f;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,276,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,277,public void writeExternal(final ObjectOutput out)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,278,throws IOException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,279,super.writeExternal(out);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,280,out.writeDouble(nonTruncatedEnd);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,283,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,284,public void readExternal(final ObjectInput in)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,285,throws IOException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,286,nonTruncatedEnd = in.readDouble();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,22,import org.apache.commons.math.ode.AbstractIntegrator;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,23,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,24,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,25,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,26,import org.apache.commons.math.ode.IntegratorException;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,27,import org.apache.commons.math.ode.ODEIntegrator;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,28,import org.apache.commons.math.ode.events.CombinedEventsManager;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,29,import org.apache.commons.math.ode.events.EventException;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,30,import org.apache.commons.math.ode.events.EventHandler;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,31,import org.apache.commons.math.ode.events.EventState;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,32,import org.apache.commons.math.ode.sampling.FixedStepHandler;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,33,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,34,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,35,import org.apache.commons.math.ode.sampling.StepNormalizer;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,38,* This class is the base class for multistep integrators for Ordinary
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,39,* Differential Equations.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,41,* @see AdamsBashforthIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,42,* @see AdamsMoultonIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,43,* @see BDFIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,44,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,45,* @since 2.0
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,47,public abstract class MultistepIntegrator extends AbstractIntegrator {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,49,/** Starter integrator. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,50,private FirstOrderIntegrator starter;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,52,/** Previous steps times. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,53,protected double[] previousT;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,55,/** Previous steps derivatives. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,56,protected double[][] previousF;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,58,/** Time of last detected reset. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,59,private double resetTime;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,61,/** Prototype of the step interpolator. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,62,protected MultistepStepInterpolator prototype;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,65,* Build a multistep integrator with the given number of steps.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,66,* <p>The default starter integrator is set to the {@link
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,67,"* DormandPrince853Integrator Dormand-Prince 8(5,3)} integrator with"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,68,* some defaults settings.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,69,* @param name name of the method
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,70,* @param k number of steps of the multistep method
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,71,* (including the one being computed)
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,72,* @param prototype prototype of the step interpolator to use
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,74,"protected MultistepIntegrator(final String name, final int k,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,75,final MultistepStepInterpolator prototype) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,76,super(name);
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,77,"starter = new DormandPrince853Integrator(1.0e-6, 1.0e6, 1.0e-5, 1.0e-6);"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,78,previousT = new double[k];
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,79,previousF = new double[k][];
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,80,this.prototype = prototype;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,84,* Get the starter integrator.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,85,* @return starter integrator
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,87,public ODEIntegrator getStarterIntegrator() {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,88,return starter;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,92,* Set the starter integrator.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,93,* <p>The various step and event handlers for this starter integrator
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,94,* will be managed automatically by the multi-step integrator. Any
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,95,* user configuration for these elements will be cleared before use.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,96,* @param starter starter integrator
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,98,public void setStarterIntegrator(FirstOrderIntegrator starter) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,99,this.starter = starter;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,102,/** Start the integration.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,103,"* <p>This method computes the first few steps of the multistep method,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,104,"* using the underlying starter integrator, ensuring the returned steps"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,105,* all belong to the same smooth range.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,106,"* <p>In order to ensure smoothness, the start phase is automatically"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,107,* restarted when a state or derivative reset is triggered by the
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,108,* registered events handlers before this start phase is completed. As
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,109,"* an example, consider integrating a differential equation from t=0"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,110,* to t=100 with a 4 steps method and step size equal to 0.2. If an event
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,111,"* resets the state at t=0.5, the start phase will not end at t=0.7 with"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,112,"* steps at [0.0, 0.2, 0.4, 0.6] but instead will end at t=1.1 with steps"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,113,"* at [0.5, 0.7, 0.9, 1.1].</p>"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,114,* <p>A side effect of the need for smoothness is that an ODE triggering
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,115,* short period regular resets will remain in the start phase throughout
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,116,* the integration range if the step size or the number of steps to store
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,117,* are too large.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,118,* <p>If the start phase ends prematurely (because of some triggered event
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,119,"* for example), then the time of latest previous steps will be set to"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,120,* <code>Double.NaN</code>.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,121,* @param n number of steps to store
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,122,* @param h signed step size to use for the first steps
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,123,* @param manager discrete events manager to use
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,124,* @param equations differential equations to integrate
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,125,* @param t0 initial time
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,126,"* @param y state vector: contains the initial value of the state vector at t0,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,127,* will be used to put the state vector at each successful step and hence
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,128,* contains the final value at the end of the start phase
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,129,* @return time of the end of the start phase
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,130,* @throws IntegratorException if the integrator cannot perform integration
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,131,* @throws DerivativeException this exception is propagated to the caller if
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,132,* the underlying user function triggers one
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,134,"protected double start(final int n, final double h,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,135,"final CombinedEventsManager manager,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,136,"final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,137,"final double t0, final double[] y)"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,138,"throws DerivativeException, IntegratorException {"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,140,// clear the first steps
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,141,"Arrays.fill(previousT, Double.NaN);"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,142,"Arrays.fill(previousF, null);"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,144,// configure the event handlers
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,145,starter.clearEventHandlers();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,146,for (EventState state : manager.getEventsStates()) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,147,"starter.addEventHandler(new ResetCheckingWrapper(state.getEventHandler()),"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,148,"state.getMaxCheckInterval(),"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,149,"state.getConvergence(), state.getMaxIterationCount());"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,152,// configure the step handlers
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,153,starter.clearStepHandlers();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,154,for (final StepHandler handler : stepHandlers) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,155,"// add the user defined step handlers, filtering out the isLast indicator"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,156,starter.addStepHandler(new FilteringWrapper(handler));
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,159,// add one specific step handler to store the first steps
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,160,final StoringStepHandler store = new StoringStepHandler(n);
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,161,"starter.addStepHandler(new StepNormalizer(h, store));"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,163,"// integrate over the first few steps, ensuring no intermediate reset occurs"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,164,double t = t0;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,165,double stopTime = Double.NaN;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,166,do {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,167,resetTime = Double.NaN;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,168,store.restart();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,169,// we overshoot by 1/10000 step the end to make sure we get don't miss the last point
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,170,"stopTime = starter.integrate(equations, t, y, t + (n - 0.9999) * h, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,171,if (!Double.isNaN(resetTime)) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,172,"// there was an intermediate reset, we restart"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,173,t = resetTime;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,175,} while (!Double.isNaN(resetTime));
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,177,// clear configuration
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,178,starter.clearEventHandlers();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,179,starter.clearStepHandlers();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,181,if (store.getFinalState() != null) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,182,"System.arraycopy(store.getFinalState(), 0, y, 0, y.length);"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,184,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,188,/** Rotate the previous steps arrays.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,190,protected void rotatePreviousSteps() {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,191,final double[] rolled = previousF[previousT.length - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,192,for (int k = previousF.length - 1; k > 0; --k) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,193,previousT[k] = previousT[k - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,194,previousF[k] = previousF[k - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,196,previousF[0] = rolled;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,199,/** Event handler wrapper to check if state or derivatives have been reset. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,200,private class ResetCheckingWrapper implements EventHandler {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,202,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,203,private static final long serialVersionUID = 4922660285376467937L;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,205,/** Wrapped event handler. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,206,private final EventHandler handler;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,208,/** Build a new instance.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,209,* @param handler event handler to wrap
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,211,public ResetCheckingWrapper(final EventHandler handler) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,212,this.handler = handler;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,215,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,216,"public int eventOccurred(double t, double[] y) throws EventException {"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,217,"final int action = handler.eventOccurred(t, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,218,if ((action == RESET_DERIVATIVES) || (action == RESET_STATE)) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,219,// a singularity has been encountered
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,220,// we need to restart the start phase
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,221,resetTime = t;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,222,return STOP;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,224,return action;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,227,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,228,"public double g(double t, double[] y) throws EventException {"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,229,"return handler.g(t, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,232,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,233,"public void resetState(double t, double[] y) throws EventException {"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,234,"handler.resetState(t, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,239,/** Step handler wrapper filtering out the isLast indicator. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,240,private class FilteringWrapper implements StepHandler {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,242,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,243,private static final long serialVersionUID = 4607975253344802232L;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,245,/** Wrapped step handler. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,246,private final StepHandler handler;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,248,/** Build a new instance.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,249,* @param handler step handler to wrap
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,251,public FilteringWrapper(final StepHandler handler) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,252,this.handler = handler;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,255,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,256,"public void handleStep(StepInterpolator interpolator, boolean isLast)"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,257,throws DerivativeException {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,258,// we force the isLast indicator to false EXCEPT if some event handler triggered a stop
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,259,"handler.handleStep(interpolator, eventsHandlersManager.stop());"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,262,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,263,public boolean requiresDenseOutput() {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,264,return handler.requiresDenseOutput();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,267,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,268,public void reset() {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,269,handler.reset();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,274,/** Specialized step handler storing the first few steps. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,275,private class StoringStepHandler implements FixedStepHandler {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,277,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,278,private static final long serialVersionUID = 4592974435520688797L;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,280,/** Number of steps to store. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,281,private final int n;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,283,/** Counter for already stored steps. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,284,private int count;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,286,/** Final state. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,287,private double[] finalState;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,289,/** Build a new instance.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,290,* @param number of steps to store
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,292,public StoringStepHandler(final int n) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,293,this.n = n;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,294,restart();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,297,/** Restart storage.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,299,public void restart() {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,300,count = 0;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,301,finalState = null;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,304,/** Get the final state.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,305,* @return final state
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,307,public double[] getFinalState() {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,308,return finalState;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,311,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,312,"public void handleStep(final double t, final double[] y, final double[] yDot,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,313,final boolean isLast) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,314,if (count++ < n) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,315,previousT[n - count] = t;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,316,previousF[n - count] = yDot.clone();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,317,if (count == n) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java,318,finalState = y.clone();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,20,import java.io.IOException;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,21,import java.io.ObjectInput;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,22,import java.io.ObjectOutput;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,24,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,25,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,27,/** This class represents an interpolator over the last step during an
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,28,* ODE integration for multistep integrators.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,30,* @see MultistepIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,32,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,33,* @since 2.0
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,36,abstract class MultistepStepInterpolator
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,37,extends AbstractStepInterpolator {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,39,/** Previous steps times. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,40,protected double[] previousT;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,42,/** Previous steps derivatives. */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,43,protected double[][] previousF;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,45,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,46,"* This constructor builds an instance that is not usable yet, the"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,47,* {@link #reinitialize} method should be called before using the
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,48,* instance in order to initialize the internal arrays. This
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,49,* constructor is used only in order to delay the initialization in
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,50,* some cases. The {@link MultistepIntegrator} classe uses the
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,51,* prototyping design pattern to create the step interpolators by
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,52,* cloning an uninitialized model and latter initializing the copy.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,54,protected MultistepStepInterpolator() {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,55,previousT = null;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,56,previousF = null;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,59,/** Copy constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,61,* <p>The copied interpolator should have been finalized before the
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,62,"* copy, otherwise the copy will not be able to perform correctly any"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,63,* interpolation and will throw a {@link NullPointerException}
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,64,* later. Since we don't want this constructor to throw the
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,65,* exceptions finalization may involve and since we don't want this
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,66,"* method to modify the state of the copied interpolator,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,67,"* finalization is <strong>not</strong> done automatically, it"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,68,* remains under user control.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,70,* <p>The copy is a deep copy: its arrays are separated from the
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,71,* original arrays of the instance.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,73,* @param interpolator interpolator to copy from.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,76,public MultistepStepInterpolator(final MultistepStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,78,super(interpolator);
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,80,if (interpolator.currentState != null) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,81,previousT = interpolator.previousT.clone();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,82,previousF = new double[interpolator.previousF.length][];
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,83,for (int k = 0; k < interpolator.previousF.length; ++k) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,84,previousF[k] = interpolator.previousF[k].clone();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,86,initializeCoefficients();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,87,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,88,previousT = null;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,89,previousF = null;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,94,/** Reinitialize the instance
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,95,* @param y reference to the integrator array holding the state at
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,96,* the end of the step
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,97,* @param previousT reference to the integrator array holding the times
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,98,* of the previous steps
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,99,* @param previousF reference to the integrator array holding the
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,100,* previous slopes
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,101,* @param forward integration direction indicator
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,103,"public void reinitialize(final double[] y,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,104,"final double[] previousT, final double[][] previousF,"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,105,final boolean forward) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,106,"reinitialize(y, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,107,this.previousT = previousT;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,108,this.previousF = previousF;
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,109,initializeCoefficients();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,112,/** Initialize the coefficients arrays.
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,114,protected abstract void initializeCoefficients();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,116,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,117,public void writeExternal(final ObjectOutput out)
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,118,throws IOException {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,120,// save the state of the base class
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,121,writeBaseExternal(out);
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,123,// save the local attributes
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,124,out.writeInt(previousT.length);
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,125,for (int k = 0; k < previousF.length; ++k) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,126,out.writeDouble(previousT[k]);
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,127,for (int i = 0; i < currentState.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,128,out.writeDouble(previousF[k][i]);
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,134,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,135,public void readExternal(final ObjectInput in)
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,136,throws IOException {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,138,// read the base class
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,139,final double t = readBaseExternal(in);
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,141,// read the local attributes
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,142,final int kMax = in.readInt();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,143,previousT = new double[kMax];
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,144,previousF = new double[kMax][];
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,145,for (int k = 0; k < kMax; ++k) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,146,previousT[k] = in.readDouble();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,147,previousF[k] = new double[currentState.length];
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,148,for (int i = 0; i < currentState.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,149,previousF[k][i] = in.readDouble();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,153,// initialize the coefficients
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,154,initializeCoefficients();
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,156,try {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,157,// we can now set the interpolated time and state
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,158,setInterpolatedTime(t);
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,159,} catch (DerivativeException e) {
True,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java,160,throw new IOException(e.getMessage());
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,24,import org.apache.commons.math.ode.DerivativeException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,25,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,26,import org.apache.commons.math.ode.IntegratorException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,27,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,29,public class AdamsBashforthIntegratorTest
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,30,extends TestCase {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,32,public AdamsBashforthIntegratorTest(String name) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,33,super(name);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,36,public void testCoefficients() {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,38,"double[] coeffs1 = new AdamsBashforthIntegrator(1, 0.01).getCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,39,"assertEquals(1, coeffs1.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,40,"assertEquals(1.0, coeffs1[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,42,"double[] coeffs2 = new AdamsBashforthIntegrator(2, 0.01).getCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,43,"assertEquals(2, coeffs2.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,44,"assertEquals( 3.0 / 2.0, coeffs2[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,45,"assertEquals(-1.0 / 2.0, coeffs2[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,47,"double[] coeffs3 = new AdamsBashforthIntegrator(3, 0.01).getCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,48,"assertEquals(3, coeffs3.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,49,"assertEquals( 23.0 / 12.0, coeffs3[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,50,"assertEquals(-16.0 / 12.0, coeffs3[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,51,"assertEquals(  5.0 / 12.0, coeffs3[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,53,"double[] coeffs4 = new AdamsBashforthIntegrator(4, 0.01).getCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,54,"assertEquals(4, coeffs4.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,55,"assertEquals( 55.0 / 24.0, coeffs4[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,56,"assertEquals(-59.0 / 24.0, coeffs4[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,57,"assertEquals( 37.0 / 24.0, coeffs4[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,58,"assertEquals( -9.0 / 24.0, coeffs4[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,60,"double[] coeffs5 = new AdamsBashforthIntegrator(5, 0.01).getCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,61,"assertEquals(5, coeffs5.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,62,"assertEquals( 1901.0 / 720.0, coeffs5[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,63,"assertEquals(-2774.0 / 720.0, coeffs5[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,64,"assertEquals( 2616.0 / 720.0, coeffs5[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,65,"assertEquals(-1274.0 / 720.0, coeffs5[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,66,"assertEquals(  251.0 / 720.0, coeffs5[4], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,68,"double[] coeffs6 = new AdamsBashforthIntegrator(6, 0.01).getCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,69,"assertEquals(6, coeffs6.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,70,"assertEquals( 4277.0 / 1440.0, coeffs6[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,71,"assertEquals(-7923.0 / 1440.0, coeffs6[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,72,"assertEquals( 9982.0 / 1440.0, coeffs6[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,73,"assertEquals(-7298.0 / 1440.0, coeffs6[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,74,"assertEquals( 2877.0 / 1440.0, coeffs6[4], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,75,"assertEquals( -475.0 / 1440.0, coeffs6[5], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,77,"double[] coeffs7 = new AdamsBashforthIntegrator(7, 0.01).getCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,78,"assertEquals(7, coeffs7.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,79,"assertEquals( 198721.0 / 60480.0, coeffs7[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,80,"assertEquals(-447288.0 / 60480.0, coeffs7[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,81,"assertEquals( 705549.0 / 60480.0, coeffs7[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,82,"assertEquals(-688256.0 / 60480.0, coeffs7[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,83,"assertEquals( 407139.0 / 60480.0, coeffs7[4], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,84,"assertEquals(-134472.0 / 60480.0, coeffs7[5], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,85,"assertEquals(  19087.0 / 60480.0, coeffs7[6], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,87,"double[] coeffs8 = new AdamsBashforthIntegrator(8, 0.01).getCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,88,"assertEquals(8, coeffs8.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,89,"assertEquals(  434241.0 / 120960.0, coeffs8[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,90,"assertEquals(-1152169.0 / 120960.0, coeffs8[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,91,"assertEquals( 2183877.0 / 120960.0, coeffs8[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,92,"assertEquals(-2664477.0 / 120960.0, coeffs8[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,93,"assertEquals( 2102243.0 / 120960.0, coeffs8[4], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,94,"assertEquals(-1041723.0 / 120960.0, coeffs8[5], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,95,"assertEquals(  295767.0 / 120960.0, coeffs8[6], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,96,"assertEquals(  -36799.0 / 120960.0, coeffs8[7], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,98,"double[] coeffs9 = new AdamsBashforthIntegrator(9, 0.01).getCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,99,"assertEquals(9, coeffs9.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,100,"assertEquals(  14097247.0 / 3628800.0, coeffs9[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,101,"assertEquals( -43125206.0 / 3628800.0, coeffs9[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,102,"assertEquals(  95476786.0 / 3628800.0, coeffs9[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,103,"assertEquals(-139855262.0 / 3628800.0, coeffs9[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,104,"assertEquals( 137968480.0 / 3628800.0, coeffs9[4], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,105,"assertEquals( -91172642.0 / 3628800.0, coeffs9[5], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,106,"assertEquals(  38833486.0 / 3628800.0, coeffs9[6], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,107,"assertEquals(  -9664106.0 / 3628800.0, coeffs9[7], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,108,"assertEquals(   1070017.0 / 3628800.0, coeffs9[8], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,112,public void testDimensionCheck() {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,113,try  {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,114,TestProblem1 pb = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,115,"new AdamsBashforthIntegrator(3, 0.01).integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,116,"0.0, new double[pb.getDimension()+10],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,117,"1.0, new double[pb.getDimension()+10]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,118,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,119,} catch(DerivativeException de) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,120,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,121,} catch(IntegratorException ie) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,125,public void testDecreasingSteps()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,126,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,128,TestProblemAbstract[] problems = TestProblemFactory.getProblems();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,129,for (int k = 0; k < problems.length; ++k) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,131,double previousError = Double.NaN;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,132,for (int i = 6; i < 10; ++i) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,134,TestProblemAbstract pb  = (TestProblemAbstract) problems[k].clone();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,135,"double step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,137,"FirstOrderIntegrator integ = new AdamsBashforthIntegrator(5, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,138,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,139,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,140,EventHandler[] functions = pb.getEventsHandlers();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,141,for (int l = 0; l < functions.length; ++l) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,142,"integ.addEventHandler(functions[l],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,143,"Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,145,"double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,146,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,147,if (functions.length == 0) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,148,"assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,151,double error = handler.getMaximalValueError();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,152,if (i > 6) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,153,assertTrue(error < Math.abs(previousError));
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,155,previousError = error;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,163,public void testSmallStep()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,164,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,166,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,167,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,169,"FirstOrderIntegrator integ = new AdamsBashforthIntegrator(3, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,170,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,171,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,172,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,173,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,174,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,176,assertTrue(handler.getLastError() < 2.0e-9);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,177,assertTrue(handler.getMaximalValueError() < 3.0e-8);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,178,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,179,"assertEquals(""Adams-Bashforth"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,183,public void testBigStep()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,184,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,186,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,187,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,189,"FirstOrderIntegrator integ = new AdamsBashforthIntegrator(3, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,190,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,191,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,192,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,193,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,194,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,196,assertTrue(handler.getLastError() > 0.05);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,197,assertTrue(handler.getMaximalValueError() > 0.1);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,198,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,202,public static Test suite() {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,203,return new TestSuite(AdamsBashforthIntegratorTest.class);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,20,import org.apache.commons.math.ode.DerivativeException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,21,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,22,import org.apache.commons.math.ode.IntegratorException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,23,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,25,import junit.framework.Test;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,26,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,27,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,29,public class AdamsMoultonIntegratorTest
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,30,extends TestCase {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,32,public AdamsMoultonIntegratorTest(String name) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,33,super(name);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,36,public void testPredictorCoefficients() {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,37,for (int order = 1; order < 10; ++order) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,38,"double[] moulton = new AdamsMoultonIntegrator(order, 0.01).getPredictorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,39,"double[] bashforth  = new AdamsBashforthIntegrator(order, 0.01).getCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,40,"assertEquals(bashforth.length, moulton.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,41,for (int i = 0; i < moulton.length; ++i) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,42,"assertEquals(bashforth[i], moulton[i], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,47,public void testCorrectorCoefficients() {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,49,"double[] coeffs1 = new AdamsMoultonIntegrator(1, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,50,"assertEquals(2, coeffs1.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,51,"assertEquals(1.0 / 2.0, coeffs1[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,52,"assertEquals(1.0 / 2.0, coeffs1[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,54,"double[] coeffs2 = new AdamsMoultonIntegrator(2, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,55,"assertEquals(3, coeffs2.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,56,"assertEquals( 5.0 / 12.0, coeffs2[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,57,"assertEquals( 8.0 / 12.0, coeffs2[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,58,"assertEquals(-1.0 / 12.0, coeffs2[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,60,"double[] coeffs3 = new AdamsMoultonIntegrator(3, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,61,"assertEquals(4, coeffs3.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,62,"assertEquals( 9.0 / 24.0, coeffs3[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,63,"assertEquals(19.0 / 24.0, coeffs3[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,64,"assertEquals(-5.0 / 24.0, coeffs3[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,65,"assertEquals( 1.0 / 24.0, coeffs3[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,67,"double[] coeffs4 = new AdamsMoultonIntegrator(4, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,68,"assertEquals(5, coeffs4.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,69,"assertEquals( 251.0 / 720.0, coeffs4[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,70,"assertEquals( 646.0 / 720.0, coeffs4[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,71,"assertEquals(-264.0 / 720.0, coeffs4[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,72,"assertEquals( 106.0 / 720.0, coeffs4[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,73,"assertEquals( -19.0 / 720.0, coeffs4[4], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,75,"double[] coeffs5 = new AdamsMoultonIntegrator(5, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,76,"assertEquals(6, coeffs5.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,77,"assertEquals( 475.0 / 1440.0, coeffs5[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,78,"assertEquals(1427.0 / 1440.0, coeffs5[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,79,"assertEquals(-798.0 / 1440.0, coeffs5[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,80,"assertEquals( 482.0 / 1440.0, coeffs5[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,81,"assertEquals(-173.0 / 1440.0, coeffs5[4], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,82,"assertEquals(  27.0 / 1440.0, coeffs5[5], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,84,"double[] coeffs6 = new AdamsMoultonIntegrator(6, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,85,"assertEquals(7, coeffs6.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,86,"assertEquals( 19087.0 / 60480.0, coeffs6[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,87,"assertEquals( 65112.0 / 60480.0, coeffs6[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,88,"assertEquals(-46461.0 / 60480.0, coeffs6[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,89,"assertEquals( 37504.0 / 60480.0, coeffs6[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,90,"assertEquals(-20211.0 / 60480.0, coeffs6[4], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,91,"assertEquals(  6312.0 / 60480.0, coeffs6[5], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,92,"assertEquals(  -863.0 / 60480.0, coeffs6[6], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,94,"double[] coeffs7 = new AdamsMoultonIntegrator(7, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,95,"assertEquals(8, coeffs7.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,96,"assertEquals(  36799.0 / 120960.0, coeffs7[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,97,"assertEquals( 139849.0 / 120960.0, coeffs7[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,98,"assertEquals(-121797.0 / 120960.0, coeffs7[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,99,"assertEquals( 123133.0 / 120960.0, coeffs7[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,100,"assertEquals( -88547.0 / 120960.0, coeffs7[4], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,101,"assertEquals(  41499.0 / 120960.0, coeffs7[5], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,102,"assertEquals( -11351.0 / 120960.0, coeffs7[6], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,103,"assertEquals(   1375.0 / 120960.0, coeffs7[7], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,105,"double[] coeffs8 = new AdamsMoultonIntegrator(8, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,106,"assertEquals(9, coeffs8.length);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,107,"assertEquals( 1070017.0 / 3628800.0, coeffs8[0], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,108,"assertEquals( 4467094.0 / 3628800.0, coeffs8[1], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,109,"assertEquals(-4604594.0 / 3628800.0, coeffs8[2], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,110,"assertEquals( 5595358.0 / 3628800.0, coeffs8[3], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,111,"assertEquals(-5033120.0 / 3628800.0, coeffs8[4], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,112,"assertEquals( 3146338.0 / 3628800.0, coeffs8[5], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,113,"assertEquals(-1291214.0 / 3628800.0, coeffs8[6], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,114,"assertEquals(  312874.0 / 3628800.0, coeffs8[7], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,115,"assertEquals(  -33953.0 / 3628800.0, coeffs8[8], 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,119,public void testDimensionCheck() {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,120,try  {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,121,TestProblem1 pb = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,122,"new AdamsMoultonIntegrator(3, 0.01).integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,123,"0.0, new double[pb.getDimension()+10],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,124,"1.0, new double[pb.getDimension()+10]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,125,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,126,} catch(DerivativeException de) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,127,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,128,} catch(IntegratorException ie) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,132,public void testDecreasingSteps()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,133,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,135,TestProblemAbstract[] problems = TestProblemFactory.getProblems();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,136,for (int k = 0; k < problems.length; ++k) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,138,double previousError = Double.NaN;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,139,for (int i = 6; i < 10; ++i) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,141,TestProblemAbstract pb  = (TestProblemAbstract) problems[k].clone();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,142,"double step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,143,if (pb instanceof TestProblem3) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,144,step /= 8;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,147,"FirstOrderIntegrator integ = new AdamsMoultonIntegrator(5, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,148,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,149,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,150,EventHandler[] functions = pb.getEventsHandlers();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,151,for (int l = 0; l < functions.length; ++l) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,152,"integ.addEventHandler(functions[l],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,153,"Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,155,"double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,156,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,157,if (functions.length == 0) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,158,"assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,161,double error = handler.getMaximalValueError();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,162,if (i > 6) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,163,assertTrue(error < Math.abs(previousError));
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,165,previousError = error;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,173,public void testSmallStep()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,174,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,176,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,177,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,179,"FirstOrderIntegrator integ = new AdamsMoultonIntegrator(3, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,180,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,181,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,182,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,183,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,184,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,186,assertTrue(handler.getLastError() < 7.0e-12);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,187,assertTrue(handler.getMaximalValueError() < 4.0e-11);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,188,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,189,"assertEquals(""Adams-Moulton"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,193,public void testBigStep()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,194,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,196,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,197,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,199,"FirstOrderIntegrator integ = new AdamsMoultonIntegrator(3, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,200,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,201,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,202,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,203,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,204,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,206,assertTrue(handler.getLastError() > 0.01);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,207,assertTrue(handler.getMaximalValueError() > 0.03);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,208,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,212,public static Test suite() {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,213,return new TestSuite(AdamsMoultonIntegratorTest.class);

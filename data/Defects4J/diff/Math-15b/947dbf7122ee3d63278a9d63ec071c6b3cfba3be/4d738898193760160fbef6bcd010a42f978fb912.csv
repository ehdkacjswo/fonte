is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,31,"* <li>FAILED - If any NaN is encountered in the input array, an appropriate"
True,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,32,* exception is thrown</li>
False,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,48,IXED
True,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,50,"FIXED,"
True,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,52,/** NaNs result in an exception */
True,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java,53,FAILED
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,26,import org.apache.commons.math3.exception.NotANumberException;
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,190,* @throws NotANumberException if the selected {@link NaNStrategy} is {@code FAILED}
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,191,* and a {@link Double#NaN} is encountered in the input data
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,216,case FAILED:
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,217,nanPositions = getNanPositions(ranks);
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,218,if (nanPositions.size() > 0) {
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,219,throw new NotANumberException();
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,221,break;
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,20,import org.apache.commons.math3.exception.NotANumberException;
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,199,@Test(expected=NotANumberException.class)
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,200,public void testNaNsFailed() {
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,201,"double[] data = { 0, Double.POSITIVE_INFINITY, Double.NaN, Double.NEGATIVE_INFINITY };"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,202,NaturalRanking ranking = new NaturalRanking(NaNStrategy.FAILED);
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,203,ranking.rank(data);
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,206,@Test
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,207,public void testNoNaNsFailed() {
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,208,"double[] data = { 1, 2, 3, 4 };"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,209,NaturalRanking ranking = new NaturalRanking(NaNStrategy.FAILED);
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,210,double[] ranks = ranking.rank(data);
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,211,"TestUtils.assertEquals(data, ranks, 0d);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,30, <p>When a univariate real function y = f(x) does depend on some
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,30,* <br/>
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,31,* When a univariate real function y = f(x) does depend on some
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,38, really a least squares problem.</p>
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,39,* really a least squares problem.
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,41,* @param <T> Function to use for the fit.
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,42,ublic class CurveFitter {
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,46,public class CurveFitter<T extends ParametricUnivariateFunction> {
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,123,"ublic double[] fit(final ParametricUnivariateFunction f, final double[] initialGuess) {"
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,127,"public double[] fit(T f, final double[] initialGuess) {"
False,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,144,"ublic double[] fit(int maxEval, final ParametricUnivariateFunction f,"
True,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java,148,"public double[] fit(int maxEval, T f,"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,24,mport org.apache.commons.math3.analysis.ParametricUnivariateFunction;
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,61,ublic class GaussianFitter extends CurveFitter {
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,60,public class GaussianFitter extends CurveFitter<Gaussian.Parametric> {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,85,inal ParametricUnivariateFunction f = new ParametricUnivariateFunction() {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,86,rivate final ParametricUnivariateFunction g = new Gaussian.Parametric();
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,84,final Gaussian.Parametric f = new Gaussian.Parametric() {
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,91," = g.value(x, p);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,88,"v = super.value(x, p);"
False,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,103," = g.gradient(x, p);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java,100,"v = super.gradient(x, p);"
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,39,ublic class HarmonicFitter extends CurveFitter {
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,39,public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,23,** This class implements a curve fitting specialized for polynomials.
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,24, <p>Polynomial fitting is a very simple case of curve fitting. The
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,25, estimated coefficients are the polynomial coefficients. They are
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,26, searched by a least square estimator.</p>
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,24,* Polynomial fitting is a very simple case of {@link CurveFitter curve fitting}.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,25,* The estimated coefficients are the polynomial coefficients (see the
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,26,* {@link #fit(double[]) fit} method).
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,30," @deprecated Since 3.1 (to be removed in 4.0, see <a href=""https://issues.apache.org/jira/browse/MATH-800"">MATH-800</a>)."
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,31," Please use {@link CurveFitter} directly, by passing an instance of"
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,32, {@link org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric PolynomialFunction.Parametric}
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,33, as an argument to the
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,34," {@link CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[]) fit}"
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,35, method.
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,37,ublic class PolynomialFitter extends CurveFitter {
False,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,38,** Polynomial degree. */
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,31,public class PolynomialFitter extends CurveFitter<PolynomialFunction.Parametric> {
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,32,/** Polynomial degree.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,33,* @deprecated
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,44,* @deprecated Since 3.1 (to be removed in 4.0). Please use
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,45,* {@link #PolynomialFitter(DifferentiableMultivariateVectorOptimizer)} instead.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,53,* Simple constructor.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,55,* @param optimizer Optimizer to use for the fitting.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,57,public PolynomialFitter(DifferentiableMultivariateVectorOptimizer optimizer) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,58,super(optimizer);
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,59,degree = -1; // To avoid compilation error until the instance variable is removed.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,68,* @deprecated Since 3.1 (to be removed in 4.0). Please use {@link #fit(double[])} instead.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,75,* Get the coefficients of the polynomial fitting the weighted data points.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,76,* The degree of the fitting polynomial is {@code guess.length - 1}.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,78,* @param guess First guess for the coefficients. They must be sorted in
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,79,* increasing order of the polynomial's degree.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,80,* @return the coefficients of the polynomial that best fits the observed points.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,81,* @throws org.apache.commons.math3.exception.ConvergenceException
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,82,* if the algorithm failed to converge.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,84,public double[] fit(double[] guess) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,85,"return fit(new PolynomialFunction.Parametric(), guess);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,46,inal CurveFitter fitter = new CurveFitter(optim);
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,46,final PolynomialFitter fitter = new PolynomialFitter(optim);
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,57,"inal double[] best = fitter.fit(new PolynomialFunction.Parametric(),"
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,58,"ew double[] { -1e-20, 3e15, -5e25 });"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,57,"final double[] best = fitter.fit(new double[] { -1e-20, 3e15, -5e25 });"
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,69,urveFitter fitter = new CurveFitter(new LevenbergMarquardtOptimizer());
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,68,PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,75,"olynomialFunction fitted = new PolynomialFunction(fitter.fit(Integer.MAX_VALUE,"
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,76,"ew PolynomialFunction.Parametric(),"
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,77,nit));
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,74,PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,94,urveFitter fitter = new CurveFitter(new LevenbergMarquardtOptimizer());
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,91,PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,101,"olynomialFunction fitted = new PolynomialFunction(fitter.fit(Integer.MAX_VALUE,"
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,102,"ew PolynomialFunction.Parametric(),"
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,103,nit));
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,98,PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,133,urveFitter fitter = new CurveFitter(optimizer);
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,128,PolynomialFitter fitter = new PolynomialFitter(optimizer);
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,145,"itter.fit(Integer.MAX_VALUE,"
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,146,"ew PolynomialFunction.Parametric(),"
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,147,nit);
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,140,fitter.fit(init);
